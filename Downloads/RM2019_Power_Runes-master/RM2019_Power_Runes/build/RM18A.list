
build/RM18A.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000305 	.word	0x08000305
 8000008:	08000307 	.word	0x08000307
 800000c:	08000307 	.word	0x08000307
 8000010:	08000307 	.word	0x08000307
 8000014:	08000307 	.word	0x08000307
 8000018:	08000307 	.word	0x08000307
 800001c:	08000307 	.word	0x08000307
 8000020:	08000307 	.word	0x08000307
 8000024:	08000307 	.word	0x08000307
 8000028:	08000307 	.word	0x08000307
 800002c:	08005981 	.word	0x08005981
 8000030:	08000307 	.word	0x08000307
 8000034:	08000307 	.word	0x08000307
 8000038:	08000307 	.word	0x08000307
 800003c:	08000307 	.word	0x08000307
 8000040:	08000307 	.word	0x08000307
 8000044:	08000307 	.word	0x08000307
 8000048:	08000307 	.word	0x08000307
 800004c:	08000307 	.word	0x08000307
 8000050:	08000307 	.word	0x08000307
 8000054:	08000307 	.word	0x08000307
 8000058:	080018f1 	.word	0x080018f1
 800005c:	08001931 	.word	0x08001931
 8000060:	08001975 	.word	0x08001975
 8000064:	080019b9 	.word	0x080019b9
 8000068:	080019fd 	.word	0x080019fd
 800006c:	080023ed 	.word	0x080023ed
 8000070:	08002415 	.word	0x08002415
 8000074:	08002441 	.word	0x08002441
 8000078:	0800246d 	.word	0x0800246d
 800007c:	08002499 	.word	0x08002499
 8000080:	080024c1 	.word	0x080024c1
 8000084:	080024ed 	.word	0x080024ed
 8000088:	08001e0d 	.word	0x08001e0d
 800008c:	08001f1d 	.word	0x08001f1d
 8000090:	08002015 	.word	0x08002015
 8000094:	08002069 	.word	0x08002069
 8000098:	080020bd 	.word	0x080020bd
 800009c:	08001a41 	.word	0x08001a41
 80000a0:	08000307 	.word	0x08000307
 80000a4:	08004389 	.word	0x08004389
 80000a8:	08000307 	.word	0x08000307
 80000ac:	080043ed 	.word	0x080043ed
 80000b0:	0800419d 	.word	0x0800419d
 80000b4:	08004451 	.word	0x08004451
 80000b8:	0800421d 	.word	0x0800421d
 80000bc:	08000307 	.word	0x08000307
 80000c0:	08000307 	.word	0x08000307
 80000c4:	08000307 	.word	0x08000307
 80000c8:	08000307 	.word	0x08000307
 80000cc:	08000307 	.word	0x08000307
 80000d0:	08000307 	.word	0x08000307
 80000d4:	08004815 	.word	0x08004815
 80000d8:	08000307 	.word	0x08000307
 80000dc:	08000307 	.word	0x08000307
 80000e0:	08001b29 	.word	0x08001b29
 80000e4:	08000307 	.word	0x08000307
 80000e8:	08000307 	.word	0x08000307
 80000ec:	080044b5 	.word	0x080044b5
 80000f0:	08000307 	.word	0x08000307
 80000f4:	08000307 	.word	0x08000307
 80000f8:	08000307 	.word	0x08000307
 80000fc:	08002519 	.word	0x08002519
 8000100:	08000307 	.word	0x08000307
 8000104:	08000307 	.word	0x08000307
 8000108:	080042bd 	.word	0x080042bd
 800010c:	08000307 	.word	0x08000307
 8000110:	08000307 	.word	0x08000307
 8000114:	08000307 	.word	0x08000307
 8000118:	08000307 	.word	0x08000307
 800011c:	08000307 	.word	0x08000307
 8000120:	08002545 	.word	0x08002545
 8000124:	0800256d 	.word	0x0800256d
 8000128:	08002599 	.word	0x08002599
 800012c:	080025c5 	.word	0x080025c5
 8000130:	080025f1 	.word	0x080025f1
 8000134:	08000307 	.word	0x08000307
 8000138:	08000307 	.word	0x08000307
 800013c:	08002101 	.word	0x08002101
 8000140:	080021f9 	.word	0x080021f9
 8000144:	0800224d 	.word	0x0800224d
 8000148:	080022a1 	.word	0x080022a1
 800014c:	08002a15 	.word	0x08002a15
 8000150:	08002619 	.word	0x08002619
 8000154:	08002645 	.word	0x08002645
 8000158:	08002671 	.word	0x08002671
 800015c:	08004971 	.word	0x08004971
 8000160:	08000307 	.word	0x08000307
 8000164:	08000307 	.word	0x08000307
 8000168:	08000307 	.word	0x08000307
 800016c:	08000307 	.word	0x08000307
 8000170:	08000307 	.word	0x08000307
 8000174:	08000307 	.word	0x08000307
 8000178:	08000307 	.word	0x08000307
 800017c:	08000307 	.word	0x08000307
 8000180:	08000307 	.word	0x08000307
 8000184:	08000307 	.word	0x08000307
 8000188:	08004575 	.word	0x08004575
 800018c:	08004acd 	.word	0x08004acd
 8000190:	08000307 	.word	0x08000307
 8000194:	08000307 	.word	0x08000307
 8000198:	08000307 	.word	0x08000307
 800019c:	08000307 	.word	0x08000307
 80001a0:	08000307 	.word	0x08000307
 80001a4:	08000307 	.word	0x08000307
 80001a8:	08000307 	.word	0x08000307
 80001ac:	08000307 	.word	0x08000307
 80001b0:	08000307 	.word	0x08000307
 80001b4:	08000307 	.word	0x08000307
 80001b8:	08000307 	.word	0x08000307
 80001bc:	08000307 	.word	0x08000307
 80001c0:	08000307 	.word	0x08000307
 80001c4:	08000307 	.word	0x08000307
 80001c8:	08000307 	.word	0x08000307
 80001cc:	08000307 	.word	0x08000307
 80001d0:	08000307 	.word	0x08000307
 80001d4:	08000307 	.word	0x08000307
 80001d8:	08000307 	.word	0x08000307
 80001dc:	08000307 	.word	0x08000307

Disassembly of section .text:

080001e4 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e4:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e6:	4839      	ldr	r0, [pc, #228]	; (80002cc <endfiniloop+0x6>)
                msr     MSP, r0
 80001e8:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001ec:	4838      	ldr	r0, [pc, #224]	; (80002d0 <endfiniloop+0xa>)
                msr     PSP, r0
 80001ee:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001f2:	4838      	ldr	r0, [pc, #224]	; (80002d4 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f4:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f8:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001fc:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001fe:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 8000202:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 8000206:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 800020a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800020e:	6008      	str	r0, [r1, #0]
                dsb
 8000210:	f3bf 8f4f 	dsb	sy
                isb
 8000214:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 8000218:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 800021c:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000220:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000224:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000228:	6008      	str	r0, [r1, #0]
                dsb
 800022a:	f3bf 8f4f 	dsb	sy
                isb
 800022e:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000232:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000236:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 800023a:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 800023e:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000242:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000244:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000246:	f380 8814 	msr	CONTROL, r0
                isb
 800024a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800024e:	f000 f975 	bl	800053c <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000252:	f000 f873 	bl	800033c <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000256:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800025a:	491f      	ldr	r1, [pc, #124]	; (80002d8 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <endfiniloop+0x6>)

0800025e <msloop>:
msloop:
                cmp     r1, r2
 800025e:	4291      	cmp	r1, r2
                itt     lo
 8000260:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000262:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000266:	e7fa      	bcc.n	800025e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000268:	491c      	ldr	r1, [pc, #112]	; (80002dc <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <endfiniloop+0xa>)

0800026c <psloop>:
psloop:
                cmp     r1, r2
 800026c:	4291      	cmp	r1, r2
                itt     lo
 800026e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000270:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000274:	e7fa      	bcc.n	800026c <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000276:	491a      	ldr	r1, [pc, #104]	; (80002e0 <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 800027a:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <endfiniloop+0x22>)

0800027c <dloop>:
dloop:
                cmp     r2, r3
 800027c:	429a      	cmp	r2, r3
                ittt    lo
 800027e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000280:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000284:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000288:	e7f8      	bcc.n	800027c <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 800028a:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 800028c:	4917      	ldr	r1, [pc, #92]	; (80002ec <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <endfiniloop+0x2a>)

08000290 <bloop>:
bloop:
                cmp     r1, r2
 8000290:	4291      	cmp	r1, r2
                itt     lo
 8000292:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000294:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000298:	e7fa      	bcc.n	8000290 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800029a:	f000 f955 	bl	8000548 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800029e:	f000 f94f 	bl	8000540 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002a2:	4c14      	ldr	r4, [pc, #80]	; (80002f4 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 80002a4:	4d14      	ldr	r5, [pc, #80]	; (80002f8 <endfiniloop+0x32>)

080002a6 <initloop>:
initloop:
                cmp     r4, r5
 80002a6:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002a8:	da03      	bge.n	80002b2 <endinitloop>
                ldr     r1, [r4], #4
 80002aa:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002ae:	4788      	blx	r1
                b       initloop
 80002b0:	e7f9      	b.n	80002a6 <initloop>

080002b2 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002b2:	f006 f9e7 	bl	8006684 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002b6:	4c11      	ldr	r4, [pc, #68]	; (80002fc <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 80002b8:	4d11      	ldr	r5, [pc, #68]	; (8000300 <endfiniloop+0x3a>)

080002ba <finiloop>:
finiloop:
                cmp     r4, r5
 80002ba:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002bc:	da03      	bge.n	80002c6 <endfiniloop>
                ldr     r1, [r4], #4
 80002be:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002c2:	4788      	blx	r1
                b       finiloop
 80002c4:	e7f9      	b.n	80002ba <finiloop>

080002c6 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002c6:	f000 b93d 	b.w	8000544 <__default_exit>
 80002ca:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80002cc:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002d0:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002d4:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002d8:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002dc:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002e0:	08006aec 	.word	0x08006aec
                ldr     r2, =_data_start
 80002e4:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002e8:	2000084c 	.word	0x2000084c
                ldr     r1, =_bss_start
 80002ec:	20000850 	.word	0x20000850
                ldr     r2, =_bss_end
 80002f0:	2000194c 	.word	0x2000194c
                ldr     r4, =__init_array_start
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002f8:	080001e4 	.word	0x080001e4
                ldr     r4, =__fini_array_start
 80002fc:	080001e4 	.word	0x080001e4
                ldr     r5, =__fini_array_end
 8000300:	080001e4 	.word	0x080001e4

08000304 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000304:	e76e      	b.n	80001e4 <_crt0_entry>

08000306 <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 8000306:	f000 f800 	bl	800030a <_unhandled_exception>

0800030a <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800030a:	e7fe      	b.n	800030a <_unhandled_exception>

0800030c <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 800030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 8000310:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000314:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000318:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800031a:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 800031c:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000324 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000324:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000326:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800032a:	4628      	mov	r0, r5
                blx     r4
 800032c:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800032e:	2000      	movs	r0, #0
                bl      chThdExit
 8000330:	f005 f8a2 	bl	8005478 <chThdExit>

08000334 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000334:	f004 ffe6 	bl	8005304 <chSchDoReschedule>

08000338 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000338:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 800033a:	e7fe      	b.n	800033a <_port_exit_from_isr+0x2>

0800033c <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800033c:	4a4d      	ldr	r2, [pc, #308]	; (8000474 <__early_init+0x138>)
  gpiop->OTYPER  = config->otyper;
 800033e:	484e      	ldr	r0, [pc, #312]	; (8000478 <__early_init+0x13c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000340:	6913      	ldr	r3, [r2, #16]
 8000342:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000346:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8000348:	b470      	push	{r4, r5, r6}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800034a:	6113      	str	r3, [r2, #16]
 800034c:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 800034e:	4d4b      	ldr	r5, [pc, #300]	; (800047c <__early_init+0x140>)
  gpiop->OSPEEDR = config->ospeedr;
 8000350:	4e4b      	ldr	r6, [pc, #300]	; (8000480 <__early_init+0x144>)
  gpiop->OTYPER  = config->otyper;
 8000352:	4c4c      	ldr	r4, [pc, #304]	; (8000484 <__early_init+0x148>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000354:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	6113      	str	r3, [r2, #16]
 800035e:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8000360:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000362:	430b      	orrs	r3, r1
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
 8000366:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000368:	430b      	orrs	r3, r1
 800036a:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800036c:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800036e:	6d12      	ldr	r2, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8000370:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000372:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000374:	f04f 5610 	mov.w	r6, #603979776	; 0x24000000
 8000378:	60ee      	str	r6, [r5, #12]
  gpiop->AFRH    = config->afrh;
 800037a:	4a43      	ldr	r2, [pc, #268]	; (8000488 <__early_init+0x14c>)
  gpiop->OTYPER  = config->otyper;
 800037c:	4943      	ldr	r1, [pc, #268]	; (800048c <__early_init+0x150>)
  gpiop->ODR     = config->odr;
 800037e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8000382:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8000384:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8000386:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000388:	4a41      	ldr	r2, [pc, #260]	; (8000490 <__early_init+0x154>)
 800038a:	602a      	str	r2, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800038c:	4d41      	ldr	r5, [pc, #260]	; (8000494 <__early_init+0x158>)
  gpiop->OTYPER  = config->otyper;
 800038e:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000390:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8000392:	f244 0520 	movw	r5, #16416	; 0x4020
 8000396:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8000398:	f64f 75df 	movw	r5, #65503	; 0xffdf
 800039c:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800039e:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
 80003a2:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80003a4:	f44f 0519 	mov.w	r5, #10027008	; 0x990000
 80003a8:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80003aa:	4d3b      	ldr	r5, [pc, #236]	; (8000498 <__early_init+0x15c>)
 80003ac:	6025      	str	r5, [r4, #0]
  gpiop->AFRH    = config->afrh;
 80003ae:	4d3b      	ldr	r5, [pc, #236]	; (800049c <__early_init+0x160>)
  gpiop->OTYPER  = config->otyper;
 80003b0:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003b2:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80003b4:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80003b6:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80003b8:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80003ba:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80003bc:	4d38      	ldr	r5, [pc, #224]	; (80004a0 <__early_init+0x164>)
 80003be:	6005      	str	r5, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80003c0:	253f      	movs	r5, #63	; 0x3f
  gpiop->OTYPER  = config->otyper;
 80003c2:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003c4:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80003c6:	4d37      	ldr	r5, [pc, #220]	; (80004a4 <__early_init+0x168>)
 80003c8:	60cd      	str	r5, [r1, #12]
  gpiop->AFRL    = config->afrl;
 80003ca:	4d37      	ldr	r5, [pc, #220]	; (80004a8 <__early_init+0x16c>)
  gpiop->ODR     = config->odr;
 80003cc:	614e      	str	r6, [r1, #20]
  gpiop->OTYPER  = config->otyper;
 80003ce:	f102 52ab 	add.w	r2, r2, #358612992	; 0x15600000
  gpiop->AFRL    = config->afrl;
 80003d2:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80003d4:	2577      	movs	r5, #119	; 0x77
 80003d6:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 80003d8:	f502 32e8 	add.w	r2, r2, #118784	; 0x1d000
  gpiop->MODER   = config->moder;
 80003dc:	4d33      	ldr	r5, [pc, #204]	; (80004ac <__early_init+0x170>)
 80003de:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 80003e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  gpiop->PUPDR   = config->pupdr;
 80003e4:	4d32      	ldr	r5, [pc, #200]	; (80004b0 <__early_init+0x174>)
  gpiop->OTYPER  = config->otyper;
 80003e6:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003e8:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80003ea:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 80003ec:	f24f 75ff 	movw	r5, #63487	; 0xf7ff
 80003f0:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80003f2:	4d30      	ldr	r5, [pc, #192]	; (80004b4 <__early_init+0x178>)
 80003f4:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80003f6:	2508      	movs	r5, #8
 80003f8:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 80003fa:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 80003fe:	4d2e      	ldr	r5, [pc, #184]	; (80004b8 <__early_init+0x17c>)
 8000400:	6015      	str	r5, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000402:	f244 0203 	movw	r2, #16387	; 0x4003
  gpiop->ODR     = config->odr;
 8000406:	f64b 75ff 	movw	r5, #49151	; 0xbfff
  gpiop->OTYPER  = config->otyper;
 800040a:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800040c:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800040e:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8000410:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000412:	f04f 45aa 	mov.w	r5, #1426063360	; 0x55000000
 8000416:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000418:	2555      	movs	r5, #85	; 0x55
 800041a:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 800041c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 8000420:	4d26      	ldr	r5, [pc, #152]	; (80004bc <__early_init+0x180>)
 8000422:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8000424:	f44f 74ff 	mov.w	r4, #510	; 0x1fe
 8000428:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800042a:	f04f 6440 	mov.w	r4, #201326592	; 0xc000000
 800042e:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000430:	4c23      	ldr	r4, [pc, #140]	; (80004c0 <__early_init+0x184>)
 8000432:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8000434:	f64f 6401 	movw	r4, #65025	; 0xfe01
 8000438:	6144      	str	r4, [r0, #20]
  gpiop->AFRH    = config->afrh;
 800043a:	4c22      	ldr	r4, [pc, #136]	; (80004c4 <__early_init+0x188>)
  gpiop->AFRL    = config->afrl;
 800043c:	6203      	str	r3, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 800043e:	4922      	ldr	r1, [pc, #136]	; (80004c8 <__early_init+0x18c>)
  gpiop->AFRH    = config->afrh;
 8000440:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000442:	4c22      	ldr	r4, [pc, #136]	; (80004cc <__early_init+0x190>)
 8000444:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8000446:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <__early_init+0x194>)
 8000448:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800044a:	200f      	movs	r0, #15
 800044c:	6088      	str	r0, [r1, #8]
  gpiop->AFRL    = config->afrl;
 800044e:	f04f 6410 	mov.w	r4, #150994944	; 0x9000000
  gpiop->MODER   = config->moder;
 8000452:	f242 5050 	movw	r0, #9552	; 0x2550
  gpiop->PUPDR   = config->pupdr;
 8000456:	60cb      	str	r3, [r1, #12]
  gpiop->ODR     = config->odr;
 8000458:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800045a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800045c:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800045e:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8000460:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000462:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000464:	60d3      	str	r3, [r2, #12]
  gpiop->ODR     = config->odr;
 8000466:	6156      	str	r6, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000468:	6213      	str	r3, [r2, #32]

  stm32_gpio_init();
  stm32_clock_init();
}
 800046a:	bc70      	pop	{r4, r5, r6}
  gpiop->AFRH    = config->afrh;
 800046c:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800046e:	6013      	str	r3, [r2, #0]
  stm32_clock_init();
 8000470:	f001 bc52 	b.w	8001d18 <stm32_clock_init>
 8000474:	40023800 	.word	0x40023800
 8000478:	40020800 	.word	0x40020800
 800047c:	40020000 	.word	0x40020000
 8000480:	3ffcc0c0 	.word	0x3ffcc0c0
 8000484:	40020400 	.word	0x40020400
 8000488:	000aaa00 	.word	0x000aaa00
 800048c:	40020c00 	.word	0x40020c00
 8000490:	2aa04000 	.word	0x2aa04000
 8000494:	0f3fc0c0 	.word	0x0f3fc0c0
 8000498:	0a148440 	.word	0x0a148440
 800049c:	000ccccc 	.word	0x000ccccc
 80004a0:	02aa0000 	.word	0x02aa0000
 80004a4:	00051400 	.word	0x00051400
 80004a8:	07700c99 	.word	0x07700c99
 80004ac:	000a282a 	.word	0x000a282a
 80004b0:	00014005 	.word	0x00014005
 80004b4:	80000088 	.word	0x80000088
 80004b8:	0042800a 	.word	0x0042800a
 80004bc:	100aa000 	.word	0x100aa000
 80004c0:	10040000 	.word	0x10040000
 80004c4:	08000080 	.word	0x08000080
 80004c8:	40021c00 	.word	0x40021c00
 80004cc:	24095554 	.word	0x24095554
 80004d0:	40022000 	.word	0x40022000

080004d4 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <board_setup_all>:
    // enable interrupt from the user button (normal high)
    // palEnableLineEvent(LINE_USER_BUTTON, PAL_EVENT_MODE_FALLING_EDGE);
};

void board_setup_all(void)
{
 80004d8:	b508      	push	{r3, lr}
     */
    static inline void CRC32_init(void)
    {
//enable CRC clock
#ifdef STM32F4XX
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <board_setup_all+0x48>)
        (void)RCC->APB1ENR;
        CRC_CR |= CRC_CR_RESET;
 80004dc:	4911      	ldr	r1, [pc, #68]	; (8000524 <board_setup_all+0x4c>)
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 80004de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CRC32_init();
    DR16_initDBus(&UARTD1);
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <board_setup_all+0x50>)
 80004e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
        (void)RCC->APB1ENR;
 80004e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        CRC_CR |= CRC_CR_RESET;
 80004ea:	680b      	ldr	r3, [r1, #0]
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	600b      	str	r3, [r1, #0]
 80004f2:	f005 fa87 	bl	8005a04 <DR16_initDBus>
    palSetLineMode(LINE_OLED_5_SCLK, PAL_MODE_ALTERNATE(5));
 80004f6:	f240 2282 	movw	r2, #642	; 0x282
 80004fa:	2108      	movs	r1, #8
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <board_setup_all+0x54>)
 80004fe:	f002 fa17 	bl	8002930 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_OLED_6_MOSI, PAL_MODE_ALTERNATE(5));
 8000502:	f240 2282 	movw	r2, #642	; 0x282
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <board_setup_all+0x58>)
 800050a:	f002 fa11 	bl	8002930 <_pal_lld_setgroupmode>
    spiStart(&SPID1, &SPI1_Config);
 800050e:	4909      	ldr	r1, [pc, #36]	; (8000534 <board_setup_all+0x5c>)
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <board_setup_all+0x60>)
 8000512:	f000 fe97 	bl	8001244 <spiStart>
    setup_SPI1();

#ifndef SHELL_SD
    setup_USB();
#endif //SHELL_USE_USB
};
 8000516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup_USB();
 800051a:	f005 badf 	b.w	8005adc <setup_USB>
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800
 8000524:	40023008 	.word	0x40023008
 8000528:	20000c5c 	.word	0x20000c5c
 800052c:	40020400 	.word	0x40020400
 8000530:	40020000 	.word	0x40020000
 8000534:	08006750 	.word	0x08006750
 8000538:	20000afc 	.word	0x20000afc

0800053c <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__late_init>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000544:	e7fe      	b.n	8000544 <__default_exit>
 8000546:	bf00      	nop

08000548 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	4d13      	ldr	r5, [pc, #76]	; (8000598 <__init_ram_areas+0x50>)
 800054c:	f105 0680 	add.w	r6, r5, #128	; 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000550:	e955 0403 	ldrd	r0, r4, [r5, #-12]
 8000554:	42a0      	cmp	r0, r4
    uint32_t *tp = rap->init_text_area;
 8000556:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 800055a:	d20d      	bcs.n	8000578 <__init_ram_areas+0x30>
 800055c:	3a04      	subs	r2, #4
 800055e:	4603      	mov	r3, r0
      *p = *tp;
 8000560:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8000564:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->clear_area) {
 8000568:	42a3      	cmp	r3, r4
 800056a:	d3f9      	bcc.n	8000560 <__init_ram_areas+0x18>
 800056c:	43c3      	mvns	r3, r0
 800056e:	441c      	add	r4, r3
 8000570:	f024 0403 	bic.w	r4, r4, #3
 8000574:	3404      	adds	r4, #4
 8000576:	4420      	add	r0, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000578:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800057c:	4283      	cmp	r3, r0
 800057e:	d907      	bls.n	8000590 <__init_ram_areas+0x48>
      *p = 0;
 8000580:	43c2      	mvns	r2, r0
 8000582:	441a      	add	r2, r3
 8000584:	f022 0203 	bic.w	r2, r2, #3
 8000588:	3204      	adds	r2, #4
 800058a:	2100      	movs	r1, #0
 800058c:	f006 f8d7 	bl	800673e <memset>
 8000590:	3510      	adds	r5, #16
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000592:	42b5      	cmp	r5, r6
 8000594:	d1dc      	bne.n	8000550 <__init_ram_areas+0x8>
#endif
}
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	08006770 	.word	0x08006770

0800059c <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800059c:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800059e:	f001 fb71 	bl	8001c84 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80005a2:	f002 f95f 	bl	8002864 <_pal_lld_init>
#else
  palInit(&pal_default_config);
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 80005a6:	f000 fbb7 	bl	8000d18 <adcInit>
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 80005aa:	f000 fbc3 	bl	8000d34 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 80005ae:	f000 fbd7 	bl	8000d60 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 80005b2:	f000 fbdf 	bl	8000d74 <icuInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 80005b6:	f000 fbe5 	bl	8000d84 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80005ba:	f000 fc17 	bl	8000dec <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80005be:	f000 fe39 	bl	8001234 <spiInit>
#endif
#if (HAL_USE_TRNG == TRUE) || defined(__DOXYGEN__)
  trngInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 80005c2:	f000 fe4d 	bl	8001260 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 80005c6:	f000 fe65 	bl	8001294 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 80005ca:	f000 fcc1 	bl	8000f50 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80005ce:	f7ff ff81 	bl	80004d4 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 80005d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 80005d6:	f000 b801 	b.w	80005dc <stInit>
 80005da:	bf00      	nop

080005dc <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 80005dc:	f003 bdf4 	b.w	80041c8 <st_lld_init>

080005e0 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 80005e4:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80005e6:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005e8:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80005ea:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80005ec:	60da      	str	r2, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 80005ee:	4770      	bx	lr

080005f0 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000600:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8000602:	4770      	bx	lr

08000604 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 8000604:	b470      	push	{r4, r5, r6}
 8000606:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800060a:	3304      	adds	r3, #4
  ibqp->suspended = suspended;
 800060c:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 800060e:	9905      	ldr	r1, [sp, #20]
  ibqp->bsize     = size + sizeof (size_t);
 8000610:	61c3      	str	r3, [r0, #28]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000612:	fb05 2603 	mla	r6, r5, r3, r2
  ibqp->bcounter  = 0;
 8000616:	2300      	movs	r3, #0
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000618:	6186      	str	r6, [r0, #24]
  ibqp->bn        = n;
 800061a:	6205      	str	r5, [r0, #32]
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
  ibqp->link      = link;
 800061c:	e9c0 410c 	strd	r4, r1, [r0, #48]	; 0x30
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8000620:	e9c0 0000 	strd	r0, r0, [r0]
  ibqp->bwrptr    = bp;
 8000624:	e9c0 2204 	strd	r2, r2, [r0, #16]
  ibqp->buffers   = bp;
 8000628:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 800062a:	60c3      	str	r3, [r0, #12]
  ibqp->top       = NULL;
 800062c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 8000630:	bc70      	pop	{r4, r5, r6}
 8000632:	4770      	bx	lr

08000634 <ibqResetI>:
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
  ibqp->brdptr    = ibqp->buffers;
 8000634:	6a41      	ldr	r1, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 8000636:	2200      	movs	r2, #0
  ibqp->bwrptr    = ibqp->buffers;
 8000638:	e9c0 1104 	strd	r1, r1, [r0, #16]
  ibqp->bcounter  = 0;
 800063c:	60c2      	str	r2, [r0, #12]
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
 800063e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000642:	f06f 0101 	mvn.w	r1, #1
 8000646:	f004 bf79 	b.w	800553c <chThdDequeueAllI>
 800064a:	bf00      	nop

0800064c <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 800064c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8000650:	4293      	cmp	r3, r2
 8000652:	d001      	beq.n	8000658 <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8000654:	1d18      	adds	r0, r3, #4
}
 8000656:	4770      	bx	lr
  if (ibqIsFullI(ibqp)) {
 8000658:	68c2      	ldr	r2, [r0, #12]
 800065a:	2a00      	cmp	r2, #0
 800065c:	d0fa      	beq.n	8000654 <ibqGetEmptyBufferI+0x8>
    return NULL;
 800065e:	2000      	movs	r0, #0
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <ibqPostFullBufferI>:

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8000664:	6903      	ldr	r3, [r0, #16]
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8000666:	b410      	push	{r4}

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8000668:	6984      	ldr	r4, [r0, #24]
  *((size_t *)ibqp->bwrptr) = size;
 800066a:	6019      	str	r1, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 800066c:	69c1      	ldr	r1, [r0, #28]
  ibqp->bcounter++;
 800066e:	68c2      	ldr	r2, [r0, #12]
  ibqp->bwrptr += ibqp->bsize;
 8000670:	440b      	add	r3, r1
  if (ibqp->bwrptr >= ibqp->btop) {
 8000672:	42a3      	cmp	r3, r4
  ibqp->bwrptr += ibqp->bsize;
 8000674:	6103      	str	r3, [r0, #16]
  ibqp->bcounter++;
 8000676:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 800067a:	bf28      	it	cs
 800067c:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  ibqp->bcounter++;
 800067e:	60c2      	str	r2, [r0, #12]
    ibqp->bwrptr = ibqp->buffers;
 8000680:	bf28      	it	cs
 8000682:	6103      	strcs	r3, [r0, #16]
  chThdDequeueNextI(tqp, msg);
 8000684:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 8000686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800068a:	f004 bf47 	b.w	800551c <chThdDequeueNextI>
 800068e:	bf00      	nop

08000690 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8000690:	b570      	push	{r4, r5, r6, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000692:	2320      	movs	r3, #32
 8000694:	4604      	mov	r4, r0
 8000696:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 800069a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800069c:	b1e3      	cbz	r3, 80006d8 <ibqGetTimeout+0x48>
 800069e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 80006a0:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 80006a4:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d311      	bcc.n	80006ce <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 80006aa:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 80006ae:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 80006b0:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 80006b2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 80006b4:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 80006b6:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 80006b8:	bf24      	itt	cs
 80006ba:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80006bc:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 80006be:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 80006c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 80006c2:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 80006c4:	2200      	movs	r2, #0
 80006c6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 80006c8:	b10b      	cbz	r3, 80006ce <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 80006ca:	4620      	mov	r0, r4
 80006cc:	4798      	blx	r3
 80006ce:	2300      	movs	r3, #0
 80006d0:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
}
 80006d4:	4628      	mov	r0, r5
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	460e      	mov	r6, r1
 80006da:	e005      	b.n	80006e8 <ibqGetTimeout+0x58>
    if (ibqp->suspended) {
 80006dc:	7a23      	ldrb	r3, [r4, #8]
 80006de:	b97b      	cbnz	r3, 8000700 <ibqGetTimeout+0x70>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80006e0:	f004 ff08 	bl	80054f4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80006e4:	1e05      	subs	r5, r0, #0
 80006e6:	dbf2      	blt.n	80006ce <ibqGetTimeout+0x3e>
  while (ibqIsEmptyI(ibqp)) {
 80006e8:	68e3      	ldr	r3, [r4, #12]
 80006ea:	4631      	mov	r1, r6
 80006ec:	4620      	mov	r0, r4
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f4      	beq.n	80006dc <ibqGetTimeout+0x4c>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80006f2:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80006f4:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80006f6:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80006f8:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80006fa:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 80006fe:	e7cf      	b.n	80006a0 <ibqGetTimeout+0x10>
      return MSG_RESET;
 8000700:	f06f 0501 	mvn.w	r5, #1
 8000704:	e7e3      	b.n	80006ce <ibqGetTimeout+0x3e>
 8000706:	bf00      	nop

08000708 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	460e      	mov	r6, r1
 8000710:	4617      	mov	r7, r2
 8000712:	4699      	mov	r9, r3
 8000714:	f04f 0a20 	mov.w	sl, #32
 8000718:	f38a 8811 	msr	BASEPRI, sl
  size_t r = 0;
 800071c:	2500      	movs	r5, #0
  ibqp->ptr = NULL;
 800071e:	46a8      	mov	r8, r5

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8000720:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000722:	2900      	cmp	r1, #0
 8000724:	d046      	beq.n	80007b4 <ibqReadTimeout+0xac>
 8000726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
    if (size > (n - r)) {
 8000728:	eba7 0b05 	sub.w	fp, r7, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	459b      	cmp	fp, r3
 8000730:	bf28      	it	cs
 8000732:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000734:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8000738:	d948      	bls.n	80007cc <ibqReadTimeout+0xc4>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 800073a:	f101 0240 	add.w	r2, r1, #64	; 0x40
 800073e:	4633      	mov	r3, r6
 8000740:	f8d1 e000 	ldr.w	lr, [r1]
 8000744:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8000748:	6888      	ldr	r0, [r1, #8]
 800074a:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800074e:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000752:	3110      	adds	r1, #16
 8000754:	4291      	cmp	r1, r2
 8000756:	f8c3 e000 	str.w	lr, [r3]
 800075a:	f8c3 c004 	str.w	ip, [r3, #4]
 800075e:	6098      	str	r0, [r3, #8]
 8000760:	f103 0310 	add.w	r3, r3, #16
 8000764:	d1ec      	bne.n	8000740 <ibqReadTimeout+0x38>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000768:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800076a:	3640      	adds	r6, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 800076c:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800076e:	62a3      	str	r3, [r4, #40]	; 0x28
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8000770:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000772:	429a      	cmp	r2, r3
 8000774:	d811      	bhi.n	800079a <ibqReadTimeout+0x92>
  if (ibqp->brdptr >= ibqp->btop) {
 8000776:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 800077a:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 800077c:	68e2      	ldr	r2, [r4, #12]
  ibqp->ptr = NULL;
 800077e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8000782:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8000784:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8000786:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8000788:	bf24      	itt	cs
 800078a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800078c:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 800078e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8000790:	3a01      	subs	r2, #1
 8000792:	60e2      	str	r2, [r4, #12]
  if (ibqp->notify != NULL) {
 8000794:	b10b      	cbz	r3, 800079a <ibqReadTimeout+0x92>
    ibqp->notify(ibqp);
 8000796:	4620      	mov	r0, r4
 8000798:	4798      	blx	r3
 800079a:	f388 8811 	msr	BASEPRI, r8
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 800079e:	42bd      	cmp	r5, r7
 80007a0:	d221      	bcs.n	80007e6 <ibqReadTimeout+0xde>
 80007a2:	f38a 8811 	msr	BASEPRI, sl
 80007a6:	e7bb      	b.n	8000720 <ibqReadTimeout+0x18>
    if (ibqp->suspended) {
 80007a8:	7a23      	ldrb	r3, [r4, #8]
 80007aa:	b9cb      	cbnz	r3, 80007e0 <ibqReadTimeout+0xd8>
 80007ac:	f004 fea2 	bl	80054f4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80007b0:	2800      	cmp	r0, #0
 80007b2:	db15      	blt.n	80007e0 <ibqReadTimeout+0xd8>
  while (ibqIsEmptyI(ibqp)) {
 80007b4:	68e3      	ldr	r3, [r4, #12]
 80007b6:	4649      	mov	r1, r9
 80007b8:	4620      	mov	r0, r4
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f4      	beq.n	80007a8 <ibqReadTimeout+0xa0>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007be:	6961      	ldr	r1, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80007c0:	680b      	ldr	r3, [r1, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007c2:	3104      	adds	r1, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80007c4:	440b      	add	r3, r1
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007c6:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 80007ca:	e7ad      	b.n	8000728 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 80007cc:	4630      	mov	r0, r6
 80007ce:	465a      	mov	r2, fp
 80007d0:	f005 ffaa 	bl	8006728 <memcpy>
      ibqp->ptr += size;
 80007d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007d6:	445b      	add	r3, fp
      r         += size;
 80007d8:	445d      	add	r5, fp
      bp        += size;
 80007da:	445e      	add	r6, fp
      ibqp->ptr += size;
 80007dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80007de:	e7c7      	b.n	8000770 <ibqReadTimeout+0x68>
 80007e0:	2300      	movs	r3, #0
 80007e2:	f383 8811 	msr	BASEPRI, r3
      return r;
    }
    osalSysLock();
  }
}
 80007e6:	4628      	mov	r0, r5
 80007e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007ec <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 80007ec:	b470      	push	{r4, r5, r6}
 80007ee:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80007f2:	3304      	adds	r3, #4
  obqp->suspended = suspended;
 80007f4:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 80007f6:	9905      	ldr	r1, [sp, #20]
  obqp->bsize     = size + sizeof (size_t);
 80007f8:	61c3      	str	r3, [r0, #28]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80007fa:	fb04 2603 	mla	r6, r4, r3, r2
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
 80007fe:	2300      	movs	r3, #0
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000800:	6186      	str	r6, [r0, #24]
  obqp->bcounter  = n;
 8000802:	60c4      	str	r4, [r0, #12]
  obqp->bn        = n;
 8000804:	6204      	str	r4, [r0, #32]
  obqp->top       = NULL;
  obqp->notify    = onfy;
  obqp->link      = link;
 8000806:	e9c0 510c 	strd	r5, r1, [r0, #48]	; 0x30
 800080a:	e9c0 0000 	strd	r0, r0, [r0]
  obqp->bwrptr    = bp;
 800080e:	e9c0 2204 	strd	r2, r2, [r0, #16]
  obqp->buffers   = bp;
 8000812:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top       = NULL;
 8000814:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 8000818:	bc70      	pop	{r4, r5, r6}
 800081a:	4770      	bx	lr

0800081c <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 800081c:	b410      	push	{r4}

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
  obqp->brdptr    = obqp->buffers;
 800081e:	e9d0 4108 	ldrd	r4, r1, [r0, #32]
  obqp->bwrptr    = obqp->buffers;
  obqp->ptr       = NULL;
 8000822:	2200      	movs	r2, #0
  obqp->bcounter  = bqSizeX(obqp);
 8000824:	60c4      	str	r4, [r0, #12]
  obqp->bwrptr    = obqp->buffers;
 8000826:	e9c0 1104 	strd	r1, r1, [r0, #16]
  obqp->top       = NULL;
 800082a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  chThdDequeueAllI(tqp, msg);
 800082e:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8000832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000836:	f004 be81 	b.w	800553c <chThdDequeueAllI>
 800083a:	bf00      	nop

0800083c <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 800083c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d004      	beq.n	800084e <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8000844:	4618      	mov	r0, r3
 8000846:	f850 3b04 	ldr.w	r3, [r0], #4
 800084a:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 800084c:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 800084e:	68c2      	ldr	r2, [r0, #12]
 8000850:	2a00      	cmp	r2, #0
 8000852:	d0f7      	beq.n	8000844 <obqGetFullBufferI+0x8>
    return NULL;
 8000854:	2000      	movs	r0, #0
 8000856:	4770      	bx	lr

08000858 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8000858:	b410      	push	{r4}
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
 800085a:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
  obqp->brdptr += obqp->bsize;
 800085e:	6943      	ldr	r3, [r0, #20]
  obqp->bcounter++;
 8000860:	68c2      	ldr	r2, [r0, #12]
  obqp->brdptr += obqp->bsize;
 8000862:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8000864:	428b      	cmp	r3, r1
  obqp->brdptr += obqp->bsize;
 8000866:	6143      	str	r3, [r0, #20]
  obqp->bcounter++;
 8000868:	f102 0201 	add.w	r2, r2, #1
    obqp->brdptr = obqp->buffers;
 800086c:	bf28      	it	cs
 800086e:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  obqp->bcounter++;
 8000870:	60c2      	str	r2, [r0, #12]
    obqp->brdptr = obqp->buffers;
 8000872:	bf28      	it	cs
 8000874:	6143      	strcs	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 8000876:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8000878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800087c:	f004 be4e 	b.w	800551c <chThdDequeueNextI>

08000880 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	2320      	movs	r3, #32
 8000884:	4604      	mov	r4, r0
 8000886:	460e      	mov	r6, r1
 8000888:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 800088c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800088e:	b1fb      	cbz	r3, 80008d0 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8000890:	701e      	strb	r6, [r3, #0]
  obqp->ptr++;

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8000892:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8000896:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8000898:	4293      	cmp	r3, r2
  obqp->ptr++;
 800089a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800089c:	d314      	bcc.n	80008c8 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800089e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 80008a0:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80008a2:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80008a4:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80008a6:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80008a8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 80008aa:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80008ac:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80008ae:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 80008b0:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 80008b2:	bf24      	itt	cs
 80008b4:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80008b6:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 80008b8:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 80008ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 80008bc:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 80008be:	2200      	movs	r2, #0
 80008c0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 80008c2:	b10b      	cbz	r3, 80008c8 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 80008c4:	4620      	mov	r0, r4
 80008c6:	4798      	blx	r3
 80008c8:	2000      	movs	r0, #0
 80008ca:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();
  return MSG_OK;
}
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	4615      	mov	r5, r2
 80008d2:	e005      	b.n	80008e0 <obqPutTimeout+0x60>
    if (obqp->suspended) {
 80008d4:	7a23      	ldrb	r3, [r4, #8]
 80008d6:	b97b      	cbnz	r3, 80008f8 <obqPutTimeout+0x78>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80008d8:	f004 fe0c 	bl	80054f4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80008dc:	2800      	cmp	r0, #0
 80008de:	db0d      	blt.n	80008fc <obqPutTimeout+0x7c>
  while (obqIsFullI(obqp)) {
 80008e0:	68e3      	ldr	r3, [r4, #12]
 80008e2:	4629      	mov	r1, r5
 80008e4:	4620      	mov	r0, r4
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f4      	beq.n	80008d4 <obqPutTimeout+0x54>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80008ea:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80008ec:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80008ee:	1d13      	adds	r3, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80008f0:	440a      	add	r2, r1
 80008f2:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 80008f6:	e7cb      	b.n	8000890 <obqPutTimeout+0x10>
      return MSG_RESET;
 80008f8:	f06f 0001 	mvn.w	r0, #1
 80008fc:	2300      	movs	r3, #0
 80008fe:	f383 8811 	msr	BASEPRI, r3
}
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8000904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000908:	4604      	mov	r4, r0
 800090a:	460d      	mov	r5, r1
 800090c:	4617      	mov	r7, r2
 800090e:	4699      	mov	r9, r3
 8000910:	f04f 0a20 	mov.w	sl, #32
 8000914:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 8000918:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800091a:	46b0      	mov	r8, r6

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 800091c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800091e:	2800      	cmp	r0, #0
 8000920:	d045      	beq.n	80009ae <obqWriteTimeout+0xaa>
 8000922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
    if (size > (n - w)) {
 8000924:	eba7 0b06 	sub.w	fp, r7, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	459b      	cmp	fp, r3
 800092c:	bf28      	it	cs
 800092e:	469b      	movcs	fp, r3
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000930:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8000934:	d947      	bls.n	80009c6 <obqWriteTimeout+0xc2>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8000936:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800093a:	f8d5 c000 	ldr.w	ip, [r5]
 800093e:	6869      	ldr	r1, [r5, #4]
 8000940:	68aa      	ldr	r2, [r5, #8]
 8000942:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8000946:	f8c0 e00c 	str.w	lr, [r0, #12]
 800094a:	3510      	adds	r5, #16
 800094c:	429d      	cmp	r5, r3
 800094e:	f8c0 c000 	str.w	ip, [r0]
 8000952:	6041      	str	r1, [r0, #4]
 8000954:	6082      	str	r2, [r0, #8]
 8000956:	f100 0010 	add.w	r0, r0, #16
 800095a:	d1ee      	bne.n	800093a <obqWriteTimeout+0x36>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800095c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800095e:	3340      	adds	r3, #64	; 0x40
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8000960:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000962:	62a3      	str	r3, [r4, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8000964:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000966:	429a      	cmp	r2, r3
 8000968:	d814      	bhi.n	8000994 <obqWriteTimeout+0x90>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800096a:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 800096c:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800096e:	69a1      	ldr	r1, [r4, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000970:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8000972:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8000974:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8000976:	68e2      	ldr	r2, [r4, #12]
  obqp->ptr = NULL;
 8000978:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 800097c:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 800097e:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8000980:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8000982:	bf24      	itt	cs
 8000984:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8000986:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8000988:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 800098a:	3a01      	subs	r2, #1
 800098c:	60e2      	str	r2, [r4, #12]
  if (obqp->notify != NULL) {
 800098e:	b10b      	cbz	r3, 8000994 <obqWriteTimeout+0x90>
    obqp->notify(obqp);
 8000990:	4620      	mov	r0, r4
 8000992:	4798      	blx	r3
 8000994:	f388 8811 	msr	BASEPRI, r8
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8000998:	42be      	cmp	r6, r7
 800099a:	d221      	bcs.n	80009e0 <obqWriteTimeout+0xdc>
 800099c:	f38a 8811 	msr	BASEPRI, sl
 80009a0:	e7bc      	b.n	800091c <obqWriteTimeout+0x18>
    if (obqp->suspended) {
 80009a2:	7a23      	ldrb	r3, [r4, #8]
 80009a4:	b9cb      	cbnz	r3, 80009da <obqWriteTimeout+0xd6>
 80009a6:	f004 fda5 	bl	80054f4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80009aa:	2800      	cmp	r0, #0
 80009ac:	db15      	blt.n	80009da <obqWriteTimeout+0xd6>
  while (obqIsFullI(obqp)) {
 80009ae:	68e3      	ldr	r3, [r4, #12]
 80009b0:	4649      	mov	r1, r9
 80009b2:	4620      	mov	r0, r4
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f4      	beq.n	80009a2 <obqWriteTimeout+0x9e>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80009b8:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80009ba:	69e2      	ldr	r2, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80009bc:	1d18      	adds	r0, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80009be:	4413      	add	r3, r2
 80009c0:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
 80009c4:	e7ae      	b.n	8000924 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 80009c6:	4629      	mov	r1, r5
 80009c8:	465a      	mov	r2, fp
 80009ca:	f005 fead 	bl	8006728 <memcpy>
      obqp->ptr += size;
 80009ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009d0:	445b      	add	r3, fp
      w         += size;
 80009d2:	445e      	add	r6, fp
      bp        += size;
 80009d4:	445d      	add	r5, fp
      obqp->ptr += size;
 80009d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80009d8:	e7c4      	b.n	8000964 <obqWriteTimeout+0x60>
 80009da:	2300      	movs	r3, #0
 80009dc:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    osalSysLock();
  }
}
 80009e0:	4630      	mov	r0, r6
 80009e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e6:	bf00      	nop

080009e8 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80009e8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d001      	beq.n	80009f4 <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 80009f0:	2000      	movs	r0, #0
 80009f2:	4770      	bx	lr
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80009f4:	68c3      	ldr	r3, [r0, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0fa      	beq.n	80009f0 <obqTryFlushI+0x8>
 80009fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f7      	beq.n	80009f0 <obqTryFlushI+0x8>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000a00:	3b04      	subs	r3, #4
    if (size > 0U) {
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	d0f4      	beq.n	80009f0 <obqTryFlushI+0x8>
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8000a06:	b410      	push	{r4}
      *((size_t *)obqp->bwrptr) = size;
 8000a08:	6013      	str	r3, [r2, #0]
      if (obqp->bwrptr >= obqp->btop) {
 8000a0a:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
      obqp->bcounter--;
 8000a0e:	68c3      	ldr	r3, [r0, #12]
      obqp->bwrptr += obqp->bsize;
 8000a10:	4422      	add	r2, r4
      obqp->bcounter--;
 8000a12:	3b01      	subs	r3, #1
      if (obqp->bwrptr >= obqp->btop) {
 8000a14:	428a      	cmp	r2, r1
      obqp->bcounter--;
 8000a16:	60c3      	str	r3, [r0, #12]
        obqp->bwrptr = obqp->buffers;
 8000a18:	bf28      	it	cs
 8000a1a:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
      obqp->bwrptr += obqp->bsize;
 8000a1c:	6102      	str	r2, [r0, #16]
        obqp->bwrptr = obqp->buffers;
 8000a1e:	bf28      	it	cs
 8000a20:	6103      	strcs	r3, [r0, #16]
      obqp->ptr = NULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	6283      	str	r3, [r0, #40]	; 0x28
}
 8000a26:	f85d 4b04 	ldr.w	r4, [sp], #4
      return true;
 8000a2a:	2001      	movs	r0, #1
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000a30:	b430      	push	{r4, r5}
 8000a32:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8000a34:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 8000a36:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 8000a38:	440a      	add	r2, r1
  iqp->q_counter = 0;
 8000a3a:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 8000a3c:	6102      	str	r2, [r0, #16]
 8000a3e:	e9c0 0000 	strd	r0, r0, [r0]
  iqp->q_buffer  = bp;
 8000a42:	60c1      	str	r1, [r0, #12]
  iqp->q_wrptr   = bp;
 8000a44:	e9c0 1105 	strd	r1, r1, [r0, #20]
  iqp->q_notify  = infy;
 8000a48:	61c3      	str	r3, [r0, #28]
}
 8000a4a:	bc30      	pop	{r4, r5}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000a50:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d011      	beq.n	8000a7c <iqPutI+0x2c>
    iqp->q_counter++;
 8000a58:	6882      	ldr	r2, [r0, #8]
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000a5a:	b510      	push	{r4, lr}
    iqp->q_counter++;
 8000a5c:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
 8000a5e:	1c5c      	adds	r4, r3, #1
    iqp->q_counter++;
 8000a60:	6082      	str	r2, [r0, #8]
    *iqp->q_wrptr++ = b;
 8000a62:	6144      	str	r4, [r0, #20]
 8000a64:	7019      	strb	r1, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000a66:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d301      	bcc.n	8000a72 <iqPutI+0x22>
      iqp->q_wrptr = iqp->q_buffer;
 8000a6e:	68c3      	ldr	r3, [r0, #12]
 8000a70:	6143      	str	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 8000a72:	2100      	movs	r1, #0
 8000a74:	f004 fd52 	bl	800551c <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
 8000a78:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 8000a7a:	bd10      	pop	{r4, pc}
  if (!iqIsFullI(iqp)) {
 8000a7c:	6882      	ldr	r2, [r0, #8]
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d0ea      	beq.n	8000a58 <iqPutI+0x8>
  return MSG_TIMEOUT;
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000a86:	4770      	bx	lr

08000a88 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460e      	mov	r6, r1
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	e003      	b.n	8000a9e <iqGetTimeout+0x16>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000a96:	f004 fd2d 	bl	80054f4 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	db1a      	blt.n	8000ad4 <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000a9e:	68a5      	ldr	r5, [r4, #8]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	d0f6      	beq.n	8000a96 <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000aa8:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000aaa:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000aac:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8000aae:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000ab0:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ab2:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8000ab4:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000ab6:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000ab8:	bf28      	it	cs
 8000aba:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000abc:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000abe:	bf28      	it	cs
 8000ac0:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000ac2:	69e3      	ldr	r3, [r4, #28]
 8000ac4:	b10b      	cbz	r3, 8000aca <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	4798      	blx	r3
 8000aca:	2300      	movs	r3, #0
 8000acc:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8000ad0:	4628      	mov	r0, r5
}
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	f385 8811 	msr	BASEPRI, r5
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
 8000ada:	bf00      	nop

08000adc <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8000ae6:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000aea:	f04f 0a20 	mov.w	sl, #32
 8000aee:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000af2:	b33a      	cbz	r2, 8000b44 <iqReadTimeout+0x68>
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	4616      	mov	r6, r2
 8000afa:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8000afe:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b00:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8000b02:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b04:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8000b06:	bf8c      	ite	hi
 8000b08:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8000b0a:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b0c:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8000b10:	45a8      	cmp	r8, r5
 8000b12:	d840      	bhi.n	8000b96 <iqReadTimeout+0xba>
  else if (n > s1) {
 8000b14:	d32b      	bcc.n	8000b6e <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000b16:	462a      	mov	r2, r5
 8000b18:	4638      	mov	r0, r7
 8000b1a:	f005 fe05 	bl	8006728 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000b1e:	68e2      	ldr	r2, [r4, #12]
 8000b20:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8000b22:	68a2      	ldr	r2, [r4, #8]
 8000b24:	1b52      	subs	r2, r2, r5
 8000b26:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 8000b28:	b19d      	cbz	r5, 8000b52 <iqReadTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000b2a:	f1b9 0f00 	cmp.w	r9, #0
 8000b2e:	d001      	beq.n	8000b34 <iqReadTimeout+0x58>
        nfy(iqp);
 8000b30:	4620      	mov	r0, r4
 8000b32:	47c8      	blx	r9
 8000b34:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000b38:	1b76      	subs	r6, r6, r5
      bp += done;
 8000b3a:	442f      	add	r7, r5
 8000b3c:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d1dc      	bne.n	8000afe <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8000b44:	9803      	ldr	r0, [sp, #12]
 8000b46:	2300      	movs	r3, #0
 8000b48:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000b4c:	b005      	add	sp, #20
 8000b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b52:	9902      	ldr	r1, [sp, #8]
 8000b54:	4620      	mov	r0, r4
 8000b56:	f004 fccd 	bl	80054f4 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d0cf      	beq.n	8000afe <iqReadTimeout+0x22>
 8000b5e:	9b03      	ldr	r3, [sp, #12]
 8000b60:	1b98      	subs	r0, r3, r6
 8000b62:	2300      	movs	r3, #0
 8000b64:	f383 8811 	msr	BASEPRI, r3
}
 8000b68:	b005      	add	sp, #20
 8000b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000b6e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000b72:	4642      	mov	r2, r8
 8000b74:	4638      	mov	r0, r7
    s2 = n - s1;
 8000b76:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000b78:	f005 fdd6 	bl	8006728 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000b7c:	eb07 0008 	add.w	r0, r7, r8
 8000b80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000b84:	68e1      	ldr	r1, [r4, #12]
 8000b86:	4642      	mov	r2, r8
 8000b88:	f005 fdce 	bl	8006728 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000b8c:	68e2      	ldr	r2, [r4, #12]
 8000b8e:	4643      	mov	r3, r8
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	61a3      	str	r3, [r4, #24]
 8000b94:	e7c5      	b.n	8000b22 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000b96:	462a      	mov	r2, r5
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f005 fdc5 	bl	8006728 <memcpy>
    iqp->q_rdptr += n;
 8000b9e:	69a2      	ldr	r2, [r4, #24]
 8000ba0:	442a      	add	r2, r5
 8000ba2:	61a2      	str	r2, [r4, #24]
 8000ba4:	e7bd      	b.n	8000b22 <iqReadTimeout+0x46>
 8000ba6:	bf00      	nop

08000ba8 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000ba8:	b430      	push	{r4, r5}
 8000baa:	9c02      	ldr	r4, [sp, #8]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000bac:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000bae:	188d      	adds	r5, r1, r2
  oqp->q_buffer  = bp;
 8000bb0:	e9c0 1503 	strd	r1, r5, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000bb4:	e9c0 3407 	strd	r3, r4, [r0, #28]
 8000bb8:	e9c0 0000 	strd	r0, r0, [r0]
  oqp->q_wrptr   = bp;
 8000bbc:	e9c0 1105 	strd	r1, r1, [r0, #20]
}
 8000bc0:	bc30      	pop	{r4, r5}
 8000bc2:	4770      	bx	lr

08000bc4 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	4616      	mov	r6, r2
 8000bcc:	2320      	movs	r3, #32
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	e003      	b.n	8000bdc <oqPutTimeout+0x18>
 8000bd4:	f004 fc8e 	bl	80054f4 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	db18      	blt.n	8000c0e <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8000bdc:	68a5      	ldr	r5, [r4, #8]
 8000bde:	4631      	mov	r1, r6
 8000be0:	4620      	mov	r0, r4
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d0f6      	beq.n	8000bd4 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000be6:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000be8:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000bea:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000bec:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000bee:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000bf0:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000bf2:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000bf4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000bf8:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000bfa:	bf24      	itt	cs
 8000bfc:	68e3      	ldrcs	r3, [r4, #12]
 8000bfe:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000c00:	69e3      	ldr	r3, [r4, #28]
 8000c02:	b103      	cbz	r3, 8000c06 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8000c04:	4798      	blx	r3
 8000c06:	2000      	movs	r0, #0
 8000c08:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0e:	f385 8811 	msr	BASEPRI, r5
 8000c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c14 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000c14:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000c16:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d00f      	beq.n	8000c3e <oqGetI+0x2a>
    uint8_t b;

    oqp->q_counter++;
 8000c1e:	6882      	ldr	r2, [r0, #8]
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c20:	6905      	ldr	r5, [r0, #16]
    b = *oqp->q_rdptr++;
 8000c22:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8000c24:	3201      	adds	r2, #1
 8000c26:	6082      	str	r2, [r0, #8]
    b = *oqp->q_rdptr++;
 8000c28:	6181      	str	r1, [r0, #24]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c2a:	42a9      	cmp	r1, r5
    b = *oqp->q_rdptr++;
 8000c2c:	781c      	ldrb	r4, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c2e:	d301      	bcc.n	8000c34 <oqGetI+0x20>
      oqp->q_rdptr = oqp->q_buffer;
 8000c30:	68c3      	ldr	r3, [r0, #12]
 8000c32:	6183      	str	r3, [r0, #24]
  chThdDequeueNextI(tqp, msg);
 8000c34:	2100      	movs	r1, #0
 8000c36:	f004 fc71 	bl	800551c <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 8000c3a:	4620      	mov	r0, r4
  }

  return MSG_TIMEOUT;
}
 8000c3c:	bd38      	pop	{r3, r4, r5, pc}
  if (!oqIsEmptyI(oqp)) {
 8000c3e:	6882      	ldr	r2, [r0, #8]
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d0ec      	beq.n	8000c1e <oqGetI+0xa>
  return MSG_TIMEOUT;
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	b085      	sub	sp, #20
 8000c52:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8000c56:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000c5a:	f04f 0a20 	mov.w	sl, #32
 8000c5e:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000c62:	b33a      	cbz	r2, 8000cb4 <oqWriteTimeout+0x68>
 8000c64:	4604      	mov	r4, r0
 8000c66:	460f      	mov	r7, r1
 8000c68:	4616      	mov	r6, r2
 8000c6a:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8000c6e:	68a2      	ldr	r2, [r4, #8]
 8000c70:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000c72:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8000c76:	bf8c      	ite	hi
 8000c78:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8000c7a:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000c7c:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8000c80:	45a8      	cmp	r8, r5
 8000c82:	d840      	bhi.n	8000d06 <oqWriteTimeout+0xba>
  else if (n > s1) {
 8000c84:	d32b      	bcc.n	8000cde <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000c86:	462a      	mov	r2, r5
 8000c88:	4639      	mov	r1, r7
 8000c8a:	f005 fd4d 	bl	8006728 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000c8e:	68e2      	ldr	r2, [r4, #12]
 8000c90:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8000c92:	68a2      	ldr	r2, [r4, #8]
 8000c94:	1b52      	subs	r2, r2, r5
 8000c96:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8000c98:	b19d      	cbz	r5, 8000cc2 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000c9a:	f1b9 0f00 	cmp.w	r9, #0
 8000c9e:	d001      	beq.n	8000ca4 <oqWriteTimeout+0x58>
        nfy(oqp);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	47c8      	blx	r9
 8000ca4:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000ca8:	1b76      	subs	r6, r6, r5
      bp += done;
 8000caa:	442f      	add	r7, r5
 8000cac:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d1dc      	bne.n	8000c6e <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8000cb4:	9803      	ldr	r0, [sp, #12]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000cbc:	b005      	add	sp, #20
 8000cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000cc2:	9902      	ldr	r1, [sp, #8]
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f004 fc15 	bl	80054f4 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d0cf      	beq.n	8000c6e <oqWriteTimeout+0x22>
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	1b98      	subs	r0, r3, r6
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f383 8811 	msr	BASEPRI, r3
}
 8000cd8:	b005      	add	sp, #20
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000cde:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	4639      	mov	r1, r7
    s2 = n - s1;
 8000ce6:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000ce8:	f005 fd1e 	bl	8006728 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000cec:	eb07 0108 	add.w	r1, r7, r8
 8000cf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000cf4:	68e0      	ldr	r0, [r4, #12]
 8000cf6:	4642      	mov	r2, r8
 8000cf8:	f005 fd16 	bl	8006728 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000cfc:	68e2      	ldr	r2, [r4, #12]
 8000cfe:	4643      	mov	r3, r8
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	6163      	str	r3, [r4, #20]
 8000d04:	e7c5      	b.n	8000c92 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000d06:	462a      	mov	r2, r5
 8000d08:	4639      	mov	r1, r7
 8000d0a:	f005 fd0d 	bl	8006728 <memcpy>
    oqp->q_wrptr += n;
 8000d0e:	6962      	ldr	r2, [r4, #20]
 8000d10:	442a      	add	r2, r5
 8000d12:	6162      	str	r2, [r4, #20]
 8000d14:	e7bd      	b.n	8000c92 <oqWriteTimeout+0x46>
 8000d16:	bf00      	nop

08000d18 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8000d18:	f001 b8e8 	b.w	8001eec <adc_lld_init>

08000d1c <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8000d1c:	2300      	movs	r3, #0
  adcp->state    = ADC_STOP;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	7002      	strb	r2, [r0, #0]
  adcp->samples  = NULL;
 8000d22:	e9c0 3301 	strd	r3, r3, [r0, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8000d26:	e9c0 3303 	strd	r3, r3, [r0, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8000d2a:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8000d2c:	3018      	adds	r0, #24
 8000d2e:	f004 bc5b 	b.w	80055e8 <chMtxObjectInit>
 8000d32:	bf00      	nop

08000d34 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 8000d34:	f001 bad6 	b.w	80022e4 <can_lld_init>

08000d38 <canObjectInit>:
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state       = CAN_STOP;
  canp->config      = NULL;
 8000d38:	2300      	movs	r3, #0
void canObjectInit(CANDriver *canp) {
 8000d3a:	b410      	push	{r4}
  osalThreadQueueObjectInit(&canp->txqueue);
 8000d3c:	f100 0108 	add.w	r1, r0, #8
  canp->state       = CAN_STOP;
 8000d40:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->rxqueue);
 8000d42:	f100 0210 	add.w	r2, r0, #16
  canp->state       = CAN_STOP;
 8000d46:	7004      	strb	r4, [r0, #0]
 8000d48:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8000d4c:	e9c0 2204 	strd	r2, r2, [r0, #16]
  canp->config      = NULL;
 8000d50:	6043      	str	r3, [r0, #4]
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
#else /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
  canp->rxfull_cb   = NULL;
  canp->txempty_cb  = NULL;
 8000d52:	e9c0 3306 	strd	r3, r3, [r0, #24]
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
 8000d56:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 8000d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8000d60:	f001 be52 	b.w	8002a08 <i2c_lld_init>

08000d64 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8000d64:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8000d66:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 8000d68:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8000d6a:	6043      	str	r3, [r0, #4]
 8000d6c:	300c      	adds	r0, #12
 8000d6e:	f004 bc3b 	b.w	80055e8 <chMtxObjectInit>
 8000d72:	bf00      	nop

08000d74 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 8000d74:	f003 baf2 	b.w	800435c <icu_lld_init>

08000d78 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8000d78:	2201      	movs	r2, #1
  icup->config = NULL;
 8000d7a:	2300      	movs	r3, #0
  icup->state  = ICU_STOP;
 8000d7c:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 8000d7e:	6043      	str	r3, [r0, #4]
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8000d84:	f003 bbc8 	b.w	8004518 <pwm_lld_init>

08000d88 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8000d88:	2300      	movs	r3, #0
  pwmp->state    = PWM_STOP;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8000d8e:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8000d90:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 8000d92:	7403      	strb	r3, [r0, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <_readt>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000d98:	300c      	adds	r0, #12
 8000d9a:	f7ff be9f 	b.w	8000adc <iqReadTimeout>
 8000d9e:	bf00      	nop

08000da0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000da0:	300c      	adds	r0, #12
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da6:	f7ff be99 	b.w	8000adc <iqReadTimeout>
 8000daa:	bf00      	nop

08000dac <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000dac:	3030      	adds	r0, #48	; 0x30
 8000dae:	f7ff bf4d 	b.w	8000c4c <oqWriteTimeout>
 8000db2:	bf00      	nop

08000db4 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000db4:	3030      	adds	r0, #48	; 0x30
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	f7ff bf47 	b.w	8000c4c <oqWriteTimeout>
 8000dbe:	bf00      	nop

08000dc0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000dc0:	300c      	adds	r0, #12
 8000dc2:	f7ff be61 	b.w	8000a88 <iqGetTimeout>
 8000dc6:	bf00      	nop

08000dc8 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000dc8:	300c      	adds	r0, #12
 8000dca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dce:	f7ff be5b 	b.w	8000a88 <iqGetTimeout>
 8000dd2:	bf00      	nop

08000dd4 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000dd4:	3030      	adds	r0, #48	; 0x30
 8000dd6:	f7ff bef5 	b.w	8000bc4 <oqPutTimeout>
 8000dda:	bf00      	nop

08000ddc <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000ddc:	3030      	adds	r0, #48	; 0x30
 8000dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de2:	f7ff beef 	b.w	8000bc4 <oqPutTimeout>
 8000de6:	bf00      	nop

08000de8 <_ctl>:
 8000de8:	2000      	movs	r0, #0
 8000dea:	4770      	bx	lr

08000dec <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8000dec:	f003 bc7a 	b.w	80046e4 <sd_lld_init>

08000df0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000df0:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <sdObjectInit+0x3c>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000df4:	4604      	mov	r4, r0
 8000df6:	b082      	sub	sp, #8
  sdp->vmt = &vmt;
 8000df8:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000dfc:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000dfe:	9400      	str	r4, [sp, #0]
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000e00:	4615      	mov	r5, r2
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000e02:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000e04:	6060      	str	r0, [r4, #4]
 8000e06:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8000e0a:	f104 000c 	add.w	r0, r4, #12
  sdp->state = SD_STOP;
 8000e0e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000e10:	2210      	movs	r2, #16
 8000e12:	f7ff fe0d 	bl	8000a30 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000e16:	9400      	str	r4, [sp, #0]
 8000e18:	462b      	mov	r3, r5
 8000e1a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000e1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000e22:	2210      	movs	r2, #16
 8000e24:	f7ff fec0 	bl	8000ba8 <oqObjectInit>
}
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	080067e0 	.word	0x080067e0

08000e30 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000e30:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e32:	6943      	ldr	r3, [r0, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000e34:	4604      	mov	r4, r0
 8000e36:	460d      	mov	r5, r1
  if (iqIsEmptyI(&sdp->iqueue))
 8000e38:	b13b      	cbz	r3, 8000e4a <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	f104 000c 	add.w	r0, r4, #12
 8000e40:	f7ff fe06 	bl	8000a50 <iqPutI>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	db0b      	blt.n	8000e60 <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 8000e48:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4408      	add	r0, r1
 8000e4e:	f004 fc7d 	bl	800574c <chEvtBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000e52:	4629      	mov	r1, r5
 8000e54:	f104 000c 	add.w	r0, r4, #12
 8000e58:	f7ff fdfa 	bl	8000a50 <iqPutI>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	daf3      	bge.n	8000e48 <sdIncomingDataI+0x18>
 8000e60:	1d20      	adds	r0, r4, #4
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e6a:	f004 bc6f 	b.w	800574c <chEvtBroadcastFlagsI>
 8000e6e:	bf00      	nop

08000e70 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8000e70:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000e72:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000e74:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	7819      	ldrb	r1, [r3, #0]
 8000e7c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 8000e7e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000e80:	d001      	beq.n	8000e86 <obnotify+0x16>
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
    osalDbgAssert(buf != NULL, "buffer not found");
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8000e82:	b002      	add	sp, #8
 8000e84:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000e86:	7a21      	ldrb	r1, [r4, #8]
 8000e88:	2902      	cmp	r1, #2
 8000e8a:	d1fa      	bne.n	8000e82 <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000e8c:	7911      	ldrb	r1, [r2, #4]
 8000e8e:	891a      	ldrh	r2, [r3, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	408b      	lsls	r3, r1
 8000e94:	4213      	tst	r3, r2
 8000e96:	d1f4      	bne.n	8000e82 <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8000e98:	a901      	add	r1, sp, #4
 8000e9a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8000e9e:	f7ff fccd 	bl	800083c <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000ea2:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 8000ea6:	9b01      	ldr	r3, [sp, #4]
 8000ea8:	7921      	ldrb	r1, [r4, #4]
 8000eaa:	4602      	mov	r2, r0
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f000 fa3b 	bl	8001328 <usbStartTransmitI>
 8000eb2:	e7e6      	b.n	8000e82 <obnotify+0x12>

08000eb4 <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8000eb4:	300c      	adds	r0, #12
 8000eb6:	f7ff bc27 	b.w	8000708 <ibqReadTimeout>
 8000eba:	bf00      	nop

08000ebc <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8000ebc:	300c      	adds	r0, #12
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec2:	f7ff bc21 	b.w	8000708 <ibqReadTimeout>
 8000ec6:	bf00      	nop

08000ec8 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8000ec8:	3044      	adds	r0, #68	; 0x44
 8000eca:	f7ff bd1b 	b.w	8000904 <obqWriteTimeout>
 8000ece:	bf00      	nop

08000ed0 <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8000ed0:	3044      	adds	r0, #68	; 0x44
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	f7ff bd15 	b.w	8000904 <obqWriteTimeout>
 8000eda:	bf00      	nop

08000edc <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8000edc:	300c      	adds	r0, #12
 8000ede:	f7ff bbd7 	b.w	8000690 <ibqGetTimeout>
 8000ee2:	bf00      	nop

08000ee4 <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8000ee4:	300c      	adds	r0, #12
 8000ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eea:	f7ff bbd1 	b.w	8000690 <ibqGetTimeout>
 8000eee:	bf00      	nop

08000ef0 <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8000ef0:	3044      	adds	r0, #68	; 0x44
 8000ef2:	f7ff bcc5 	b.w	8000880 <obqPutTimeout>
 8000ef6:	bf00      	nop

08000ef8 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8000ef8:	3044      	adds	r0, #68	; 0x44
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efe:	f7ff bcbf 	b.w	8000880 <obqPutTimeout>
 8000f02:	bf00      	nop

08000f04 <_ctl>:
 8000f04:	2000      	movs	r0, #0
 8000f06:	4770      	bx	lr

08000f08 <ibnotify>:
static void ibnotify(io_buffers_queue_t *bqp) {
 8000f08:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000f0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000f0c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	7819      	ldrb	r1, [r3, #0]
 8000f14:	2904      	cmp	r1, #4
 8000f16:	d000      	beq.n	8000f1a <ibnotify+0x12>
}
 8000f18:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000f1a:	7a21      	ldrb	r1, [r4, #8]
 8000f1c:	2902      	cmp	r1, #2
 8000f1e:	d1fb      	bne.n	8000f18 <ibnotify+0x10>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000f20:	7911      	ldrb	r1, [r2, #4]
 8000f22:	895a      	ldrh	r2, [r3, #10]
 8000f24:	2301      	movs	r3, #1
 8000f26:	408b      	lsls	r3, r1
 8000f28:	4213      	tst	r3, r2
 8000f2a:	d1f5      	bne.n	8000f18 <ibnotify+0x10>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8000f2c:	f104 000c 	add.w	r0, r4, #12
 8000f30:	f7ff fb8c 	bl	800064c <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d0ef      	beq.n	8000f18 <ibnotify+0x10>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8000f38:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	7959      	ldrb	r1, [r3, #5]
 8000f40:	6818      	ldr	r0, [r3, #0]
}
 8000f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8000f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4a:	f000 b9d9 	b.w	8001300 <usbStartReceiveI>
 8000f4e:	bf00      	nop

08000f50 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}

  sdup->vmt = &vmt;
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <sduObjectInit+0x4c>)
 8000f5a:	f843 2b04 	str.w	r2, [r3], #4
void sduObjectInit(SerialUSBDriver *sdup) {
 8000f5e:	b085      	sub	sp, #20
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000f60:	4f10      	ldr	r7, [pc, #64]	; (8000fa4 <sduObjectInit+0x50>)
 8000f62:	9002      	str	r0, [sp, #8]
  sdup->state = SDU_STOP;
 8000f64:	2501      	movs	r5, #1
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000f66:	2602      	movs	r6, #2
void sduObjectInit(SerialUSBDriver *sdup) {
 8000f68:	4604      	mov	r4, r0
 8000f6a:	6043      	str	r3, [r0, #4]
  sdup->state = SDU_STOP;
 8000f6c:	7205      	strb	r5, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000f6e:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8000f72:	4629      	mov	r1, r5
 8000f74:	300c      	adds	r0, #12
 8000f76:	e9cd 6700 	strd	r6, r7, [sp]
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	f7ff fb41 	bl	8000604 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <sduObjectInit+0x54>)
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	9402      	str	r4, [sp, #8]
 8000f88:	9600      	str	r6, [sp, #0]
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f504 7221 	add.w	r2, r4, #644	; 0x284
 8000f90:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8000f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f98:	f7ff fc28 	bl	80007ec <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	08006808 	.word	0x08006808
 8000fa4:	08000f09 	.word	0x08000f09
 8000fa8:	08000e71 	.word	0x08000e71

08000fac <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8000fac:	680b      	ldr	r3, [r1, #0]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8000fb4:	790a      	ldrb	r2, [r1, #4]
 8000fb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000fba:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8000fbc:	794a      	ldrb	r2, [r1, #5]
 8000fbe:	3209      	adds	r2, #9
 8000fc0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8000fc4:	798a      	ldrb	r2, [r1, #6]
 8000fc6:	b112      	cbz	r2, 8000fce <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 8000fc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fcc:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	7203      	strb	r3, [r0, #8]
  sdup->config = config;
 8000fd2:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 8000fe0:	b538      	push	{r3, r4, r5, lr}

  /* Avoiding events spam.*/
  if(bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8000fe2:	7d03      	ldrb	r3, [r0, #20]
 8000fe4:	b113      	cbz	r3, 8000fec <sduSuspendHookI+0xc>
 8000fe6:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8000fea:	b9b3      	cbnz	r3, 800101a <sduSuspendHookI+0x3a>
 8000fec:	4604      	mov	r4, r0
    return;
  }
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  bqSuspendI(&sdup->ibqueue);
 8000fee:	2501      	movs	r5, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	3004      	adds	r0, #4
 8000ff4:	f004 fbaa 	bl	800574c <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 8000ff8:	f104 000c 	add.w	r0, r4, #12
 8000ffc:	7525      	strb	r5, [r4, #20]
 8000ffe:	f06f 0101 	mvn.w	r1, #1
 8001002:	f004 fa9b 	bl	800553c <chThdDequeueAllI>
  bqSuspendI(&sdup->obqueue);
 8001006:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800100a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800100e:	f06f 0101 	mvn.w	r1, #1
}
 8001012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001016:	f004 ba91 	b.w	800553c <chThdDequeueAllI>
 800101a:	bd38      	pop	{r3, r4, r5, pc}

0800101c <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 800101c:	b510      	push	{r4, lr}
  chEvtBroadcastFlagsI(esp, flags);
 800101e:	2101      	movs	r1, #1
 8001020:	4604      	mov	r4, r0
 8001022:	3004      	adds	r0, #4
 8001024:	f004 fb92 	bl	800574c <chEvtBroadcastFlagsI>

  chnAddFlagsI(sdup, CHN_CONNECTED);
  bqResumeX(&sdup->ibqueue);
 8001028:	2300      	movs	r3, #0
 800102a:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 800102c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop

08001034 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4604      	mov	r4, r0

  ibqResetI(&sdup->ibqueue);
 8001038:	f100 060c 	add.w	r6, r0, #12
 800103c:	4630      	mov	r0, r6
  bqResumeX(&sdup->ibqueue);
 800103e:	2500      	movs	r5, #0
  ibqResetI(&sdup->ibqueue);
 8001040:	f7ff faf8 	bl	8000634 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8001044:	f104 0044 	add.w	r0, r4, #68	; 0x44
  bqResumeX(&sdup->ibqueue);
 8001048:	7525      	strb	r5, [r4, #20]
  obqResetI(&sdup->obqueue);
 800104a:	f7ff fbe7 	bl	800081c <obqResetI>
 800104e:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8001050:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8001054:	1d20      	adds	r0, r4, #4
 8001056:	f004 fb79 	bl	800574c <chEvtBroadcastFlagsI>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800105a:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	7819      	ldrb	r1, [r3, #0]
 8001062:	2904      	cmp	r1, #4
 8001064:	d000      	beq.n	8001068 <sduConfigureHookI+0x34>
  chnAddFlagsI(sdup, CHN_CONNECTED);
  (void) sdu_start_receive(sdup);
}
 8001066:	bd70      	pop	{r4, r5, r6, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001068:	7a21      	ldrb	r1, [r4, #8]
 800106a:	2902      	cmp	r1, #2
 800106c:	d1fb      	bne.n	8001066 <sduConfigureHookI+0x32>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800106e:	7911      	ldrb	r1, [r2, #4]
 8001070:	895a      	ldrh	r2, [r3, #10]
 8001072:	2301      	movs	r3, #1
 8001074:	408b      	lsls	r3, r1
 8001076:	4213      	tst	r3, r2
 8001078:	d1f5      	bne.n	8001066 <sduConfigureHookI+0x32>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800107a:	4630      	mov	r0, r6
 800107c:	f7ff fae6 	bl	800064c <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8001080:	2800      	cmp	r0, #0
 8001082:	d0f0      	beq.n	8001066 <sduConfigureHookI+0x32>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001084:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8001088:	4602      	mov	r2, r0
 800108a:	7959      	ldrb	r1, [r3, #5]
 800108c:	6818      	ldr	r0, [r3, #0]
}
 800108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	f000 b933 	b.w	8001300 <usbStartReceiveI>
 800109a:	bf00      	nop

0800109c <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800109c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80010a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80010a4:	2b20      	cmp	r3, #32
 80010a6:	d001      	beq.n	80010ac <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80010a8:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80010aa:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80010ac:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80010b0:	2b20      	cmp	r3, #32
 80010b2:	d3f9      	bcc.n	80010a8 <sduRequestsHook+0xc>
 80010b4:	2b21      	cmp	r3, #33	; 0x21
 80010b6:	d807      	bhi.n	80010c8 <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <sduRequestsHook+0x3c>)
 80010ba:	6383      	str	r3, [r0, #56]	; 0x38
 80010bc:	2207      	movs	r2, #7
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
      return true;
 80010c4:	2001      	movs	r0, #1
 80010c6:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80010c8:	2b22      	cmp	r3, #34	; 0x22
 80010ca:	d1ed      	bne.n	80010a8 <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 80010d2:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 80010d4:	2001      	movs	r0, #1
 80010d6:	4770      	bx	lr
 80010d8:	20000800 	.word	0x20000800

080010dc <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80010dc:	f8d0 248c 	ldr.w	r2, [r0, #1164]	; 0x48c
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	7819      	ldrb	r1, [r3, #0]
 80010e4:	2904      	cmp	r1, #4
 80010e6:	d000      	beq.n	80010ea <sduSOFHookI+0xe>
 80010e8:	4770      	bx	lr
 80010ea:	7a01      	ldrb	r1, [r0, #8]
 80010ec:	2902      	cmp	r1, #2
 80010ee:	d1fb      	bne.n	80010e8 <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80010f0:	7911      	ldrb	r1, [r2, #4]
 80010f2:	891a      	ldrh	r2, [r3, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	408b      	lsls	r3, r1
 80010f8:	4213      	tst	r3, r2
 80010fa:	d1f5      	bne.n	80010e8 <sduSOFHookI+0xc>
void sduSOFHookI(SerialUSBDriver *sdup) {
 80010fc:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 80010fe:	f100 0544 	add.w	r5, r0, #68	; 0x44
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001102:	b083      	sub	sp, #12
 8001104:	4604      	mov	r4, r0
  if (obqTryFlushI(&sdup->obqueue)) {
 8001106:	4628      	mov	r0, r5
 8001108:	f7ff fc6e 	bl	80009e8 <obqTryFlushI>
 800110c:	b908      	cbnz	r0, 8001112 <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 800110e:	b003      	add	sp, #12
 8001110:	bd30      	pop	{r4, r5, pc}
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001112:	a901      	add	r1, sp, #4
 8001114:	4628      	mov	r0, r5
 8001116:	f7ff fb91 	bl	800083c <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800111a:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	7921      	ldrb	r1, [r4, #4]
 8001122:	4602      	mov	r2, r0
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	f000 f8ff 	bl	8001328 <usbStartTransmitI>
 800112a:	e7f0      	b.n	800110e <sduSOFHookI+0x32>

0800112c <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800112e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001132:	b083      	sub	sp, #12
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001134:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 8001136:	b1ec      	cbz	r4, 8001174 <sduDataTransmitted+0x48>
 8001138:	460e      	mov	r6, r1
 800113a:	4605      	mov	r5, r0
 800113c:	2320      	movs	r3, #32
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8001146:	1d20      	adds	r0, r4, #4
 8001148:	2108      	movs	r1, #8
 800114a:	f004 faff 	bl	800574c <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3444      	adds	r4, #68	; 0x44
 8001156:	b9fb      	cbnz	r3, 8001198 <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001158:	4620      	mov	r0, r4
 800115a:	a901      	add	r1, sp, #4
 800115c:	f7ff fb6e 	bl	800083c <obqGetFullBufferI>

  if (buf != NULL) {
 8001160:	b150      	cbz	r0, 8001178 <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8001162:	4602      	mov	r2, r0
 8001164:	4631      	mov	r1, r6
 8001166:	4628      	mov	r0, r5
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	f000 f8dd 	bl	8001328 <usbStartTransmitI>
 800116e:	2300      	movs	r3, #0
 8001170:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 8001174:	b003      	add	sp, #12
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	2a00      	cmp	r2, #0
 8001180:	d0f5      	beq.n	800116e <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001182:	8a1b      	ldrh	r3, [r3, #16]
 8001184:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001186:	4013      	ands	r3, r2
 8001188:	d1f1      	bne.n	800116e <sduDataTransmitted+0x42>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 800118a:	4631      	mov	r1, r6
 800118c:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8001190:	4628      	mov	r0, r5
 8001192:	f000 f8c9 	bl	8001328 <usbStartTransmitI>
 8001196:	e7ea      	b.n	800116e <sduDataTransmitted+0x42>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fb5d 	bl	8000858 <obqReleaseEmptyBufferI>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800119e:	4620      	mov	r0, r4
 80011a0:	a901      	add	r1, sp, #4
 80011a2:	f7ff fb4b 	bl	800083c <obqGetFullBufferI>
  if (buf != NULL) {
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d1db      	bne.n	8001162 <sduDataTransmitted+0x36>
 80011aa:	e7e5      	b.n	8001178 <sduDataTransmitted+0x4c>

080011ac <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80011ac:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80011ae:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80011b0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 80011b4:	b194      	cbz	r4, 80011dc <sduDataReceived+0x30>
 80011b6:	2320      	movs	r3, #32
 80011b8:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysLockFromISR();

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80011bc:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80011c0:	6811      	ldr	r1, [r2, #0]
 80011c2:	7953      	ldrb	r3, [r2, #5]
 80011c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	685d      	ldr	r5, [r3, #4]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 80011ce:	b9fd      	cbnz	r5, 8001210 <sduDataReceived+0x64>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80011d0:	780b      	ldrb	r3, [r1, #0]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d003      	beq.n	80011de <sduDataReceived+0x32>
 80011d6:	2300      	movs	r3, #0
 80011d8:	f383 8811 	msr	BASEPRI, r3
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);

  osalSysUnlockFromISR();
}
 80011dc:	bd38      	pop	{r3, r4, r5, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80011de:	7a23      	ldrb	r3, [r4, #8]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d1f8      	bne.n	80011d6 <sduDataReceived+0x2a>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80011e4:	7910      	ldrb	r0, [r2, #4]
 80011e6:	894a      	ldrh	r2, [r1, #10]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4083      	lsls	r3, r0
 80011ec:	4213      	tst	r3, r2
 80011ee:	d1f2      	bne.n	80011d6 <sduDataReceived+0x2a>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80011f0:	f104 000c 	add.w	r0, r4, #12
 80011f4:	f7ff fa2a 	bl	800064c <ibqGetEmptyBufferI>
  if (buf == NULL) {
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0ec      	beq.n	80011d6 <sduDataReceived+0x2a>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80011fc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8001200:	4602      	mov	r2, r0
 8001202:	7959      	ldrb	r1, [r3, #5]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	f000 f879 	bl	8001300 <usbStartReceiveI>
 800120e:	e7e2      	b.n	80011d6 <sduDataReceived+0x2a>
 8001210:	2104      	movs	r1, #4
 8001212:	1860      	adds	r0, r4, r1
 8001214:	f004 fa9a 	bl	800574c <chEvtBroadcastFlagsI>
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001218:	4629      	mov	r1, r5
 800121a:	f104 000c 	add.w	r0, r4, #12
 800121e:	f7ff fa21 	bl	8000664 <ibqPostFullBufferI>
 8001222:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001226:	6811      	ldr	r1, [r2, #0]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001228:	780b      	ldrb	r3, [r1, #0]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d1d3      	bne.n	80011d6 <sduDataReceived+0x2a>
 800122e:	e7d6      	b.n	80011de <sduDataReceived+0x32>

08001230 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8001234:	f002 bed4 	b.w	8003fe0 <spi_lld_init>

08001238 <spiObjectInit>:
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001238:	2201      	movs	r2, #1
  spip->config = NULL;
 800123a:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 800123c:	7002      	strb	r2, [r0, #0]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800123e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8001242:	4770      	bx	lr

08001244 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8001244:	b510      	push	{r4, lr}
 8001246:	2320      	movs	r3, #32
 8001248:	4604      	mov	r4, r0
 800124a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800124e:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 8001250:	f002 ff06 	bl	8004060 <spi_lld_start>
  spip->state = SPI_READY;
 8001254:	2302      	movs	r3, #2
 8001256:	7023      	strb	r3, [r4, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800125e:	bd10      	pop	{r4, pc}

08001260 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001260:	f003 bce2 	b.w	8004c28 <uart_lld_init>

08001264 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
 8001264:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 8001266:	2201      	movs	r2, #1
 8001268:	7002      	strb	r2, [r0, #0]
  uartp->txstate    = UART_TX_IDLE;
 800126a:	7043      	strb	r3, [r0, #1]
  uartp->rxstate    = UART_RX_IDLE;
 800126c:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 800126e:	6043      	str	r3, [r0, #4]
#if UART_USE_WAIT == TRUE
  uartp->early      = false;
 8001270:	7203      	strb	r3, [r0, #8]
  uartp->threadrx   = NULL;
  uartp->threadtx   = NULL;
 8001272:	e9c0 3303 	strd	r3, r3, [r0, #12]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8001276:	4770      	bx	lr

08001278 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8001278:	b510      	push	{r4, lr}
 800127a:	2320      	movs	r3, #32
 800127c:	4604      	mov	r4, r0
 800127e:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 8001282:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 8001284:	f003 fcfe 	bl	8004c84 <uart_lld_start>
  uartp->state = UART_READY;
 8001288:	2302      	movs	r3, #2
 800128a:	7023      	strb	r3, [r4, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001292:	bd10      	pop	{r4, pc}

08001294 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8001294:	f002 b932 	b.w	80034fc <usb_lld_init>

08001298 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8001298:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 800129a:	2201      	movs	r2, #1
 800129c:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800129e:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80012a0:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 80012a2:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 80012a4:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 80012a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 80012a8:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 80012aa:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 80012ac:	6083      	str	r3, [r0, #8]
  usbp->receiving    = 0;
}
 80012ae:	4770      	bx	lr

080012b0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	2320      	movs	r3, #32
 80012b6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80012ba:	2500      	movs	r5, #0
  usbp->config = config;
 80012bc:	6041      	str	r1, [r0, #4]
    usbp->epc[i] = NULL;
 80012be:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80012c2:	e9c0 5505 	strd	r5, r5, [r0, #20]
  }
  usb_lld_start(usbp);
 80012c6:	f002 f929 	bl	800351c <usb_lld_start>
  usbp->state = USB_READY;
 80012ca:	2302      	movs	r3, #2
 80012cc:	7023      	strb	r3, [r4, #0]
 80012ce:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 80012d2:	bd38      	pop	{r3, r4, r5, pc}

080012d4 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80012d4:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80012d6:	6953      	ldr	r3, [r2, #20]
  usbp->epc[ep] = epcp;
 80012d8:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80012dc:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 80012de:	b123      	cbz	r3, 80012ea <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80012e0:	2400      	movs	r4, #0
 80012e2:	601c      	str	r4, [r3, #0]
 80012e4:	605c      	str	r4, [r3, #4]
 80012e6:	609c      	str	r4, [r3, #8]
 80012e8:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 80012ea:	6993      	ldr	r3, [r2, #24]
 80012ec:	b123      	cbz	r3, 80012f8 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 80012f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  usb_lld_init_endpoint(usbp, ep);
 80012fc:	f002 bb60 	b.w	80039c0 <usb_lld_init_endpoint>

08001300 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8001300:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8001302:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001306:	8947      	ldrh	r7, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8001308:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800130c:	2401      	movs	r4, #1
  osp = usbp->epc[ep]->out_state;
 800130e:	f8dc 5018 	ldr.w	r5, [ip, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001312:	408c      	lsls	r4, r1
 8001314:	433c      	orrs	r4, r7
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8001316:	2700      	movs	r7, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001318:	8144      	strh	r4, [r0, #10]
  osp->rxbuf  = buf;
 800131a:	60aa      	str	r2, [r5, #8]
  osp->rxcnt  = 0;
 800131c:	e9c5 3700 	strd	r3, r7, [r5]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 8001320:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_out(usbp, ep);
 8001322:	f002 bd19 	b.w	8003d58 <usb_lld_start_out>
 8001326:	bf00      	nop

08001328 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8001328:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800132a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800132e:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001330:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001334:	2401      	movs	r4, #1
  isp = usbp->epc[ep]->in_state;
 8001336:	f8dc 5014 	ldr.w	r5, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800133a:	408c      	lsls	r4, r1
 800133c:	433c      	orrs	r4, r7
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 800133e:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001340:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
 8001342:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
 8001344:	e9c5 3700 	strd	r3, r7, [r5]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8001348:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 800134a:	f002 bd45 	b.w	8003dd8 <usb_lld_start_in>
 800134e:	bf00      	nop

08001350 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8001350:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8001352:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 8001354:	2500      	movs	r5, #0
void _usb_reset(USBDriver *usbp) {
 8001356:	4604      	mov	r4, r0
  usbp->state         = USB_READY;
 8001358:	7003      	strb	r3, [r0, #0]
  usbp->status        = 0;
 800135a:	64c5      	str	r5, [r0, #76]	; 0x4c
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800135c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8001360:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8001364:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 8001366:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800136a:	f002 fa2d 	bl	80037c8 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b123      	cbz	r3, 800137e <_usb_reset+0x2e>
 8001374:	4629      	mov	r1, r5
 8001376:	4620      	mov	r0, r4
}
 8001378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800137c:	4718      	bx	r3
}
 800137e:	bd70      	pop	{r4, r5, r6, pc}

08001380 <_usb_suspend>:
  /* State transition.*/
  usbp->saved_state = usbp->state;
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001380:	6842      	ldr	r2, [r0, #4]
 8001382:	6812      	ldr	r2, [r2, #0]
void _usb_suspend(USBDriver *usbp) {
 8001384:	b410      	push	{r4}
  usbp->state       = USB_SUSPENDED;
 8001386:	2105      	movs	r1, #5
  usbp->saved_state = usbp->state;
 8001388:	7804      	ldrb	r4, [r0, #0]
 800138a:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 800138e:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001390:	b11a      	cbz	r2, 800139a <_usb_suspend+0x1a>
 8001392:	2104      	movs	r1, #4
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 8001394:	f85d 4b04 	ldr.w	r4, [sp], #4
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001398:	4710      	bx	r2
}
 800139a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_usb_wakeup>:

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80013a0:	6842      	ldr	r2, [r0, #4]
  usbp->state = usbp->saved_state;
 80013a2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80013a6:	6812      	ldr	r2, [r2, #0]
  usbp->state = usbp->saved_state;
 80013a8:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80013aa:	b10a      	cbz	r2, 80013b0 <_usb_wakeup+0x10>
 80013ac:	2105      	movs	r1, #5
 80013ae:	4710      	bx	r2
}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80013b4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80013bc:	b113      	cbz	r3, 80013c4 <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 80013be:	2300      	movs	r3, #0
 80013c0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 80013c4:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80013c8:	4620      	mov	r0, r4
 80013ca:	f002 fcbb 	bl	8003d44 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80013ce:	6863      	ldr	r3, [r4, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	b363      	cbz	r3, 800142e <_usb_ep0setup+0x7a>
      !(usbp->config->requests_hook_cb(usbp))) {
 80013d4:	4620      	mov	r0, r4
 80013d6:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 80013d8:	b348      	cbz	r0, 800142e <_usb_ep0setup+0x7a>
 80013da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80013dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 80013e0:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 80013e4:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80013e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80013ec:	428a      	cmp	r2, r1
 80013ee:	bf2c      	ite	cs
 80013f0:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 80013f2:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80013f4:	0619      	lsls	r1, r3, #24
 80013f6:	f100 808a 	bmi.w	800150e <_usb_ep0setup+0x15a>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d05a      	beq.n	80014b4 <_usb_ep0setup+0x100>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 80013fe:	2315      	movs	r3, #21
 8001400:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001404:	2320      	movs	r3, #32
 8001406:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800140a:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800140c:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 800140e:	699b      	ldr	r3, [r3, #24]
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001410:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001414:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8001418:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800141a:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800141c:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 800141e:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001422:	4629      	mov	r1, r5
 8001424:	f002 fc98 	bl	8003d58 <usb_lld_start_out>
 8001428:	f385 8811 	msr	BASEPRI, r5
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800142e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001432:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001436:	4618      	mov	r0, r3
 8001438:	d011      	beq.n	800145e <_usb_ep0setup+0xaa>
      usb_lld_stall_in(usbp, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	4620      	mov	r0, r4
 800143e:	f002 fd29 	bl	8003e94 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	4620      	mov	r0, r4
 8001446:	f002 fd1b 	bl	8003e80 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800144a:	6863      	ldr	r3, [r4, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b113      	cbz	r3, 8001456 <_usb_ep0setup+0xa2>
 8001450:	2106      	movs	r1, #6
 8001452:	4620      	mov	r0, r4
 8001454:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8001456:	2306      	movs	r3, #6
 8001458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800145c:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 800145e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800146a:	f240 3102 	movw	r1, #770	; 0x302
 800146e:	428a      	cmp	r2, r1
 8001470:	f000 80f1 	beq.w	8001656 <_usb_ep0setup+0x2a2>
 8001474:	d835      	bhi.n	80014e2 <_usb_ep0setup+0x12e>
 8001476:	2a02      	cmp	r2, #2
 8001478:	f000 80d6 	beq.w	8001628 <_usb_ep0setup+0x274>
 800147c:	f240 80af 	bls.w	80015de <_usb_ep0setup+0x22a>
 8001480:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001484:	f000 80b3 	beq.w	80015ee <_usb_ep0setup+0x23a>
 8001488:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800148c:	f000 8087 	beq.w	800159e <_usb_ep0setup+0x1ea>
 8001490:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001494:	d1d1      	bne.n	800143a <_usb_ep0setup+0x86>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001496:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800149a:	2b01      	cmp	r3, #1
 800149c:	d1cd      	bne.n	800143a <_usb_ep0setup+0x86>
      usbp->status &= ~2U;
 800149e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80014a2:	63a5      	str	r5, [r4, #56]	; 0x38
 80014a4:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80014b0:	0603      	lsls	r3, r0, #24
 80014b2:	d445      	bmi.n	8001540 <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80014b4:	230b      	movs	r3, #11
 80014b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80014ba:	2320      	movs	r3, #32
 80014bc:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80014c0:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80014c2:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80014c4:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 80014c6:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80014ce:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 80014d0:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 80014d2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 80014d6:	4629      	mov	r1, r5
 80014d8:	f002 fc7e 	bl	8003dd8 <usb_lld_start_in>
 80014dc:	f385 8811 	msr	BASEPRI, r5
}
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80014e2:	f240 6101 	movw	r1, #1537	; 0x601
 80014e6:	428a      	cmp	r2, r1
 80014e8:	d968      	bls.n	80015bc <_usb_ep0setup+0x208>
 80014ea:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 80014ee:	d03e      	beq.n	800156e <_usb_ep0setup+0x1ba>
 80014f0:	f640 4102 	movw	r1, #3074	; 0xc02
 80014f4:	428a      	cmp	r2, r1
 80014f6:	f000 8090 	beq.w	800161a <_usb_ep0setup+0x266>
 80014fa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80014fe:	d19c      	bne.n	800143a <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001500:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8001504:	2101      	movs	r1, #1
 8001506:	6425      	str	r5, [r4, #64]	; 0x40
 8001508:	e9c4 210e 	strd	r2, r1, [r4, #56]	; 0x38
 800150c:	e768      	b.n	80013e0 <_usb_ep0setup+0x2c>
    if (usbp->ep0n != 0U) {
 800150e:	b1ba      	cbz	r2, 8001540 <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_TX;
 8001510:	2309      	movs	r3, #9
 8001512:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001516:	2320      	movs	r3, #32
 8001518:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 800151c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800151e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001520:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001522:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001526:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 800152a:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800152c:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800152e:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001530:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8001534:	4629      	mov	r1, r5
 8001536:	f002 fc4f 	bl	8003dd8 <usb_lld_start_in>
 800153a:	f385 8811 	msr	BASEPRI, r5
}
 800153e:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001540:	2314      	movs	r3, #20
 8001542:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001546:	2320      	movs	r3, #32
 8001548:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800154c:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800154e:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001550:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001552:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800155a:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 800155c:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 800155e:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8001562:	4629      	mov	r1, r5
 8001564:	f002 fbf8 	bl	8003d58 <usb_lld_start_out>
 8001568:	f385 8811 	msr	BASEPRI, r5
}
 800156c:	bd70      	pop	{r4, r5, r6, pc}
      if (usbp->state == USB_ACTIVE) {
 800156e:	7823      	ldrb	r3, [r4, #0]
 8001570:	2b04      	cmp	r3, #4
 8001572:	f000 80b3 	beq.w	80016dc <_usb_ep0setup+0x328>
      if (usbp->setup[2] != 0U) {
 8001576:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800157a:	b14b      	cbz	r3, 8001590 <_usb_ep0setup+0x1dc>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800157c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 800157e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001582:	6813      	ldr	r3, [r2, #0]
        usbp->state = USB_ACTIVE;
 8001584:	2204      	movs	r2, #4
 8001586:	7022      	strb	r2, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001588:	b113      	cbz	r3, 8001590 <_usb_ep0setup+0x1dc>
 800158a:	2102      	movs	r1, #2
 800158c:	4620      	mov	r0, r4
 800158e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001590:	2300      	movs	r3, #0
 8001592:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001596:	6423      	str	r3, [r4, #64]	; 0x40
 8001598:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800159c:	e788      	b.n	80014b0 <_usb_ep0setup+0xfc>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800159e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f47f af49 	bne.w	800143a <_usb_ep0setup+0x86>
      usbp->status |= 2U;
 80015a8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80015ac:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status |= 2U;
 80015ae:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80015b2:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 80015b6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80015ba:	e779      	b.n	80014b0 <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80015bc:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80015c0:	d25b      	bcs.n	800167a <_usb_ep0setup+0x2c6>
 80015c2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80015c6:	f47f af38 	bne.w	800143a <_usb_ep0setup+0x86>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80015ca:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80015ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015d2:	d071      	beq.n	80016b8 <_usb_ep0setup+0x304>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80015d4:	2300      	movs	r3, #0
 80015d6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80015da:	6423      	str	r3, [r4, #64]	; 0x40
 80015dc:	e768      	b.n	80014b0 <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80015de:	b9ca      	cbnz	r2, 8001614 <_usb_ep0setup+0x260>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80015e0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80015e4:	2102      	movs	r1, #2
 80015e6:	6422      	str	r2, [r4, #64]	; 0x40
 80015e8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 80015ec:	e6f8      	b.n	80013e0 <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80015ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f af21 	bne.w	800143a <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80015f8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80015fc:	f013 010f 	ands.w	r1, r3, #15
 8001600:	d0e8      	beq.n	80015d4 <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001602:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8001604:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001606:	f100 8088 	bmi.w	800171a <_usb_ep0setup+0x366>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800160a:	f002 fc4d 	bl	8003ea8 <usb_lld_clear_out>
 800160e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001612:	e7df      	b.n	80015d4 <_usb_ep0setup+0x220>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001614:	2a01      	cmp	r2, #1
 8001616:	f47f af10 	bne.w	800143a <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800161a:	4a45      	ldr	r2, [pc, #276]	; (8001730 <_usb_ep0setup+0x37c>)
 800161c:	63a2      	str	r2, [r4, #56]	; 0x38
 800161e:	2102      	movs	r1, #2
 8001620:	2200      	movs	r2, #0
 8001622:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 8001626:	e6db      	b.n	80013e0 <_usb_ep0setup+0x2c>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001628:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800162c:	f003 010f 	and.w	r1, r3, #15
 8001630:	061b      	lsls	r3, r3, #24
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8001632:	4620      	mov	r0, r4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001634:	d43a      	bmi.n	80016ac <_usb_ep0setup+0x2f8>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 8001636:	f002 fb69 	bl	8003d0c <usb_lld_get_status_out>
 800163a:	2801      	cmp	r0, #1
 800163c:	d03a      	beq.n	80016b4 <_usb_ep0setup+0x300>
 800163e:	2802      	cmp	r0, #2
 8001640:	f47f aefb 	bne.w	800143a <_usb_ep0setup+0x86>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001644:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <_usb_ep0setup+0x380>)
 8001646:	63a3      	str	r3, [r4, #56]	; 0x38
 8001648:	2102      	movs	r1, #2
 800164a:	2300      	movs	r3, #0
 800164c:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
 8001650:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001654:	e6c4      	b.n	80013e0 <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001656:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800165a:	2b00      	cmp	r3, #0
 800165c:	f47f aeed 	bne.w	800143a <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001660:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001664:	f013 010f 	ands.w	r1, r3, #15
 8001668:	d0b4      	beq.n	80015d4 <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800166a:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800166c:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800166e:	d459      	bmi.n	8001724 <_usb_ep0setup+0x370>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8001670:	f002 fc06 	bl	8003e80 <usb_lld_stall_out>
 8001674:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001678:	e7ac      	b.n	80015d4 <_usb_ep0setup+0x220>
  hw |= (uint16_t)*p << 8U;
 800167a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800167e:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8001680:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001684:	684e      	ldr	r6, [r1, #4]
 8001686:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800168a:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800168e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001692:	4620      	mov	r0, r4
 8001694:	47b0      	blx	r6
    if (dp == NULL) {
 8001696:	2800      	cmp	r0, #0
 8001698:	f43f aecf 	beq.w	800143a <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800169c:	e9d0 1300 	ldrd	r1, r3, [r0]
 80016a0:	6425      	str	r5, [r4, #64]	; 0x40
 80016a2:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
 80016a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80016aa:	e699      	b.n	80013e0 <_usb_ep0setup+0x2c>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80016ac:	f002 fb3c 	bl	8003d28 <usb_lld_get_status_in>
 80016b0:	2801      	cmp	r0, #1
 80016b2:	d1c4      	bne.n	800163e <_usb_ep0setup+0x28a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <_usb_ep0setup+0x384>)
 80016b6:	e7c6      	b.n	8001646 <_usb_ep0setup+0x292>
  usbp->address = usbp->setup[2];
 80016b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80016bc:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f002 f971 	bl	80039a8 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80016c6:	6863      	ldr	r3, [r4, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b113      	cbz	r3, 80016d2 <_usb_ep0setup+0x31e>
 80016cc:	2101      	movs	r1, #1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80016d8:	7023      	strb	r3, [r4, #0]
 80016da:	e77b      	b.n	80015d4 <_usb_ep0setup+0x220>
 80016dc:	2320      	movs	r3, #32
 80016de:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting &= 1U;
 80016e2:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80016e4:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 80016e6:	6125      	str	r5, [r4, #16]
  usbp->transmitting &= 1U;
 80016e8:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 80016ec:	f003 0301 	and.w	r3, r3, #1
    usbp->epc[i] = NULL;
 80016f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
  usbp->transmitting &= 1U;
 80016f4:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80016f6:	8163      	strh	r3, [r4, #10]
  usb_lld_disable_endpoints(usbp);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f002 fa13 	bl	8003b24 <usb_lld_disable_endpoints>
 80016fe:	f385 8811 	msr	BASEPRI, r5
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001702:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8001704:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001708:	681b      	ldr	r3, [r3, #0]
        usbp->state = USB_SELECTED;
 800170a:	2103      	movs	r1, #3
 800170c:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 800170e:	2b00      	cmp	r3, #0
 8001710:	f43f af31 	beq.w	8001576 <_usb_ep0setup+0x1c2>
 8001714:	4620      	mov	r0, r4
 8001716:	4798      	blx	r3
 8001718:	e72d      	b.n	8001576 <_usb_ep0setup+0x1c2>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800171a:	f002 fbcf 	bl	8003ebc <usb_lld_clear_in>
 800171e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001722:	e757      	b.n	80015d4 <_usb_ep0setup+0x220>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8001724:	f002 fbb6 	bl	8003e94 <usb_lld_stall_in>
 8001728:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800172c:	e752      	b.n	80015d4 <_usb_ep0setup+0x220>
 800172e:	bf00      	nop
 8001730:	08006838 	.word	0x08006838
 8001734:	08006830 	.word	0x08006830
 8001738:	08006834 	.word	0x08006834

0800173c <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800173c:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800173e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001742:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8001744:	2b15      	cmp	r3, #21
 8001746:	d81c      	bhi.n	8001782 <_usb_ep0in+0x46>
 8001748:	e8df f003 	tbb	[pc, r3]
 800174c:	1b1b1b0b 	.word	0x1b1b1b0b
 8001750:	1b0b1b1b 	.word	0x1b0b1b1b
 8001754:	432c1c1b 	.word	0x432c1c1b
 8001758:	1b1b1b1b 	.word	0x1b1b1b1b
 800175c:	1b1b1b1b 	.word	0x1b1b1b1b
 8001760:	0b0b      	.short	0x0b0b
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8001762:	2100      	movs	r1, #0
 8001764:	f002 fb96 	bl	8003e94 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	4620      	mov	r0, r4
 800176c:	f002 fb88 	bl	8003e80 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001770:	6863      	ldr	r3, [r4, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b113      	cbz	r3, 800177c <_usb_ep0in+0x40>
 8001776:	2106      	movs	r1, #6
 8001778:	4620      	mov	r0, r4
 800177a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800177c:	2306      	movs	r3, #6
 800177e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8001782:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001784:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8001788:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800178c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 800178e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8001792:	429a      	cmp	r2, r3
 8001794:	d206      	bcs.n	80017a4 <_usb_ep0in+0x68>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001796:	68c3      	ldr	r3, [r0, #12]
 8001798:	8a1b      	ldrh	r3, [r3, #16]
 800179a:	fbb2 f5f3 	udiv	r5, r2, r3
 800179e:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 80017a2:	b1ed      	cbz	r5, 80017e0 <_usb_ep0in+0xa4>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80017a4:	2314      	movs	r3, #20
 80017a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80017aa:	2320      	movs	r3, #32
 80017ac:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 80017b0:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017b2:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80017b4:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 80017b6:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80017be:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 80017c0:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80017c2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80017c6:	4629      	mov	r1, r5
 80017c8:	f002 fac6 	bl	8003d58 <usb_lld_start_out>
 80017cc:	f385 8811 	msr	BASEPRI, r5
}
 80017d0:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 80017d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017d4:	b103      	cbz	r3, 80017d8 <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 80017d6:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 80017d8:	2300      	movs	r3, #0
 80017da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80017de:	bd38      	pop	{r3, r4, r5, pc}
 80017e0:	2320      	movs	r3, #32
 80017e2:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80017e6:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017e8:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80017ea:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80017f2:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 80017f4:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 80017f6:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 80017fa:	f002 faed 	bl	8003dd8 <usb_lld_start_in>
 80017fe:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001802:	230a      	movs	r3, #10
 8001804:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop

0800180c <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800180c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8001810:	2a15      	cmp	r2, #21
 8001812:	d815      	bhi.n	8001840 <_usb_ep0out+0x34>
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	2301      	movs	r3, #1
 8001818:	4093      	lsls	r3, r2
 800181a:	f640 6241 	movw	r2, #3649	; 0xe41
 800181e:	4213      	tst	r3, r2
 8001820:	4604      	mov	r4, r0
 8001822:	d125      	bne.n	8001870 <_usb_ep0out+0x64>
 8001824:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8001828:	d00b      	beq.n	8001842 <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800182a:	68c3      	ldr	r3, [r0, #12]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	b92b      	cbnz	r3, 800183e <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001832:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001834:	b103      	cbz	r3, 8001838 <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 8001836:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001838:	2300      	movs	r3, #0
 800183a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	4770      	bx	lr
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	d5fb      	bpl.n	800183e <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001846:	230b      	movs	r3, #11
 8001848:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800184c:	2320      	movs	r3, #32
 800184e:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001852:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001854:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001856:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800185e:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8001860:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001862:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001866:	f002 fab7 	bl	8003dd8 <usb_lld_start_in>
 800186a:	f385 8811 	msr	BASEPRI, r5
}
 800186e:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_stall_in(usbp, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	f002 fb0f 	bl	8003e94 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8001876:	2100      	movs	r1, #0
 8001878:	4620      	mov	r0, r4
 800187a:	f002 fb01 	bl	8003e80 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b113      	cbz	r3, 800188a <_usb_ep0out+0x7e>
 8001884:	2106      	movs	r1, #6
 8001886:	4620      	mov	r0, r4
 8001888:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800188a:	2306      	movs	r3, #6
 800188c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001890:	bd38      	pop	{r3, r4, r5, pc}
 8001892:	bf00      	nop

08001894 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001894:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001896:	b410      	push	{r4}
 8001898:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800189a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800189e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80018a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80018a6:	0109      	lsls	r1, r1, #4
 80018a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018ac:	f000 001f 	and.w	r0, r0, #31
 80018b0:	2201      	movs	r2, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018b2:	b2c9      	uxtb	r1, r1
 80018b4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018b8:	fa02 f000 	lsl.w	r0, r2, r0
 80018bc:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
}
 80018c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018c4:	6018      	str	r0, [r3, #0]
}
 80018c6:	4770      	bx	lr

080018c8 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80018c8:	4908      	ldr	r1, [pc, #32]	; (80018ec <nvicDisableVector+0x24>)
 80018ca:	0943      	lsrs	r3, r0, #5
void nvicDisableVector(uint32_t n) {
 80018cc:	b410      	push	{r4}
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80018ce:	3320      	adds	r3, #32
 80018d0:	f000 041f 	and.w	r4, r0, #31
 80018d4:	2201      	movs	r2, #1
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80018d6:	4408      	add	r0, r1
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80018d8:	40a2      	lsls	r2, r4
  NVIC->IP[n] = 0U;
 80018da:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n] = 0U;
 80018e0:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
#endif
}
 80018e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
 80018f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80018f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	400b      	ands	r3, r1
 80018fa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80018fe:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 8001900:	b173      	cbz	r3, 8001920 <Vector58+0x30>
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <Vector58+0x3c>)
 8001904:	6893      	ldr	r3, [r2, #8]
 8001906:	b10b      	cbz	r3, 800190c <Vector58+0x1c>
 8001908:	68d0      	ldr	r0, [r2, #12]
 800190a:	4798      	blx	r3
 800190c:	2320      	movs	r3, #32
 800190e:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8001912:	2100      	movs	r1, #0
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <Vector58+0x3c>)
 8001916:	f003 fe11 	bl	800553c <chThdDequeueAllI>
 800191a:	2300      	movs	r3, #0
 800191c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001924:	f004 b83c 	b.w	80059a0 <_port_irq_epilogue>
 8001928:	40013c00 	.word	0x40013c00
 800192c:	20000960 	.word	0x20000960

08001930 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
 8001932:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001934:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	400b      	ands	r3, r1
 800193a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800193e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8001940:	b173      	cbz	r3, 8001960 <Vector5C+0x30>
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <Vector5C+0x3c>)
 8001944:	6993      	ldr	r3, [r2, #24]
 8001946:	b10b      	cbz	r3, 800194c <Vector5C+0x1c>
 8001948:	69d0      	ldr	r0, [r2, #28]
 800194a:	4798      	blx	r3
 800194c:	2320      	movs	r3, #32
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	2100      	movs	r1, #0
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <Vector5C+0x40>)
 8001956:	f003 fdf1 	bl	800553c <chThdDequeueAllI>
 800195a:	2300      	movs	r3, #0
 800195c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001964:	f004 b81c 	b.w	80059a0 <_port_irq_epilogue>
 8001968:	40013c00 	.word	0x40013c00
 800196c:	20000960 	.word	0x20000960
 8001970:	20000970 	.word	0x20000970

08001974 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
 8001976:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001978:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	400b      	ands	r3, r1
 800197e:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8001982:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8001984:	b173      	cbz	r3, 80019a4 <Vector60+0x30>
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <Vector60+0x3c>)
 8001988:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800198a:	b10b      	cbz	r3, 8001990 <Vector60+0x1c>
 800198c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800198e:	4798      	blx	r3
 8001990:	2320      	movs	r3, #32
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	2100      	movs	r1, #0
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <Vector60+0x40>)
 800199a:	f003 fdcf 	bl	800553c <chThdDequeueAllI>
 800199e:	2300      	movs	r3, #0
 80019a0:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80019a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80019a8:	f003 bffa 	b.w	80059a0 <_port_irq_epilogue>
 80019ac:	40013c00 	.word	0x40013c00
 80019b0:	20000960 	.word	0x20000960
 80019b4:	20000980 	.word	0x20000980

080019b8 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
 80019ba:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80019bc:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	400b      	ands	r3, r1
 80019c2:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 80019c6:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 80019c8:	b173      	cbz	r3, 80019e8 <Vector64+0x30>
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <Vector64+0x3c>)
 80019cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80019ce:	b10b      	cbz	r3, 80019d4 <Vector64+0x1c>
 80019d0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80019d2:	4798      	blx	r3
 80019d4:	2320      	movs	r3, #32
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <Vector64+0x40>)
 80019de:	f003 fdad 	bl	800553c <chThdDequeueAllI>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80019e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80019ec:	f003 bfd8 	b.w	80059a0 <_port_irq_epilogue>
 80019f0:	40013c00 	.word	0x40013c00
 80019f4:	20000960 	.word	0x20000960
 80019f8:	20000990 	.word	0x20000990

080019fc <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
 80019fe:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001a00:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	400b      	ands	r3, r1
 8001a06:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8001a0a:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8001a0c:	b173      	cbz	r3, 8001a2c <Vector68+0x30>
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <Vector68+0x3c>)
 8001a10:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8001a12:	b10b      	cbz	r3, 8001a18 <Vector68+0x1c>
 8001a14:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001a16:	4798      	blx	r3
 8001a18:	2320      	movs	r3, #32
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <Vector68+0x40>)
 8001a22:	f003 fd8b 	bl	800553c <chThdDequeueAllI>
 8001a26:	2300      	movs	r3, #0
 8001a28:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001a30:	f003 bfb6 	b.w	80059a0 <_port_irq_epilogue>
 8001a34:	40013c00 	.word	0x40013c00
 8001a38:	20000960 	.word	0x20000960
 8001a3c:	200009a0 	.word	0x200009a0

08001a40 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <Vector9C+0xcc>)
OSAL_IRQ_HANDLER(Vector9C) {
 8001a42:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8001a44:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	4014      	ands	r4, r2
 8001a4a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 8001a4e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 5);
 8001a50:	06a3      	lsls	r3, r4, #26
 8001a52:	d50e      	bpl.n	8001a72 <Vector9C+0x32>
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <Vector9C+0xd0>)
 8001a56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a58:	b10b      	cbz	r3, 8001a5e <Vector9C+0x1e>
 8001a5a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8001a5c:	4798      	blx	r3
 8001a5e:	2320      	movs	r3, #32
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	2100      	movs	r1, #0
 8001a66:	482b      	ldr	r0, [pc, #172]	; (8001b14 <Vector9C+0xd4>)
 8001a68:	f003 fd68 	bl	800553c <chThdDequeueAllI>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8001a72:	0660      	lsls	r0, r4, #25
 8001a74:	d50e      	bpl.n	8001a94 <Vector9C+0x54>
 8001a76:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <Vector9C+0xd0>)
 8001a78:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8001a7a:	b10b      	cbz	r3, 8001a80 <Vector9C+0x40>
 8001a7c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001a7e:	4798      	blx	r3
 8001a80:	2320      	movs	r3, #32
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	2100      	movs	r1, #0
 8001a88:	4823      	ldr	r0, [pc, #140]	; (8001b18 <Vector9C+0xd8>)
 8001a8a:	f003 fd57 	bl	800553c <chThdDequeueAllI>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8001a94:	0621      	lsls	r1, r4, #24
 8001a96:	d50e      	bpl.n	8001ab6 <Vector9C+0x76>
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <Vector9C+0xd0>)
 8001a9a:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8001a9c:	b10b      	cbz	r3, 8001aa2 <Vector9C+0x62>
 8001a9e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8001aa0:	4798      	blx	r3
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <Vector9C+0xdc>)
 8001aac:	f003 fd46 	bl	800553c <chThdDequeueAllI>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8001ab6:	05e2      	lsls	r2, r4, #23
 8001ab8:	d510      	bpl.n	8001adc <Vector9C+0x9c>
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <Vector9C+0xd0>)
 8001abc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ac0:	b113      	cbz	r3, 8001ac8 <Vector9C+0x88>
 8001ac2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001ac6:	4798      	blx	r3
 8001ac8:	2320      	movs	r3, #32
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4813      	ldr	r0, [pc, #76]	; (8001b20 <Vector9C+0xe0>)
 8001ad2:	f003 fd33 	bl	800553c <chThdDequeueAllI>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8001adc:	05a3      	lsls	r3, r4, #22
 8001ade:	d510      	bpl.n	8001b02 <Vector9C+0xc2>
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <Vector9C+0xd0>)
 8001ae2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001ae6:	b113      	cbz	r3, 8001aee <Vector9C+0xae>
 8001ae8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 8001aec:	4798      	blx	r3
 8001aee:	2320      	movs	r3, #32
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	480b      	ldr	r0, [pc, #44]	; (8001b24 <Vector9C+0xe4>)
 8001af8:	f003 fd20 	bl	800553c <chThdDequeueAllI>
 8001afc:	2300      	movs	r3, #0
 8001afe:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b06:	f003 bf4b 	b.w	80059a0 <_port_irq_epilogue>
 8001b0a:	bf00      	nop
 8001b0c:	40013c00 	.word	0x40013c00
 8001b10:	20000960 	.word	0x20000960
 8001b14:	200009b0 	.word	0x200009b0
 8001b18:	200009c0 	.word	0x200009c0
 8001b1c:	200009d0 	.word	0x200009d0
 8001b20:	200009e0 	.word	0x200009e0
 8001b24:	200009f0 	.word	0x200009f0

08001b28 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <VectorE0+0xfc>)
OSAL_IRQ_HANDLER(VectorE0) {
 8001b2a:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8001b2c:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	4014      	ands	r4, r2
 8001b32:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8001b36:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8001b38:	0562      	lsls	r2, r4, #21
 8001b3a:	d510      	bpl.n	8001b5e <VectorE0+0x36>
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <VectorE0+0x100>)
 8001b3e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8001b42:	b113      	cbz	r3, 8001b4a <VectorE0+0x22>
 8001b44:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8001b48:	4798      	blx	r3
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	f383 8811 	msr	BASEPRI, r3
 8001b50:	2100      	movs	r1, #0
 8001b52:	4836      	ldr	r0, [pc, #216]	; (8001c2c <VectorE0+0x104>)
 8001b54:	f003 fcf2 	bl	800553c <chThdDequeueAllI>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 8001b5e:	0523      	lsls	r3, r4, #20
 8001b60:	d510      	bpl.n	8001b84 <VectorE0+0x5c>
 8001b62:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <VectorE0+0x100>)
 8001b64:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 8001b68:	b113      	cbz	r3, 8001b70 <VectorE0+0x48>
 8001b6a:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 8001b6e:	4798      	blx	r3
 8001b70:	2320      	movs	r3, #32
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	482d      	ldr	r0, [pc, #180]	; (8001c30 <VectorE0+0x108>)
 8001b7a:	f003 fcdf 	bl	800553c <chThdDequeueAllI>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 8001b84:	04e0      	lsls	r0, r4, #19
 8001b86:	d510      	bpl.n	8001baa <VectorE0+0x82>
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <VectorE0+0x100>)
 8001b8a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8001b8e:	b113      	cbz	r3, 8001b96 <VectorE0+0x6e>
 8001b90:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 8001b94:	4798      	blx	r3
 8001b96:	2320      	movs	r3, #32
 8001b98:	f383 8811 	msr	BASEPRI, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <VectorE0+0x10c>)
 8001ba0:	f003 fccc 	bl	800553c <chThdDequeueAllI>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 8001baa:	04a1      	lsls	r1, r4, #18
 8001bac:	d510      	bpl.n	8001bd0 <VectorE0+0xa8>
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <VectorE0+0x100>)
 8001bb0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 8001bb4:	b113      	cbz	r3, 8001bbc <VectorE0+0x94>
 8001bb6:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8001bba:	4798      	blx	r3
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	481c      	ldr	r0, [pc, #112]	; (8001c38 <VectorE0+0x110>)
 8001bc6:	f003 fcb9 	bl	800553c <chThdDequeueAllI>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8001bd0:	0462      	lsls	r2, r4, #17
 8001bd2:	d510      	bpl.n	8001bf6 <VectorE0+0xce>
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <VectorE0+0x100>)
 8001bd6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001bda:	b113      	cbz	r3, 8001be2 <VectorE0+0xba>
 8001bdc:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8001be0:	4798      	blx	r3
 8001be2:	2320      	movs	r3, #32
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <VectorE0+0x114>)
 8001bec:	f003 fca6 	bl	800553c <chThdDequeueAllI>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 8001bf6:	0423      	lsls	r3, r4, #16
 8001bf8:	d510      	bpl.n	8001c1c <VectorE0+0xf4>
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <VectorE0+0x100>)
 8001bfc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8001c00:	b113      	cbz	r3, 8001c08 <VectorE0+0xe0>
 8001c02:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
 8001c06:	4798      	blx	r3
 8001c08:	2320      	movs	r3, #32
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <VectorE0+0x118>)
 8001c12:	f003 fc93 	bl	800553c <chThdDequeueAllI>
 8001c16:	2300      	movs	r3, #0
 8001c18:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c20:	f003 bebe 	b.w	80059a0 <_port_irq_epilogue>
 8001c24:	40013c00 	.word	0x40013c00
 8001c28:	20000960 	.word	0x20000960
 8001c2c:	20000a00 	.word	0x20000a00
 8001c30:	20000a10 	.word	0x20000a10
 8001c34:	20000a20 	.word	0x20000a20
 8001c38:	20000a30 	.word	0x20000a30
 8001c3c:	20000a40 	.word	0x20000a40
 8001c40:	20000a50 	.word	0x20000a50

08001c44 <irqInit>:
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001c44:	2106      	movs	r1, #6
void irqInit(void) {
 8001c46:	b508      	push	{r3, lr}
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001c48:	4608      	mov	r0, r1
 8001c4a:	f7ff fe23 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8001c4e:	2106      	movs	r1, #6
 8001c50:	2007      	movs	r0, #7
 8001c52:	f7ff fe1f 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8001c56:	2106      	movs	r1, #6
 8001c58:	2008      	movs	r0, #8
 8001c5a:	f7ff fe1b 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8001c5e:	2106      	movs	r1, #6
 8001c60:	2009      	movs	r0, #9
 8001c62:	f7ff fe17 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8001c66:	2106      	movs	r1, #6
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7ff fe13 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8001c6e:	2106      	movs	r1, #6
 8001c70:	2017      	movs	r0, #23
 8001c72:	f7ff fe0f 	bl	8001894 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001c76:	2106      	movs	r1, #6
 8001c78:	2028      	movs	r0, #40	; 0x28
#endif
}
 8001c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001c7e:	f7ff be09 	b.w	8001894 <nvicEnableVector>
 8001c82:	bf00      	nop

08001c84 <hal_lld_init>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <hal_lld_init+0x8c>)
  PWR->CR |= PWR_CR_DBP;
 8001c86:	4823      	ldr	r0, [pc, #140]	; (8001d14 <hal_lld_init+0x90>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8001c8e:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
void hal_lld_init(void) {
 8001c92:	b510      	push	{r4, lr}
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c9c:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8001c9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001ca2:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	615c      	str	r4, [r3, #20]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	6159      	str	r1, [r3, #20]
 8001cae:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8001cb6:	621a      	str	r2, [r3, #32]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001cbe:	621a      	str	r2, [r3, #32]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	625c      	str	r4, [r3, #36]	; 0x24
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc8:	6259      	str	r1, [r3, #36]	; 0x24
 8001cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cda:	661a      	str	r2, [r3, #96]	; 0x60
 8001cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001cde:	6802      	ldr	r2, [r0, #0]
 8001ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce4:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ce8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001cf0:	d003      	beq.n	8001cfa <hal_lld_init+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf6:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001cf8:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <hal_lld_init+0x90>)
 8001cfc:	6853      	ldr	r3, [r2, #4]
 8001cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d02:	6053      	str	r3, [r2, #4]
  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001d04:	f000 fcca 	bl	800269c <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  irqInit();
 8001d0c:	f7ff bf9a 	b.w	8001c44 <irqInit>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <stm32_clock_init+0xd0>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <stm32_clock_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001d1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8001d20:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001d24:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001d26:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	0792      	lsls	r2, r2, #30
 8001d34:	d5fc      	bpl.n	8001d30 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001d36:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <stm32_clock_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001d3a:	f021 0103 	bic.w	r1, r1, #3
 8001d3e:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001d40:	6893      	ldr	r3, [r2, #8]
 8001d42:	f013 030c 	ands.w	r3, r3, #12
 8001d46:	d1fb      	bne.n	8001d40 <stm32_clock_init+0x28>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001d48:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <stm32_clock_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001d4c:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001d50:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001d52:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001d5c:	680b      	ldr	r3, [r1, #0]
 8001d5e:	0398      	lsls	r0, r3, #14
 8001d60:	d5fc      	bpl.n	8001d5c <stm32_clock_init+0x44>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001d62:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <stm32_clock_init+0xd0>)
  RCC->CSR |= RCC_CSR_LSION;
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001d6c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001d6e:	0799      	lsls	r1, r3, #30
 8001d70:	d5fc      	bpl.n	8001d6c <stm32_clock_init+0x54>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <stm32_clock_init+0xd8>)
 8001d74:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001d76:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001d78:	491c      	ldr	r1, [pc, #112]	; (8001dec <stm32_clock_init+0xd4>)
  RCC->CR |= RCC_CR_PLLON;
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001d80:	684b      	ldr	r3, [r1, #4]
 8001d82:	045a      	lsls	r2, r3, #17
 8001d84:	d5fc      	bpl.n	8001d80 <stm32_clock_init+0x68>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <stm32_clock_init+0xd0>)
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	d5fc      	bpl.n	8001d88 <stm32_clock_init+0x70>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001d8e:	4919      	ldr	r1, [pc, #100]	; (8001df4 <stm32_clock_init+0xdc>)
 8001d90:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <stm32_clock_init+0xe0>)
    RCC->DCKCFGR = dckcfgr |
 8001d94:	2103      	movs	r1, #3
 8001d96:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <stm32_clock_init+0xe4>)
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d017      	beq.n	8001dd2 <stm32_clock_init+0xba>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <stm32_clock_init+0xe8>)
 8001da4:	f240 7205 	movw	r2, #1797	; 0x705
 8001da8:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <stm32_clock_init+0xd0>)
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001db4:	6893      	ldr	r3, [r2, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d1fa      	bne.n	8001db4 <stm32_clock_init+0x9c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001dbe:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6653      	str	r3, [r2, #100]	; 0x64
 8001dce:	6e53      	ldr	r3, [r2, #100]	; 0x64
}
 8001dd0:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <stm32_clock_init+0xec>)
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <stm32_clock_init+0xf0>)
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1e2      	bne.n	8001da2 <stm32_clock_init+0x8a>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <stm32_clock_init+0xe8>)
 8001dde:	f240 1205 	movw	r2, #261	; 0x105
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e7e1      	b.n	8001daa <stm32_clock_init+0x92>
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000
 8001df0:	0740540c 	.word	0x0740540c
 8001df4:	38889400 	.word	0x38889400
 8001df8:	e0042000 	.word	0xe0042000
 8001dfc:	20006411 	.word	0x20006411
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	410fc241 	.word	0x410fc241

08001e0c <Vector88>:
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <Vector88+0xd4>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001e0e:	b570      	push	{r4, r5, r6, lr}
  sr = ADC1->SR;
 8001e10:	6815      	ldr	r5, [r2, #0]
  ADC1->SR = 0;
 8001e12:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001e14:	06ab      	lsls	r3, r5, #26
  ADC1->SR = 0;
 8001e16:	6011      	str	r1, [r2, #0]
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001e18:	d42c      	bmi.n	8001e74 <Vector88+0x68>
 8001e1a:	f005 0501 	and.w	r5, r5, #1
      /* ADC overflow condition, this could happen only if the DMA is unable
        to read data fast enough.*/
      if (ADCD1.grpp != NULL)
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
    }
  if (sr & ADC_SR_AWD) {
 8001e1e:	b32d      	cbz	r5, 8001e6c <Vector88+0x60>
    if (ADCD1.grpp != NULL) {
 8001e20:	4c30      	ldr	r4, [pc, #192]	; (8001ee4 <Vector88+0xd8>)
 8001e22:	6922      	ldr	r2, [r4, #16]
 8001e24:	b312      	cbz	r2, 8001e6c <Vector88+0x60>

  if (adcp->config->useDMA)
  {
  // dmaStreamDisable(adcp->dmastp);
  }
  adcp->adc->CR1 = 0;
 8001e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001e28:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e2e:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e30:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e32:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e38:	6099      	str	r1, [r3, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001e3a:	2d00      	cmp	r5, #0
 8001e3c:	d048      	beq.n	8001ed0 <Vector88+0xc4>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	7023      	strb	r3, [r4, #0]
 8001e42:	2102      	movs	r1, #2
 8001e44:	4620      	mov	r0, r4
 8001e46:	47a8      	blx	r5
 8001e48:	7823      	ldrb	r3, [r4, #0]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	bf04      	itt	eq
 8001e4e:	2302      	moveq	r3, #2
 8001e50:	7023      	strbeq	r3, [r4, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	6123      	str	r3, [r4, #16]
 8001e56:	2320      	movs	r3, #32
 8001e58:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e60:	4821      	ldr	r0, [pc, #132]	; (8001ee8 <Vector88+0xdc>)
 8001e62:	f003 fb3d 	bl	80054e0 <chThdResumeI>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f383 8811 	msr	BASEPRI, r3
}
 8001e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001e70:	f003 bd96 	b.w	80059a0 <_port_irq_epilogue>
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001e74:	4c1b      	ldr	r4, [pc, #108]	; (8001ee4 <Vector88+0xd8>)
 8001e76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	6852      	ldr	r2, [r2, #4]
 8001e7c:	f005 0501 	and.w	r5, r5, #1
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d0cc      	beq.n	8001e1e <Vector88+0x12>
      if (ADCD1.grpp != NULL)
 8001e84:	6922      	ldr	r2, [r4, #16]
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d0f0      	beq.n	8001e6c <Vector88+0x60>
  adcp->adc->CR1 = 0;
 8001e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001e8c:	6896      	ldr	r6, [r2, #8]
  adcp->adc->CR1 = 0;
 8001e8e:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e90:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e92:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e94:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001e98:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e9a:	6099      	str	r1, [r3, #8]
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001e9c:	b1e6      	cbz	r6, 8001ed8 <Vector88+0xcc>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	7023      	strb	r3, [r4, #0]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	47b0      	blx	r6
 8001ea6:	7823      	ldrb	r3, [r4, #0]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	bf04      	itt	eq
 8001eac:	2302      	moveq	r3, #2
 8001eae:	7023      	strbeq	r3, [r4, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6123      	str	r3, [r4, #16]
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <Vector88+0xdc>)
 8001ec0:	f003 fb0e 	bl	80054e0 <chThdResumeI>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d1a8      	bne.n	8001e20 <Vector88+0x14>
 8001ece:	e7cd      	b.n	8001e6c <Vector88+0x60>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	6125      	str	r5, [r4, #16]
 8001ed4:	7023      	strb	r3, [r4, #0]
 8001ed6:	e7be      	b.n	8001e56 <Vector88+0x4a>
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001ed8:	2302      	movs	r3, #2
 8001eda:	6126      	str	r6, [r4, #16]
 8001edc:	7023      	strb	r3, [r4, #0]
 8001ede:	e7e9      	b.n	8001eb4 <Vector88+0xa8>
 8001ee0:	40012000 	.word	0x40012000
 8001ee4:	20000850 	.word	0x20000850
 8001ee8:	20000864 	.word	0x20000864

08001eec <adc_lld_init>:
void adc_lld_init(void) {
 8001eec:	b510      	push	{r4, lr}
  adcObjectInit(&ADCD1);
 8001eee:	4c08      	ldr	r4, [pc, #32]	; (8001f10 <adc_lld_init+0x24>)
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7fe ff13 	bl	8000d1c <adcObjectInit>
  ADCD1.adc     = ADC1;
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <adc_lld_init+0x28>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <adc_lld_init+0x2c>)
  ADCD1.adc     = ADC1;
 8001efa:	62a2      	str	r2, [r4, #40]	; 0x28
  ADCD1.dmastp  = NULL;
 8001efc:	2200      	movs	r2, #0
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001efe:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001f02:	2106      	movs	r1, #6
 8001f04:	2012      	movs	r0, #18
}
 8001f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001f0a:	f7ff bcc3 	b.w	8001894 <nvicEnableVector>
 8001f0e:	bf00      	nop
 8001f10:	20000850 	.word	0x20000850
 8001f14:	40012000 	.word	0x40012000
 8001f18:	00022c16 	.word	0x00022c16

08001f1c <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <Vector8C+0xc0>)
 8001f1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f20:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8001f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 8001f26:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001f28:	f013 0101 	ands.w	r1, r3, #1
 8001f2c:	d045      	beq.n	8001fba <Vector8C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8001f2e:	f003 0c0c 	and.w	ip, r3, #12
 8001f32:	492b      	ldr	r1, [pc, #172]	; (8001fe0 <Vector8C+0xc4>)
 8001f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002000 <Vector8C+0xe4>
 8001f38:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002004 <Vector8C+0xe8>
 8001f3c:	4e29      	ldr	r6, [pc, #164]	; (8001fe4 <Vector8C+0xc8>)
 8001f3e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8002008 <Vector8C+0xec>
 8001f42:	4829      	ldr	r0, [pc, #164]	; (8001fe8 <Vector8C+0xcc>)
 8001f44:	4c29      	ldr	r4, [pc, #164]	; (8001fec <Vector8C+0xd0>)
 8001f46:	4f2a      	ldr	r7, [pc, #168]	; (8001ff0 <Vector8C+0xd4>)
 8001f48:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800200c <Vector8C+0xf0>
 8001f4c:	4d29      	ldr	r5, [pc, #164]	; (8001ff4 <Vector8C+0xd8>)
 8001f4e:	f1bc 0f00 	cmp.w	ip, #0
 8001f52:	bf01      	itttt	eq
 8001f54:	468c      	moveq	ip, r1
 8001f56:	4656      	moveq	r6, sl
 8001f58:	46ce      	moveq	lr, r9
 8001f5a:	2005      	moveq	r0, #5
 8001f5c:	bf15      	itete	ne
 8001f5e:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 8001f62:	2707      	moveq	r7, #7
 8001f64:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 8001f68:	2503      	moveq	r5, #3
 8001f6a:	bf16      	itet	ne
 8001f6c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 8001f70:	2101      	moveq	r1, #1
 8001f72:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8001f76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f7a:	d005      	beq.n	8001f88 <Vector8C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001f7c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001f80:	d028      	beq.n	8001fd4 <Vector8C+0xb8>
 8001f82:	4670      	mov	r0, lr
 8001f84:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8001f86:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8001f88:	03dd      	lsls	r5, r3, #15
 8001f8a:	d504      	bpl.n	8001f96 <Vector8C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8001f8c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8001f90:	bf14      	ite	ne
 8001f92:	4621      	movne	r1, r4
 8001f94:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 8001f96:	69d3      	ldr	r3, [r2, #28]
 8001f98:	b10b      	cbz	r3, 8001f9e <Vector8C+0x82>
 8001f9a:	4810      	ldr	r0, [pc, #64]	; (8001fdc <Vector8C+0xc0>)
 8001f9c:	4798      	blx	r3
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <Vector8C+0xdc>)
 8001fa8:	f003 fac8 	bl	800553c <chThdDequeueAllI>
 8001fac:	2300      	movs	r3, #0
 8001fae:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8001fb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001fb6:	f003 bcf3 	b.w	80059a0 <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001fba:	4e10      	ldr	r6, [pc, #64]	; (8001ffc <Vector8C+0xe0>)
 8001fbc:	f8df e050 	ldr.w	lr, [pc, #80]	; 8002010 <Vector8C+0xf4>
 8001fc0:	2004      	movs	r0, #4
 8001fc2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8001fc6:	2706      	movs	r7, #6
 8001fc8:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 8001fcc:	2502      	movs	r5, #2
 8001fce:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8001fd2:	e7d0      	b.n	8001f76 <Vector8C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8001fd8:	4629      	mov	r1, r5
 8001fda:	e7d5      	b.n	8001f88 <Vector8C+0x6c>
 8001fdc:	20000884 	.word	0x20000884
 8001fe0:	00020001 	.word	0x00020001
 8001fe4:	00050002 	.word	0x00050002
 8001fe8:	00010004 	.word	0x00010004
 8001fec:	00040001 	.word	0x00040001
 8001ff0:	00010006 	.word	0x00010006
 8001ff4:	00010002 	.word	0x00010002
 8001ff8:	2000088c 	.word	0x2000088c
 8001ffc:	00040002 	.word	0x00040002
 8002000:	00040003 	.word	0x00040003
 8002004:	00020005 	.word	0x00020005
 8002008:	00030004 	.word	0x00030004
 800200c:	00060001 	.word	0x00060001
 8002010:	00020004 	.word	0x00020004

08002014 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8002014:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8002016:	4c12      	ldr	r4, [pc, #72]	; (8002060 <Vector90+0x4c>)
 8002018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800201a:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800201c:	07aa      	lsls	r2, r5, #30
 800201e:	d012      	beq.n	8002046 <Vector90+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002020:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002022:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002024:	f022 0202 	bic.w	r2, r2, #2
 8002028:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 800202a:	b116      	cbz	r6, 8002032 <Vector90+0x1e>
 800202c:	2101      	movs	r1, #1
 800202e:	4620      	mov	r0, r4
 8002030:	47b0      	blx	r6
 8002032:	2320      	movs	r3, #32
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	2100      	movs	r1, #0
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <Vector90+0x50>)
 800203c:	f003 fa7e 	bl	800553c <chThdDequeueAllI>
 8002040:	2300      	movs	r3, #0
 8002042:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8002046:	06eb      	lsls	r3, r5, #27
 8002048:	d506      	bpl.n	8002058 <Vector90+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800204a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 800204c:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800204e:	2110      	movs	r1, #16
 8002050:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002052:	b10b      	cbz	r3, 8002058 <Vector90+0x44>
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <Vector90+0x4c>)
 8002056:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800205c:	f003 bca0 	b.w	80059a0 <_port_irq_epilogue>
 8002060:	20000884 	.word	0x20000884
 8002064:	20000894 	.word	0x20000894

08002068 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8002068:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 800206a:	4c12      	ldr	r4, [pc, #72]	; (80020b4 <Vector94+0x4c>)
 800206c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800206e:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002070:	07aa      	lsls	r2, r5, #30
 8002072:	d012      	beq.n	800209a <Vector94+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002074:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002076:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002078:	f022 0210 	bic.w	r2, r2, #16
 800207c:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 800207e:	b116      	cbz	r6, 8002086 <Vector94+0x1e>
 8002080:	2102      	movs	r1, #2
 8002082:	4620      	mov	r0, r4
 8002084:	47b0      	blx	r6
 8002086:	2320      	movs	r3, #32
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	2100      	movs	r1, #0
 800208e:	480a      	ldr	r0, [pc, #40]	; (80020b8 <Vector94+0x50>)
 8002090:	f003 fa54 	bl	800553c <chThdDequeueAllI>
 8002094:	2300      	movs	r3, #0
 8002096:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800209a:	06eb      	lsls	r3, r5, #27
 800209c:	d506      	bpl.n	80020ac <Vector94+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800209e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80020a0:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 80020a2:	2110      	movs	r1, #16
 80020a4:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80020a6:	b10b      	cbz	r3, 80020ac <Vector94+0x44>
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <Vector94+0x4c>)
 80020aa:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80020ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80020b0:	f003 bc76 	b.w	80059a0 <_port_irq_epilogue>
 80020b4:	20000884 	.word	0x20000884
 80020b8:	20000894 	.word	0x20000894

080020bc <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 80020bc:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 80020be:	4c0f      	ldr	r4, [pc, #60]	; (80020fc <Vector98+0x40>)
 80020c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020c2:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 80020c4:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 80020c6:	072a      	lsls	r2, r5, #28
 80020c8:	d50a      	bpl.n	80020e0 <Vector98+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80020ca:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 80020cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80020ce:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 80020d2:	2103      	movs	r1, #3
 80020d4:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80020d6:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 80020d8:	b116      	cbz	r6, 80020e0 <Vector98+0x24>
 80020da:	2100      	movs	r1, #0
 80020dc:	4620      	mov	r0, r4
 80020de:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 80020e0:	076b      	lsls	r3, r5, #29
 80020e2:	d506      	bpl.n	80020f2 <Vector98+0x36>
    uint32_t esr = canp->can->ESR;
 80020e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80020e6:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 80020e8:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80020ea:	b113      	cbz	r3, 80020f2 <Vector98+0x36>
 80020ec:	0409      	lsls	r1, r1, #16
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <Vector98+0x40>)
 80020f0:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80020f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80020f6:	f003 bc53 	b.w	80059a0 <_port_irq_epilogue>
 80020fa:	bf00      	nop
 80020fc:	20000884 	.word	0x20000884

08002100 <Vector13C>:
  tsr = canp->can->TSR;
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <Vector13C+0xc0>)
 8002102:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002104:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN2 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_TX_HANDLER) {
 8002106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 800210a:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800210c:	f013 0101 	ands.w	r1, r3, #1
 8002110:	d045      	beq.n	800219e <Vector13C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8002112:	f003 0c0c 	and.w	ip, r3, #12
 8002116:	492b      	ldr	r1, [pc, #172]	; (80021c4 <Vector13C+0xc4>)
 8002118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80021e4 <Vector13C+0xe4>
 800211c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80021e8 <Vector13C+0xe8>
 8002120:	4e29      	ldr	r6, [pc, #164]	; (80021c8 <Vector13C+0xc8>)
 8002122:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80021ec <Vector13C+0xec>
 8002126:	4829      	ldr	r0, [pc, #164]	; (80021cc <Vector13C+0xcc>)
 8002128:	4c29      	ldr	r4, [pc, #164]	; (80021d0 <Vector13C+0xd0>)
 800212a:	4f2a      	ldr	r7, [pc, #168]	; (80021d4 <Vector13C+0xd4>)
 800212c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80021f0 <Vector13C+0xf0>
 8002130:	4d29      	ldr	r5, [pc, #164]	; (80021d8 <Vector13C+0xd8>)
 8002132:	f1bc 0f00 	cmp.w	ip, #0
 8002136:	bf01      	itttt	eq
 8002138:	468c      	moveq	ip, r1
 800213a:	4656      	moveq	r6, sl
 800213c:	46ce      	moveq	lr, r9
 800213e:	2005      	moveq	r0, #5
 8002140:	bf15      	itete	ne
 8002142:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 8002146:	2707      	moveq	r7, #7
 8002148:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 800214c:	2503      	moveq	r5, #3
 800214e:	bf16      	itet	ne
 8002150:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 8002154:	2101      	moveq	r1, #1
 8002156:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800215a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800215e:	d005      	beq.n	800216c <Vector13C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002160:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002164:	d028      	beq.n	80021b8 <Vector13C+0xb8>
 8002166:	4670      	mov	r0, lr
 8002168:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 800216a:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800216c:	03dd      	lsls	r5, r3, #15
 800216e:	d504      	bpl.n	800217a <Vector13C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8002170:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8002174:	bf14      	ite	ne
 8002176:	4621      	movne	r1, r4
 8002178:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 800217a:	69d3      	ldr	r3, [r2, #28]
 800217c:	b10b      	cbz	r3, 8002182 <Vector13C+0x82>
 800217e:	4810      	ldr	r0, [pc, #64]	; (80021c0 <Vector13C+0xc0>)
 8002180:	4798      	blx	r3
 8002182:	2320      	movs	r3, #32
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	2100      	movs	r1, #0
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <Vector13C+0xdc>)
 800218c:	f003 f9d6 	bl	800553c <chThdDequeueAllI>
 8002190:	2300      	movs	r3, #0
 8002192:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800219a:	f003 bc01 	b.w	80059a0 <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800219e:	4e10      	ldr	r6, [pc, #64]	; (80021e0 <Vector13C+0xe0>)
 80021a0:	f8df e050 	ldr.w	lr, [pc, #80]	; 80021f4 <Vector13C+0xf4>
 80021a4:	2004      	movs	r0, #4
 80021a6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80021aa:	2706      	movs	r7, #6
 80021ac:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 80021b0:	2502      	movs	r5, #2
 80021b2:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 80021b6:	e7d0      	b.n	800215a <Vector13C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80021b8:	4638      	mov	r0, r7
 80021ba:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 80021bc:	4629      	mov	r1, r5
 80021be:	e7d5      	b.n	800216c <Vector13C+0x6c>
 80021c0:	200008b0 	.word	0x200008b0
 80021c4:	00020001 	.word	0x00020001
 80021c8:	00050002 	.word	0x00050002
 80021cc:	00010004 	.word	0x00010004
 80021d0:	00040001 	.word	0x00040001
 80021d4:	00010006 	.word	0x00010006
 80021d8:	00010002 	.word	0x00010002
 80021dc:	200008b8 	.word	0x200008b8
 80021e0:	00040002 	.word	0x00040002
 80021e4:	00040003 	.word	0x00040003
 80021e8:	00020005 	.word	0x00020005
 80021ec:	00030004 	.word	0x00030004
 80021f0:	00060001 	.word	0x00060001
 80021f4:	00020004 	.word	0x00020004

080021f8 <Vector140>:
/**
 * @brief   CAN2 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX0_HANDLER) {
 80021f8:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 80021fa:	4c12      	ldr	r4, [pc, #72]	; (8002244 <Vector140+0x4c>)
 80021fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021fe:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002200:	07aa      	lsls	r2, r5, #30
 8002202:	d012      	beq.n	800222a <Vector140+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002204:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002206:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 800220e:	b116      	cbz	r6, 8002216 <Vector140+0x1e>
 8002210:	2101      	movs	r1, #1
 8002212:	4620      	mov	r0, r4
 8002214:	47b0      	blx	r6
 8002216:	2320      	movs	r3, #32
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	2100      	movs	r1, #0
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <Vector140+0x50>)
 8002220:	f003 f98c 	bl	800553c <chThdDequeueAllI>
 8002224:	2300      	movs	r3, #0
 8002226:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800222a:	06eb      	lsls	r3, r5, #27
 800222c:	d506      	bpl.n	800223c <Vector140+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800222e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002230:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002232:	2110      	movs	r1, #16
 8002234:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002236:	b10b      	cbz	r3, 800223c <Vector140+0x44>
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <Vector140+0x4c>)
 800223a:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 800223c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002240:	f003 bbae 	b.w	80059a0 <_port_irq_epilogue>
 8002244:	200008b0 	.word	0x200008b0
 8002248:	200008c0 	.word	0x200008c0

0800224c <Vector144>:
/**
 * @brief   CAN2 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX1_HANDLER) {
 800224c:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 800224e:	4c12      	ldr	r4, [pc, #72]	; (8002298 <Vector144+0x4c>)
 8002250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002252:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002254:	07aa      	lsls	r2, r5, #30
 8002256:	d012      	beq.n	800227e <Vector144+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002258:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 800225a:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800225c:	f022 0210 	bic.w	r2, r2, #16
 8002260:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002262:	b116      	cbz	r6, 800226a <Vector144+0x1e>
 8002264:	2102      	movs	r1, #2
 8002266:	4620      	mov	r0, r4
 8002268:	47b0      	blx	r6
 800226a:	2320      	movs	r3, #32
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	2100      	movs	r1, #0
 8002272:	480a      	ldr	r0, [pc, #40]	; (800229c <Vector144+0x50>)
 8002274:	f003 f962 	bl	800553c <chThdDequeueAllI>
 8002278:	2300      	movs	r3, #0
 800227a:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800227e:	06eb      	lsls	r3, r5, #27
 8002280:	d506      	bpl.n	8002290 <Vector144+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002282:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002284:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002286:	2110      	movs	r1, #16
 8002288:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 800228a:	b10b      	cbz	r3, 8002290 <Vector144+0x44>
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <Vector144+0x4c>)
 800228e:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002294:	f003 bb84 	b.w	80059a0 <_port_irq_epilogue>
 8002298:	200008b0 	.word	0x200008b0
 800229c:	200008c0 	.word	0x200008c0

080022a0 <Vector148>:
/**
 * @brief   CAN2 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_SCE_HANDLER) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 80022a2:	4c0f      	ldr	r4, [pc, #60]	; (80022e0 <Vector148+0x40>)
 80022a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022a6:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 80022a8:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 80022aa:	072a      	lsls	r2, r5, #28
 80022ac:	d50a      	bpl.n	80022c4 <Vector148+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80022ae:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 80022b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80022b2:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 80022b6:	2103      	movs	r1, #3
 80022b8:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80022ba:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 80022bc:	b116      	cbz	r6, 80022c4 <Vector148+0x24>
 80022be:	2100      	movs	r1, #0
 80022c0:	4620      	mov	r0, r4
 80022c2:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 80022c4:	076b      	lsls	r3, r5, #29
 80022c6:	d506      	bpl.n	80022d6 <Vector148+0x36>
    uint32_t esr = canp->can->ESR;
 80022c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80022ca:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 80022cc:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80022ce:	b113      	cbz	r3, 80022d6 <Vector148+0x36>
 80022d0:	0409      	lsls	r1, r1, #16
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <Vector148+0x40>)
 80022d4:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 80022d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80022da:	f003 bb61 	b.w	80059a0 <_port_irq_epilogue>
 80022de:	bf00      	nop
 80022e0:	200008b0 	.word	0x200008b0

080022e4 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 80022e4:	b538      	push	{r3, r4, r5, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 80022e6:	4c3b      	ldr	r4, [pc, #236]	; (80023d4 <can_lld_init+0xf0>)
#endif
#endif

#if STM32_CAN_USE_CAN2
  /* Driver initialization.*/
  canObjectInit(&CAND2);
 80022e8:	4d3b      	ldr	r5, [pc, #236]	; (80023d8 <can_lld_init+0xf4>)
  canObjectInit(&CAND1);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7fe fd24 	bl	8000d38 <canObjectInit>
  CAND1.can = CAN1;
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <can_lld_init+0xf8>)
 80022f2:	62a3      	str	r3, [r4, #40]	; 0x28
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022f4:	210b      	movs	r1, #11
 80022f6:	2013      	movs	r0, #19
 80022f8:	f7ff facc 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022fc:	210b      	movs	r1, #11
 80022fe:	2014      	movs	r0, #20
 8002300:	f7ff fac8 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8002304:	210b      	movs	r1, #11
 8002306:	2015      	movs	r0, #21
 8002308:	f7ff fac4 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800230c:	210b      	movs	r1, #11
 800230e:	2016      	movs	r0, #22
 8002310:	f7ff fac0 	bl	8001894 <nvicEnableVector>
  canObjectInit(&CAND2);
 8002314:	4628      	mov	r0, r5
 8002316:	f7fe fd0f 	bl	8000d38 <canObjectInit>
  CAND2.can = CAN2;
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <can_lld_init+0xfc>)
 800231c:	62ab      	str	r3, [r5, #40]	; 0x28
#if defined(STM32_CAN2_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN2_UNIFIED_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN2_TX_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 800231e:	210b      	movs	r1, #11
 8002320:	203f      	movs	r0, #63	; 0x3f
 8002322:	f7ff fab7 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX0_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002326:	210b      	movs	r1, #11
 8002328:	2040      	movs	r0, #64	; 0x40
 800232a:	f7ff fab3 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX1_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 800232e:	210b      	movs	r1, #11
 8002330:	2041      	movs	r0, #65	; 0x41
 8002332:	f7ff faaf 	bl	8001894 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_SCE_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002336:	210b      	movs	r1, #11
 8002338:	2042      	movs	r0, #66	; 0x42
 800233a:	f7ff faab 	bl	8001894 <nvicEnableVector>
    rccEnableCAN1(true);
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <can_lld_init+0x100>)
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    rccEnableCAN1(true);
 8002342:	6c10      	ldr	r0, [r2, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002344:	4c28      	ldr	r4, [pc, #160]	; (80023e8 <can_lld_init+0x104>)
    rccEnableCAN1(true);
 8002346:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800234a:	6410      	str	r0, [r2, #64]	; 0x40
 800234c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800234e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002352:	6610      	str	r0, [r2, #96]	; 0x60
 8002354:	6e11      	ldr	r1, [r2, #96]	; 0x60
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002356:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800235a:	4020      	ands	r0, r4
 800235c:	f040 0001 	orr.w	r0, r0, #1
 8002360:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002364:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002368:	4021      	ands	r1, r4
 800236a:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
    canp->can->sFilterRegister[0].FR1 = 0;
 800236e:	2000      	movs	r0, #0
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002370:	f041 0101 	orr.w	r1, r1, #1
    canp->can->FS1R = 1;
 8002374:	2401      	movs	r4, #1
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002376:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
 800237a:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 800237e:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
      canp->can->sFilterRegister[can2sb].FR1 = 0;
 8002382:	f8c3 02b0 	str.w	r0, [r3, #688]	; 0x2b0
      canp->can->sFilterRegister[can2sb].FR2 = 0;
 8002386:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
    canp->can->FM1R = 0;
 800238a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 800238e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 8002392:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 8002396:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
 800239a:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800239e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80023a2:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
      canp->can->FA1R |= 1 << can2sb;
 80023a6:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80023aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80023ae:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
 80023b2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80023b6:	f021 0101 	bic.w	r1, r1, #1
 80023ba:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
 80023be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80023c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80023cc:	6613      	str	r3, [r2, #96]	; 0x60
 80023ce:	6e13      	ldr	r3, [r2, #96]	; 0x60
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 80023d0:	bd38      	pop	{r3, r4, r5, pc}
 80023d2:	bf00      	nop
 80023d4:	20000884 	.word	0x20000884
 80023d8:	200008b0 	.word	0x200008b0
 80023dc:	40006400 	.word	0x40006400
 80023e0:	40006800 	.word	0x40006800
 80023e4:	40023800 	.word	0x40023800
 80023e8:	ffff0000 	.word	0xffff0000

080023ec <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80023ec:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023f2:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 80023f4:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023f6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80023fa:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80023fc:	b10a      	cbz	r2, 8002402 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 80023fe:	6880      	ldr	r0, [r0, #8]
 8002400:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002406:	f003 bacb 	b.w	80059a0 <_port_irq_epilogue>
 800240a:	bf00      	nop
 800240c:	40026000 	.word	0x40026000
 8002410:	200008dc 	.word	0x200008dc

08002414 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002418:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 800241a:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800241c:	0989      	lsrs	r1, r1, #6
 800241e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002422:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8002424:	018c      	lsls	r4, r1, #6
 8002426:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8002428:	b10a      	cbz	r2, 800242e <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 800242a:	6900      	ldr	r0, [r0, #16]
 800242c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800242e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002432:	f003 bab5 	b.w	80059a0 <_port_irq_epilogue>
 8002436:	bf00      	nop
 8002438:	40026000 	.word	0x40026000
 800243c:	200008dc 	.word	0x200008dc

08002440 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8002442:	4809      	ldr	r0, [pc, #36]	; (8002468 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002444:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8002446:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002448:	0c09      	lsrs	r1, r1, #16
 800244a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800244e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8002450:	040c      	lsls	r4, r1, #16
 8002452:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8002454:	b10a      	cbz	r2, 800245a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002456:	6980      	ldr	r0, [r0, #24]
 8002458:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800245e:	f003 ba9f 	b.w	80059a0 <_port_irq_epilogue>
 8002462:	bf00      	nop
 8002464:	40026000 	.word	0x40026000
 8002468:	200008dc 	.word	0x200008dc

0800246c <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 800246e:	4809      	ldr	r0, [pc, #36]	; (8002494 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002470:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8002472:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002474:	0d89      	lsrs	r1, r1, #22
 8002476:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800247a:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 800247c:	058c      	lsls	r4, r1, #22
 800247e:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8002480:	b10a      	cbz	r2, 8002486 <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002482:	6a00      	ldr	r0, [r0, #32]
 8002484:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800248a:	f003 ba89 	b.w	80059a0 <_port_irq_epilogue>
 800248e:	bf00      	nop
 8002490:	40026000 	.word	0x40026000
 8002494:	200008dc 	.word	0x200008dc

08002498 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002498:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 800249c:	4807      	ldr	r0, [pc, #28]	; (80024bc <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800249e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80024a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80024a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80024a6:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80024a8:	b10a      	cbz	r2, 80024ae <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 80024aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80024ac:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80024b2:	f003 ba75 	b.w	80059a0 <_port_irq_epilogue>
 80024b6:	bf00      	nop
 80024b8:	40026000 	.word	0x40026000
 80024bc:	200008dc 	.word	0x200008dc

080024c0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80024c4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 80024c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80024c8:	0989      	lsrs	r1, r1, #6
 80024ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80024ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 80024d0:	018c      	lsls	r4, r1, #6
 80024d2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 80024d4:	b10a      	cbz	r2, 80024da <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 80024d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80024d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80024de:	f003 ba5f 	b.w	80059a0 <_port_irq_epilogue>
 80024e2:	bf00      	nop
 80024e4:	40026000 	.word	0x40026000
 80024e8:	200008dc 	.word	0x200008dc

080024ec <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80024f0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80024f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80024f4:	0c09      	lsrs	r1, r1, #16
 80024f6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80024fa:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80024fc:	040c      	lsls	r4, r1, #16
 80024fe:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8002500:	b10a      	cbz	r2, 8002506 <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002502:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002504:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800250a:	f003 ba49 	b.w	80059a0 <_port_irq_epilogue>
 800250e:	bf00      	nop
 8002510:	40026000 	.word	0x40026000
 8002514:	200008dc 	.word	0x200008dc

08002518 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 800251a:	4809      	ldr	r0, [pc, #36]	; (8002540 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800251c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 800251e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002520:	0d89      	lsrs	r1, r1, #22
 8002522:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002526:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8002528:	058c      	lsls	r4, r1, #22
 800252a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 800252c:	b10a      	cbz	r2, 8002532 <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 800252e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002530:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002536:	f003 ba33 	b.w	80059a0 <_port_irq_epilogue>
 800253a:	bf00      	nop
 800253c:	40026000 	.word	0x40026000
 8002540:	200008dc 	.word	0x200008dc

08002544 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002544:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800254a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 800254c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800254e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002552:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002554:	b10a      	cbz	r2, 800255a <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002556:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002558:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800255a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800255e:	f003 ba1f 	b.w	80059a0 <_port_irq_epilogue>
 8002562:	bf00      	nop
 8002564:	40026400 	.word	0x40026400
 8002568:	200008dc 	.word	0x200008dc

0800256c <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 800256e:	4809      	ldr	r0, [pc, #36]	; (8002594 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002570:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8002572:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002574:	0989      	lsrs	r1, r1, #6
 8002576:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800257a:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 800257c:	018c      	lsls	r4, r1, #6
 800257e:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8002580:	b10a      	cbz	r2, 8002586 <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002582:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002584:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800258a:	f003 ba09 	b.w	80059a0 <_port_irq_epilogue>
 800258e:	bf00      	nop
 8002590:	40026400 	.word	0x40026400
 8002594:	200008dc 	.word	0x200008dc

08002598 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800259c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 800259e:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80025a0:	0c09      	lsrs	r1, r1, #16
 80025a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80025a6:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 80025a8:	040c      	lsls	r4, r1, #16
 80025aa:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 80025ac:	b10a      	cbz	r2, 80025b2 <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 80025ae:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80025b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80025b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80025b6:	f003 b9f3 	b.w	80059a0 <_port_irq_epilogue>
 80025ba:	bf00      	nop
 80025bc:	40026400 	.word	0x40026400
 80025c0:	200008dc 	.word	0x200008dc

080025c4 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 80025c6:	4809      	ldr	r0, [pc, #36]	; (80025ec <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80025c8:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80025ca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80025cc:	0d89      	lsrs	r1, r1, #22
 80025ce:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80025d2:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 80025d4:	058c      	lsls	r4, r1, #22
 80025d6:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80025d8:	b10a      	cbz	r2, 80025de <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 80025da:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80025dc:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80025de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80025e2:	f003 b9dd 	b.w	80059a0 <_port_irq_epilogue>
 80025e6:	bf00      	nop
 80025e8:	40026400 	.word	0x40026400
 80025ec:	200008dc 	.word	0x200008dc

080025f0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80025f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025f6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80025f8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80025fe:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002600:	b10a      	cbz	r2, 8002606 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002602:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002604:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800260a:	f003 b9c9 	b.w	80059a0 <_port_irq_epilogue>
 800260e:	bf00      	nop
 8002610:	40026400 	.word	0x40026400
 8002614:	200008dc 	.word	0x200008dc

08002618 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 800261a:	4809      	ldr	r0, [pc, #36]	; (8002640 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800261c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 800261e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002620:	0989      	lsrs	r1, r1, #6
 8002622:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002626:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8002628:	018c      	lsls	r4, r1, #6
 800262a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800262c:	b10a      	cbz	r2, 8002632 <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 800262e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002630:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002636:	f003 b9b3 	b.w	80059a0 <_port_irq_epilogue>
 800263a:	bf00      	nop
 800263c:	40026400 	.word	0x40026400
 8002640:	200008dc 	.word	0x200008dc

08002644 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8002646:	4809      	ldr	r0, [pc, #36]	; (800266c <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002648:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 800264a:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800264c:	0c09      	lsrs	r1, r1, #16
 800264e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002652:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8002654:	040c      	lsls	r4, r1, #16
 8002656:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8002658:	b10a      	cbz	r2, 800265e <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 800265a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800265c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800265e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002662:	f003 b99d 	b.w	80059a0 <_port_irq_epilogue>
 8002666:	bf00      	nop
 8002668:	40026400 	.word	0x40026400
 800266c:	200008dc 	.word	0x200008dc

08002670 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002674:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8002676:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002678:	0d89      	lsrs	r1, r1, #22
 800267a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800267e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8002680:	058c      	lsls	r4, r1, #22
 8002682:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002684:	b112      	cbz	r2, 800268c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002686:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800268a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002690:	f003 b986 	b.w	80059a0 <_port_irq_epilogue>
 8002694:	40026400 	.word	0x40026400
 8002698:	200008dc 	.word	0x200008dc

0800269c <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800269c:	b4f0      	push	{r4, r5, r6, r7}
  unsigned i;

  dma.allocated_mask = 0U;
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <dmaInit+0x7c>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80026a0:	4c1e      	ldr	r4, [pc, #120]	; (800271c <dmaInit+0x80>)
 80026a2:	491f      	ldr	r1, [pc, #124]	; (8002720 <dmaInit+0x84>)
 80026a4:	4d1f      	ldr	r5, [pc, #124]	; (8002724 <dmaInit+0x88>)
 80026a6:	4820      	ldr	r0, [pc, #128]	; (8002728 <dmaInit+0x8c>)
 80026a8:	4f20      	ldr	r7, [pc, #128]	; (800272c <dmaInit+0x90>)
 80026aa:	4e21      	ldr	r6, [pc, #132]	; (8002730 <dmaInit+0x94>)
  dma.allocated_mask = 0U;
 80026ac:	2300      	movs	r3, #0
    dma.streams[i].func = NULL;
 80026ae:	e9c2 3300 	strd	r3, r3, [r2]
 80026b2:	60d3      	str	r3, [r2, #12]
 80026b4:	6153      	str	r3, [r2, #20]
 80026b6:	61d3      	str	r3, [r2, #28]
 80026b8:	6253      	str	r3, [r2, #36]	; 0x24
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026bc:	6353      	str	r3, [r2, #52]	; 0x34
 80026be:	63d3      	str	r3, [r2, #60]	; 0x3c
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c4:	6553      	str	r3, [r2, #84]	; 0x54
 80026c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80026c8:	6653      	str	r3, [r2, #100]	; 0x64
 80026ca:	66d3      	str	r3, [r2, #108]	; 0x6c
 80026cc:	6753      	str	r3, [r2, #116]	; 0x74
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 80026ce:	3c70      	subs	r4, #112	; 0x70
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	6033      	str	r3, [r6, #0]
 80026d4:	600b      	str	r3, [r1, #0]
 80026d6:	602b      	str	r3, [r5, #0]
 80026d8:	6723      	str	r3, [r4, #112]	; 0x70
 80026da:	6003      	str	r3, [r0, #0]
 80026dc:	660b      	str	r3, [r1, #96]	; 0x60
 80026de:	662b      	str	r3, [r5, #96]	; 0x60
 80026e0:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 80026e4:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
 80026e8:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 80026ec:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
 80026f0:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
 80026f4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 80026f8:	f8c1 3460 	str.w	r3, [r1, #1120]	; 0x460
  DMA1->LIFCR = 0xFFFFFFFFU;
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002700:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
    dma.streams[i].func = NULL;
 8002704:	67d3      	str	r3, [r2, #124]	; 0x7c
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002706:	60a1      	str	r1, [r4, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002708:	60e1      	str	r1, [r4, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800270a:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 800270e:	bcf0      	pop	{r4, r5, r6, r7}
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002710:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200008dc 	.word	0x200008dc
 800271c:	40026070 	.word	0x40026070
 8002720:	40026040 	.word	0x40026040
 8002724:	40026058 	.word	0x40026058
 8002728:	40026088 	.word	0x40026088
 800272c:	40026010 	.word	0x40026010
 8002730:	40026028 	.word	0x40026028

08002734 <dmaStreamAllocI>:
    osalDbgCheck(false);
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8002734:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80027fc <dmaStreamAllocI+0xc8>
  if (id < STM32_DMA_STREAMS) {
 8002738:	280f      	cmp	r0, #15
                                          void *param) {
 800273a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (id < STM32_DMA_STREAMS) {
 800273c:	bf98      	it	ls
 800273e:	4607      	movls	r7, r0
    if ((dma.allocated_mask & mask) == 0U) {
 8002740:	f8dc 0000 	ldr.w	r0, [ip]
  if (id < STM32_DMA_STREAMS) {
 8002744:	bf98      	it	ls
 8002746:	463c      	movls	r4, r7
    uint32_t mask = (1U << i);
 8002748:	2601      	movs	r6, #1
 800274a:	fa06 f504 	lsl.w	r5, r6, r4
    if ((dma.allocated_mask & mask) == 0U) {
 800274e:	4228      	tst	r0, r5
 8002750:	d005      	beq.n	800275e <dmaStreamAllocI+0x2a>
  for (i = startid; i <= endid; i++) {
 8002752:	3401      	adds	r4, #1
 8002754:	42a7      	cmp	r7, r4
 8002756:	d2f8      	bcs.n	800274a <dmaStreamAllocI+0x16>

      return dmastp;
    }
  }

  return NULL;
 8002758:	2700      	movs	r7, #0
}
 800275a:	4638      	mov	r0, r7
 800275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      dma.allocated_mask  |= mask;
 800275e:	4328      	orrs	r0, r5
      dma.streams[i].func  = func;
 8002760:	eb0c 07c4 	add.w	r7, ip, r4, lsl #3
      dma.allocated_mask  |= mask;
 8002764:	f8cc 0000 	str.w	r0, [ip]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002768:	4e22      	ldr	r6, [pc, #136]	; (80027f4 <dmaStreamAllocI+0xc0>)
 800276a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
      dma.streams[i].param = param;
 800276e:	e9c7 2301 	strd	r2, r3, [r7, #4]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8002772:	f015 0fff 	tst.w	r5, #255	; 0xff
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002776:	eb0c 0704 	add.w	r7, ip, r4
 800277a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 800277e:	d009      	beq.n	8002794 <dmaStreamAllocI+0x60>
        rccEnableDMA1(true);
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <dmaStreamAllocI+0xc4>)
 8002782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002784:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002788:	6318      	str	r0, [r3, #48]	; 0x30
 800278a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800278c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002790:	6518      	str	r0, [r3, #80]	; 0x50
 8002792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8002794:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8002798:	d009      	beq.n	80027ae <dmaStreamAllocI+0x7a>
        rccEnableDMA2(true);
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <dmaStreamAllocI+0xc4>)
 800279c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800279e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80027a2:	6318      	str	r0, [r3, #48]	; 0x30
 80027a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80027a6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80027aa:	6518      	str	r0, [r3, #80]	; 0x50
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80027ae:	eb0c 0304 	add.w	r3, ip, r4
 80027b2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	f023 031f 	bic.w	r3, r3, #31
 80027bc:	6003      	str	r3, [r0, #0]
 80027be:	6803      	ldr	r3, [r0, #0]
 80027c0:	f013 0301 	ands.w	r3, r3, #1
 80027c4:	d1fb      	bne.n	80027be <dmaStreamAllocI+0x8a>
 80027c6:	4464      	add	r4, ip
 80027c8:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80027cc:	243d      	movs	r4, #61	; 0x3d
 80027ce:	f896 c009 	ldrb.w	ip, [r6, #9]
 80027d2:	6875      	ldr	r5, [r6, #4]
 80027d4:	fa04 f40c 	lsl.w	r4, r4, ip
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80027d8:	f04f 0c21 	mov.w	ip, #33	; 0x21
      dmaStreamDisable(dmastp);
 80027dc:	602c      	str	r4, [r5, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80027de:	6003      	str	r3, [r0, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80027e0:	f8c0 c014 	str.w	ip, [r0, #20]
      if (func != NULL) {
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d0b8      	beq.n	800275a <dmaStreamAllocI+0x26>
        nvicEnableVector(dmastp->vector, priority);
 80027e8:	7af0      	ldrb	r0, [r6, #11]
 80027ea:	f7ff f853 	bl	8001894 <nvicEnableVector>
}
 80027ee:	4638      	mov	r0, r7
 80027f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	0800683c 	.word	0x0800683c
 80027f8:	40023800 	.word	0x40023800
 80027fc:	200008dc 	.word	0x200008dc

08002800 <dmaStreamFree>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @api
 */
void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 8002800:	b510      	push	{r4, lr}
 8002802:	2320      	movs	r3, #32
 8002804:	4604      	mov	r4, r0
 8002806:	f383 8811 	msr	BASEPRI, r3
  nvicDisableVector(dmastp->vector);
 800280a:	7ac0      	ldrb	r0, [r0, #11]
 800280c:	f7ff f85c 	bl	80018c8 <nvicDisableVector>
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8002810:	4912      	ldr	r1, [pc, #72]	; (800285c <dmaStreamFree+0x5c>)
 8002812:	7aa0      	ldrb	r0, [r4, #10]
 8002814:	680b      	ldr	r3, [r1, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4082      	lsls	r2, r0
 800281a:	ea23 0302 	bic.w	r3, r3, r2
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800281e:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8002822:	600b      	str	r3, [r1, #0]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8002824:	d109      	bne.n	800283a <dmaStreamFree+0x3a>
    rccDisableDMA1();
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <dmaStreamFree+0x60>)
 8002828:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800282a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 800282e:	6311      	str	r1, [r2, #48]	; 0x30
 8002830:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002832:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8002836:	6511      	str	r1, [r2, #80]	; 0x50
 8002838:	6d12      	ldr	r2, [r2, #80]	; 0x50
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 800283a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800283e:	d109      	bne.n	8002854 <dmaStreamFree+0x54>
    rccDisableDMA2();
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <dmaStreamFree+0x60>)
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
 800284a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002850:	651a      	str	r2, [r3, #80]	; 0x50
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	2300      	movs	r3, #0
 8002856:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  dmaStreamFreeI(dmastp);
  osalSysUnlock();
}
 800285a:	bd10      	pop	{r4, pc}
 800285c:	200008dc 	.word	0x200008dc
 8002860:	40023800 	.word	0x40023800

08002864 <_pal_lld_init>:
  tqp->next = (thread_t *)tqp;
 8002864:	4b31      	ldr	r3, [pc, #196]	; (800292c <_pal_lld_init+0xc8>)
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8002866:	b470      	push	{r4, r5, r6}
 8002868:	f103 0110 	add.w	r1, r3, #16
 800286c:	f103 0520 	add.w	r5, r3, #32
 8002870:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002874:	f103 0040 	add.w	r0, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 8002878:	e9c3 1104 	strd	r1, r1, [r3, #16]
  tqp->next = (thread_t *)tqp;
 800287c:	f103 0150 	add.w	r1, r3, #80	; 0x50

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
 8002880:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8002882:	e9c3 5508 	strd	r5, r5, [r3, #32]
 8002886:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  tqp->next = (thread_t *)tqp;
 800288a:	f103 0560 	add.w	r5, r3, #96	; 0x60
 800288e:	f103 0470 	add.w	r4, r3, #112	; 0x70
  tqp->prev = (thread_t *)tqp;
 8002892:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
 8002896:	e9c3 1114 	strd	r1, r1, [r3, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 800289a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800289e:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tqp->prev = (thread_t *)tqp;
 80028a2:	e9c3 5518 	strd	r5, r5, [r3, #96]	; 0x60
  tqp->next = (thread_t *)tqp;
 80028a6:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
  tqp->prev = (thread_t *)tqp;
 80028aa:	e9c3 441c 	strd	r4, r4, [r3, #112]	; 0x70
  tqp->next = (thread_t *)tqp;
 80028ae:	f103 05b0 	add.w	r5, r3, #176	; 0xb0
 80028b2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80028b6:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80028ba:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80028be:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 80028c2:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
 80028c6:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 80028ca:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
 80028ce:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
  tqp->prev = (thread_t *)tqp;
 80028d2:	e9c3 3300 	strd	r3, r3, [r3]
 80028d6:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
 80028da:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
 80028de:	e9c3 2222 	strd	r2, r2, [r3, #136]	; 0x88
 80028e2:	e9c3 2226 	strd	r2, r2, [r3, #152]	; 0x98
 80028e6:	e9c3 222a 	strd	r2, r2, [r3, #168]	; 0xa8
 80028ea:	e9c3 222e 	strd	r2, r2, [r3, #184]	; 0xb8
 80028ee:	e9c3 2232 	strd	r2, r2, [r3, #200]	; 0xc8
 80028f2:	e9c3 2236 	strd	r2, r2, [r3, #216]	; 0xd8
 80028f6:	e9c3 223a 	strd	r2, r2, [r3, #232]	; 0xe8
 80028fa:	e9c3 223e 	strd	r2, r2, [r3, #248]	; 0xf8
 80028fe:	e9c3 1124 	strd	r1, r1, [r3, #144]	; 0x90
  tqp->next = (thread_t *)tqp;
 8002902:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8002906:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 800290a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
  tqp->prev = (thread_t *)tqp;
 800290e:	e9c3 6628 	strd	r6, r6, [r3, #160]	; 0xa0
 8002912:	e9c3 552c 	strd	r5, r5, [r3, #176]	; 0xb0
 8002916:	e9c3 4430 	strd	r4, r4, [r3, #192]	; 0xc0
 800291a:	e9c3 0034 	strd	r0, r0, [r3, #208]	; 0xd0
 800291e:	e9c3 1138 	strd	r1, r1, [r3, #224]	; 0xe0
 8002922:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
  }
#endif
}
 8002926:	bc70      	pop	{r4, r5, r6}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000960 	.word	0x20000960

08002930 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002934:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8002938:	f3c2 0e80 	ubfx	lr, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800293c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8002940:	f3c2 1741 	ubfx	r7, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002944:	46c8      	mov	r8, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8002946:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800294a:	2600      	movs	r6, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800294c:	f04f 0a01 	mov.w	sl, #1
 8002950:	e016      	b.n	8002980 <_pal_lld_setgroupmode+0x50>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8002952:	f8d0 b000 	ldr.w	fp, [r0]
 8002956:	ea03 030b 	and.w	r3, r3, fp
 800295a:	ea43 0308 	orr.w	r3, r3, r8
        if (bit < 8)
 800295e:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8002960:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8002962:	d844      	bhi.n	80029ee <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002964:	6a03      	ldr	r3, [r0, #32]
 8002966:	401d      	ands	r5, r3
 8002968:	432c      	orrs	r4, r5
 800296a:	6204      	str	r4, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800296c:	0849      	lsrs	r1, r1, #1
 800296e:	d03c      	beq.n	80029ea <_pal_lld_setgroupmode+0xba>
      return;
    otyper <<= 1;
 8002970:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    ospeedr <<= 2;
 8002974:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8002978:	00bf      	lsls	r7, r7, #2
    moder <<= 2;
 800297a:	ea4f 0888 	mov.w	r8, r8, lsl #2
    bit++;
 800297e:	3601      	adds	r6, #1
    if ((mask & 1) != 0) {
 8002980:	07cb      	lsls	r3, r1, #31
 8002982:	d5f3      	bpl.n	800296c <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002984:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8002986:	fa0a f406 	lsl.w	r4, sl, r6
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800298a:	ea23 0304 	bic.w	r3, r3, r4
 800298e:	ea43 030e 	orr.w	r3, r3, lr
 8002992:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8002994:	2503      	movs	r5, #3
 8002996:	0073      	lsls	r3, r6, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002998:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 800299a:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800299e:	43db      	mvns	r3, r3
 80029a0:	401c      	ands	r4, r3
 80029a2:	ea44 040c 	orr.w	r4, r4, ip
 80029a6:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80029a8:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80029aa:	f006 0407 	and.w	r4, r6, #7
 80029ae:	00a4      	lsls	r4, r4, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80029b0:	401d      	ands	r5, r3
      m4 = 15 << ((bit & 7) * 4);
 80029b2:	f04f 0b0f 	mov.w	fp, #15
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80029b6:	433d      	orrs	r5, r7
      m4 = 15 << ((bit & 7) * 4);
 80029b8:	fa0b fb04 	lsl.w	fp, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80029bc:	f1b9 0f02 	cmp.w	r9, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80029c0:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80029c2:	fa02 f404 	lsl.w	r4, r2, r4
 80029c6:	ea6f 050b 	mvn.w	r5, fp
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80029ca:	d1c2      	bne.n	8002952 <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 80029cc:	2e07      	cmp	r6, #7
 80029ce:	d813      	bhi.n	80029f8 <_pal_lld_setgroupmode+0xc8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80029d0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80029d4:	ea0b 0505 	and.w	r5, fp, r5
 80029d8:	432c      	orrs	r4, r5
 80029da:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80029dc:	6804      	ldr	r4, [r0, #0]
 80029de:	4023      	ands	r3, r4
 80029e0:	ea43 0308 	orr.w	r3, r3, r8
    if (!mask)
 80029e4:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80029e6:	6003      	str	r3, [r0, #0]
    if (!mask)
 80029e8:	d1c2      	bne.n	8002970 <_pal_lld_setgroupmode+0x40>
  }
}
 80029ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80029ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029f0:	401d      	ands	r5, r3
 80029f2:	432c      	orrs	r4, r5
 80029f4:	6244      	str	r4, [r0, #36]	; 0x24
 80029f6:	e7b9      	b.n	800296c <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80029f8:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80029fc:	ea0b 0505 	and.w	r5, fp, r5
 8002a00:	432c      	orrs	r4, r5
 8002a02:	6244      	str	r4, [r0, #36]	; 0x24
 8002a04:	e7ea      	b.n	80029dc <_pal_lld_setgroupmode+0xac>
 8002a06:	bf00      	nop

08002a08 <i2c_lld_init>:

#if SW_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
#endif
#if SW_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 8002a08:	4801      	ldr	r0, [pc, #4]	; (8002a10 <i2c_lld_init+0x8>)
 8002a0a:	f7fe b9ab 	b.w	8000d64 <i2cObjectInit>
 8002a0e:	bf00      	nop
 8002a10:	20000a60 	.word	0x20000a60

08002a14 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8002a18:	4cba      	ldr	r4, [pc, #744]	; (8002d04 <Vector14C+0x2f0>)
 8002a1a:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8002a1e:	f8da 2014 	ldr.w	r2, [sl, #20]
  sts &= otgp->GINTMSK;
 8002a22:	f8da 3018 	ldr.w	r3, [sl, #24]
 8002a26:	ea02 0b03 	and.w	fp, r2, r3
  if (sts & GINTSTS_USBRST) {
 8002a2a:	f41b 5580 	ands.w	r5, fp, #4096	; 0x1000
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8002a2e:	b085      	sub	sp, #20
  otgp->GINTSTS = sts;
 8002a30:	f8ca b014 	str.w	fp, [sl, #20]
  if (sts & GINTSTS_USBRST) {
 8002a34:	f040 815e 	bne.w	8002cf4 <Vector14C+0x2e0>
  if (sts & GINTSTS_WKUPINT) {
 8002a38:	f1bb 0f00 	cmp.w	fp, #0
 8002a3c:	db4c      	blt.n	8002ad8 <Vector14C+0xc4>
  if (sts & GINTSTS_USBSUSP) {
 8002a3e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8002a42:	f040 8123 	bne.w	8002c8c <Vector14C+0x278>
  if (sts & GINTSTS_ENUMDNE) {
 8002a46:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 8002a4a:	d00e      	beq.n	8002a6a <Vector14C+0x56>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8002a4c:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 8002a50:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8002a54:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002a58:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002a5c:	bf0c      	ite	eq
 8002a5e:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8002a62:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8002a66:	f8ca 300c 	str.w	r3, [sl, #12]
  if (sts & GINTSTS_SOF) {
 8002a6a:	f01b 0f08 	tst.w	fp, #8
 8002a6e:	d004      	beq.n	8002a7a <Vector14C+0x66>
    _usb_isr_invoke_sof_cb(usbp);
 8002a70:	6863      	ldr	r3, [r4, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	b10b      	cbz	r3, 8002a7a <Vector14C+0x66>
 8002a76:	48a3      	ldr	r0, [pc, #652]	; (8002d04 <Vector14C+0x2f0>)
 8002a78:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8002a7a:	f41b 1f80 	tst.w	fp, #1048576	; 0x100000
 8002a7e:	d179      	bne.n	8002b74 <Vector14C+0x160>
  if (sts & GINTSTS_IISOOXFR) {
 8002a80:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 8002a84:	f040 810a 	bne.w	8002c9c <Vector14C+0x288>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8002a88:	f01b 0f10 	tst.w	fp, #16
 8002a8c:	d13b      	bne.n	8002b06 <Vector14C+0xf2>
  if (sts & GINTSTS_OEPINT) {
 8002a8e:	f41b 2f00 	tst.w	fp, #524288	; 0x80000
  src = otgp->DAINT;
 8002a92:	f8da 5818 	ldr.w	r5, [sl, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8002a96:	d00b      	beq.n	8002ab0 <Vector14C+0x9c>
    if (src & (1 << 16))
 8002a98:	03e9      	lsls	r1, r5, #15
 8002a9a:	f100 8360 	bmi.w	800315e <Vector14C+0x74a>
    if (src & (1 << 17))
 8002a9e:	03a9      	lsls	r1, r5, #14
 8002aa0:	f100 8338 	bmi.w	8003114 <Vector14C+0x700>
    if (src & (1 << 18))
 8002aa4:	0369      	lsls	r1, r5, #13
 8002aa6:	f100 8310 	bmi.w	80030ca <Vector14C+0x6b6>
    if (src & (1 << 19))
 8002aaa:	0329      	lsls	r1, r5, #12
 8002aac:	f100 818b 	bmi.w	8002dc6 <Vector14C+0x3b2>
  if (sts & GINTSTS_IEPINT) {
 8002ab0:	f41b 2f80 	tst.w	fp, #262144	; 0x40000
 8002ab4:	d00b      	beq.n	8002ace <Vector14C+0xba>
    if (src & (1 << 0))
 8002ab6:	07e9      	lsls	r1, r5, #31
 8002ab8:	f100 823f 	bmi.w	8002f3a <Vector14C+0x526>
    if (src & (1 << 1))
 8002abc:	07a9      	lsls	r1, r5, #30
 8002abe:	f100 81d9 	bmi.w	8002e74 <Vector14C+0x460>
    if (src & (1 << 2))
 8002ac2:	0769      	lsls	r1, r5, #29
 8002ac4:	f100 829e 	bmi.w	8003004 <Vector14C+0x5f0>
    if (src & (1 << 3))
 8002ac8:	072d      	lsls	r5, r5, #28
 8002aca:	f100 811d 	bmi.w	8002d08 <Vector14C+0x2f4>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8002ace:	b005      	add	sp, #20
 8002ad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002ad4:	f002 bf64 	b.w	80059a0 <_port_irq_epilogue>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8002ad8:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8002adc:	079a      	lsls	r2, r3, #30
 8002ade:	d005      	beq.n	8002aec <Vector14C+0xd8>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8002ae0:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8002ae4:	f023 0303 	bic.w	r3, r3, #3
 8002ae8:	f8ca 3e00 	str.w	r3, [sl, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
 8002aec:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 8002af0:	4884      	ldr	r0, [pc, #528]	; (8002d04 <Vector14C+0x2f0>)
    otgp->DCTL &= ~DCTL_RWUSIG;
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 8002afa:	f7fe fc51 	bl	80013a0 <_usb_wakeup>
  if (sts & GINTSTS_USBSUSP) {
 8002afe:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8002b02:	d0a0      	beq.n	8002a46 <Vector14C+0x32>
 8002b04:	e0c2      	b.n	8002c8c <Vector14C+0x278>
  sts = usbp->otg->GRXSTSP;
 8002b06:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002b08:	6a2b      	ldr	r3, [r5, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8002b0a:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 8002b0e:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8002b12:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8002b16:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8002b1a:	f000 8179 	beq.w	8002e10 <Vector14C+0x3fc>
 8002b1e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002b22:	d1b4      	bne.n	8002a8e <Vector14C+0x7a>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8002b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	6a1e      	ldr	r6, [r3, #32]
  while (i < n) {
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d0ae      	beq.n	8002a8e <Vector14C+0x7a>
 8002b30:	1e53      	subs	r3, r2, #1
 8002b32:	2b07      	cmp	r3, #7
 8002b34:	bf28      	it	cs
 8002b36:	2307      	movcs	r3, #7
  uint32_t w = 0;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	3301      	adds	r3, #1
  size_t i = 0;
 8002b3c:	4601      	mov	r1, r0
      w = *fifop;
 8002b3e:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8002b42:	f011 0f03 	tst.w	r1, #3
 8002b46:	f040 8185 	bne.w	8002e54 <Vector14C+0x440>
      w = *fifop;
 8002b4a:	6838      	ldr	r0, [r7, #0]
      *buf++ = (uint8_t)w;
 8002b4c:	f806 0b01 	strb.w	r0, [r6], #1
    i++;
 8002b50:	3101      	adds	r1, #1
  while (i < n) {
 8002b52:	428b      	cmp	r3, r1
      w >>= 8;
 8002b54:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 8002b58:	d1f3      	bne.n	8002b42 <Vector14C+0x12e>
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d997      	bls.n	8002a8e <Vector14C+0x7a>
      w = *fifop;
 8002b5e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8002b62:	f013 0f03 	tst.w	r3, #3
    i++;
 8002b66:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 8002b6a:	bf08      	it	eq
 8002b6c:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d1f7      	bne.n	8002b62 <Vector14C+0x14e>
 8002b72:	e78c      	b.n	8002a8e <Vector14C+0x7a>
  stm32_otg_t *otgp = usbp->otg;
 8002b74:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002b78:	f04f 0900 	mov.w	r9, #0
      _usb_isr_invoke_in_cb(usbp, ep);
 8002b7c:	e9cd ab00 	strd	sl, fp, [sp]
 8002b80:	e009      	b.n	8002b96 <Vector14C+0x182>
 8002b82:	f109 0c01 	add.w	ip, r9, #1
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	fa5f f98c 	uxtb.w	r9, ip
 8002b8e:	4599      	cmp	r9, r3
 8002b90:	464d      	mov	r5, r9
 8002b92:	f200 8168 	bhi.w	8002e66 <Vector14C+0x452>
 8002b96:	eb08 1249 	add.w	r2, r8, r9, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8002b9a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002b9e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d1ec      	bne.n	8002b82 <Vector14C+0x16e>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8002ba8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	dae8      	bge.n	8002b82 <Vector14C+0x16e>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8002bb0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002bb4:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8002bb8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8002bbc:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	dbfb      	blt.n	8002bbc <Vector14C+0x1a8>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002bc4:	01ad      	lsls	r5, r5, #6
      otg_txfifo_flush(usbp, ep);
 8002bc6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002bc8:	f045 0520 	orr.w	r5, r5, #32
 8002bcc:	6115      	str	r5, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8002bce:	6913      	ldr	r3, [r2, #16]
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	d4fc      	bmi.n	8002bce <Vector14C+0x1ba>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002bd4:	f109 0502 	add.w	r5, r9, #2
 8002bd8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  chSysPolledDelayX(cycles);
 8002bdc:	2012      	movs	r0, #18
 8002bde:	f002 f9fb 	bl	8004fd8 <chSysPolledDelayX>
 8002be2:	686b      	ldr	r3, [r5, #4]
 8002be4:	8921      	ldrh	r1, [r4, #8]
 8002be6:	689e      	ldr	r6, [r3, #8]
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f209 	lsl.w	r2, r2, r9
 8002bee:	ea21 0202 	bic.w	r2, r1, r2
 8002bf2:	8122      	strh	r2, [r4, #8]
 8002bf4:	b11e      	cbz	r6, 8002bfe <Vector14C+0x1ea>
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	4842      	ldr	r0, [pc, #264]	; (8002d04 <Vector14C+0x2f0>)
 8002bfa:	47b0      	blx	r6
 8002bfc:	686b      	ldr	r3, [r5, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002bfe:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8002c02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	e9de a700 	ldrd	sl, r7, [lr]
 8002c0a:	4557      	cmp	r7, sl
 8002c0c:	bf28      	it	cs
 8002c0e:	f109 0c01 	addcs.w	ip, r9, #1
 8002c12:	f080 82f8 	bcs.w	8003206 <Vector14C+0x7f2>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002c16:	eb02 1249 	add.w	r2, r2, r9, lsl #5
    if (n > usbp->epc[ep]->in_maxsize)
 8002c1a:	f8b3 b010 	ldrh.w	fp, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002c1e:	f8d2 3918 	ldr.w	r3, [r2, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002c22:	ebaa 0007 	sub.w	r0, sl, r7
 8002c26:	4558      	cmp	r0, fp
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	bf28      	it	cs
 8002c2c:	4658      	movcs	r0, fp
 8002c2e:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8002c32:	f109 0c01 	add.w	ip, r9, #1
 8002c36:	d8a6      	bhi.n	8002b86 <Vector14C+0x172>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8002c38:	9b02      	ldr	r3, [sp, #8]
 8002c3a:	f8de 6008 	ldr.w	r6, [lr, #8]
 8002c3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002c42:	eb03 350c 	add.w	r5, r3, ip, lsl #12
 8002c46:	4691      	mov	r9, r2
    *fifop = *((uint32_t *)buf);
 8002c48:	6833      	ldr	r3, [r6, #0]
 8002c4a:	602b      	str	r3, [r5, #0]
    if (n <= 4) {
 8002c4c:	2804      	cmp	r0, #4
 8002c4e:	d90a      	bls.n	8002c66 <Vector14C+0x252>
 8002c50:	1f42      	subs	r2, r0, #5
 8002c52:	f022 0203 	bic.w	r2, r2, #3
 8002c56:	3204      	adds	r2, #4
 8002c58:	4432      	add	r2, r6
 8002c5a:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8002c5c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8002c60:	6029      	str	r1, [r5, #0]
    if (n <= 4) {
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d1fa      	bne.n	8002c5c <Vector14C+0x248>
    usbp->epc[ep]->in_state->txcnt += n;
 8002c66:	4407      	add	r7, r0
    usbp->epc[ep]->in_state->txbuf += n;
 8002c68:	4406      	add	r6, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002c6a:	4557      	cmp	r7, sl
    usbp->epc[ep]->in_state->txcnt += n;
 8002c6c:	e9ce 7601 	strd	r7, r6, [lr, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002c70:	f080 82c7 	bcs.w	8003202 <Vector14C+0x7ee>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002c74:	ebaa 0007 	sub.w	r0, sl, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002c78:	f8d9 3918 	ldr.w	r3, [r9, #2328]	; 0x918
 8002c7c:	4558      	cmp	r0, fp
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	bf28      	it	cs
 8002c82:	4658      	movcs	r0, fp
 8002c84:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8002c88:	d9de      	bls.n	8002c48 <Vector14C+0x234>
 8002c8a:	e77c      	b.n	8002b86 <Vector14C+0x172>
    _usb_suspend(usbp);
 8002c8c:	481d      	ldr	r0, [pc, #116]	; (8002d04 <Vector14C+0x2f0>)
 8002c8e:	f7fe fb77 	bl	8001380 <_usb_suspend>
  if (sts & GINTSTS_ENUMDNE) {
 8002c92:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 8002c96:	f43f aee8 	beq.w	8002a6a <Vector14C+0x56>
 8002c9a:	e6d7      	b.n	8002a4c <Vector14C+0x38>
  stm32_otg_t *otgp = usbp->otg;
 8002c9c:	6d66      	ldr	r6, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8002c9e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002d04 <Vector14C+0x2f0>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002ca2:	2500      	movs	r5, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8002ca4:	2701      	movs	r7, #1
 8002ca6:	e006      	b.n	8002cb6 <Vector14C+0x2a2>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002caa:	3501      	adds	r5, #1
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	b2ed      	uxtb	r5, r5
 8002cb0:	429d      	cmp	r5, r3
 8002cb2:	f63f aee9 	bhi.w	8002a88 <Vector14C+0x74>
 8002cb6:	eb06 1245 	add.w	r2, r6, r5, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8002cba:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8002cbe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc6:	d1ef      	bne.n	8002ca8 <Vector14C+0x294>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8002cc8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	daeb      	bge.n	8002ca8 <Vector14C+0x294>
      _usb_isr_invoke_out_cb(usbp, ep);
 8002cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002cd4:	8962      	ldrh	r2, [r4, #10]
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	fa07 f305 	lsl.w	r3, r7, r5
 8002cdc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8002ce0:	ea22 0303 	bic.w	r3, r2, r3
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	8163      	strh	r3, [r4, #10]
 8002cea:	f1b9 0f00 	cmp.w	r9, #0
 8002cee:	d0db      	beq.n	8002ca8 <Vector14C+0x294>
 8002cf0:	47c8      	blx	r9
 8002cf2:	e7d9      	b.n	8002ca8 <Vector14C+0x294>
    _usb_reset(usbp);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7fe fb2b 	bl	8001350 <_usb_reset>
}
 8002cfa:	b005      	add	sp, #20
 8002cfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002d00:	f002 be4e 	b.w	80059a0 <_port_irq_epilogue>
 8002d04:	20000a84 	.word	0x20000a84
  stm32_otg_t *otgp = usbp->otg;
 8002d08:	6d65      	ldr	r5, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8002d0a:	f8d5 6968 	ldr.w	r6, [r5, #2408]	; 0x968
  otgp->ie[ep].DIEPINT = epint;
 8002d0e:	f8c5 6968 	str.w	r6, [r5, #2408]	; 0x968
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8002d12:	07f0      	lsls	r0, r6, #31
 8002d14:	d513      	bpl.n	8002d3e <Vector14C+0x32a>
 8002d16:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8002d1a:	07d9      	lsls	r1, r3, #31
 8002d1c:	d50f      	bpl.n	8002d3e <Vector14C+0x32a>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002d1e:	69a1      	ldr	r1, [r4, #24]
 8002d20:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4290      	cmp	r0, r2
 8002d28:	f0c0 8296 	bcc.w	8003258 <Vector14C+0x844>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002d2c:	8923      	ldrh	r3, [r4, #8]
 8002d2e:	688a      	ldr	r2, [r1, #8]
 8002d30:	f023 0308 	bic.w	r3, r3, #8
 8002d34:	8123      	strh	r3, [r4, #8]
 8002d36:	b112      	cbz	r2, 8002d3e <Vector14C+0x32a>
 8002d38:	2103      	movs	r1, #3
 8002d3a:	48b1      	ldr	r0, [pc, #708]	; (8003000 <Vector14C+0x5ec>)
 8002d3c:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8002d3e:	0632      	lsls	r2, r6, #24
 8002d40:	f57f aec5 	bpl.w	8002ace <Vector14C+0xba>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8002d44:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	f57f aec0 	bpl.w	8002ace <Vector14C+0xba>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002d4e:	69a3      	ldr	r3, [r4, #24]
 8002d50:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8002d54:	695e      	ldr	r6, [r3, #20]
 8002d56:	e9d6 7500 	ldrd	r7, r5, [r6]
 8002d5a:	42af      	cmp	r7, r5
 8002d5c:	f240 825d 	bls.w	800321a <Vector14C+0x806>
    if (n > usbp->epc[ep]->in_maxsize)
 8002d60:	f8b3 e010 	ldrh.w	lr, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002d64:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002d68:	1b79      	subs	r1, r7, r5
 8002d6a:	4571      	cmp	r1, lr
 8002d6c:	bf28      	it	cs
 8002d6e:	4671      	movcs	r1, lr
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002d76:	f63f aeaa 	bhi.w	8002ace <Vector14C+0xba>
 8002d7a:	68b4      	ldr	r4, [r6, #8]
 8002d7c:	f50c 4080 	add.w	r0, ip, #16384	; 0x4000
 8002d80:	46b8      	mov	r8, r7
    *fifop = *((uint32_t *)buf);
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8002d86:	2904      	cmp	r1, #4
 8002d88:	d90a      	bls.n	8002da0 <Vector14C+0x38c>
 8002d8a:	1f4a      	subs	r2, r1, #5
 8002d8c:	f022 0203 	bic.w	r2, r2, #3
 8002d90:	3204      	adds	r2, #4
 8002d92:	4422      	add	r2, r4
 8002d94:	4623      	mov	r3, r4
    *fifop = *((uint32_t *)buf);
 8002d96:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8002d9a:	6007      	str	r7, [r0, #0]
    if (n <= 4) {
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d1fa      	bne.n	8002d96 <Vector14C+0x382>
    usbp->epc[ep]->in_state->txcnt += n;
 8002da0:	440d      	add	r5, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8002da2:	440c      	add	r4, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002da4:	45a8      	cmp	r8, r5
    usbp->epc[ep]->in_state->txcnt += n;
 8002da6:	e9c6 5401 	strd	r5, r4, [r6, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002daa:	f240 8236 	bls.w	800321a <Vector14C+0x806>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002dae:	eba8 0105 	sub.w	r1, r8, r5
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002db2:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
 8002db6:	4571      	cmp	r1, lr
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	bf28      	it	cs
 8002dbc:	4671      	movcs	r1, lr
 8002dbe:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002dc2:	d9de      	bls.n	8002d82 <Vector14C+0x36e>
 8002dc4:	e683      	b.n	8002ace <Vector14C+0xba>
  stm32_otg_t *otgp = usbp->otg;
 8002dc6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8002dc8:	f8d6 7b68 	ldr.w	r7, [r6, #2920]	; 0xb68
  otgp->oe[ep].DOEPINT = epint;
 8002dcc:	f8c6 7b68 	str.w	r7, [r6, #2920]	; 0xb68
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8002dd0:	073a      	lsls	r2, r7, #28
 8002dd2:	d508      	bpl.n	8002de6 <Vector14C+0x3d2>
 8002dd4:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	d504      	bpl.n	8002de6 <Vector14C+0x3d2>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8002ddc:	69a3      	ldr	r3, [r4, #24]
 8002dde:	4888      	ldr	r0, [pc, #544]	; (8003000 <Vector14C+0x5ec>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2103      	movs	r1, #3
 8002de4:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8002de6:	07ff      	lsls	r7, r7, #31
 8002de8:	f57f ae62 	bpl.w	8002ab0 <Vector14C+0x9c>
 8002dec:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8002df0:	07d8      	lsls	r0, r3, #31
 8002df2:	f57f ae5d 	bpl.w	8002ab0 <Vector14C+0x9c>
    osp = usbp->epc[ep]->out_state;
 8002df6:	69a2      	ldr	r2, [r4, #24]
    _usb_isr_invoke_out_cb(usbp, ep);
 8002df8:	8963      	ldrh	r3, [r4, #10]
 8002dfa:	68d2      	ldr	r2, [r2, #12]
 8002dfc:	f023 0308 	bic.w	r3, r3, #8
 8002e00:	8163      	strh	r3, [r4, #10]
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	f43f ae54 	beq.w	8002ab0 <Vector14C+0x9c>
 8002e08:	2103      	movs	r1, #3
 8002e0a:	487d      	ldr	r0, [pc, #500]	; (8003000 <Vector14C+0x5ec>)
 8002e0c:	4790      	blx	r2
 8002e0e:	e64f      	b.n	8002ab0 <Vector14C+0x9c>
                            usbp->epc[ep]->out_state->rxbuf,
 8002e10:	1c98      	adds	r0, r3, #2
 8002e12:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	6999      	ldr	r1, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8002e1a:	e9d1 3700 	ldrd	r3, r7, [r1]
 8002e1e:	688e      	ldr	r6, [r1, #8]
 8002e20:	1bdb      	subs	r3, r3, r7
  while (i < n) {
 8002e22:	b192      	cbz	r2, 8002e4a <Vector14C+0x436>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 81cc 	bne.w	80031c2 <Vector14C+0x7ae>
      w = *fifop;
 8002e2a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8002e2e:	f013 0f03 	tst.w	r3, #3
    i++;
 8002e32:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 8002e36:	bf08      	it	eq
 8002e38:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d8f7      	bhi.n	8002e2e <Vector14C+0x41a>
 8002e3e:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8002e4a:	4416      	add	r6, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8002e4c:	443a      	add	r2, r7
 8002e4e:	e9c1 2601 	strd	r2, r6, [r1, #4]
 8002e52:	e61c      	b.n	8002a8e <Vector14C+0x7a>
    i++;
 8002e54:	3101      	adds	r1, #1
  while (i < n) {
 8002e56:	4299      	cmp	r1, r3
      *buf++ = (uint8_t)w;
 8002e58:	f806 0b01 	strb.w	r0, [r6], #1
      w >>= 8;
 8002e5c:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 8002e60:	f47f ae6f 	bne.w	8002b42 <Vector14C+0x12e>
 8002e64:	e679      	b.n	8002b5a <Vector14C+0x146>
 8002e66:	e9dd ab00 	ldrd	sl, fp, [sp]
  if (sts & GINTSTS_IISOOXFR) {
 8002e6a:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 8002e6e:	f43f ae0b 	beq.w	8002a88 <Vector14C+0x74>
 8002e72:	e713      	b.n	8002c9c <Vector14C+0x288>
  stm32_otg_t *otgp = usbp->otg;
 8002e74:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8002e76:	f8d6 7928 	ldr.w	r7, [r6, #2344]	; 0x928
  otgp->ie[ep].DIEPINT = epint;
 8002e7a:	f8c6 7928 	str.w	r7, [r6, #2344]	; 0x928
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8002e7e:	07fa      	lsls	r2, r7, #31
 8002e80:	d513      	bpl.n	8002eaa <Vector14C+0x496>
 8002e82:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d50f      	bpl.n	8002eaa <Vector14C+0x496>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002e8a:	6921      	ldr	r1, [r4, #16]
 8002e8c:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4290      	cmp	r0, r2
 8002e94:	f0c0 8280 	bcc.w	8003398 <Vector14C+0x984>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002e98:	8923      	ldrh	r3, [r4, #8]
 8002e9a:	688a      	ldr	r2, [r1, #8]
 8002e9c:	f023 0302 	bic.w	r3, r3, #2
 8002ea0:	8123      	strh	r3, [r4, #8]
 8002ea2:	b112      	cbz	r2, 8002eaa <Vector14C+0x496>
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4856      	ldr	r0, [pc, #344]	; (8003000 <Vector14C+0x5ec>)
 8002ea8:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8002eaa:	063f      	lsls	r7, r7, #24
 8002eac:	f57f ae09 	bpl.w	8002ac2 <Vector14C+0xae>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8002eb0:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8002eb4:	0798      	lsls	r0, r3, #30
 8002eb6:	f57f ae04 	bpl.w	8002ac2 <Vector14C+0xae>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8002ec0:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8002ec4:	e9dc e700 	ldrd	lr, r7, [ip]
 8002ec8:	45be      	cmp	lr, r7
 8002eca:	f240 81ae 	bls.w	800322a <Vector14C+0x816>
    if (n > usbp->epc[ep]->in_maxsize)
 8002ece:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002ed2:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002ed6:	ebae 0107 	sub.w	r1, lr, r7
 8002eda:	4549      	cmp	r1, r9
 8002edc:	bf28      	it	cs
 8002ede:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002ee6:	f63f adec 	bhi.w	8002ac2 <Vector14C+0xae>
 8002eea:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8002eee:	f508 5000 	add.w	r0, r8, #8192	; 0x2000
 8002ef2:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8002ef4:	6833      	ldr	r3, [r6, #0]
 8002ef6:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8002ef8:	2904      	cmp	r1, #4
 8002efa:	d90a      	bls.n	8002f12 <Vector14C+0x4fe>
 8002efc:	1f4a      	subs	r2, r1, #5
 8002efe:	f022 0203 	bic.w	r2, r2, #3
 8002f02:	3204      	adds	r2, #4
 8002f04:	4432      	add	r2, r6
 8002f06:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8002f08:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8002f0c:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d1fa      	bne.n	8002f08 <Vector14C+0x4f4>
    usbp->epc[ep]->in_state->txcnt += n;
 8002f12:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8002f14:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002f16:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8002f18:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002f1c:	f080 8184 	bcs.w	8003228 <Vector14C+0x814>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002f20:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002f24:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
 8002f28:	4549      	cmp	r1, r9
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	bf28      	it	cs
 8002f2e:	4649      	movcs	r1, r9
 8002f30:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002f34:	d9de      	bls.n	8002ef4 <Vector14C+0x4e0>
 8002f36:	4655      	mov	r5, sl
 8002f38:	e5c3      	b.n	8002ac2 <Vector14C+0xae>
  stm32_otg_t *otgp = usbp->otg;
 8002f3a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8002f3c:	f8d6 7908 	ldr.w	r7, [r6, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8002f40:	f8c6 7908 	str.w	r7, [r6, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8002f44:	07fa      	lsls	r2, r7, #31
 8002f46:	d513      	bpl.n	8002f70 <Vector14C+0x55c>
 8002f48:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8002f4c:	07db      	lsls	r3, r3, #31
 8002f4e:	d50f      	bpl.n	8002f70 <Vector14C+0x55c>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002f50:	68e1      	ldr	r1, [r4, #12]
 8002f52:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	4290      	cmp	r0, r2
 8002f5a:	f0c0 81e9 	bcc.w	8003330 <Vector14C+0x91c>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002f5e:	8923      	ldrh	r3, [r4, #8]
 8002f60:	688a      	ldr	r2, [r1, #8]
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	8123      	strh	r3, [r4, #8]
 8002f68:	b112      	cbz	r2, 8002f70 <Vector14C+0x55c>
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4824      	ldr	r0, [pc, #144]	; (8003000 <Vector14C+0x5ec>)
 8002f6e:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8002f70:	063f      	lsls	r7, r7, #24
 8002f72:	f57f ada3 	bpl.w	8002abc <Vector14C+0xa8>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8002f76:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8002f7a:	07d8      	lsls	r0, r3, #31
 8002f7c:	f57f ad9e 	bpl.w	8002abc <Vector14C+0xa8>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002f80:	68e3      	ldr	r3, [r4, #12]
 8002f82:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8002f86:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8002f8a:	e9dc e700 	ldrd	lr, r7, [ip]
 8002f8e:	4577      	cmp	r7, lr
 8002f90:	f080 8153 	bcs.w	800323a <Vector14C+0x826>
    if (n > usbp->epc[ep]->in_maxsize)
 8002f94:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002f98:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002f9c:	ebae 0107 	sub.w	r1, lr, r7
 8002fa0:	4549      	cmp	r1, r9
 8002fa2:	bf28      	it	cs
 8002fa4:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002fac:	f63f ad86 	bhi.w	8002abc <Vector14C+0xa8>
 8002fb0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8002fb4:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
 8002fb8:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8002fba:	6833      	ldr	r3, [r6, #0]
 8002fbc:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8002fbe:	2904      	cmp	r1, #4
 8002fc0:	d90a      	bls.n	8002fd8 <Vector14C+0x5c4>
 8002fc2:	1f4a      	subs	r2, r1, #5
 8002fc4:	f022 0203 	bic.w	r2, r2, #3
 8002fc8:	3204      	adds	r2, #4
 8002fca:	4432      	add	r2, r6
 8002fcc:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8002fce:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8002fd2:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1fa      	bne.n	8002fce <Vector14C+0x5ba>
    usbp->epc[ep]->in_state->txcnt += n;
 8002fd8:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8002fda:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002fdc:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8002fde:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002fe2:	f080 8129 	bcs.w	8003238 <Vector14C+0x824>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8002fe6:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8002fea:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8002fee:	4549      	cmp	r1, r9
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	bf28      	it	cs
 8002ff4:	4649      	movcs	r1, r9
 8002ff6:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8002ffa:	d9de      	bls.n	8002fba <Vector14C+0x5a6>
 8002ffc:	4655      	mov	r5, sl
 8002ffe:	e55d      	b.n	8002abc <Vector14C+0xa8>
 8003000:	20000a84 	.word	0x20000a84
  stm32_otg_t *otgp = usbp->otg;
 8003004:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003006:	f8d6 7948 	ldr.w	r7, [r6, #2376]	; 0x948
  otgp->ie[ep].DIEPINT = epint;
 800300a:	f8c6 7948 	str.w	r7, [r6, #2376]	; 0x948
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800300e:	07fa      	lsls	r2, r7, #31
 8003010:	d513      	bpl.n	800303a <Vector14C+0x626>
 8003012:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003016:	07db      	lsls	r3, r3, #31
 8003018:	d50f      	bpl.n	800303a <Vector14C+0x626>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800301a:	6961      	ldr	r1, [r4, #20]
 800301c:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4290      	cmp	r0, r2
 8003024:	f0c0 814d 	bcc.w	80032c2 <Vector14C+0x8ae>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003028:	8923      	ldrh	r3, [r4, #8]
 800302a:	688a      	ldr	r2, [r1, #8]
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	8123      	strh	r3, [r4, #8]
 8003032:	b112      	cbz	r2, 800303a <Vector14C+0x626>
 8003034:	2102      	movs	r1, #2
 8003036:	48bd      	ldr	r0, [pc, #756]	; (800332c <Vector14C+0x918>)
 8003038:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 800303a:	063f      	lsls	r7, r7, #24
 800303c:	f57f ad44 	bpl.w	8002ac8 <Vector14C+0xb4>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003040:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003044:	075e      	lsls	r6, r3, #29
 8003046:	f57f ad3f 	bpl.w	8002ac8 <Vector14C+0xb4>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800304a:	6963      	ldr	r3, [r4, #20]
 800304c:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003050:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8003054:	e9dc e700 	ldrd	lr, r7, [ip]
 8003058:	45be      	cmp	lr, r7
 800305a:	f240 80f6 	bls.w	800324a <Vector14C+0x836>
    if (n > usbp->epc[ep]->in_maxsize)
 800305e:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003062:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003066:	ebae 0107 	sub.w	r1, lr, r7
 800306a:	4549      	cmp	r1, r9
 800306c:	bf28      	it	cs
 800306e:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003070:	b29b      	uxth	r3, r3
 8003072:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003076:	f63f ad27 	bhi.w	8002ac8 <Vector14C+0xb4>
 800307a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800307e:	f508 5040 	add.w	r0, r8, #12288	; 0x3000
 8003082:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8003084:	6833      	ldr	r3, [r6, #0]
 8003086:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003088:	2904      	cmp	r1, #4
 800308a:	d90a      	bls.n	80030a2 <Vector14C+0x68e>
 800308c:	1f4a      	subs	r2, r1, #5
 800308e:	f022 0203 	bic.w	r2, r2, #3
 8003092:	3204      	adds	r2, #4
 8003094:	4432      	add	r2, r6
 8003096:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003098:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800309c:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 800309e:	4293      	cmp	r3, r2
 80030a0:	d1fa      	bne.n	8003098 <Vector14C+0x684>
    usbp->epc[ep]->in_state->txcnt += n;
 80030a2:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 80030a4:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80030a6:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 80030a8:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80030ac:	f080 80cc 	bcs.w	8003248 <Vector14C+0x834>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80030b0:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80030b4:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
 80030b8:	4549      	cmp	r1, r9
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	bf28      	it	cs
 80030be:	4649      	movcs	r1, r9
 80030c0:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80030c4:	d9de      	bls.n	8003084 <Vector14C+0x670>
 80030c6:	4655      	mov	r5, sl
 80030c8:	e4fe      	b.n	8002ac8 <Vector14C+0xb4>
  stm32_otg_t *otgp = usbp->otg;
 80030ca:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80030cc:	f8d6 7b48 	ldr.w	r7, [r6, #2888]	; 0xb48
  otgp->oe[ep].DOEPINT = epint;
 80030d0:	f8c6 7b48 	str.w	r7, [r6, #2888]	; 0xb48
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80030d4:	073a      	lsls	r2, r7, #28
 80030d6:	d508      	bpl.n	80030ea <Vector14C+0x6d6>
 80030d8:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80030dc:	071b      	lsls	r3, r3, #28
 80030de:	d504      	bpl.n	80030ea <Vector14C+0x6d6>
    _usb_isr_invoke_setup_cb(usbp, ep);
 80030e0:	6963      	ldr	r3, [r4, #20]
 80030e2:	4892      	ldr	r0, [pc, #584]	; (800332c <Vector14C+0x918>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2102      	movs	r1, #2
 80030e8:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80030ea:	07ff      	lsls	r7, r7, #31
 80030ec:	f57f acdd 	bpl.w	8002aaa <Vector14C+0x96>
 80030f0:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80030f4:	07d8      	lsls	r0, r3, #31
 80030f6:	f57f acd8 	bpl.w	8002aaa <Vector14C+0x96>
    osp = usbp->epc[ep]->out_state;
 80030fa:	6962      	ldr	r2, [r4, #20]
    _usb_isr_invoke_out_cb(usbp, ep);
 80030fc:	8963      	ldrh	r3, [r4, #10]
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	8163      	strh	r3, [r4, #10]
 8003106:	2a00      	cmp	r2, #0
 8003108:	f43f accf 	beq.w	8002aaa <Vector14C+0x96>
 800310c:	2102      	movs	r1, #2
 800310e:	4887      	ldr	r0, [pc, #540]	; (800332c <Vector14C+0x918>)
 8003110:	4790      	blx	r2
 8003112:	e4ca      	b.n	8002aaa <Vector14C+0x96>
  stm32_otg_t *otgp = usbp->otg;
 8003114:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003116:	f8d6 7b28 	ldr.w	r7, [r6, #2856]	; 0xb28
  otgp->oe[ep].DOEPINT = epint;
 800311a:	f8c6 7b28 	str.w	r7, [r6, #2856]	; 0xb28
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800311e:	073a      	lsls	r2, r7, #28
 8003120:	d508      	bpl.n	8003134 <Vector14C+0x720>
 8003122:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003126:	071b      	lsls	r3, r3, #28
 8003128:	d504      	bpl.n	8003134 <Vector14C+0x720>
    _usb_isr_invoke_setup_cb(usbp, ep);
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	487f      	ldr	r0, [pc, #508]	; (800332c <Vector14C+0x918>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2101      	movs	r1, #1
 8003132:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003134:	07ff      	lsls	r7, r7, #31
 8003136:	f57f acb5 	bpl.w	8002aa4 <Vector14C+0x90>
 800313a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800313e:	07d8      	lsls	r0, r3, #31
 8003140:	f57f acb0 	bpl.w	8002aa4 <Vector14C+0x90>
    osp = usbp->epc[ep]->out_state;
 8003144:	6922      	ldr	r2, [r4, #16]
    _usb_isr_invoke_out_cb(usbp, ep);
 8003146:	8963      	ldrh	r3, [r4, #10]
 8003148:	68d2      	ldr	r2, [r2, #12]
 800314a:	f023 0302 	bic.w	r3, r3, #2
 800314e:	8163      	strh	r3, [r4, #10]
 8003150:	2a00      	cmp	r2, #0
 8003152:	f43f aca7 	beq.w	8002aa4 <Vector14C+0x90>
 8003156:	2101      	movs	r1, #1
 8003158:	4874      	ldr	r0, [pc, #464]	; (800332c <Vector14C+0x918>)
 800315a:	4790      	blx	r2
 800315c:	e4a2      	b.n	8002aa4 <Vector14C+0x90>
  stm32_otg_t *otgp = usbp->otg;
 800315e:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003160:	f8d6 7b08 	ldr.w	r7, [r6, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8003164:	f8c6 7b08 	str.w	r7, [r6, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003168:	073a      	lsls	r2, r7, #28
 800316a:	d508      	bpl.n	800317e <Vector14C+0x76a>
 800316c:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003170:	071b      	lsls	r3, r3, #28
 8003172:	d504      	bpl.n	800317e <Vector14C+0x76a>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003174:	68e3      	ldr	r3, [r4, #12]
 8003176:	486d      	ldr	r0, [pc, #436]	; (800332c <Vector14C+0x918>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2100      	movs	r1, #0
 800317c:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800317e:	07ff      	lsls	r7, r7, #31
 8003180:	f57f ac8d 	bpl.w	8002a9e <Vector14C+0x8a>
 8003184:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003188:	07d8      	lsls	r0, r3, #31
 800318a:	f57f ac88 	bpl.w	8002a9e <Vector14C+0x8a>
    osp = usbp->epc[ep]->out_state;
 800318e:	68e2      	ldr	r2, [r4, #12]
 8003190:	6991      	ldr	r1, [r2, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003192:	8a50      	ldrh	r0, [r2, #18]
 8003194:	684e      	ldr	r6, [r1, #4]
 8003196:	fbb6 f3f0 	udiv	r3, r6, r0
 800319a:	fb00 6313 	mls	r3, r0, r3, r6
 800319e:	b923      	cbnz	r3, 80031aa <Vector14C+0x796>
          (osp->rxsize < osp->totsize)) {
 80031a0:	680e      	ldr	r6, [r1, #0]
 80031a2:	68c8      	ldr	r0, [r1, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80031a4:	4286      	cmp	r6, r0
 80031a6:	f0c0 816a 	bcc.w	800347e <Vector14C+0xa6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 80031aa:	8963      	ldrh	r3, [r4, #10]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	8163      	strh	r3, [r4, #10]
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	f43f ac72 	beq.w	8002a9e <Vector14C+0x8a>
 80031ba:	2100      	movs	r1, #0
 80031bc:	485b      	ldr	r0, [pc, #364]	; (800332c <Vector14C+0x918>)
 80031be:	4790      	blx	r2
 80031c0:	e46d      	b.n	8002a9e <Vector14C+0x8a>
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bf28      	it	cs
 80031c6:	4613      	movcs	r3, r2
 80031c8:	461f      	mov	r7, r3
  uint32_t w = 0;
 80031ca:	2300      	movs	r3, #0
  size_t i = 0;
 80031cc:	4619      	mov	r1, r3
      w = *fifop;
 80031ce:	f505 5c80 	add.w	ip, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 80031d2:	f013 0f03 	tst.w	r3, #3
 80031d6:	d10c      	bne.n	80031f2 <Vector14C+0x7de>
      w = *fifop;
 80031d8:	f8dc 1000 	ldr.w	r1, [ip]
      *buf++ = (uint8_t)w;
 80031dc:	f806 1b01 	strb.w	r1, [r6], #1
    i++;
 80031e0:	3301      	adds	r3, #1
  while (i < n) {
 80031e2:	42bb      	cmp	r3, r7
      w >>= 8;
 80031e4:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 80031e8:	d3f3      	bcc.n	80031d2 <Vector14C+0x7be>
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f63f ae1d 	bhi.w	8002e2a <Vector14C+0x416>
 80031f0:	e625      	b.n	8002e3e <Vector14C+0x42a>
    i++;
 80031f2:	3301      	adds	r3, #1
  while (i < n) {
 80031f4:	42bb      	cmp	r3, r7
      *buf++ = (uint8_t)w;
 80031f6:	f806 1b01 	strb.w	r1, [r6], #1
      w >>= 8;
 80031fa:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 80031fe:	d3e8      	bcc.n	80031d2 <Vector14C+0x7be>
 8003200:	e7f3      	b.n	80031ea <Vector14C+0x7d6>
 8003202:	e9dd 2902 	ldrd	r2, r9, [sp, #8]
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8003206:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f909 	lsl.w	r9, r1, r9
 8003210:	ea23 0309 	bic.w	r3, r3, r9
 8003214:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 8003218:	e4b5      	b.n	8002b86 <Vector14C+0x172>
 800321a:	f8dc 3834 	ldr.w	r3, [ip, #2100]	; 0x834
 800321e:	f023 0308 	bic.w	r3, r3, #8
 8003222:	f8cc 3834 	str.w	r3, [ip, #2100]	; 0x834
 8003226:	e452      	b.n	8002ace <Vector14C+0xba>
 8003228:	4655      	mov	r5, sl
 800322a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800322e:	f023 0302 	bic.w	r3, r3, #2
 8003232:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003236:	e444      	b.n	8002ac2 <Vector14C+0xae>
 8003238:	4655      	mov	r5, sl
 800323a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003246:	e439      	b.n	8002abc <Vector14C+0xa8>
 8003248:	4655      	mov	r5, sl
 800324a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800324e:	f023 0304 	bic.w	r3, r3, #4
 8003252:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003256:	e437      	b.n	8002ac8 <Vector14C+0xb4>
      isp->txsize = isp->totsize - isp->txsize;
 8003258:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800325a:	2100      	movs	r1, #0
 800325c:	e9c3 2100 	strd	r2, r1, [r3]
 8003260:	2320      	movs	r3, #32
 8003262:	f383 8811 	msr	BASEPRI, r3
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003266:	69a1      	ldr	r1, [r4, #24]
 8003268:	694b      	ldr	r3, [r1, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 800326e:	2a00      	cmp	r2, #0
 8003270:	f040 80c5 	bne.w	80033fe <Vector14C+0x9ea>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003274:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800327a:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800327e:	680a      	ldr	r2, [r1, #0]
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	2a01      	cmp	r2, #1
 8003286:	d10c      	bne.n	80032a2 <Vector14C+0x88e>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003288:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800328c:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003290:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 8003294:	bf14      	ite	ne
 8003296:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 800329a:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 800329e:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80032a2:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 80032a6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80032aa:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80032ae:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80032ba:	2300      	movs	r3, #0
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	e53d      	b.n	8002d3e <Vector14C+0x32a>
      isp->txsize = isp->totsize - isp->txsize;
 80032c2:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 80032c4:	2100      	movs	r1, #0
 80032c6:	e9c3 2100 	strd	r2, r1, [r3]
 80032ca:	2320      	movs	r3, #32
 80032cc:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80032d0:	6961      	ldr	r1, [r4, #20]
 80032d2:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 80032d8:	2a00      	cmp	r2, #0
 80032da:	f040 80c1 	bne.w	8003460 <Vector14C+0xa4c>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80032de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032e4:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80032e8:	680a      	ldr	r2, [r1, #0]
 80032ea:	f002 0203 	and.w	r2, r2, #3
 80032ee:	2a01      	cmp	r2, #1
 80032f0:	d10c      	bne.n	800330c <Vector14C+0x8f8>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80032f2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80032f6:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80032fa:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 80032fe:	bf14      	ite	ne
 8003300:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003304:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8003308:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800330c:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 8003310:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003314:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003318:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800331c:	f042 0204 	orr.w	r2, r2, #4
 8003320:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003324:	2300      	movs	r3, #0
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	e686      	b.n	800303a <Vector14C+0x626>
 800332c:	20000a84 	.word	0x20000a84
      isp->txsize = isp->totsize - isp->txsize;
 8003330:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8003332:	2100      	movs	r1, #0
 8003334:	e9c3 2100 	strd	r2, r1, [r3]
 8003338:	2320      	movs	r3, #32
 800333a:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800333e:	68e1      	ldr	r1, [r4, #12]
 8003340:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8003346:	2a00      	cmp	r2, #0
 8003348:	d175      	bne.n	8003436 <Vector14C+0xa22>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800334a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800334c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003350:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003354:	680a      	ldr	r2, [r1, #0]
 8003356:	f002 0203 	and.w	r2, r2, #3
 800335a:	2a01      	cmp	r2, #1
 800335c:	d10c      	bne.n	8003378 <Vector14C+0x964>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800335e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003362:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003366:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800336a:	bf14      	ite	ne
 800336c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003370:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8003374:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003378:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800337c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003380:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003384:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003390:	2300      	movs	r3, #0
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	e5eb      	b.n	8002f70 <Vector14C+0x55c>
      isp->txsize = isp->totsize - isp->txsize;
 8003398:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800339a:	2100      	movs	r1, #0
 800339c:	e9c3 2100 	strd	r2, r1, [r3]
 80033a0:	2320      	movs	r3, #32
 80033a2:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80033a6:	6921      	ldr	r1, [r4, #16]
 80033a8:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 80033ae:	bb9a      	cbnz	r2, 8003418 <Vector14C+0xa04>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80033b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033b6:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80033ba:	680a      	ldr	r2, [r1, #0]
 80033bc:	f002 0203 	and.w	r2, r2, #3
 80033c0:	2a01      	cmp	r2, #1
 80033c2:	d10c      	bne.n	80033de <Vector14C+0x9ca>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80033c4:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80033c8:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80033cc:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 80033d0:	bf14      	ite	ne
 80033d2:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80033d6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 80033da:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80033de:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 80033e2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80033e6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80033ea:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80033ee:	f042 0202 	orr.w	r2, r2, #2
 80033f2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80033f6:	2300      	movs	r3, #0
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	e555      	b.n	8002eaa <Vector14C+0x496>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80033fe:	8a0f      	ldrh	r7, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003400:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003402:	19d0      	adds	r0, r2, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003404:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003408:	3801      	subs	r0, #1
 800340a:	fbb0 f0f7 	udiv	r0, r0, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800340e:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003412:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
 8003416:	e732      	b.n	800327e <Vector14C+0x86a>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003418:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800341c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800341e:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003422:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003426:	3801      	subs	r0, #1
 8003428:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800342c:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003430:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
 8003434:	e7c1      	b.n	80033ba <Vector14C+0x9a6>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003436:	2a40      	cmp	r2, #64	; 0x40
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003438:	f8b1 e010 	ldrh.w	lr, [r1, #16]
      isp->txsize = EP0_MAX_INSIZE;
 800343c:	bf85      	ittet	hi
 800343e:	f8df c0b8 	ldrhi.w	ip, [pc, #184]	; 80034f8 <Vector14C+0xae4>
 8003442:	2240      	movhi	r2, #64	; 0x40
 8003444:	f042 5c00 	orrls.w	ip, r2, #536870912	; 0x20000000
 8003448:	601a      	strhi	r2, [r3, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800344a:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800344e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003450:	4402      	add	r2, r0
 8003452:	fbb2 f2fe 	udiv	r2, r2, lr
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003456:	ea4c 42c2 	orr.w	r2, ip, r2, lsl #19
 800345a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
 800345e:	e779      	b.n	8003354 <Vector14C+0x940>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003460:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003464:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003466:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800346a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800346e:	3801      	subs	r0, #1
 8003470:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003474:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003478:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
 800347c:	e734      	b.n	80032e8 <Vector14C+0x8d4>
        osp->rxsize = osp->totsize - osp->rxsize;
 800347e:	1b80      	subs	r0, r0, r6
        osp->rxcnt  = 0;
 8003480:	e9c1 0300 	strd	r0, r3, [r1]
 8003484:	2320      	movs	r3, #32
 8003486:	f383 8811 	msr	BASEPRI, r3
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800348a:	68e2      	ldr	r2, [r4, #12]
 800348c:	6993      	ldr	r3, [r2, #24]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800348e:	6816      	ldr	r6, [r2, #0]
  osp->totsize = osp->rxsize;
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	60d9      	str	r1, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8003494:	2940      	cmp	r1, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8003496:	bf84      	itt	hi
 8003498:	2140      	movhi	r1, #64	; 0x40
 800349a:	6019      	strhi	r1, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800349c:	8a53      	ldrh	r3, [r2, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800349e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80034a0:	1e58      	subs	r0, r3, #1
 80034a2:	4401      	add	r1, r0
 80034a4:	fbb1 f1f3 	udiv	r1, r1, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	3303      	adds	r3, #3
 80034ae:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80034b2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80034b6:	f006 0103 	and.w	r1, r6, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80034ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80034be:	2901      	cmp	r1, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80034c0:	f8c2 3b10 	str.w	r3, [r2, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80034c4:	d10c      	bne.n	80034e0 <Vector14C+0xacc>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80034c6:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 80034ca:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 80034ce:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80034d2:	bf14      	ite	ne
 80034d4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80034d8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80034dc:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80034e0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80034e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034e8:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80034ec:	2300      	movs	r3, #0
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f7ff bad4 	b.w	8002a9e <Vector14C+0x8a>
 80034f6:	bf00      	nop
 80034f8:	20000040 	.word	0x20000040

080034fc <usb_lld_init>:
void usb_lld_init(void) {
 80034fc:	b510      	push	{r4, lr}
  usbObjectInit(&USBD1);
 80034fe:	4c05      	ldr	r4, [pc, #20]	; (8003514 <usb_lld_init+0x18>)
 8003500:	4620      	mov	r0, r4
 8003502:	f7fd fec9 	bl	8001298 <usbObjectInit>
  USBD1.otgparams = &fsparams;
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <usb_lld_init+0x1c>)
  USBD1.otg       = OTG_FS;
 8003508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800350c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
}
 8003510:	bd10      	pop	{r4, pc}
 8003512:	bf00      	nop
 8003514:	20000a84 	.word	0x20000a84
 8003518:	08006920 	.word	0x08006920

0800351c <usb_lld_start>:
  if (usbp->state == USB_STOP) {
 800351c:	7803      	ldrb	r3, [r0, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d000      	beq.n	8003524 <usb_lld_start+0x8>
 8003522:	4770      	bx	lr
    if (&USBD1 == usbp) {
 8003524:	4ba2      	ldr	r3, [pc, #648]	; (80037b0 <usb_lld_start+0x294>)
 8003526:	4298      	cmp	r0, r3
void usb_lld_start(USBDriver *usbp) {
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
 800352c:	6d45      	ldr	r5, [r0, #84]	; 0x54
    if (&USBD1 == usbp) {
 800352e:	f000 8120 	beq.w	8003772 <usb_lld_start+0x256>
  stm32_otg_t *otgp = usbp->otg;
 8003532:	462c      	mov	r4, r5
    otgp->PCGCCTL = 0;
 8003534:	2100      	movs	r1, #0
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003536:	22c0      	movs	r2, #192	; 0xc0
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8003538:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 800353c:	f8c5 1e00 	str.w	r1, [r5, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003540:	602a      	str	r2, [r5, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8003542:	63ab      	str	r3, [r5, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	dafc      	bge.n	8003544 <usb_lld_start+0x28>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800354a:	2301      	movs	r3, #1
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	200c      	movs	r0, #12
 8003550:	f001 fd42 	bl	8004fd8 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	07db      	lsls	r3, r3, #31
 8003558:	d4fc      	bmi.n	8003554 <usb_lld_start+0x38>
 800355a:	2012      	movs	r0, #18
 800355c:	f001 fd3c 	bl	8004fd8 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	dafc      	bge.n	8003560 <usb_lld_start+0x44>
    otg_disable_ep(usbp);
 8003566:	e9d6 3215 	ldrd	r3, r2, [r6, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800356a:	6894      	ldr	r4, [r2, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800356c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->GAHBCFG = 0;
 8003570:	2200      	movs	r2, #0
 8003572:	60aa      	str	r2, [r5, #8]
    otgp->ie[i].DIEPCTL = 0;
 8003574:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8003578:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800357c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 8003580:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8003584:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003588:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800358c:	2c00      	cmp	r4, #0
 800358e:	f000 80d5 	beq.w	800373c <usb_lld_start+0x220>
 8003592:	2c01      	cmp	r4, #1
    otgp->ie[i].DIEPCTL = 0;
 8003594:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 8003598:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800359c:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 80035a0:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 80035a4:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80035a8:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035ac:	f240 80c6 	bls.w	800373c <usb_lld_start+0x220>
 80035b0:	2c02      	cmp	r4, #2
    otgp->ie[i].DIEPCTL = 0;
 80035b2:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 80035b6:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80035ba:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 80035be:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 80035c2:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80035c6:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035ca:	f000 80b7 	beq.w	800373c <usb_lld_start+0x220>
 80035ce:	2c03      	cmp	r4, #3
    otgp->ie[i].DIEPCTL = 0;
 80035d0:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 80035d4:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80035d8:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 80035dc:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 80035e0:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80035e4:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035e8:	f000 80a8 	beq.w	800373c <usb_lld_start+0x220>
 80035ec:	2c04      	cmp	r4, #4
    otgp->ie[i].DIEPCTL = 0;
 80035ee:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 80035f2:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80035f6:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 80035fa:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 80035fe:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003602:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003606:	f000 8099 	beq.w	800373c <usb_lld_start+0x220>
 800360a:	2c05      	cmp	r4, #5
    otgp->ie[i].DIEPCTL = 0;
 800360c:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 8003610:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003614:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 8003618:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 800361c:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003620:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003624:	f000 808a 	beq.w	800373c <usb_lld_start+0x220>
 8003628:	2c06      	cmp	r4, #6
    otgp->ie[i].DIEPCTL = 0;
 800362a:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 800362e:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003632:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 8003636:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 800363a:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800363e:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003642:	d07b      	beq.n	800373c <usb_lld_start+0x220>
 8003644:	2c07      	cmp	r4, #7
    otgp->ie[i].DIEPCTL = 0;
 8003646:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 800364a:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800364e:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 8003652:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 8003656:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800365a:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800365e:	d06d      	beq.n	800373c <usb_lld_start+0x220>
 8003660:	2c08      	cmp	r4, #8
    otgp->ie[i].DIEPCTL = 0;
 8003662:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 8003666:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800366a:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 800366e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 8003672:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003676:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800367a:	d05f      	beq.n	800373c <usb_lld_start+0x220>
 800367c:	2c09      	cmp	r4, #9
    otgp->ie[i].DIEPCTL = 0;
 800367e:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 8003682:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003686:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 800368a:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 800368e:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003692:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003696:	d051      	beq.n	800373c <usb_lld_start+0x220>
 8003698:	2c0a      	cmp	r4, #10
    otgp->ie[i].DIEPCTL = 0;
 800369a:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 800369e:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036a2:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 80036a6:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 80036aa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80036ae:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80036b2:	d043      	beq.n	800373c <usb_lld_start+0x220>
 80036b4:	2c0b      	cmp	r4, #11
    otgp->ie[i].DIEPCTL = 0;
 80036b6:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 80036ba:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036be:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 80036c2:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 80036c6:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80036ca:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80036ce:	d035      	beq.n	800373c <usb_lld_start+0x220>
 80036d0:	2c0c      	cmp	r4, #12
    otgp->ie[i].DIEPCTL = 0;
 80036d2:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 80036d6:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036da:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 80036de:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 80036e2:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80036e6:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80036ea:	d027      	beq.n	800373c <usb_lld_start+0x220>
 80036ec:	2c0d      	cmp	r4, #13
    otgp->ie[i].DIEPCTL = 0;
 80036ee:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 80036f2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036f6:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 80036fa:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 80036fe:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003702:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003706:	d019      	beq.n	800373c <usb_lld_start+0x220>
 8003708:	2c0e      	cmp	r4, #14
    otgp->ie[i].DIEPCTL = 0;
 800370a:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 800370e:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003712:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 8003716:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 800371a:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800371e:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003722:	d00b      	beq.n	800373c <usb_lld_start+0x220>
    otgp->ie[i].DIEPCTL = 0;
 8003724:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 8003728:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800372c:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 8003730:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 8003734:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003738:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
    if (usbp->config->sof_cb == NULL)
 800373c:	6872      	ldr	r2, [r6, #4]
 800373e:	68d1      	ldr	r1, [r2, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003740:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    otgp->DIEPMSK  = 0;
 8003744:	2200      	movs	r2, #0
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003746:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 800374a:	f8c5 2810 	str.w	r2, [r5, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 800374e:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8003752:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8003756:	b149      	cbz	r1, 800376c <usb_lld_start+0x250>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <usb_lld_start+0x298>)
 800375a:	61ab      	str	r3, [r5, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003760:	616b      	str	r3, [r5, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8003762:	68ab      	ldr	r3, [r5, #8]
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	60ab      	str	r3, [r5, #8]
}
 800376a:	bd70      	pop	{r4, r5, r6, pc}
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <usb_lld_start+0x29c>)
 800376e:	61ab      	str	r3, [r5, #24]
 8003770:	e7f4      	b.n	800375c <usb_lld_start+0x240>
      rccEnableOTG_FS(true);
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <usb_lld_start+0x2a0>)
 8003774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
 800377c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
 8003784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003794:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003796:	210e      	movs	r1, #14
 8003798:	2043      	movs	r0, #67	; 0x43
      rccResetOTG_FS();
 800379a:	695b      	ldr	r3, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800379c:	f7fe f87a 	bl	8001894 <nvicEnableVector>
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <usb_lld_start+0x2a4>)
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <usb_lld_start+0x2a8>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80037a4:	60ea      	str	r2, [r5, #12]
 80037a6:	6d74      	ldr	r4, [r6, #84]	; 0x54
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80037a8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 80037ac:	e6c2      	b.n	8003534 <usb_lld_start+0x18>
 80037ae:	bf00      	nop
 80037b0:	20000a84 	.word	0x20000a84
 80037b4:	c0303c08 	.word	0xc0303c08
 80037b8:	c0303c00 	.word	0xc0303c00
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40001440 	.word	0x40001440
 80037c4:	02200003 	.word	0x02200003

080037c8 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 80037c8:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 80037ca:	6d44      	ldr	r4, [r0, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80037cc:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 80037ce:	4606      	mov	r6, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80037d0:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80037d2:	6925      	ldr	r5, [r4, #16]
 80037d4:	f015 0520 	ands.w	r5, r5, #32
 80037d8:	d1fb      	bne.n	80037d2 <usb_lld_reset+0xa>
 80037da:	2012      	movs	r0, #18
 80037dc:	f001 fbfc 	bl	8004fd8 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80037e0:	6db0      	ldr	r0, [r6, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 80037e2:	f8c4 5834 	str.w	r5, [r4, #2100]	; 0x834
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80037e6:	6881      	ldr	r1, [r0, #8]
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80037e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80037f0:	f04f 1501 	mov.w	r5, #65537	; 0x10001
 80037f4:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80037f8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80037fc:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003800:	f8c4 3908 	str.w	r3, [r4, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003804:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003808:	2900      	cmp	r1, #0
 800380a:	f000 8095 	beq.w	8003938 <usb_lld_reset+0x170>
 800380e:	2901      	cmp	r1, #1
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003810:	f8c4 2920 	str.w	r2, [r4, #2336]	; 0x920
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003814:	f8c4 2b20 	str.w	r2, [r4, #2848]	; 0xb20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003818:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800381c:	f8c4 3b28 	str.w	r3, [r4, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003820:	f240 808a 	bls.w	8003938 <usb_lld_reset+0x170>
 8003824:	2902      	cmp	r1, #2
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003826:	f8c4 2940 	str.w	r2, [r4, #2368]	; 0x940
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800382a:	f8c4 2b40 	str.w	r2, [r4, #2880]	; 0xb40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800382e:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003832:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003836:	d07f      	beq.n	8003938 <usb_lld_reset+0x170>
 8003838:	2903      	cmp	r1, #3
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800383a:	f8c4 2960 	str.w	r2, [r4, #2400]	; 0x960
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800383e:	f8c4 2b60 	str.w	r2, [r4, #2912]	; 0xb60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003842:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003846:	f8c4 3b68 	str.w	r3, [r4, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800384a:	d075      	beq.n	8003938 <usb_lld_reset+0x170>
 800384c:	2904      	cmp	r1, #4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800384e:	f8c4 2980 	str.w	r2, [r4, #2432]	; 0x980
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003852:	f8c4 2b80 	str.w	r2, [r4, #2944]	; 0xb80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003856:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800385a:	f8c4 3b88 	str.w	r3, [r4, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800385e:	d06b      	beq.n	8003938 <usb_lld_reset+0x170>
 8003860:	2905      	cmp	r1, #5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003862:	f8c4 29a0 	str.w	r2, [r4, #2464]	; 0x9a0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003866:	f8c4 2ba0 	str.w	r2, [r4, #2976]	; 0xba0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800386a:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800386e:	f8c4 3ba8 	str.w	r3, [r4, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003872:	d061      	beq.n	8003938 <usb_lld_reset+0x170>
 8003874:	2906      	cmp	r1, #6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003876:	f8c4 29c0 	str.w	r2, [r4, #2496]	; 0x9c0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800387a:	f8c4 2bc0 	str.w	r2, [r4, #3008]	; 0xbc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800387e:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003882:	f8c4 3bc8 	str.w	r3, [r4, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003886:	d057      	beq.n	8003938 <usb_lld_reset+0x170>
 8003888:	2907      	cmp	r1, #7
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800388a:	f8c4 29e0 	str.w	r2, [r4, #2528]	; 0x9e0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800388e:	f8c4 2be0 	str.w	r2, [r4, #3040]	; 0xbe0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003892:	f8c4 39e8 	str.w	r3, [r4, #2536]	; 0x9e8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003896:	f8c4 3be8 	str.w	r3, [r4, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800389a:	d04d      	beq.n	8003938 <usb_lld_reset+0x170>
 800389c:	2908      	cmp	r1, #8
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800389e:	f8c4 2a00 	str.w	r2, [r4, #2560]	; 0xa00
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80038a2:	f8c4 2c00 	str.w	r2, [r4, #3072]	; 0xc00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80038a6:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80038aa:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80038ae:	d043      	beq.n	8003938 <usb_lld_reset+0x170>
 80038b0:	2909      	cmp	r1, #9
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80038b2:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80038b6:	f8c4 2c20 	str.w	r2, [r4, #3104]	; 0xc20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80038ba:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80038be:	f8c4 3c28 	str.w	r3, [r4, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80038c2:	d039      	beq.n	8003938 <usb_lld_reset+0x170>
 80038c4:	290a      	cmp	r1, #10
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80038c6:	f8c4 2a40 	str.w	r2, [r4, #2624]	; 0xa40
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80038ca:	f8c4 2c40 	str.w	r2, [r4, #3136]	; 0xc40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80038ce:	f8c4 3a48 	str.w	r3, [r4, #2632]	; 0xa48
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80038d2:	f8c4 3c48 	str.w	r3, [r4, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80038d6:	d02f      	beq.n	8003938 <usb_lld_reset+0x170>
 80038d8:	290b      	cmp	r1, #11
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80038da:	f8c4 2a60 	str.w	r2, [r4, #2656]	; 0xa60
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80038de:	f8c4 2c60 	str.w	r2, [r4, #3168]	; 0xc60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80038e2:	f8c4 3a68 	str.w	r3, [r4, #2664]	; 0xa68
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80038e6:	f8c4 3c68 	str.w	r3, [r4, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80038ea:	d025      	beq.n	8003938 <usb_lld_reset+0x170>
 80038ec:	290c      	cmp	r1, #12
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80038ee:	f8c4 2a80 	str.w	r2, [r4, #2688]	; 0xa80
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80038f2:	f8c4 2c80 	str.w	r2, [r4, #3200]	; 0xc80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80038f6:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80038fa:	f8c4 3c88 	str.w	r3, [r4, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80038fe:	d01b      	beq.n	8003938 <usb_lld_reset+0x170>
 8003900:	290d      	cmp	r1, #13
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003902:	f8c4 2aa0 	str.w	r2, [r4, #2720]	; 0xaa0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003906:	f8c4 2ca0 	str.w	r2, [r4, #3232]	; 0xca0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800390a:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800390e:	f8c4 3ca8 	str.w	r3, [r4, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003912:	d011      	beq.n	8003938 <usb_lld_reset+0x170>
 8003914:	290e      	cmp	r1, #14
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003916:	f8c4 2ac0 	str.w	r2, [r4, #2752]	; 0xac0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800391a:	f8c4 2cc0 	str.w	r2, [r4, #3264]	; 0xcc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800391e:	f8c4 3ac8 	str.w	r3, [r4, #2760]	; 0xac8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003922:	f8c4 3cc8 	str.w	r3, [r4, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003926:	d007      	beq.n	8003938 <usb_lld_reset+0x170>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003928:	f8c4 2ae0 	str.w	r2, [r4, #2784]	; 0xae0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800392c:	f8c4 2ce0 	str.w	r2, [r4, #3296]	; 0xce0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003930:	f8c4 3ae8 	str.w	r3, [r4, #2792]	; 0xae8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003934:	f8c4 3ce8 	str.w	r3, [r4, #3304]	; 0xce8
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003938:	6803      	ldr	r3, [r0, #0]
 800393a:	65f3      	str	r3, [r6, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800393c:	6803      	ldr	r3, [r0, #0]
  otg_rxfifo_flush(usbp);
 800393e:	6d72      	ldr	r2, [r6, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003940:	6263      	str	r3, [r4, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8003942:	2310      	movs	r3, #16
 8003944:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003946:	6915      	ldr	r5, [r2, #16]
 8003948:	f015 0510 	ands.w	r5, r5, #16
 800394c:	d1fb      	bne.n	8003946 <usb_lld_reset+0x17e>
 800394e:	2012      	movs	r0, #18
 8003950:	f001 fb42 	bl	8004fd8 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003954:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <usb_lld_reset+0x1d8>)
  usbp->epc[0] = &ep0config;
 800395a:	4912      	ldr	r1, [pc, #72]	; (80039a4 <usb_lld_reset+0x1dc>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800395c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003960:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003964:	69a3      	ldr	r3, [r4, #24]
 8003966:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	61a3      	str	r3, [r4, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003970:	2309      	movs	r3, #9
 8003972:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8003976:	f8c4 3814 	str.w	r3, [r4, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 800397a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  usbp->epc[0] = &ep0config;
 800397e:	60f1      	str	r1, [r6, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8003980:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003984:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8003988:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800398c:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  next = usbp->pmnext;
 8003990:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  usbp->pmnext += size;
 8003992:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 800399a:	65f2      	str	r2, [r6, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800399c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	10008040 	.word	0x10008040
 80039a4:	080068fc 	.word	0x080068fc

080039a8 <usb_lld_set_address>:
  stm32_otg_t *otgp = usbp->otg;
 80039a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80039aa:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80039ae:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80039b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80039ba:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 80039be:	4770      	bx	lr

080039c0 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80039c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c4:	fa0f f881 	sxth.w	r8, r1
 80039c8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 80039cc:	460d      	mov	r5, r1
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	2a02      	cmp	r2, #2
 80039d8:	f000 8097 	beq.w	8003b0a <usb_lld_init_endpoint+0x14a>
 80039dc:	2a03      	cmp	r2, #3
 80039de:	f000 8091 	beq.w	8003b04 <usb_lld_init_endpoint+0x144>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 80039e2:	4c4b      	ldr	r4, [pc, #300]	; (8003b10 <usb_lld_init_endpoint+0x150>)
 80039e4:	494b      	ldr	r1, [pc, #300]	; (8003b14 <usb_lld_init_endpoint+0x154>)
 80039e6:	2a01      	cmp	r2, #1
 80039e8:	bf0c      	ite	eq
 80039ea:	46a1      	moveq	r9, r4
 80039ec:	4689      	movne	r9, r1
  stm32_otg_t *otgp = usbp->otg;
 80039ee:	6d44      	ldr	r4, [r0, #84]	; 0x54
  if (usbp->epc[ep]->out_state != NULL) {
 80039f0:	699e      	ldr	r6, [r3, #24]
  otgp->oe[ep].DOEPTSIZ = 0;
 80039f2:	0169      	lsls	r1, r5, #5
 80039f4:	1862      	adds	r2, r4, r1
 80039f6:	f04f 0c00 	mov.w	ip, #0
 80039fa:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 80039fe:	f105 0210 	add.w	r2, r5, #16
 8003a02:	f04f 0c01 	mov.w	ip, #1
 8003a06:	fa0c f202 	lsl.w	r2, ip, r2
  if (usbp->epc[ep]->out_state != NULL) {
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d04b      	beq.n	8003aa6 <usb_lld_init_endpoint+0xe6>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8003a0e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8003a12:	f105 0658 	add.w	r6, r5, #88	; 0x58
 8003a16:	0176      	lsls	r6, r6, #5
 8003a18:	ea4c 0c09 	orr.w	ip, ip, r9
 8003a1c:	f844 c006 	str.w	ip, [r4, r6]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8003a20:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8003a24:	4332      	orrs	r2, r6
 8003a26:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8003a2a:	1866      	adds	r6, r4, r1
  if (usbp->epc[ep]->in_state != NULL) {
 8003a2c:	f8d3 c014 	ldr.w	ip, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8003a30:	2200      	movs	r2, #0
 8003a32:	01a9      	lsls	r1, r5, #6
 8003a34:	f8c6 2910 	str.w	r2, [r6, #2320]	; 0x910
 8003a38:	f041 0120 	orr.w	r1, r1, #32
 8003a3c:	1e6a      	subs	r2, r5, #1
  if (usbp->epc[ep]->in_state != NULL) {
 8003a3e:	f1bc 0f00 	cmp.w	ip, #0
 8003a42:	d03f      	beq.n	8003ac4 <usb_lld_init_endpoint+0x104>
    if (usbp->epc[ep]->in_multiplier > 1)
 8003a44:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003a48:	8a1e      	ldrh	r6, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8003a4a:	f1bc 0f01 	cmp.w	ip, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003a4e:	ea4f 0396 	mov.w	r3, r6, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003a52:	f102 0240 	add.w	r2, r2, #64	; 0x40
  next = usbp->pmnext;
 8003a56:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8003a58:	bf88      	it	hi
 8003a5a:	fb0c f303 	mulhi.w	r3, ip, r3
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003a5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  usbp->pmnext += size;
 8003a62:	eb03 0c06 	add.w	ip, r3, r6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003a66:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  usbp->pmnext += size;
 8003a6a:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003a6e:	6053      	str	r3, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003a70:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	069a      	lsls	r2, r3, #26
 8003a76:	d4fc      	bmi.n	8003a72 <usb_lld_init_endpoint+0xb2>
 8003a78:	2012      	movs	r0, #18
 8003a7a:	f001 faad 	bl	8004fd8 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 8003a82:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8003a86:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8003a8a:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8003a8c:	ea42 0209 	orr.w	r2, r2, r9
    otgp->ie[ep].DIEPCTL = ctl |
 8003a90:	50e2      	str	r2, [r4, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8003a92:	2101      	movs	r1, #1
 8003a94:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003a98:	fa01 f505 	lsl.w	r5, r1, r5
 8003a9c:	431d      	orrs	r5, r3
 8003a9e:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 8003aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa6:	eb04 1c48 	add.w	ip, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8003aaa:	f8dc 6b00 	ldr.w	r6, [ip, #2816]	; 0xb00
 8003aae:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
 8003ab2:	f8cc 6b00 	str.w	r6, [ip, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003ab6:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8003aba:	ea26 0202 	bic.w	r2, r6, r2
 8003abe:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
 8003ac2:	e7b2      	b.n	8003a2a <usb_lld_init_endpoint+0x6a>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003ac4:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8003ac8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <usb_lld_init_endpoint+0x158>)
 8003ace:	605a      	str	r2, [r3, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003ad0:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	069b      	lsls	r3, r3, #26
 8003ad6:	d4fc      	bmi.n	8003ad2 <usb_lld_init_endpoint+0x112>
 8003ad8:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8003adc:	2012      	movs	r0, #18
 8003ade:	f001 fa7b 	bl	8004fd8 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8003ae2:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8003ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aea:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8003aee:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f505 	lsl.w	r5, r1, r5
 8003af8:	ea23 0505 	bic.w	r5, r3, r5
 8003afc:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 8003b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8003b04:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8003b1c <usb_lld_init_endpoint+0x15c>
    break;
 8003b08:	e771      	b.n	80039ee <usb_lld_init_endpoint+0x2e>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8003b0a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8003b20 <usb_lld_init_endpoint+0x160>
    break;
 8003b0e:	e76e      	b.n	80039ee <usb_lld_init_endpoint+0x2e>
 8003b10:	10048000 	.word	0x10048000
 8003b14:	10008000 	.word	0x10008000
 8003b18:	02000400 	.word	0x02000400
 8003b1c:	100c8000 	.word	0x100c8000
 8003b20:	10088000 	.word	0x10088000

08003b24 <usb_lld_disable_endpoints>:
  otg_disable_ep(usbp);
 8003b24:	e9d0 3115 	ldrd	r3, r1, [r0, #84]	; 0x54
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8003b28:	b410      	push	{r4}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003b2a:	680c      	ldr	r4, [r1, #0]
 8003b2c:	65c4      	str	r4, [r0, #92]	; 0x5c
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b2e:	6888      	ldr	r0, [r1, #8]
    otgp->ie[i].DIEPCTL = 0;
 8003b30:	2200      	movs	r2, #0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->ie[i].DIEPCTL = 0;
 8003b36:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8003b3a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b3e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 8003b42:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8003b46:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b4a:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f000 80d5 	beq.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003b54:	2801      	cmp	r0, #1
    otgp->ie[i].DIEPCTL = 0;
 8003b56:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 8003b5a:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b5e:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 8003b62:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 8003b66:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b6a:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b6e:	f240 80c6 	bls.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003b72:	2802      	cmp	r0, #2
    otgp->ie[i].DIEPCTL = 0;
 8003b74:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 8003b78:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b7c:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 8003b80:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 8003b84:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b88:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b8c:	f000 80b7 	beq.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003b90:	2803      	cmp	r0, #3
    otgp->ie[i].DIEPCTL = 0;
 8003b92:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 8003b96:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b9a:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 8003b9e:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 8003ba2:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003ba6:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003baa:	f000 80a8 	beq.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003bae:	2804      	cmp	r0, #4
    otgp->ie[i].DIEPCTL = 0;
 8003bb0:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 8003bb4:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003bb8:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 8003bbc:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 8003bc0:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003bc4:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003bc8:	f000 8099 	beq.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003bcc:	2805      	cmp	r0, #5
    otgp->ie[i].DIEPCTL = 0;
 8003bce:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 8003bd2:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003bd6:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 8003bda:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 8003bde:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003be2:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003be6:	f000 808a 	beq.w	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003bea:	2806      	cmp	r0, #6
    otgp->ie[i].DIEPCTL = 0;
 8003bec:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 8003bf0:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003bf4:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 8003bf8:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 8003bfc:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c00:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c04:	d07b      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c06:	2807      	cmp	r0, #7
    otgp->ie[i].DIEPCTL = 0;
 8003c08:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 8003c0c:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c10:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 8003c14:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 8003c18:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c1c:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c20:	d06d      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c22:	2808      	cmp	r0, #8
    otgp->ie[i].DIEPCTL = 0;
 8003c24:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 8003c28:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c2c:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 8003c30:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 8003c34:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c38:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c3c:	d05f      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c3e:	2809      	cmp	r0, #9
    otgp->ie[i].DIEPCTL = 0;
 8003c40:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 8003c44:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c48:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 8003c4c:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 8003c50:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c54:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c58:	d051      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c5a:	280a      	cmp	r0, #10
    otgp->ie[i].DIEPCTL = 0;
 8003c5c:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 8003c60:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c64:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 8003c68:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 8003c6c:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c70:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c74:	d043      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c76:	280b      	cmp	r0, #11
    otgp->ie[i].DIEPCTL = 0;
 8003c78:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 8003c7c:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c80:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 8003c84:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 8003c88:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c8c:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c90:	d035      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003c92:	280c      	cmp	r0, #12
    otgp->ie[i].DIEPCTL = 0;
 8003c94:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 8003c98:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c9c:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 8003ca0:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 8003ca4:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003ca8:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cac:	d027      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003cae:	280d      	cmp	r0, #13
    otgp->ie[i].DIEPCTL = 0;
 8003cb0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 8003cb4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cb8:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 8003cbc:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 8003cc0:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cc4:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cc8:	d019      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
 8003cca:	280e      	cmp	r0, #14
    otgp->ie[i].DIEPCTL = 0;
 8003ccc:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 8003cd0:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cd4:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 8003cd8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 8003cdc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003ce0:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003ce4:	d00b      	beq.n	8003cfe <usb_lld_disable_endpoints+0x1da>
    otgp->ie[i].DIEPCTL = 0;
 8003ce6:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 8003cea:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cee:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 8003cf2:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 8003cf6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cfa:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003cfe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003d02:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8003d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <usb_lld_get_status_out>:
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8003d0c:	3158      	adds	r1, #88	; 0x58
 8003d0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003d10:	0149      	lsls	r1, r1, #5
 8003d12:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8003d14:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003d18:	d004      	beq.n	8003d24 <usb_lld_get_status_out+0x18>
  if (ctl & DOEPCTL_STALL)
 8003d1a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8003d1e:	bf14      	ite	ne
 8003d20:	2001      	movne	r0, #1
 8003d22:	2002      	moveq	r0, #2
}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <usb_lld_get_status_in>:
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8003d28:	3148      	adds	r1, #72	; 0x48
 8003d2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003d2c:	0149      	lsls	r1, r1, #5
 8003d2e:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8003d30:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003d34:	d004      	beq.n	8003d40 <usb_lld_get_status_in+0x18>
  if (ctl & DIEPCTL_STALL)
 8003d36:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8003d3a:	bf14      	ite	ne
 8003d3c:	2001      	movne	r0, #1
 8003d3e:	2002      	moveq	r0, #2
}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <usb_lld_read_setup>:
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8003d44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003d48:	68cb      	ldr	r3, [r1, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	6053      	str	r3, [r2, #4]
 8003d52:	6011      	str	r1, [r2, #0]
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003d58:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8003d5c:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003d5e:	68dd      	ldr	r5, [r3, #12]
 8003d60:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 8003d62:	681c      	ldr	r4, [r3, #0]
 8003d64:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8003d66:	b919      	cbnz	r1, 8003d70 <usb_lld_start_out+0x18>
 8003d68:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8003d6a:	bf84      	itt	hi
 8003d6c:	2440      	movhi	r4, #64	; 0x40
 8003d6e:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8003d70:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003d72:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d74:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	4422      	add	r2, r4
 8003d7a:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	3303      	adds	r3, #3
 8003d84:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003d88:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8003d8c:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d90:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003d94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d98:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003d9a:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d9e:	d00a      	beq.n	8003db6 <usb_lld_start_out+0x5e>
 8003da0:	b209      	sxth	r1, r1
 8003da2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8003da6:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8003da8:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003dac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003db0:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8003db4:	4770      	bx	lr
 8003db6:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003db8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003dbc:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8003dc0:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8003dc4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003dc8:	bf14      	ite	ne
 8003dca:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8003dce:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8003dd2:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8003dd6:	e7e4      	b.n	8003da2 <usb_lld_start_out+0x4a>

08003dd8 <usb_lld_start_in>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003dd8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003ddc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003dde:	68d8      	ldr	r0, [r3, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8003de0:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003de2:	6944      	ldr	r4, [r0, #20]
  isp->totsize = isp->txsize;
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	60e3      	str	r3, [r4, #12]
  if (isp->txsize == 0) {
 8003de8:	b9eb      	cbnz	r3, 8003e26 <usb_lld_start_in+0x4e>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003dea:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8003dee:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8003df2:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d025      	beq.n	8003e4c <usb_lld_start_in+0x74>
 8003e00:	b208      	sxth	r0, r1
 8003e02:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003e06:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003e08:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8003e0c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003e10:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003e14:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8003e18:	fa03 f101 	lsl.w	r1, r3, r1
 8003e1c:	4301      	orrs	r1, r0
 8003e1e:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8003e22:	bcf0      	pop	{r4, r5, r6, r7}
 8003e24:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003e26:	b311      	cbz	r1, 8003e6e <usb_lld_start_in+0x96>
 8003e28:	f043 5600 	orr.w	r6, r3, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003e2c:	8a07      	ldrh	r7, [r0, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003e2e:	eb02 1541 	add.w	r5, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003e32:	1e7c      	subs	r4, r7, #1
 8003e34:	4423      	add	r3, r4
 8003e36:	fbb3 f3f7 	udiv	r3, r3, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003e3a:	ea46 43c3 	orr.w	r3, r6, r3, lsl #19
 8003e3e:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003e42:	6803      	ldr	r3, [r0, #0]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d1d9      	bne.n	8003e00 <usb_lld_start_in+0x28>
 8003e4c:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003e4e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8003e52:	eb02 1440 	add.w	r4, r2, r0, lsl #5
 8003e56:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003e5a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003e5e:	bf14      	ite	ne
 8003e60:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003e64:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8003e68:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8003e6c:	e7c9      	b.n	8003e02 <usb_lld_start_in+0x2a>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d9da      	bls.n	8003e28 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 8003e72:	2340      	movs	r3, #64	; 0x40
 8003e74:	4e01      	ldr	r6, [pc, #4]	; (8003e7c <usb_lld_start_in+0xa4>)
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	e7d8      	b.n	8003e2c <usb_lld_start_in+0x54>
 8003e7a:	bf00      	nop
 8003e7c:	20000040 	.word	0x20000040

08003e80 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8003e80:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e82:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8003e86:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e8e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8003e92:	4770      	bx	lr

08003e94 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8003e94:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e96:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8003e9a:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8003e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea2:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8003ea6:	4770      	bx	lr

08003ea8 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8003ea8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003eaa:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8003eae:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb6:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8003eba:	4770      	bx	lr

08003ebc <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8003ebc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ebe:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8003ec2:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8003ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eca:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8003ece:	4770      	bx	lr

08003ed0 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003ed0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003eda:	d149      	bne.n	8003f70 <spi_lld_serve_rx_interrupt+0xa0>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8003edc:	6861      	ldr	r1, [r4, #4]
 8003ede:	780b      	ldrb	r3, [r1, #0]
 8003ee0:	b17b      	cbz	r3, 8003f02 <spi_lld_serve_rx_interrupt+0x32>
 8003ee2:	f005 0620 	and.w	r6, r5, #32
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8003ee6:	06ed      	lsls	r5, r5, #27
 8003ee8:	d43c      	bmi.n	8003f64 <spi_lld_serve_rx_interrupt+0x94>
      /* Half buffer interrupt.*/
      _spi_isr_half_code(spip);
    }
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8003eea:	b14e      	cbz	r6, 8003f00 <spi_lld_serve_rx_interrupt+0x30>
      /* End buffer interrupt.*/
      _spi_isr_full_code(spip);
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	b133      	cbz	r3, 8003f00 <spi_lld_serve_rx_interrupt+0x30>
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	7022      	strb	r2, [r4, #0]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4798      	blx	r3
 8003efa:	7823      	ldrb	r3, [r4, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d03b      	beq.n	8003f78 <spi_lld_serve_rx_interrupt+0xa8>

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
  }
}
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
    dmaStreamDisable(spip->dmatx);
 8003f02:	6965      	ldr	r5, [r4, #20]
 8003f04:	682a      	ldr	r2, [r5, #0]
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	f023 031f 	bic.w	r3, r3, #31
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	07d8      	lsls	r0, r3, #31
 8003f12:	d4fc      	bmi.n	8003f0e <spi_lld_serve_rx_interrupt+0x3e>
 8003f14:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 8003f16:	6920      	ldr	r0, [r4, #16]
    dmaStreamDisable(spip->dmatx);
 8003f18:	686d      	ldr	r5, [r5, #4]
 8003f1a:	233d      	movs	r3, #61	; 0x3d
 8003f1c:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 8003f1e:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8003f20:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	f023 031f 	bic.w	r3, r3, #31
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	6813      	ldr	r3, [r2, #0]
 8003f2c:	07db      	lsls	r3, r3, #31
 8003f2e:	d4fc      	bmi.n	8003f2a <spi_lld_serve_rx_interrupt+0x5a>
 8003f30:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8003f32:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8003f34:	6841      	ldr	r1, [r0, #4]
 8003f36:	233d      	movs	r3, #61	; 0x3d
 8003f38:	40ab      	lsls	r3, r5
 8003f3a:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 8003f3c:	b1fa      	cbz	r2, 8003f7e <spi_lld_serve_rx_interrupt+0xae>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	7023      	strb	r3, [r4, #0]
 8003f42:	4620      	mov	r0, r4
 8003f44:	4790      	blx	r2
 8003f46:	7823      	ldrb	r3, [r4, #0]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d018      	beq.n	8003f7e <spi_lld_serve_rx_interrupt+0xae>
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8003f52:	2100      	movs	r1, #0
 8003f54:	f104 0008 	add.w	r0, r4, #8
 8003f58:	f001 fac2 	bl	80054e0 <chThdResumeI>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f383 8811 	msr	BASEPRI, r3
}
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
      _spi_isr_half_code(spip);
 8003f64:	684b      	ldr	r3, [r1, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ca      	beq.n	8003f00 <spi_lld_serve_rx_interrupt+0x30>
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4798      	blx	r3
 8003f6e:	e7bc      	b.n	8003eea <spi_lld_serve_rx_interrupt+0x1a>
  chSysHalt(reason);
 8003f70:	4804      	ldr	r0, [pc, #16]	; (8003f84 <spi_lld_serve_rx_interrupt+0xb4>)
 8003f72:	f000 ffeb 	bl	8004f4c <chSysHalt>
 8003f76:	e7b1      	b.n	8003edc <spi_lld_serve_rx_interrupt+0xc>
      _spi_isr_full_code(spip);
 8003f78:	2303      	movs	r3, #3
 8003f7a:	7023      	strb	r3, [r4, #0]
}
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
    _spi_isr_code(spip);
 8003f7e:	2302      	movs	r3, #2
 8003f80:	7023      	strb	r3, [r4, #0]
 8003f82:	e7e3      	b.n	8003f4c <spi_lld_serve_rx_interrupt+0x7c>
 8003f84:	0800692c 	.word	0x0800692c

08003f88 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003f88:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4605      	mov	r5, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003f90:	d118      	bne.n	8003fc4 <spi_lld_serve_tx_interrupt+0x3c>
#else
  (void)spip;
  (void)flags;
#endif
  #if !SPID1_USE_RECEIVE
  if (spip == &SPID1)
 8003f92:	4c10      	ldr	r4, [pc, #64]	; (8003fd4 <spi_lld_serve_tx_interrupt+0x4c>)
 8003f94:	42a5      	cmp	r5, r4
 8003f96:	d000      	beq.n	8003f9a <spi_lld_serve_tx_interrupt+0x12>
    _spi_isr_code(spip);
  #endif
}
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b1ab      	cbz	r3, 8003fcc <spi_lld_serve_tx_interrupt+0x44>
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	7022      	strb	r2, [r4, #0]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4798      	blx	r3
 8003fa8:	7823      	ldrb	r3, [r4, #0]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00e      	beq.n	8003fcc <spi_lld_serve_tx_interrupt+0x44>
 8003fae:	2320      	movs	r3, #32
 8003fb0:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4808      	ldr	r0, [pc, #32]	; (8003fd8 <spi_lld_serve_tx_interrupt+0x50>)
 8003fb8:	f001 fa92 	bl	80054e0 <chThdResumeI>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f383 8811 	msr	BASEPRI, r3
}
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8003fc4:	4805      	ldr	r0, [pc, #20]	; (8003fdc <spi_lld_serve_tx_interrupt+0x54>)
 8003fc6:	f000 ffc1 	bl	8004f4c <chSysHalt>
 8003fca:	e7e2      	b.n	8003f92 <spi_lld_serve_tx_interrupt+0xa>
    _spi_isr_code(spip);
 8003fcc:	2302      	movs	r3, #2
 8003fce:	7023      	strb	r3, [r4, #0]
 8003fd0:	e7ed      	b.n	8003fae <spi_lld_serve_tx_interrupt+0x26>
 8003fd2:	bf00      	nop
 8003fd4:	20000afc 	.word	0x20000afc
 8003fd8:	20000b04 	.word	0x20000b04
 8003fdc:	0800692c 	.word	0x0800692c

08003fe0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8003fe2:	4f13      	ldr	r7, [pc, #76]	; (8004030 <spi_lld_init+0x50>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI4
  spiObjectInit(&SPID4);
 8003fe4:	4e13      	ldr	r6, [pc, #76]	; (8004034 <spi_lld_init+0x54>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI5
  spiObjectInit(&SPID5);
 8003fe6:	4c14      	ldr	r4, [pc, #80]	; (8004038 <spi_lld_init+0x58>)
  spiObjectInit(&SPID1);
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7fd f925 	bl	8001238 <spiObjectInit>
  SPID1.spi       = SPI1;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <spi_lld_init+0x5c>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <spi_lld_init+0x60>)
  SPID1.spi       = SPI1;
 8003ff2:	60fb      	str	r3, [r7, #12]
  SPID1.dmarx     = NULL;
 8003ff4:	2500      	movs	r5, #0
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <spi_lld_init+0x64>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003ff8:	61ba      	str	r2, [r7, #24]
  spiObjectInit(&SPID4);
 8003ffa:	4630      	mov	r0, r6
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8003ffc:	61fb      	str	r3, [r7, #28]
  SPID1.dmatx     = NULL;
 8003ffe:	e9c7 5504 	strd	r5, r5, [r7, #16]
  spiObjectInit(&SPID4);
 8004002:	f7fd f919 	bl	8001238 <spiObjectInit>
  SPID4.rxdmamode = STM32_DMA_CR_CHSEL(SPI4_RX_DMA_CHANNEL) |
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <spi_lld_init+0x68>)
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <spi_lld_init+0x6c>)
  SPID4.spi       = SPI4;
 800400a:	4911      	ldr	r1, [pc, #68]	; (8004050 <spi_lld_init+0x70>)
 800400c:	60f1      	str	r1, [r6, #12]
  spiObjectInit(&SPID5);
 800400e:	4620      	mov	r0, r4
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004010:	e9c6 2306 	strd	r2, r3, [r6, #24]
  SPID4.dmatx     = NULL;
 8004014:	e9c6 5504 	strd	r5, r5, [r6, #16]
  spiObjectInit(&SPID5);
 8004018:	f7fd f90e 	bl	8001238 <spiObjectInit>
  SPID5.spi       = SPI5;
  SPID5.dmarx     = NULL;
  SPID5.dmatx     = NULL;
  SPID5.rxdmamode = STM32_DMA_CR_CHSEL(SPI5_RX_DMA_CHANNEL) |
 800401c:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <spi_lld_init+0x74>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI5_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <spi_lld_init+0x78>)
  SPID5.spi       = SPI5;
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <spi_lld_init+0x7c>)
 8004022:	60e1      	str	r1, [r4, #12]
  SPID5.dmatx     = NULL;
 8004024:	e9c4 5504 	strd	r5, r5, [r4, #16]
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 8004028:	e9c4 2306 	strd	r2, r3, [r4, #24]
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 800402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800402e:	bf00      	nop
 8004030:	20000afc 	.word	0x20000afc
 8004034:	20000b1c 	.word	0x20000b1c
 8004038:	20000b3c 	.word	0x20000b3c
 800403c:	40013000 	.word	0x40013000
 8004040:	06010016 	.word	0x06010016
 8004044:	06010056 	.word	0x06010056
 8004048:	08010016 	.word	0x08010016
 800404c:	0a010046 	.word	0x0a010046
 8004050:	40013400 	.word	0x40013400
 8004054:	04010016 	.word	0x04010016
 8004058:	0e010046 	.word	0x0e010046
 800405c:	40015000 	.word	0x40015000

08004060 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004062:	7803      	ldrb	r3, [r0, #0]
 8004064:	2b01      	cmp	r3, #1
void spi_lld_start(SPIDriver *spip) {
 8004066:	4604      	mov	r4, r0
  if (spip->state == SPI_STOP) {
 8004068:	d032      	beq.n	80040d0 <spi_lld_start+0x70>
 800406a:	68c3      	ldr	r3, [r0, #12]
 800406c:	4d45      	ldr	r5, [pc, #276]	; (8004184 <spi_lld_start+0x124>)
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800406e:	6866      	ldr	r6, [r4, #4]
 8004070:	69a2      	ldr	r2, [r4, #24]
 8004072:	89b0      	ldrh	r0, [r6, #12]
 8004074:	69e1      	ldr	r1, [r4, #28]
 8004076:	0507      	lsls	r7, r0, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8004078:	7837      	ldrb	r7, [r6, #0]
 800407a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800407e:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004082:	bf44      	itt	mi
 8004084:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004088:	f441 5120 	orrmi.w	r1, r1, #10240	; 0x2800
  if (spip->config->circular) {
 800408c:	b1df      	cbz	r7, 80040c6 <spi_lld_start+0x66>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800408e:	f442 7284 	orr.w	r2, r2, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004092:	f441 7184 	orr.w	r1, r1, #264	; 0x108

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004096:	89f6      	ldrh	r6, [r6, #14]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004098:	681f      	ldr	r7, [r3, #0]
 800409a:	61e1      	str	r1, [r4, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800409c:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80040a0:	f046 0107 	orr.w	r1, r6, #7
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80040a4:	f027 0740 	bic.w	r7, r7, #64	; 0x40
                    SPI_CR2_TXDMAEN;

#if !SPID1_USE_RECEIVE
  if (spip != &SPID1)
 80040a8:	42ac      	cmp	r4, r5
 80040aa:	61a2      	str	r2, [r4, #24]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80040ac:	601f      	str	r7, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80040ae:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80040b0:	6059      	str	r1, [r3, #4]
  if (spip != &SPID1)
 80040b2:	d003      	beq.n	80040bc <spi_lld_start+0x5c>
#endif
    spip->spi->CR2 |= SPI_CR2_RXDMAEN;
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80040c6:	f422 7284 	bic.w	r2, r2, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80040ca:	f421 7184 	bic.w	r1, r1, #264	; 0x108
 80040ce:	e7e2      	b.n	8004096 <spi_lld_start+0x36>
    if (&SPID1 == spip) {
 80040d0:	4d2c      	ldr	r5, [pc, #176]	; (8004184 <spi_lld_start+0x124>)
 80040d2:	42a8      	cmp	r0, r5
 80040d4:	d041      	beq.n	800415a <spi_lld_start+0xfa>
    if (&SPID4 == spip) {
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <spi_lld_start+0x128>)
 80040d8:	4298      	cmp	r0, r3
 80040da:	d025      	beq.n	8004128 <spi_lld_start+0xc8>
    if (&SPID5 == spip) {
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <spi_lld_start+0x12c>)
 80040de:	4298      	cmp	r0, r3
 80040e0:	d009      	beq.n	80040f6 <spi_lld_start+0x96>
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80040e2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80040e6:	6811      	ldr	r1, [r2, #0]
 80040e8:	f103 020c 	add.w	r2, r3, #12
 80040ec:	608a      	str	r2, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80040ee:	6961      	ldr	r1, [r4, #20]
 80040f0:	6809      	ldr	r1, [r1, #0]
 80040f2:	608a      	str	r2, [r1, #8]
 80040f4:	e7bb      	b.n	800406e <spi_lld_start+0xe>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 80040f6:	4623      	mov	r3, r4
 80040f8:	4a25      	ldr	r2, [pc, #148]	; (8004190 <spi_lld_start+0x130>)
 80040fa:	210a      	movs	r1, #10
 80040fc:	200b      	movs	r0, #11
 80040fe:	f7fe fb19 	bl	8002734 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004102:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 8004104:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004106:	4a23      	ldr	r2, [pc, #140]	; (8004194 <spi_lld_start+0x134>)
 8004108:	210a      	movs	r1, #10
 800410a:	200e      	movs	r0, #14
 800410c:	f7fe fb12 	bl	8002734 <dmaStreamAllocI>
      rccEnableSPI5(true);
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004112:	6160      	str	r0, [r4, #20]
      rccEnableSPI5(true);
 8004114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004116:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
 800411c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800411e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004122:	665a      	str	r2, [r3, #100]	; 0x64
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	e7dc      	b.n	80040e2 <spi_lld_start+0x82>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004128:	4603      	mov	r3, r0
 800412a:	4a19      	ldr	r2, [pc, #100]	; (8004190 <spi_lld_start+0x130>)
 800412c:	210a      	movs	r1, #10
 800412e:	2008      	movs	r0, #8
 8004130:	f7fe fb00 	bl	8002734 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004134:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004136:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004138:	4a16      	ldr	r2, [pc, #88]	; (8004194 <spi_lld_start+0x134>)
 800413a:	210a      	movs	r1, #10
 800413c:	200c      	movs	r0, #12
 800413e:	f7fe faf9 	bl	8002734 <dmaStreamAllocI>
      rccEnableSPI4(true);
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004144:	6160      	str	r0, [r4, #20]
      rccEnableSPI4(true);
 8004146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800414c:	645a      	str	r2, [r3, #68]	; 0x44
 800414e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	665a      	str	r2, [r3, #100]	; 0x64
 8004156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004158:	e7c3      	b.n	80040e2 <spi_lld_start+0x82>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800415a:	4603      	mov	r3, r0
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <spi_lld_start+0x134>)
 800415e:	210a      	movs	r1, #10
 8004160:	200d      	movs	r0, #13
 8004162:	f7fe fae7 	bl	8002734 <dmaStreamAllocI>
      rccEnableSPI1(true);
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <spi_lld_start+0x138>)
 8004168:	68e3      	ldr	r3, [r4, #12]
 800416a:	6c51      	ldr	r1, [r2, #68]	; 0x44
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800416c:	6160      	str	r0, [r4, #20]
      rccEnableSPI1(true);
 800416e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004172:	6451      	str	r1, [r2, #68]	; 0x44
 8004174:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004176:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800417a:	6651      	str	r1, [r2, #100]	; 0x64
 800417c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800417e:	f103 020c 	add.w	r2, r3, #12
 8004182:	e7b4      	b.n	80040ee <spi_lld_start+0x8e>
 8004184:	20000afc 	.word	0x20000afc
 8004188:	20000b1c 	.word	0x20000b1c
 800418c:	20000b3c 	.word	0x20000b3c
 8004190:	08003ed1 	.word	0x08003ed1
 8004194:	08003f89 	.word	0x08003f89
 8004198:	40023800 	.word	0x40023800

0800419c <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800419c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	0792      	lsls	r2, r2, #30
 80041a4:	d401      	bmi.n	80041aa <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80041a6:	f001 bbfb 	b.w	80059a0 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80041aa:	b510      	push	{r4, lr}
    STM32_ST_TIM->SR = 0U;
 80041ac:	2400      	movs	r4, #0
 80041ae:	611c      	str	r4, [r3, #16]
 80041b0:	2320      	movs	r3, #32
 80041b2:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 80041b6:	f000 fecf 	bl	8004f58 <chSysTimerHandlerI>
 80041ba:	f384 8811 	msr	BASEPRI, r4
}
 80041be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80041c2:	f001 bbed 	b.w	80059a0 <_port_irq_epilogue>
 80041c6:	bf00      	nop

080041c8 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <st_lld_init+0x4c>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80041ca:	4813      	ldr	r0, [pc, #76]	; (8004218 <st_lld_init+0x50>)
  ST_ENABLE_CLOCK();
 80041cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ce:	f042 0201 	orr.w	r2, r2, #1
void st_lld_init(void) {
 80041d2:	b470      	push	{r4, r5, r6}
  ST_ENABLE_CLOCK();
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
 80041d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	661a      	str	r2, [r3, #96]	; 0x60
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 80041e0:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80041e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80041e6:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80041e8:	2401      	movs	r4, #1
  ST_ENABLE_STOP();
 80041ea:	f041 0101 	orr.w	r1, r1, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80041ee:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80041f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
 80041f6:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80041f8:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80041fa:	2108      	movs	r1, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80041fc:	62dd      	str	r5, [r3, #44]	; 0x2c
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80041fe:	201c      	movs	r0, #28
  STM32_ST_TIM->CCMR1  = 0;
 8004200:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004202:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004204:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004206:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004208:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800420a:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800420c:	bc70      	pop	{r4, r5, r6}
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800420e:	f7fd bb41 	b.w	8001894 <nvicEnableVector>
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	e0042000 	.word	0xe0042000

0800421c <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800421e:	4d26      	ldr	r5, [pc, #152]	; (80042b8 <VectorB8+0x9c>)
 8004220:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8004222:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 8004224:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004226:	68da      	ldr	r2, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8004228:	7d08      	ldrb	r0, [r1, #20]
 800422a:	4014      	ands	r4, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800422c:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 800422e:	43d2      	mvns	r2, r2
 8004230:	611a      	str	r2, [r3, #16]
 8004232:	f004 0602 	and.w	r6, r4, #2
  if (icup->config->channel == ICU_CHANNEL_1) {
 8004236:	b988      	cbnz	r0, 800425c <VectorB8+0x40>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8004238:	0762      	lsls	r2, r4, #29
 800423a:	d530      	bpl.n	800429e <VectorB8+0x82>
      _icu_isr_invoke_width_cb(icup);
 800423c:	782b      	ldrb	r3, [r5, #0]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d029      	beq.n	8004296 <VectorB8+0x7a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8004242:	b99e      	cbnz	r6, 800426c <VectorB8+0x50>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8004244:	07e3      	lsls	r3, r4, #31
 8004246:	d505      	bpl.n	8004254 <VectorB8+0x38>
    _icu_isr_invoke_overflow_cb(icup);
 8004248:	686b      	ldr	r3, [r5, #4]
 800424a:	481b      	ldr	r0, [pc, #108]	; (80042b8 <VectorB8+0x9c>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	4798      	blx	r3
 8004250:	2303      	movs	r3, #3
 8004252:	702b      	strb	r3, [r5, #0]
}
 8004254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8004258:	f001 bba2 	b.w	80059a0 <_port_irq_epilogue>
 800425c:	f004 0704 	and.w	r7, r4, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8004260:	b15e      	cbz	r6, 800427a <VectorB8+0x5e>
      _icu_isr_invoke_width_cb(icup);
 8004262:	782b      	ldrb	r3, [r5, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d004      	beq.n	8004272 <VectorB8+0x56>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8004268:	2f00      	cmp	r7, #0
 800426a:	d0eb      	beq.n	8004244 <VectorB8+0x28>
      _icu_isr_invoke_period_cb(icup);
 800426c:	2304      	movs	r3, #4
 800426e:	702b      	strb	r3, [r5, #0]
 8004270:	e7e8      	b.n	8004244 <VectorB8+0x28>
      _icu_isr_invoke_width_cb(icup);
 8004272:	688b      	ldr	r3, [r1, #8]
 8004274:	b1e3      	cbz	r3, 80042b0 <VectorB8+0x94>
 8004276:	4628      	mov	r0, r5
 8004278:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800427a:	2f00      	cmp	r7, #0
 800427c:	d0e2      	beq.n	8004244 <VectorB8+0x28>
      _icu_isr_invoke_period_cb(icup);
 800427e:	782b      	ldrb	r3, [r5, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d1f3      	bne.n	800426c <VectorB8+0x50>
 8004284:	6869      	ldr	r1, [r5, #4]
 8004286:	68cb      	ldr	r3, [r1, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <VectorB8+0x50>
 800428c:	480a      	ldr	r0, [pc, #40]	; (80042b8 <VectorB8+0x9c>)
 800428e:	4798      	blx	r3
 8004290:	2304      	movs	r3, #4
 8004292:	702b      	strb	r3, [r5, #0]
 8004294:	e7d6      	b.n	8004244 <VectorB8+0x28>
      _icu_isr_invoke_width_cb(icup);
 8004296:	688b      	ldr	r3, [r1, #8]
 8004298:	b13b      	cbz	r3, 80042aa <VectorB8+0x8e>
 800429a:	4628      	mov	r0, r5
 800429c:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d0d0      	beq.n	8004244 <VectorB8+0x28>
      _icu_isr_invoke_period_cb(icup);
 80042a2:	782b      	ldrb	r3, [r5, #0]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d1e1      	bne.n	800426c <VectorB8+0x50>
 80042a8:	e7ec      	b.n	8004284 <VectorB8+0x68>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	d0ca      	beq.n	8004244 <VectorB8+0x28>
 80042ae:	e7ea      	b.n	8004286 <VectorB8+0x6a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	d0c7      	beq.n	8004244 <VectorB8+0x28>
 80042b4:	e7e7      	b.n	8004286 <VectorB8+0x6a>
 80042b6:	bf00      	nop
 80042b8:	20000b5c 	.word	0x20000b5c

080042bc <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr  = icup->tim->SR;
 80042be:	4d26      	ldr	r5, [pc, #152]	; (8004358 <Vector108+0x9c>)
 80042c0:	68eb      	ldr	r3, [r5, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80042c2:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 80042c4:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80042c6:	68da      	ldr	r2, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80042c8:	7d08      	ldrb	r0, [r1, #20]
 80042ca:	4014      	ands	r4, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80042cc:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80042ce:	43d2      	mvns	r2, r2
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	f004 0602 	and.w	r6, r4, #2
  if (icup->config->channel == ICU_CHANNEL_1) {
 80042d6:	b988      	cbnz	r0, 80042fc <Vector108+0x40>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80042d8:	0762      	lsls	r2, r4, #29
 80042da:	d530      	bpl.n	800433e <Vector108+0x82>
      _icu_isr_invoke_width_cb(icup);
 80042dc:	782b      	ldrb	r3, [r5, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d029      	beq.n	8004336 <Vector108+0x7a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80042e2:	b99e      	cbnz	r6, 800430c <Vector108+0x50>
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80042e4:	07e3      	lsls	r3, r4, #31
 80042e6:	d505      	bpl.n	80042f4 <Vector108+0x38>
    _icu_isr_invoke_overflow_cb(icup);
 80042e8:	686b      	ldr	r3, [r5, #4]
 80042ea:	481b      	ldr	r0, [pc, #108]	; (8004358 <Vector108+0x9c>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4798      	blx	r3
 80042f0:	2303      	movs	r3, #3
 80042f2:	702b      	strb	r3, [r5, #0]
}
 80042f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80042f8:	f001 bb52 	b.w	80059a0 <_port_irq_epilogue>
 80042fc:	f004 0704 	and.w	r7, r4, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8004300:	b15e      	cbz	r6, 800431a <Vector108+0x5e>
      _icu_isr_invoke_width_cb(icup);
 8004302:	782b      	ldrb	r3, [r5, #0]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d004      	beq.n	8004312 <Vector108+0x56>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8004308:	2f00      	cmp	r7, #0
 800430a:	d0eb      	beq.n	80042e4 <Vector108+0x28>
      _icu_isr_invoke_period_cb(icup);
 800430c:	2304      	movs	r3, #4
 800430e:	702b      	strb	r3, [r5, #0]
 8004310:	e7e8      	b.n	80042e4 <Vector108+0x28>
      _icu_isr_invoke_width_cb(icup);
 8004312:	688b      	ldr	r3, [r1, #8]
 8004314:	b1e3      	cbz	r3, 8004350 <Vector108+0x94>
 8004316:	4628      	mov	r0, r5
 8004318:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800431a:	2f00      	cmp	r7, #0
 800431c:	d0e2      	beq.n	80042e4 <Vector108+0x28>
      _icu_isr_invoke_period_cb(icup);
 800431e:	782b      	ldrb	r3, [r5, #0]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d1f3      	bne.n	800430c <Vector108+0x50>
 8004324:	6869      	ldr	r1, [r5, #4]
 8004326:	68cb      	ldr	r3, [r1, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ef      	beq.n	800430c <Vector108+0x50>
 800432c:	480a      	ldr	r0, [pc, #40]	; (8004358 <Vector108+0x9c>)
 800432e:	4798      	blx	r3
 8004330:	2304      	movs	r3, #4
 8004332:	702b      	strb	r3, [r5, #0]
 8004334:	e7d6      	b.n	80042e4 <Vector108+0x28>
      _icu_isr_invoke_width_cb(icup);
 8004336:	688b      	ldr	r3, [r1, #8]
 8004338:	b13b      	cbz	r3, 800434a <Vector108+0x8e>
 800433a:	4628      	mov	r0, r5
 800433c:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800433e:	2e00      	cmp	r6, #0
 8004340:	d0d0      	beq.n	80042e4 <Vector108+0x28>
      _icu_isr_invoke_period_cb(icup);
 8004342:	782b      	ldrb	r3, [r5, #0]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d1e1      	bne.n	800430c <Vector108+0x50>
 8004348:	e7ec      	b.n	8004324 <Vector108+0x68>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800434a:	2e00      	cmp	r6, #0
 800434c:	d0ca      	beq.n	80042e4 <Vector108+0x28>
 800434e:	e7ea      	b.n	8004326 <Vector108+0x6a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8004350:	2f00      	cmp	r7, #0
 8004352:	d0c7      	beq.n	80042e4 <Vector108+0x28>
 8004354:	e7e7      	b.n	8004326 <Vector108+0x6a>
 8004356:	bf00      	nop
 8004358:	20000b74 	.word	0x20000b74

0800435c <icu_lld_init>:
void icu_lld_init(void) {
 800435c:	b538      	push	{r3, r4, r5, lr}
  icuObjectInit(&ICUD4);
 800435e:	4d06      	ldr	r5, [pc, #24]	; (8004378 <icu_lld_init+0x1c>)
  icuObjectInit(&ICUD5);
 8004360:	4c06      	ldr	r4, [pc, #24]	; (800437c <icu_lld_init+0x20>)
  icuObjectInit(&ICUD4);
 8004362:	4628      	mov	r0, r5
 8004364:	f7fc fd08 	bl	8000d78 <icuObjectInit>
  ICUD4.tim = STM32_TIM4;
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <icu_lld_init+0x24>)
 800436a:	60eb      	str	r3, [r5, #12]
  icuObjectInit(&ICUD5);
 800436c:	4620      	mov	r0, r4
 800436e:	f7fc fd03 	bl	8000d78 <icuObjectInit>
  ICUD5.tim = STM32_TIM5;
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <icu_lld_init+0x28>)
 8004374:	60e3      	str	r3, [r4, #12]
}
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000b5c 	.word	0x20000b5c
 800437c:	20000b74 	.word	0x20000b74
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00

08004388 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8004388:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 800438a:	4d17      	ldr	r5, [pc, #92]	; (80043e8 <VectorA4+0x60>)
 800438c:	69ab      	ldr	r3, [r5, #24]
 800438e:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4014      	ands	r4, r2
 8004394:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8004396:	43d2      	mvns	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800439a:	07a3      	lsls	r3, r4, #30
 800439c:	d504      	bpl.n	80043a8 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 800439e:	686b      	ldr	r3, [r5, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80043a2:	b10b      	cbz	r3, 80043a8 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80043a4:	4628      	mov	r0, r5
 80043a6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80043a8:	0760      	lsls	r0, r4, #29
 80043aa:	d504      	bpl.n	80043b6 <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80043ac:	686b      	ldr	r3, [r5, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80043b0:	b10b      	cbz	r3, 80043b6 <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80043b2:	480d      	ldr	r0, [pc, #52]	; (80043e8 <VectorA4+0x60>)
 80043b4:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80043b6:	0721      	lsls	r1, r4, #28
 80043b8:	d504      	bpl.n	80043c4 <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80043ba:	686b      	ldr	r3, [r5, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80043be:	b10b      	cbz	r3, 80043c4 <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80043c0:	4809      	ldr	r0, [pc, #36]	; (80043e8 <VectorA4+0x60>)
 80043c2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80043c4:	06e2      	lsls	r2, r4, #27
 80043c6:	d504      	bpl.n	80043d2 <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80043c8:	686b      	ldr	r3, [r5, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80043cc:	b10b      	cbz	r3, 80043d2 <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80043ce:	4806      	ldr	r0, [pc, #24]	; (80043e8 <VectorA4+0x60>)
 80043d0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80043d2:	07e3      	lsls	r3, r4, #31
 80043d4:	d504      	bpl.n	80043e0 <VectorA4+0x58>
 80043d6:	686b      	ldr	r3, [r5, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	b10b      	cbz	r3, 80043e0 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <VectorA4+0x60>)
 80043de:	4798      	blx	r3
}
 80043e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80043e4:	f001 badc 	b.w	80059a0 <_port_irq_epilogue>
 80043e8:	20000b8c 	.word	0x20000b8c

080043ec <VectorAC>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d17      	ldr	r5, [pc, #92]	; (800444c <VectorAC+0x60>)
 80043f0:	69ab      	ldr	r3, [r5, #24]
 80043f2:	691c      	ldr	r4, [r3, #16]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	4014      	ands	r4, r2
 80043f8:	b2e2      	uxtb	r2, r4
 80043fa:	43d2      	mvns	r2, r2
 80043fc:	611a      	str	r2, [r3, #16]
 80043fe:	07a3      	lsls	r3, r4, #30
 8004400:	d504      	bpl.n	800440c <VectorAC+0x20>
 8004402:	686b      	ldr	r3, [r5, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	b10b      	cbz	r3, 800440c <VectorAC+0x20>
 8004408:	4628      	mov	r0, r5
 800440a:	4798      	blx	r3
 800440c:	0760      	lsls	r0, r4, #29
 800440e:	d504      	bpl.n	800441a <VectorAC+0x2e>
 8004410:	686b      	ldr	r3, [r5, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	b10b      	cbz	r3, 800441a <VectorAC+0x2e>
 8004416:	480d      	ldr	r0, [pc, #52]	; (800444c <VectorAC+0x60>)
 8004418:	4798      	blx	r3
 800441a:	0721      	lsls	r1, r4, #28
 800441c:	d504      	bpl.n	8004428 <VectorAC+0x3c>
 800441e:	686b      	ldr	r3, [r5, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	b10b      	cbz	r3, 8004428 <VectorAC+0x3c>
 8004424:	4809      	ldr	r0, [pc, #36]	; (800444c <VectorAC+0x60>)
 8004426:	4798      	blx	r3
 8004428:	06e2      	lsls	r2, r4, #27
 800442a:	d504      	bpl.n	8004436 <VectorAC+0x4a>
 800442c:	686b      	ldr	r3, [r5, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	b10b      	cbz	r3, 8004436 <VectorAC+0x4a>
 8004432:	4806      	ldr	r0, [pc, #24]	; (800444c <VectorAC+0x60>)
 8004434:	4798      	blx	r3
 8004436:	07e3      	lsls	r3, r4, #31
 8004438:	d504      	bpl.n	8004444 <VectorAC+0x58>
 800443a:	686b      	ldr	r3, [r5, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	b10b      	cbz	r3, 8004444 <VectorAC+0x58>
 8004440:	4802      	ldr	r0, [pc, #8]	; (800444c <VectorAC+0x60>)
 8004442:	4798      	blx	r3
 8004444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004448:	f001 baaa 	b.w	80059a0 <_port_irq_epilogue>
 800444c:	20000b8c 	.word	0x20000b8c

08004450 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8004450:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 8004452:	4d17      	ldr	r5, [pc, #92]	; (80044b0 <VectorB4+0x60>)
 8004454:	69ab      	ldr	r3, [r5, #24]
 8004456:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4014      	ands	r4, r2
 800445c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800445e:	43d2      	mvns	r2, r2
 8004460:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004462:	07a3      	lsls	r3, r4, #30
 8004464:	d504      	bpl.n	8004470 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8004466:	686b      	ldr	r3, [r5, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800446a:	b10b      	cbz	r3, 8004470 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800446c:	4628      	mov	r0, r5
 800446e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004470:	0760      	lsls	r0, r4, #29
 8004472:	d504      	bpl.n	800447e <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8004474:	686b      	ldr	r3, [r5, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004478:	b10b      	cbz	r3, 800447e <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800447a:	480d      	ldr	r0, [pc, #52]	; (80044b0 <VectorB4+0x60>)
 800447c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800447e:	0721      	lsls	r1, r4, #28
 8004480:	d504      	bpl.n	800448c <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8004482:	686b      	ldr	r3, [r5, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004486:	b10b      	cbz	r3, 800448c <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <VectorB4+0x60>)
 800448a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800448c:	06e2      	lsls	r2, r4, #27
 800448e:	d504      	bpl.n	800449a <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8004490:	686b      	ldr	r3, [r5, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004494:	b10b      	cbz	r3, 800449a <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8004496:	4806      	ldr	r0, [pc, #24]	; (80044b0 <VectorB4+0x60>)
 8004498:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800449a:	07e3      	lsls	r3, r4, #31
 800449c:	d504      	bpl.n	80044a8 <VectorB4+0x58>
 800449e:	686b      	ldr	r3, [r5, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	b10b      	cbz	r3, 80044a8 <VectorB4+0x58>
    pwmp->config->callback(pwmp);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <VectorB4+0x60>)
 80044a6:	4798      	blx	r3
}
 80044a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80044ac:	f001 ba78 	b.w	80059a0 <_port_irq_epilogue>
 80044b0:	20000bc4 	.word	0x20000bc4

080044b4 <VectorEC>:
OSAL_IRQ_HANDLER(STM32_TIM12_HANDLER) {
 80044b4:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 80044b6:	4d17      	ldr	r5, [pc, #92]	; (8004514 <VectorEC+0x60>)
 80044b8:	69ab      	ldr	r3, [r5, #24]
 80044ba:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	4014      	ands	r4, r2
 80044c0:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80044c2:	43d2      	mvns	r2, r2
 80044c4:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80044c6:	07a3      	lsls	r3, r4, #30
 80044c8:	d504      	bpl.n	80044d4 <VectorEC+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80044ca:	686b      	ldr	r3, [r5, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80044ce:	b10b      	cbz	r3, 80044d4 <VectorEC+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80044d0:	4628      	mov	r0, r5
 80044d2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80044d4:	0760      	lsls	r0, r4, #29
 80044d6:	d504      	bpl.n	80044e2 <VectorEC+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80044d8:	686b      	ldr	r3, [r5, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80044dc:	b10b      	cbz	r3, 80044e2 <VectorEC+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80044de:	480d      	ldr	r0, [pc, #52]	; (8004514 <VectorEC+0x60>)
 80044e0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80044e2:	0721      	lsls	r1, r4, #28
 80044e4:	d504      	bpl.n	80044f0 <VectorEC+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80044e6:	686b      	ldr	r3, [r5, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80044ea:	b10b      	cbz	r3, 80044f0 <VectorEC+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80044ec:	4809      	ldr	r0, [pc, #36]	; (8004514 <VectorEC+0x60>)
 80044ee:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80044f0:	06e2      	lsls	r2, r4, #27
 80044f2:	d504      	bpl.n	80044fe <VectorEC+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80044f4:	686b      	ldr	r3, [r5, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80044f8:	b10b      	cbz	r3, 80044fe <VectorEC+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80044fa:	4806      	ldr	r0, [pc, #24]	; (8004514 <VectorEC+0x60>)
 80044fc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80044fe:	07e3      	lsls	r3, r4, #31
 8004500:	d504      	bpl.n	800450c <VectorEC+0x58>
 8004502:	686b      	ldr	r3, [r5, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	b10b      	cbz	r3, 800450c <VectorEC+0x58>
    pwmp->config->callback(pwmp);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <VectorEC+0x60>)
 800450a:	4798      	blx	r3
}
 800450c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004510:	f001 ba46 	b.w	80059a0 <_port_irq_epilogue>
 8004514:	20000ba8 	.word	0x20000ba8

08004518 <pwm_lld_init>:
void pwm_lld_init(void) {
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pwmObjectInit(&PWMD1);
 800451a:	4e0c      	ldr	r6, [pc, #48]	; (800454c <pwm_lld_init+0x34>)
  pwmObjectInit(&PWMD3);
 800451c:	4d0c      	ldr	r5, [pc, #48]	; (8004550 <pwm_lld_init+0x38>)
  pwmObjectInit(&PWMD12);
 800451e:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <pwm_lld_init+0x3c>)
  pwmObjectInit(&PWMD1);
 8004520:	4630      	mov	r0, r6
 8004522:	f7fc fc31 	bl	8000d88 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8004526:	2704      	movs	r7, #4
  PWMD1.tim = STM32_TIM1;
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <pwm_lld_init+0x40>)
 800452a:	61b3      	str	r3, [r6, #24]
  pwmObjectInit(&PWMD3);
 800452c:	4628      	mov	r0, r5
  PWMD1.channels = STM32_TIM1_CHANNELS;
 800452e:	7437      	strb	r7, [r6, #16]
  pwmObjectInit(&PWMD3);
 8004530:	f7fc fc2a 	bl	8000d88 <pwmObjectInit>
  PWMD3.tim = STM32_TIM3;
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <pwm_lld_init+0x44>)
 8004536:	61ab      	str	r3, [r5, #24]
  pwmObjectInit(&PWMD12);
 8004538:	4620      	mov	r0, r4
  PWMD3.channels = STM32_TIM3_CHANNELS;
 800453a:	742f      	strb	r7, [r5, #16]
  pwmObjectInit(&PWMD12);
 800453c:	f7fc fc24 	bl	8000d88 <pwmObjectInit>
  PWMD12.channels = STM32_TIM12_CHANNELS;
 8004540:	2202      	movs	r2, #2
  PWMD12.tim = STM32_TIM12;
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pwm_lld_init+0x48>)
  PWMD12.channels = STM32_TIM12_CHANNELS;
 8004544:	7422      	strb	r2, [r4, #16]
  PWMD12.tim = STM32_TIM12;
 8004546:	61a3      	str	r3, [r4, #24]
}
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454a:	bf00      	nop
 800454c:	20000b8c 	.word	0x20000b8c
 8004550:	20000bc4 	.word	0x20000bc4
 8004554:	20000ba8 	.word	0x20000ba8
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40001800 	.word	0x40001800

08004564 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8004564:	4a02      	ldr	r2, [pc, #8]	; (8004570 <notify7+0xc>)
 8004566:	68d3      	ldr	r3, [r2, #12]
 8004568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800456c:	60d3      	str	r3, [r2, #12]
}
 800456e:	4770      	bx	lr
 8004570:	40007800 	.word	0x40007800

08004574 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 8004574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8004578:	4e57      	ldr	r6, [pc, #348]	; (80046d8 <Vector188+0x164>)
 800457a:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800457c:	f8d5 900c 	ldr.w	r9, [r5, #12]
  uint16_t sr = u->SR;
 8004580:	682b      	ldr	r3, [r5, #0]
  if (sr & USART_SR_LBD) {
 8004582:	05d8      	lsls	r0, r3, #23
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 8004584:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 8004586:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8004588:	d473      	bmi.n	8004672 <Vector188+0xfe>
 800458a:	2320      	movs	r3, #32
 800458c:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004590:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004594:	d00b      	beq.n	80045ae <Vector188+0x3a>
  chEvtBroadcastFlagsI(esp, flags);
 8004596:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80046e0 <Vector188+0x16c>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800459a:	0723      	lsls	r3, r4, #28
 800459c:	d130      	bne.n	8004600 <Vector188+0x8c>
    if (sr & USART_SR_RXNE)
 800459e:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80045a0:	686b      	ldr	r3, [r5, #4]
    if (sr & USART_SR_RXNE)
 80045a2:	d420      	bmi.n	80045e6 <Vector188+0x72>
    sr = u->SR;
 80045a4:	682c      	ldr	r4, [r5, #0]
 80045a6:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80045a8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80045ac:	d1f5      	bne.n	800459a <Vector188+0x26>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80045b4:	f019 0f80 	tst.w	r9, #128	; 0x80
 80045b8:	d001      	beq.n	80045be <Vector188+0x4a>
 80045ba:	0622      	lsls	r2, r4, #24
 80045bc:	d468      	bmi.n	8004690 <Vector188+0x11c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80045be:	f019 0f40 	tst.w	r9, #64	; 0x40
 80045c2:	d00b      	beq.n	80045dc <Vector188+0x68>
 80045c4:	0663      	lsls	r3, r4, #25
 80045c6:	d509      	bpl.n	80045dc <Vector188+0x68>
 80045c8:	2320      	movs	r3, #32
 80045ca:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80045ce:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d069      	beq.n	80046aa <Vector188+0x136>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
 80045dc:	b003      	add	sp, #12
 80045de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80045e2:	f001 b9dd 	b.w	80059a0 <_port_irq_epilogue>
    b = (uint8_t)u->DR & sdp->rxmask;
 80045e6:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
      sdIncomingDataI(sdp, b);
 80045ea:	483b      	ldr	r0, [pc, #236]	; (80046d8 <Vector188+0x164>)
 80045ec:	4019      	ands	r1, r3
 80045ee:	f7fc fc1f 	bl	8000e30 <sdIncomingDataI>
    sr = u->SR;
 80045f2:	682c      	ldr	r4, [r5, #0]
 80045f4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80045f6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80045fa:	d0d8      	beq.n	80045ae <Vector188+0x3a>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80045fc:	0723      	lsls	r3, r4, #28
 80045fe:	d0ce      	beq.n	800459e <Vector188+0x2a>
  if (sr & USART_SR_ORE)
 8004600:	f004 0308 	and.w	r3, r4, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	21a0      	movne	r1, #160	; 0xa0
 800460a:	2120      	moveq	r1, #32
 800460c:	9101      	str	r1, [sp, #4]
 800460e:	bf15      	itete	ne
 8004610:	f44f 73c0 	movne.w	r3, #384	; 0x180
 8004614:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004618:	f44f 77e0 	movne.w	r7, #448	; 0x1c0
 800461c:	f44f 77a0 	moveq.w	r7, #320	; 0x140
 8004620:	bf15      	itete	ne
 8004622:	22c0      	movne	r2, #192	; 0xc0
 8004624:	2240      	moveq	r2, #64	; 0x40
 8004626:	f44f 7bd0 	movne.w	fp, #416	; 0x1a0
 800462a:	f44f 7b90 	moveq.w	fp, #288	; 0x120
 800462e:	bf15      	itete	ne
 8004630:	f44f 7af0 	movne.w	sl, #480	; 0x1e0
 8004634:	f44f 7ab0 	moveq.w	sl, #352	; 0x160
 8004638:	f04f 0ee0 	movne.w	lr, #224	; 0xe0
 800463c:	f04f 0e60 	moveq.w	lr, #96	; 0x60
 8004640:	bf14      	ite	ne
 8004642:	2180      	movne	r1, #128	; 0x80
 8004644:	2100      	moveq	r1, #0
  if (sr & USART_SR_PE)
 8004646:	f014 0f01 	tst.w	r4, #1
  if (sr & USART_SR_FE)
 800464a:	f004 0c02 	and.w	ip, r4, #2
 800464e:	4640      	mov	r0, r8
  if (sr & USART_SR_PE)
 8004650:	d003      	beq.n	800465a <Vector188+0xe6>
    sts |= SD_PARITY_ERROR;
 8004652:	9901      	ldr	r1, [sp, #4]
  if (sr & USART_SR_PE)
 8004654:	465b      	mov	r3, fp
 8004656:	4657      	mov	r7, sl
 8004658:	4672      	mov	r2, lr
  if (sr & USART_SR_FE)
 800465a:	f1bc 0f00 	cmp.w	ip, #0
 800465e:	bf1c      	itt	ne
 8004660:	463b      	movne	r3, r7
 8004662:	4611      	movne	r1, r2
    sts |= SD_NOISE_ERROR;
 8004664:	f014 0f04 	tst.w	r4, #4
 8004668:	bf18      	it	ne
 800466a:	4619      	movne	r1, r3
 800466c:	f001 f86e 	bl	800574c <chEvtBroadcastFlagsI>
 8004670:	e795      	b.n	800459e <Vector188+0x2a>
 8004672:	2320      	movs	r3, #32
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800467c:	1d30      	adds	r0, r6, #4
 800467e:	f001 f865 	bl	800574c <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8004682:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	e77c      	b.n	800458a <Vector188+0x16>
 8004690:	2320      	movs	r3, #32
 8004692:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 8004696:	4811      	ldr	r0, [pc, #68]	; (80046dc <Vector188+0x168>)
 8004698:	f7fc fabc 	bl	8000c14 <oqGetI>
    if (b < MSG_OK) {
 800469c:	2800      	cmp	r0, #0
 800469e:	db11      	blt.n	80046c4 <Vector188+0x150>
      u->DR = b;
 80046a0:	6068      	str	r0, [r5, #4]
 80046a2:	2300      	movs	r3, #0
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	e789      	b.n	80045be <Vector188+0x4a>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80046aa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d092      	beq.n	80045d6 <Vector188+0x62>
 80046b0:	2110      	movs	r1, #16
 80046b2:	480b      	ldr	r0, [pc, #44]	; (80046e0 <Vector188+0x16c>)
 80046b4:	f001 f84a 	bl	800574c <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80046b8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80046bc:	ea09 0303 	and.w	r3, r9, r3
 80046c0:	60eb      	str	r3, [r5, #12]
 80046c2:	e788      	b.n	80045d6 <Vector188+0x62>
 80046c4:	2108      	movs	r1, #8
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <Vector188+0x16c>)
 80046c8:	f001 f840 	bl	800574c <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80046cc:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80046d0:	ea09 0303 	and.w	r3, r9, r3
 80046d4:	60eb      	str	r3, [r5, #12]
 80046d6:	e7e4      	b.n	80046a2 <Vector188+0x12e>
 80046d8:	20000be0 	.word	0x20000be0
 80046dc:	20000c10 	.word	0x20000c10
 80046e0:	20000be4 	.word	0x20000be4

080046e4 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80046e4:	b510      	push	{r4, lr}
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
#endif

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7, NULL, notify7);
 80046e6:	4c04      	ldr	r4, [pc, #16]	; (80046f8 <sd_lld_init+0x14>)
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <sd_lld_init+0x18>)
 80046ea:	4620      	mov	r0, r4
 80046ec:	2100      	movs	r1, #0
 80046ee:	f7fc fb7f 	bl	8000df0 <sdObjectInit>
  SD7.usart = UART7;
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <sd_lld_init+0x1c>)
 80046f4:	6763      	str	r3, [r4, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 80046f6:	bd10      	pop	{r4, pc}
 80046f8:	20000be0 	.word	0x20000be0
 80046fc:	08004565 	.word	0x08004565
 8004700:	40007800 	.word	0x40007800

08004704 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004704:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800470c:	d129      	bne.n	8004762 <uart_lld_serve_tx_end_irq+0x5e>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 800470e:	6a21      	ldr	r1, [r4, #32]
 8004710:	680a      	ldr	r2, [r1, #0]
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	f023 031f 	bic.w	r3, r3, #31
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	07db      	lsls	r3, r3, #31
 800471e:	d4fc      	bmi.n	800471a <uart_lld_serve_tx_end_irq+0x16>

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8004720:	6863      	ldr	r3, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 8004722:	7a4d      	ldrb	r5, [r1, #9]
 8004724:	6848      	ldr	r0, [r1, #4]
  _uart_tx1_isr_code(uartp);
 8004726:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 8004728:	233d      	movs	r3, #61	; 0x3d
 800472a:	40ab      	lsls	r3, r5
  _uart_tx1_isr_code(uartp);
 800472c:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 800472e:	6003      	str	r3, [r0, #0]
  _uart_tx1_isr_code(uartp);
 8004730:	7061      	strb	r1, [r4, #1]
 8004732:	b19a      	cbz	r2, 800475c <uart_lld_serve_tx_end_irq+0x58>
 8004734:	4620      	mov	r0, r4
 8004736:	4790      	blx	r2
 8004738:	7863      	ldrb	r3, [r4, #1]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d00e      	beq.n	800475c <uart_lld_serve_tx_end_irq+0x58>
 800473e:	7a23      	ldrb	r3, [r4, #8]
 8004740:	b903      	cbnz	r3, 8004744 <uart_lld_serve_tx_end_irq+0x40>
}
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	2320      	movs	r3, #32
 8004746:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800474a:	2100      	movs	r1, #0
 800474c:	f104 0010 	add.w	r0, r4, #16
 8004750:	f000 fec6 	bl	80054e0 <chThdResumeI>
 8004754:	2300      	movs	r3, #0
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	bd38      	pop	{r3, r4, r5, pc}
  _uart_tx1_isr_code(uartp);
 800475c:	2300      	movs	r3, #0
 800475e:	7063      	strb	r3, [r4, #1]
 8004760:	e7ed      	b.n	800473e <uart_lld_serve_tx_end_irq+0x3a>
  chSysHalt(reason);
 8004762:	4802      	ldr	r0, [pc, #8]	; (800476c <uart_lld_serve_tx_end_irq+0x68>)
 8004764:	f000 fbf2 	bl	8004f4c <chSysHalt>
 8004768:	e7d1      	b.n	800470e <uart_lld_serve_tx_end_irq+0xa>
 800476a:	bf00      	nop
 800476c:	0800692c 	.word	0x0800692c

08004770 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004770:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800477a:	d12d      	bne.n	80047d8 <uart_lld_serve_rx_end_irq+0x68>
  if (uartp->rxstate == UART_RX_IDLE) {
 800477c:	78a3      	ldrb	r3, [r4, #2]
 800477e:	6861      	ldr	r1, [r4, #4]
 8004780:	b933      	cbnz	r3, 8004790 <uart_lld_serve_rx_end_irq+0x20>
    _uart_rx_idle_code(uartp);
 8004782:	68cb      	ldr	r3, [r1, #12]
 8004784:	b333      	cbz	r3, 80047d4 <uart_lld_serve_rx_end_irq+0x64>
 8004786:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8004788:	4620      	mov	r0, r4
}
 800478a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _uart_rx_idle_code(uartp);
 800478e:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8004790:	69e0      	ldr	r0, [r4, #28]
 8004792:	6802      	ldr	r2, [r0, #0]
 8004794:	6813      	ldr	r3, [r2, #0]
 8004796:	f023 031f 	bic.w	r3, r3, #31
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d4fc      	bmi.n	800479c <uart_lld_serve_rx_end_irq+0x2c>
 80047a2:	7a47      	ldrb	r7, [r0, #9]
 80047a4:	6846      	ldr	r6, [r0, #4]
    _uart_rx_complete_isr_code(uartp);
 80047a6:	688d      	ldr	r5, [r1, #8]
    dmaStreamDisable(uartp->dmarx);
 80047a8:	233d      	movs	r3, #61	; 0x3d
 80047aa:	40bb      	lsls	r3, r7
    _uart_rx_complete_isr_code(uartp);
 80047ac:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 80047ae:	6033      	str	r3, [r6, #0]
    _uart_rx_complete_isr_code(uartp);
 80047b0:	70a0      	strb	r0, [r4, #2]
 80047b2:	b1c5      	cbz	r5, 80047e6 <uart_lld_serve_rx_end_irq+0x76>
 80047b4:	4620      	mov	r0, r4
 80047b6:	47a8      	blx	r5
 80047b8:	78a3      	ldrb	r3, [r4, #2]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d010      	beq.n	80047e0 <uart_lld_serve_rx_end_irq+0x70>
 80047be:	2320      	movs	r3, #32
 80047c0:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80047c4:	2100      	movs	r1, #0
 80047c6:	f104 000c 	add.w	r0, r4, #12
 80047ca:	f000 fe89 	bl	80054e0 <chThdResumeI>
 80047ce:	2300      	movs	r3, #0
 80047d0:	f383 8811 	msr	BASEPRI, r3
}
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chSysHalt(reason);
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <uart_lld_serve_rx_end_irq+0xa0>)
 80047da:	f000 fbb7 	bl	8004f4c <chSysHalt>
 80047de:	e7cd      	b.n	800477c <uart_lld_serve_rx_end_irq+0xc>
 80047e0:	69e3      	ldr	r3, [r4, #28]
 80047e2:	6861      	ldr	r1, [r4, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
  if (uartp->config->rxchar_cb == NULL)
 80047e6:	68cb      	ldr	r3, [r1, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80047e8:	69a1      	ldr	r1, [r4, #24]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bf14      	ite	ne
 80047ee:	f44f 7388 	movne.w	r3, #272	; 0x110
 80047f2:	f44f 7380 	moveq.w	r3, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80047f6:	430b      	orrs	r3, r1
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80047f8:	2001      	movs	r0, #1
    _uart_rx_complete_isr_code(uartp);
 80047fa:	2500      	movs	r5, #0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80047fc:	f104 0124 	add.w	r1, r4, #36	; 0x24
    _uart_rx_complete_isr_code(uartp);
 8004800:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004802:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004804:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004806:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	4303      	orrs	r3, r0
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e7d6      	b.n	80047be <uart_lld_serve_rx_end_irq+0x4e>
 8004810:	0800692c 	.word	0x0800692c

08004814 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004818:	4e52      	ldr	r6, [pc, #328]	; (8004964 <VectorD4+0x150>)
 800481a:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 800481c:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800481e:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004820:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004822:	f240 131f 	movw	r3, #287	; 0x11f
 8004826:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004828:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800482a:	d076      	beq.n	800491a <VectorD4+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800482c:	6873      	ldr	r3, [r6, #4]
 800482e:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8004832:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004836:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004838:	f1b8 0f00 	cmp.w	r8, #0
 800483c:	d062      	beq.n	8004904 <VectorD4+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 800483e:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8004840:	f003 0208 	and.w	r2, r3, #8
 8004844:	2a00      	cmp	r2, #0
 8004846:	bf14      	ite	ne
 8004848:	2254      	movne	r2, #84	; 0x54
 800484a:	2244      	moveq	r2, #68	; 0x44
 800484c:	9200      	str	r2, [sp, #0]
 800484e:	bf14      	ite	ne
 8004850:	2274      	movne	r2, #116	; 0x74
 8004852:	2264      	moveq	r2, #100	; 0x64
 8004854:	9207      	str	r2, [sp, #28]
 8004856:	bf14      	ite	ne
 8004858:	2234      	movne	r2, #52	; 0x34
 800485a:	2224      	moveq	r2, #36	; 0x24
 800485c:	9203      	str	r2, [sp, #12]
 800485e:	bf14      	ite	ne
 8004860:	225c      	movne	r2, #92	; 0x5c
 8004862:	224c      	moveq	r2, #76	; 0x4c
 8004864:	9201      	str	r2, [sp, #4]
 8004866:	bf14      	ite	ne
 8004868:	227c      	movne	r2, #124	; 0x7c
 800486a:	226c      	moveq	r2, #108	; 0x6c
 800486c:	9202      	str	r2, [sp, #8]
 800486e:	bf14      	ite	ne
 8004870:	223c      	movne	r2, #60	; 0x3c
 8004872:	222c      	moveq	r2, #44	; 0x2c
 8004874:	9206      	str	r2, [sp, #24]
 8004876:	bf14      	ite	ne
 8004878:	221c      	movne	r2, #28
 800487a:	220c      	moveq	r2, #12
 800487c:	9204      	str	r2, [sp, #16]
 800487e:	bf14      	ite	ne
 8004880:	2214      	movne	r2, #20
 8004882:	2204      	moveq	r2, #4
 8004884:	9205      	str	r2, [sp, #20]
 8004886:	bf15      	itete	ne
 8004888:	2150      	movne	r1, #80	; 0x50
 800488a:	2140      	moveq	r1, #64	; 0x40
 800488c:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8004890:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8004894:	bf15      	itete	ne
 8004896:	2030      	movne	r0, #48	; 0x30
 8004898:	2020      	moveq	r0, #32
 800489a:	f04f 0b58 	movne.w	fp, #88	; 0x58
 800489e:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 80048a2:	bf15      	itete	ne
 80048a4:	f04f 0a78 	movne.w	sl, #120	; 0x78
 80048a8:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 80048ac:	f04f 0938 	movne.w	r9, #56	; 0x38
 80048b0:	f04f 0928 	moveq.w	r9, #40	; 0x28
 80048b4:	bf15      	itete	ne
 80048b6:	f04f 0e18 	movne.w	lr, #24
 80048ba:	f04f 0e08 	moveq.w	lr, #8
 80048be:	2210      	movne	r2, #16
 80048c0:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 80048c2:	f013 0f01 	tst.w	r3, #1
 80048c6:	d009      	beq.n	80048dc <VectorD4+0xc8>
 80048c8:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 80048cc:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 80048d0:	9900      	ldr	r1, [sp, #0]
 80048d2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80048d6:	9803      	ldr	r0, [sp, #12]
 80048d8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 80048dc:	f013 0f02 	tst.w	r3, #2
 80048e0:	d003      	beq.n	80048ea <VectorD4+0xd6>
 80048e2:	4659      	mov	r1, fp
 80048e4:	46d4      	mov	ip, sl
 80048e6:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 80048e8:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 80048ea:	f003 0e04 	and.w	lr, r3, #4
 80048ee:	f1be 0f00 	cmp.w	lr, #0
 80048f2:	bf1c      	itt	ne
 80048f4:	4602      	movne	r2, r0
 80048f6:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 80048f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80048fc:	bf08      	it	eq
 80048fe:	4611      	moveq	r1, r2
 8004900:	4818      	ldr	r0, [pc, #96]	; (8004964 <VectorD4+0x150>)
 8004902:	47c0      	blx	r8
 8004904:	2320      	movs	r3, #32
 8004906:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800490a:	f06f 0101 	mvn.w	r1, #1
 800490e:	4816      	ldr	r0, [pc, #88]	; (8004968 <VectorD4+0x154>)
 8004910:	f000 fde6 	bl	80054e0 <chThdResumeI>
 8004914:	2300      	movs	r3, #0
 8004916:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 800491a:	066a      	lsls	r2, r5, #25
 800491c:	d50e      	bpl.n	800493c <VectorD4+0x128>
 800491e:	067b      	lsls	r3, r7, #25
 8004920:	d50c      	bpl.n	800493c <VectorD4+0x128>
    _uart_tx2_isr_code(uartp);
 8004922:	6873      	ldr	r3, [r6, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004926:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 800492a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800492e:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004930:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004932:	b10b      	cbz	r3, 8004938 <VectorD4+0x124>
 8004934:	480b      	ldr	r0, [pc, #44]	; (8004964 <VectorD4+0x150>)
 8004936:	4798      	blx	r3
 8004938:	7a34      	ldrb	r4, [r6, #8]
 800493a:	b124      	cbz	r4, 8004946 <VectorD4+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
}
 800493c:	b009      	add	sp, #36	; 0x24
 800493e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004942:	f001 b82d 	b.w	80059a0 <_port_irq_epilogue>
 8004946:	2320      	movs	r3, #32
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	4807      	ldr	r0, [pc, #28]	; (800496c <VectorD4+0x158>)
 800494e:	4621      	mov	r1, r4
 8004950:	f000 fdc6 	bl	80054e0 <chThdResumeI>
 8004954:	f384 8811 	msr	BASEPRI, r4
}
 8004958:	b009      	add	sp, #36	; 0x24
 800495a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800495e:	f001 b81f 	b.w	80059a0 <_port_irq_epilogue>
 8004962:	bf00      	nop
 8004964:	20000c5c 	.word	0x20000c5c
 8004968:	20000c68 	.word	0x20000c68
 800496c:	20000c6c 	.word	0x20000c6c

08004970 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004974:	4e52      	ldr	r6, [pc, #328]	; (8004ac0 <Vector15C+0x150>)
 8004976:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8004978:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800497a:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800497c:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800497e:	f240 131f 	movw	r3, #287	; 0x11f
 8004982:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8004984:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004986:	d076      	beq.n	8004a76 <Vector15C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004988:	6873      	ldr	r3, [r6, #4]
 800498a:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 800498e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004992:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004994:	f1b8 0f00 	cmp.w	r8, #0
 8004998:	d062      	beq.n	8004a60 <Vector15C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 800499a:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 800499c:	f003 0208 	and.w	r2, r3, #8
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2254      	movne	r2, #84	; 0x54
 80049a6:	2244      	moveq	r2, #68	; 0x44
 80049a8:	9200      	str	r2, [sp, #0]
 80049aa:	bf14      	ite	ne
 80049ac:	2274      	movne	r2, #116	; 0x74
 80049ae:	2264      	moveq	r2, #100	; 0x64
 80049b0:	9207      	str	r2, [sp, #28]
 80049b2:	bf14      	ite	ne
 80049b4:	2234      	movne	r2, #52	; 0x34
 80049b6:	2224      	moveq	r2, #36	; 0x24
 80049b8:	9203      	str	r2, [sp, #12]
 80049ba:	bf14      	ite	ne
 80049bc:	225c      	movne	r2, #92	; 0x5c
 80049be:	224c      	moveq	r2, #76	; 0x4c
 80049c0:	9201      	str	r2, [sp, #4]
 80049c2:	bf14      	ite	ne
 80049c4:	227c      	movne	r2, #124	; 0x7c
 80049c6:	226c      	moveq	r2, #108	; 0x6c
 80049c8:	9202      	str	r2, [sp, #8]
 80049ca:	bf14      	ite	ne
 80049cc:	223c      	movne	r2, #60	; 0x3c
 80049ce:	222c      	moveq	r2, #44	; 0x2c
 80049d0:	9206      	str	r2, [sp, #24]
 80049d2:	bf14      	ite	ne
 80049d4:	221c      	movne	r2, #28
 80049d6:	220c      	moveq	r2, #12
 80049d8:	9204      	str	r2, [sp, #16]
 80049da:	bf14      	ite	ne
 80049dc:	2214      	movne	r2, #20
 80049de:	2204      	moveq	r2, #4
 80049e0:	9205      	str	r2, [sp, #20]
 80049e2:	bf15      	itete	ne
 80049e4:	2150      	movne	r1, #80	; 0x50
 80049e6:	2140      	moveq	r1, #64	; 0x40
 80049e8:	f04f 0c70 	movne.w	ip, #112	; 0x70
 80049ec:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 80049f0:	bf15      	itete	ne
 80049f2:	2030      	movne	r0, #48	; 0x30
 80049f4:	2020      	moveq	r0, #32
 80049f6:	f04f 0b58 	movne.w	fp, #88	; 0x58
 80049fa:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 80049fe:	bf15      	itete	ne
 8004a00:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8004a04:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8004a08:	f04f 0938 	movne.w	r9, #56	; 0x38
 8004a0c:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8004a10:	bf15      	itete	ne
 8004a12:	f04f 0e18 	movne.w	lr, #24
 8004a16:	f04f 0e08 	moveq.w	lr, #8
 8004a1a:	2210      	movne	r2, #16
 8004a1c:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 8004a1e:	f013 0f01 	tst.w	r3, #1
 8004a22:	d009      	beq.n	8004a38 <Vector15C+0xc8>
 8004a24:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8004a28:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 8004a2c:	9900      	ldr	r1, [sp, #0]
 8004a2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004a32:	9803      	ldr	r0, [sp, #12]
 8004a34:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8004a38:	f013 0f02 	tst.w	r3, #2
 8004a3c:	d003      	beq.n	8004a46 <Vector15C+0xd6>
 8004a3e:	4659      	mov	r1, fp
 8004a40:	46d4      	mov	ip, sl
 8004a42:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8004a44:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8004a46:	f003 0e04 	and.w	lr, r3, #4
 8004a4a:	f1be 0f00 	cmp.w	lr, #0
 8004a4e:	bf1c      	itt	ne
 8004a50:	4602      	movne	r2, r0
 8004a52:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8004a54:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004a58:	bf08      	it	eq
 8004a5a:	4611      	moveq	r1, r2
 8004a5c:	4818      	ldr	r0, [pc, #96]	; (8004ac0 <Vector15C+0x150>)
 8004a5e:	47c0      	blx	r8
 8004a60:	2320      	movs	r3, #32
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f06f 0101 	mvn.w	r1, #1
 8004a6a:	4816      	ldr	r0, [pc, #88]	; (8004ac4 <Vector15C+0x154>)
 8004a6c:	f000 fd38 	bl	80054e0 <chThdResumeI>
 8004a70:	2300      	movs	r3, #0
 8004a72:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004a76:	066a      	lsls	r2, r5, #25
 8004a78:	d50e      	bpl.n	8004a98 <Vector15C+0x128>
 8004a7a:	067b      	lsls	r3, r7, #25
 8004a7c:	d50c      	bpl.n	8004a98 <Vector15C+0x128>
    _uart_tx2_isr_code(uartp);
 8004a7e:	6873      	ldr	r3, [r6, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004a82:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8004a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a8a:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004a8c:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004a8e:	b10b      	cbz	r3, 8004a94 <Vector15C+0x124>
 8004a90:	480b      	ldr	r0, [pc, #44]	; (8004ac0 <Vector15C+0x150>)
 8004a92:	4798      	blx	r3
 8004a94:	7a34      	ldrb	r4, [r6, #8]
 8004a96:	b124      	cbz	r4, 8004aa2 <Vector15C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
}
 8004a98:	b009      	add	sp, #36	; 0x24
 8004a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004a9e:	f000 bf7f 	b.w	80059a0 <_port_irq_epilogue>
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <Vector15C+0x158>)
 8004aaa:	4621      	mov	r1, r4
 8004aac:	f000 fd18 	bl	80054e0 <chThdResumeI>
 8004ab0:	f384 8811 	msr	BASEPRI, r4
}
 8004ab4:	b009      	add	sp, #36	; 0x24
 8004ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004aba:	f000 bf71 	b.w	80059a0 <_port_irq_epilogue>
 8004abe:	bf00      	nop
 8004ac0:	20000c84 	.word	0x20000c84
 8004ac4:	20000c90 	.word	0x20000c90
 8004ac8:	20000c94 	.word	0x20000c94

08004acc <Vector18C>:
/**
 * @brief   UART8 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004ad0:	4e52      	ldr	r6, [pc, #328]	; (8004c1c <Vector18C+0x150>)
 8004ad2:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8004ad4:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8004ad6:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004ad8:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004ada:	f240 131f 	movw	r3, #287	; 0x11f
 8004ade:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 8004ae0:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004ae2:	d076      	beq.n	8004bd2 <Vector18C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004ae4:	6873      	ldr	r3, [r6, #4]
 8004ae6:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8004aea:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004aee:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004af0:	f1b8 0f00 	cmp.w	r8, #0
 8004af4:	d062      	beq.n	8004bbc <Vector18C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 8004af6:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8004af8:	f003 0208 	and.w	r2, r3, #8
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	bf14      	ite	ne
 8004b00:	2254      	movne	r2, #84	; 0x54
 8004b02:	2244      	moveq	r2, #68	; 0x44
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	bf14      	ite	ne
 8004b08:	2274      	movne	r2, #116	; 0x74
 8004b0a:	2264      	moveq	r2, #100	; 0x64
 8004b0c:	9207      	str	r2, [sp, #28]
 8004b0e:	bf14      	ite	ne
 8004b10:	2234      	movne	r2, #52	; 0x34
 8004b12:	2224      	moveq	r2, #36	; 0x24
 8004b14:	9203      	str	r2, [sp, #12]
 8004b16:	bf14      	ite	ne
 8004b18:	225c      	movne	r2, #92	; 0x5c
 8004b1a:	224c      	moveq	r2, #76	; 0x4c
 8004b1c:	9201      	str	r2, [sp, #4]
 8004b1e:	bf14      	ite	ne
 8004b20:	227c      	movne	r2, #124	; 0x7c
 8004b22:	226c      	moveq	r2, #108	; 0x6c
 8004b24:	9202      	str	r2, [sp, #8]
 8004b26:	bf14      	ite	ne
 8004b28:	223c      	movne	r2, #60	; 0x3c
 8004b2a:	222c      	moveq	r2, #44	; 0x2c
 8004b2c:	9206      	str	r2, [sp, #24]
 8004b2e:	bf14      	ite	ne
 8004b30:	221c      	movne	r2, #28
 8004b32:	220c      	moveq	r2, #12
 8004b34:	9204      	str	r2, [sp, #16]
 8004b36:	bf14      	ite	ne
 8004b38:	2214      	movne	r2, #20
 8004b3a:	2204      	moveq	r2, #4
 8004b3c:	9205      	str	r2, [sp, #20]
 8004b3e:	bf15      	itete	ne
 8004b40:	2150      	movne	r1, #80	; 0x50
 8004b42:	2140      	moveq	r1, #64	; 0x40
 8004b44:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8004b48:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8004b4c:	bf15      	itete	ne
 8004b4e:	2030      	movne	r0, #48	; 0x30
 8004b50:	2020      	moveq	r0, #32
 8004b52:	f04f 0b58 	movne.w	fp, #88	; 0x58
 8004b56:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 8004b5a:	bf15      	itete	ne
 8004b5c:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8004b60:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8004b64:	f04f 0938 	movne.w	r9, #56	; 0x38
 8004b68:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8004b6c:	bf15      	itete	ne
 8004b6e:	f04f 0e18 	movne.w	lr, #24
 8004b72:	f04f 0e08 	moveq.w	lr, #8
 8004b76:	2210      	movne	r2, #16
 8004b78:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 8004b7a:	f013 0f01 	tst.w	r3, #1
 8004b7e:	d009      	beq.n	8004b94 <Vector18C+0xc8>
 8004b80:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8004b84:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 8004b88:	9900      	ldr	r1, [sp, #0]
 8004b8a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004b8e:	9803      	ldr	r0, [sp, #12]
 8004b90:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8004b94:	f013 0f02 	tst.w	r3, #2
 8004b98:	d003      	beq.n	8004ba2 <Vector18C+0xd6>
 8004b9a:	4659      	mov	r1, fp
 8004b9c:	46d4      	mov	ip, sl
 8004b9e:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8004ba0:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8004ba2:	f003 0e04 	and.w	lr, r3, #4
 8004ba6:	f1be 0f00 	cmp.w	lr, #0
 8004baa:	bf1c      	itt	ne
 8004bac:	4602      	movne	r2, r0
 8004bae:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8004bb0:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004bb4:	bf08      	it	eq
 8004bb6:	4611      	moveq	r1, r2
 8004bb8:	4818      	ldr	r0, [pc, #96]	; (8004c1c <Vector18C+0x150>)
 8004bba:	47c0      	blx	r8
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f06f 0101 	mvn.w	r1, #1
 8004bc6:	4816      	ldr	r0, [pc, #88]	; (8004c20 <Vector18C+0x154>)
 8004bc8:	f000 fc8a 	bl	80054e0 <chThdResumeI>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004bd2:	066a      	lsls	r2, r5, #25
 8004bd4:	d50e      	bpl.n	8004bf4 <Vector18C+0x128>
 8004bd6:	067b      	lsls	r3, r7, #25
 8004bd8:	d50c      	bpl.n	8004bf4 <Vector18C+0x128>
    _uart_tx2_isr_code(uartp);
 8004bda:	6873      	ldr	r3, [r6, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004bde:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8004be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be6:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004be8:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004bea:	b10b      	cbz	r3, 8004bf0 <Vector18C+0x124>
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <Vector18C+0x150>)
 8004bee:	4798      	blx	r3
 8004bf0:	7a34      	ldrb	r4, [r6, #8]
 8004bf2:	b124      	cbz	r4, 8004bfe <Vector18C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD8);

  OSAL_IRQ_EPILOGUE();
}
 8004bf4:	b009      	add	sp, #36	; 0x24
 8004bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004bfa:	f000 bed1 	b.w	80059a0 <_port_irq_epilogue>
 8004bfe:	2320      	movs	r3, #32
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <Vector18C+0x158>)
 8004c06:	4621      	mov	r1, r4
 8004c08:	f000 fc6a 	bl	80054e0 <chThdResumeI>
 8004c0c:	f384 8811 	msr	BASEPRI, r4
}
 8004c10:	b009      	add	sp, #36	; 0x24
 8004c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004c16:	f000 bec3 	b.w	80059a0 <_port_irq_epilogue>
 8004c1a:	bf00      	nop
 8004c1c:	20000cac 	.word	0x20000cac
 8004c20:	20000cb8 	.word	0x20000cb8
 8004c24:	20000cbc 	.word	0x20000cbc

08004c28 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8004c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 8004c2c:	4e0f      	ldr	r6, [pc, #60]	; (8004c6c <uart_lld_init+0x44>)
  UARTD5.dmarx   = NULL;
  UARTD5.dmatx   = NULL;
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8004c2e:	4f10      	ldr	r7, [pc, #64]	; (8004c70 <uart_lld_init+0x48>)
  UARTD7.dmarx   = NULL;
  UARTD7.dmatx   = NULL;
#endif

#if STM32_UART_USE_UART8
  uartObjectInit(&UARTD8);
 8004c30:	4d10      	ldr	r5, [pc, #64]	; (8004c74 <uart_lld_init+0x4c>)
  uartObjectInit(&UARTD1);
 8004c32:	4630      	mov	r0, r6
 8004c34:	f7fc fb16 	bl	8001264 <uartObjectInit>
  UARTD1.dmarx   = NULL;
 8004c38:	2400      	movs	r4, #0
  UARTD1.usart   = USART1;
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <uart_lld_init+0x50>)
 8004c3c:	6173      	str	r3, [r6, #20]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8004c3e:	f04f 0806 	mov.w	r8, #6
  uartObjectInit(&UARTD6);
 8004c42:	4638      	mov	r0, r7
  UARTD1.dmarx   = NULL;
 8004c44:	e9c6 8406 	strd	r8, r4, [r6, #24]
  UARTD1.dmatx   = NULL;
 8004c48:	6234      	str	r4, [r6, #32]
  uartObjectInit(&UARTD6);
 8004c4a:	f7fc fb0b 	bl	8001264 <uartObjectInit>
  UARTD6.usart   = USART6;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <uart_lld_init+0x54>)
 8004c50:	617b      	str	r3, [r7, #20]
  uartObjectInit(&UARTD8);
 8004c52:	4628      	mov	r0, r5
  UARTD6.dmarx   = NULL;
 8004c54:	61fc      	str	r4, [r7, #28]
  UARTD6.dmatx   = NULL;
 8004c56:	623c      	str	r4, [r7, #32]
  uartObjectInit(&UARTD8);
 8004c58:	f7fc fb04 	bl	8001264 <uartObjectInit>
  UARTD8.usart   = UART8;
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <uart_lld_init+0x58>)
  UARTD8.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD8.dmarx   = NULL;
  UARTD8.dmatx   = NULL;
 8004c5e:	622c      	str	r4, [r5, #32]
  UARTD8.dmarx   = NULL;
 8004c60:	e9c5 8406 	strd	r8, r4, [r5, #24]
  UARTD8.usart   = UART8;
 8004c64:	616b      	str	r3, [r5, #20]
#endif
}
 8004c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000c5c 	.word	0x20000c5c
 8004c70:	20000c84 	.word	0x20000c84
 8004c74:	20000cac 	.word	0x20000cac
 8004c78:	40011000 	.word	0x40011000
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	40007c00 	.word	0x40007c00

08004c84 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8004c86:	7803      	ldrb	r3, [r0, #0]
 8004c88:	2b01      	cmp	r3, #1
void uart_lld_start(UARTDriver *uartp) {
 8004c8a:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8004c8c:	d071      	beq.n	8004d72 <uart_lld_start+0xee>
 8004c8e:	e9d0 c707 	ldrd	ip, r7, [r0, #28]
 8004c92:	6846      	ldr	r6, [r0, #4]
 8004c94:	f8dc 2000 	ldr.w	r2, [ip]
 8004c98:	8b35      	ldrh	r5, [r6, #24]
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	6961      	ldr	r1, [r4, #20]
  dmaStreamDisable(uartp->dmarx);
 8004c9e:	6813      	ldr	r3, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 8004ca0:	f04f 0e00 	mov.w	lr, #0
  dmaStreamDisable(uartp->dmarx);
 8004ca4:	f023 031f 	bic.w	r3, r3, #31
  uartp->rxstate = UART_RX_IDLE;
 8004ca8:	f884 e002 	strb.w	lr, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8004cac:	f884 e001 	strb.w	lr, [r4, #1]
  dmaStreamDisable(uartp->dmarx);
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d4fc      	bmi.n	8004cb2 <uart_lld_start+0x2e>
 8004cb8:	f89c e009 	ldrb.w	lr, [ip, #9]
 8004cbc:	f8dc c004 	ldr.w	ip, [ip, #4]
 8004cc0:	233d      	movs	r3, #61	; 0x3d
 8004cc2:	fa03 f30e 	lsl.w	r3, r3, lr
 8004cc6:	f8cc 3000 	str.w	r3, [ip]
  dmaStreamDisable(uartp->dmatx);
 8004cca:	6803      	ldr	r3, [r0, #0]
 8004ccc:	f023 031f 	bic.w	r3, r3, #31
 8004cd0:	6003      	str	r3, [r0, #0]
 8004cd2:	6803      	ldr	r3, [r0, #0]
 8004cd4:	f013 0301 	ands.w	r3, r3, #1
 8004cd8:	d1fb      	bne.n	8004cd2 <uart_lld_start+0x4e>
 8004cda:	f897 e009 	ldrb.w	lr, [r7, #9]
 8004cde:	f8d7 c004 	ldr.w	ip, [r7, #4]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004ce2:	4f66      	ldr	r7, [pc, #408]	; (8004e7c <uart_lld_start+0x1f8>)
  dmaStreamDisable(uartp->dmatx);
 8004ce4:	203d      	movs	r0, #61	; 0x3d
 8004ce6:	fa00 f00e 	lsl.w	r0, r0, lr
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004cea:	42b9      	cmp	r1, r7
  dmaStreamDisable(uartp->dmatx);
 8004cec:	f8cc 0000 	str.w	r0, [ip]
  uartp->usart->CR1 = 0;
 8004cf0:	60cb      	str	r3, [r1, #12]
  uartp->usart->CR2 = 0;
 8004cf2:	610b      	str	r3, [r1, #16]
  uartp->usart->CR3 = 0;
 8004cf4:	614b      	str	r3, [r1, #20]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004cf6:	d02f      	beq.n	8004d58 <uart_lld_start+0xd4>
 8004cf8:	4861      	ldr	r0, [pc, #388]	; (8004e80 <uart_lld_start+0x1fc>)
 8004cfa:	6973      	ldr	r3, [r6, #20]
 8004cfc:	4281      	cmp	r1, r0
 8004cfe:	d02c      	beq.n	8004d5a <uart_lld_start+0xd6>
    fck = STM32_PCLK1 / uartp->config->speed;
 8004d00:	4860      	ldr	r0, [pc, #384]	; (8004e84 <uart_lld_start+0x200>)
 8004d02:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8004d06:	0428      	lsls	r0, r5, #16
 8004d08:	d42c      	bmi.n	8004d64 <uart_lld_start+0xe0>
  if (uartp->config->rxchar_cb == NULL)
 8004d0a:	68f0      	ldr	r0, [r6, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004d0c:	8b77      	ldrh	r7, [r6, #26]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004d0e:	f8d4 c018 	ldr.w	ip, [r4, #24]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004d12:	8bb6      	ldrh	r6, [r6, #28]
  u->BRR = fck;
 8004d14:	608b      	str	r3, [r1, #8]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8004d16:	2800      	cmp	r0, #0
  u->SR = 0;
 8004d18:	f04f 0000 	mov.w	r0, #0
  (void)u->SR;  /* SR reset step 1.*/
 8004d1c:	680b      	ldr	r3, [r1, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004d1e:	684b      	ldr	r3, [r1, #4]
  u->SR = 0;
 8004d20:	6008      	str	r0, [r1, #0]
  u->CR1 = uartp->config->cr1 | cr1;
 8004d22:	f445 5304 	orr.w	r3, r5, #8448	; 0x2100
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8004d26:	bf14      	ite	ne
 8004d28:	f44f 7088 	movne.w	r0, #272	; 0x110
 8004d2c:	f44f 7080 	moveq.w	r0, #256	; 0x100
  u->CR1 = uartp->config->cr1 | cr1;
 8004d30:	f043 030c 	orr.w	r3, r3, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004d34:	f046 05c1 	orr.w	r5, r6, #193	; 0xc1
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004d38:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004d3c:	2601      	movs	r6, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004d3e:	3424      	adds	r4, #36	; 0x24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004d40:	ea40 000c 	orr.w	r0, r0, ip
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004d44:	610f      	str	r7, [r1, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004d46:	614d      	str	r5, [r1, #20]
  u->CR1 = uartp->config->cr1 | cr1;
 8004d48:	60cb      	str	r3, [r1, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004d4a:	60d4      	str	r4, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004d4c:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004d4e:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	4333      	orrs	r3, r6
 8004d54:	6013      	str	r3, [r2, #0]
  usart_start(uartp);
}
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d58:	6973      	ldr	r3, [r6, #20]
    fck = STM32_PCLK2 / uartp->config->speed;
 8004d5a:	484b      	ldr	r0, [pc, #300]	; (8004e88 <uart_lld_start+0x204>)
 8004d5c:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8004d60:	0428      	lsls	r0, r5, #16
 8004d62:	d5d2      	bpl.n	8004d0a <uart_lld_start+0x86>
    fck = ((fck & ~7) * 2) | (fck & 7);
 8004d64:	f023 0007 	bic.w	r0, r3, #7
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8004d70:	e7cb      	b.n	8004d0a <uart_lld_start+0x86>
    if (&UARTD1 == uartp) {
 8004d72:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <uart_lld_start+0x208>)
 8004d74:	4298      	cmp	r0, r3
 8004d76:	d060      	beq.n	8004e3a <uart_lld_start+0x1b6>
    if (&UARTD6 == uartp) {
 8004d78:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <uart_lld_start+0x20c>)
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	d03c      	beq.n	8004df8 <uart_lld_start+0x174>
    if (&UARTD8 == uartp) {
 8004d7e:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <uart_lld_start+0x210>)
 8004d80:	4298      	cmp	r0, r3
 8004d82:	d018      	beq.n	8004db6 <uart_lld_start+0x132>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8004d84:	6866      	ldr	r6, [r4, #4]
 8004d86:	8b35      	ldrh	r5, [r6, #24]
 8004d88:	f405 53a0 	and.w	r3, r5, #5120	; 0x1400
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	d103      	bne.n	8004d9a <uart_lld_start+0x116>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004d98:	61a3      	str	r3, [r4, #24]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8004d9a:	e9d4 c707 	ldrd	ip, r7, [r4, #28]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8004d9e:	6961      	ldr	r1, [r4, #20]
 8004da0:	f8dc 2000 	ldr.w	r2, [ip]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8004da4:	6838      	ldr	r0, [r7, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8004da6:	1d0b      	adds	r3, r1, #4
    uartp->rxbuf = 0;
 8004da8:	f04f 0e00 	mov.w	lr, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8004dac:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8004dae:	6083      	str	r3, [r0, #8]
    uartp->rxbuf = 0;
 8004db0:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004db4:	e773      	b.n	8004c9e <uart_lld_start+0x1a>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a37      	ldr	r2, [pc, #220]	; (8004e98 <uart_lld_start+0x214>)
 8004dba:	210c      	movs	r1, #12
 8004dbc:	2006      	movs	r0, #6
 8004dbe:	f7fd fcb9 	bl	8002734 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 8004dc2:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 8004dc4:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 8004dc6:	4a35      	ldr	r2, [pc, #212]	; (8004e9c <uart_lld_start+0x218>)
 8004dc8:	210c      	movs	r1, #12
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7fd fcb2 	bl	8002734 <dmaStreamAllocI>
      rccEnableUART8(true);
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 8004dd2:	6220      	str	r0, [r4, #32]
      rccEnableUART8(true);
 8004dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
 8004ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 8004de4:	210c      	movs	r1, #12
 8004de6:	2053      	movs	r0, #83	; 0x53
      rccEnableUART8(true);
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 8004dea:	f7fc fd53 	bl	8001894 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(UART8_RX_DMA_CHANNEL) |
 8004dee:	69a3      	ldr	r3, [r4, #24]
 8004df0:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8004df4:	61a3      	str	r3, [r4, #24]
 8004df6:	e7c5      	b.n	8004d84 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <uart_lld_start+0x214>)
 8004dfc:	210c      	movs	r1, #12
 8004dfe:	2009      	movs	r0, #9
 8004e00:	f7fd fc98 	bl	8002734 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8004e04:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 8004e06:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8004e08:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <uart_lld_start+0x218>)
 8004e0a:	210c      	movs	r1, #12
 8004e0c:	200f      	movs	r0, #15
 8004e0e:	f7fd fc91 	bl	8002734 <dmaStreamAllocI>
      rccEnableUSART6(true);
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8004e14:	6220      	str	r0, [r4, #32]
      rccEnableUSART6(true);
 8004e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e18:	f042 0220 	orr.w	r2, r2, #32
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
 8004e1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e20:	f042 0220 	orr.w	r2, r2, #32
 8004e24:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8004e26:	210c      	movs	r1, #12
 8004e28:	2047      	movs	r0, #71	; 0x47
      rccEnableUSART6(true);
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8004e2c:	f7fc fd32 	bl	8001894 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 8004e30:	69a3      	ldr	r3, [r4, #24]
 8004e32:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8004e36:	61a3      	str	r3, [r4, #24]
 8004e38:	e7a4      	b.n	8004d84 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <uart_lld_start+0x214>)
 8004e3e:	210c      	movs	r1, #12
 8004e40:	200a      	movs	r0, #10
 8004e42:	f7fd fc77 	bl	8002734 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8004e46:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8004e48:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <uart_lld_start+0x218>)
 8004e4c:	210c      	movs	r1, #12
 8004e4e:	200f      	movs	r0, #15
 8004e50:	f7fd fc70 	bl	8002734 <dmaStreamAllocI>
      rccEnableUSART1(true);
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8004e56:	6220      	str	r0, [r4, #32]
      rccEnableUSART1(true);
 8004e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5a:	f042 0210 	orr.w	r2, r2, #16
 8004e5e:	645a      	str	r2, [r3, #68]	; 0x44
 8004e60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e62:	f042 0210 	orr.w	r2, r2, #16
 8004e66:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8004e68:	210c      	movs	r1, #12
 8004e6a:	2025      	movs	r0, #37	; 0x25
      rccEnableUSART1(true);
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8004e6e:	f7fc fd11 	bl	8001894 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 8004e72:	69a3      	ldr	r3, [r4, #24]
 8004e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e78:	61a3      	str	r3, [r4, #24]
 8004e7a:	e783      	b.n	8004d84 <uart_lld_start+0x100>
 8004e7c:	40011000 	.word	0x40011000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	0280de80 	.word	0x0280de80
 8004e88:	0501bd00 	.word	0x0501bd00
 8004e8c:	20000c5c 	.word	0x20000c5c
 8004e90:	20000c84 	.word	0x20000c84
 8004e94:	20000cac 	.word	0x20000cac
 8004e98:	08004771 	.word	0x08004771
 8004e9c:	08004705 	.word	0x08004705
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8004ea4:	e7fe      	b.n	8004ea4 <_idle_thread>
 8004ea6:	bf00      	nop

08004ea8 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  static volatile bool started = false;
  if(started)
 8004eaa:	4c20      	ldr	r4, [pc, #128]	; (8004f2c <chSysInit+0x84>)
 8004eac:	7823      	ldrb	r3, [r4, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <chSysInit+0xa>
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
  }
#endif
  started = true;
}
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  _scheduler_init();
 8004eb6:	f000 f95b 	bl	8005170 <_scheduler_init>
  _vt_init();
 8004eba:	f000 f897 	bl	8004fec <_vt_init>
  _tm_init();
 8004ebe:	f000 fb77 	bl	80055b0 <_tm_init>
  _core_init();
 8004ec2:	f000 fc8f 	bl	80057e4 <_core_init>
  _heap_init();
 8004ec6:	f000 fcd5 	bl	8005874 <_heap_init>
  _factory_init();
 8004eca:	f000 fd2d 	bl	8005928 <_factory_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	4917      	ldr	r1, [pc, #92]	; (8004f30 <chSysInit+0x88>)
 8004ed2:	4818      	ldr	r0, [pc, #96]	; (8004f34 <chSysInit+0x8c>)
 8004ed4:	f000 fa36 	bl	8005344 <_thread_init>
  currp->state = CH_STATE_CURRENT;
 8004ed8:	2601      	movs	r6, #1
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eda:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <chSysInit+0x90>)
 8004edc:	f880 6020 	strb.w	r6, [r0, #32]
 8004ee0:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <chSysInit+0x94>)
  currp->wabase = NULL;
 8004ee4:	61c5      	str	r5, [r0, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee6:	f64f 07ff 	movw	r7, #63743	; 0xf8ff
 8004eea:	4039      	ands	r1, r7

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004eec:	f107 4760 	add.w	r7, r7, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	f6a7 370f 	subw	r7, r7, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004efa:	4911      	ldr	r1, [pc, #68]	; (8004f40 <chSysInit+0x98>)
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004efc:	f8df c048 	ldr.w	ip, [pc, #72]	; 8004f48 <chSysInit+0xa0>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004f00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004f04:	60fa      	str	r2, [r7, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004f06:	680a      	ldr	r2, [r1, #0]
 8004f08:	f8cc 0018 	str.w	r0, [ip, #24]
 8004f0c:	4332      	orrs	r2, r6
 8004f0e:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f10:	2010      	movs	r0, #16
 8004f12:	2220      	movs	r2, #32
 8004f14:	77d8      	strb	r0, [r3, #31]
 8004f16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004f1a:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8004f1e:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 8004f20:	4808      	ldr	r0, [pc, #32]	; (8004f44 <chSysInit+0x9c>)
 8004f22:	f000 fa2d 	bl	8005380 <chThdCreate>
  started = true;
 8004f26:	7026      	strb	r6, [r4, #0]
}
 8004f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000e38 	.word	0x20000e38
 8004f30:	08006960 	.word	0x08006960
 8004f34:	20000e6c 	.word	0x20000e6c
 8004f38:	e000ed00 	.word	0xe000ed00
 8004f3c:	05fa0300 	.word	0x05fa0300
 8004f40:	e0001000 	.word	0xe0001000
 8004f44:	08006938 	.word	0x08006938
 8004f48:	20000e3c 	.word	0x20000e3c

08004f4c <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004f4c:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8004f4e:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <chSysHalt+0x8>)
 8004f50:	62d8      	str	r0, [r3, #44]	; 0x2c
 8004f52:	e7fe      	b.n	8004f52 <chSysHalt+0x6>
 8004f54:	20000e3c 	.word	0x20000e3c

08004f58 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8004f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8004f5c:	4d1d      	ldr	r5, [pc, #116]	; (8004fd4 <chSysTimerHandlerI+0x7c>)
 8004f5e:	46aa      	mov	sl, r5
  return (systime_t)STM32_ST_TIM->CNT;
 8004f60:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8004f64:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 8004f68:	68a3      	ldr	r3, [r4, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004f6a:	2720      	movs	r7, #32
 8004f6c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8004f70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8004f72:	eba0 0902 	sub.w	r9, r0, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8004f76:	4599      	cmp	r9, r3
 8004f78:	d31c      	bcc.n	8004fb4 <chSysTimerHandlerI+0x5c>
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	e00a      	b.n	8004f94 <chSysTimerHandlerI+0x3c>
 8004f7e:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8004f82:	6920      	ldr	r0, [r4, #16]
 8004f84:	47d8      	blx	fp
 8004f86:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8004f8a:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	4599      	cmp	r9, r3
 8004f90:	d3ec      	bcc.n	8004f6c <chSysTimerHandlerI+0x14>
 8004f92:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004f94:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8004f96:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8004f9a:	441a      	add	r2, r3
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004f9c:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8004f9e:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8004fa0:	eba9 0903 	sub.w	r9, r9, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004fa4:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8004fa8:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 8004faa:	60e6      	str	r6, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004fac:	d1e7      	bne.n	8004f7e <chSysTimerHandlerI+0x26>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8004fae:	f7fb fb1f 	bl	80005f0 <stStopAlarm>
 8004fb2:	e7e4      	b.n	8004f7e <chSysTimerHandlerI+0x26>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004fb4:	4554      	cmp	r4, sl
 8004fb6:	d00b      	beq.n	8004fd0 <chSysTimerHandlerI+0x78>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8004fb8:	eba3 0309 	sub.w	r3, r3, r9
  ch.vtlist.lasttime += nowdelta;
 8004fbc:	62a8      	str	r0, [r5, #40]	; 0x28
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	bf2c      	ite	cs
 8004fc2:	18c0      	addcs	r0, r0, r3
 8004fc4:	3002      	addcc	r0, #2
  ch.vtlist.next->delta -= nowdelta;
 8004fc6:	60a3      	str	r3, [r4, #8]
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8004fc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	f7fb bb16 	b.w	80005fc <stSetAlarm>
 8004fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	20000e3c 	.word	0x20000e3c

08004fd8 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <chSysPolledDelayX+0x10>)
 8004fda:	6851      	ldr	r1, [r2, #4]
 8004fdc:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 8004fde:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8004fe0:	4298      	cmp	r0, r3
 8004fe2:	d8fb      	bhi.n	8004fdc <chSysPolledDelayX+0x4>
  }
}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	e0001000 	.word	0xe0001000

08004fec <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <_vt_init+0x18>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8004ff2:	2100      	movs	r1, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8004ff4:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.lasttime = (systime_t)0;
 8004ff8:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8004ffc:	e9c3 2207 	strd	r2, r2, [r3, #28]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000e3c 	.word	0x20000e3c

08005008 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800500a:	4f1f      	ldr	r7, [pc, #124]	; (8005088 <chVTDoSetI+0x80>)
 800500c:	46bc      	mov	ip, r7
 800500e:	2902      	cmp	r1, #2
 8005010:	f85c 5f1c 	ldr.w	r5, [ip, #28]!
  vtp->par = par;
 8005014:	6103      	str	r3, [r0, #16]
 8005016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800501a:	bf38      	it	cc
 800501c:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800501e:	4565      	cmp	r5, ip
                vtfunc_t vtfunc, void *par) {
 8005020:	4606      	mov	r6, r0
  vtp->func = vtfunc;
 8005022:	60c2      	str	r2, [r0, #12]
 8005024:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005026:	d01e      	beq.n	8005066 <chVTDoSetI+0x5e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8005028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502a:	68ab      	ldr	r3, [r5, #8]
 800502c:	1a24      	subs	r4, r4, r0
 800502e:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8005030:	d215      	bcs.n	800505e <chVTDoSetI+0x56>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8005032:	429c      	cmp	r4, r3
 8005034:	d322      	bcc.n	800507c <chVTDoSetI+0x74>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8005036:	42a3      	cmp	r3, r4
 8005038:	d204      	bcs.n	8005044 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 800503a:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 800503c:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 800503e:	68ab      	ldr	r3, [r5, #8]
 8005040:	42a3      	cmp	r3, r4
 8005042:	d3fa      	bcc.n	800503a <chVTDoSetI+0x32>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8005044:	686b      	ldr	r3, [r5, #4]
 8005046:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 800504a:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 800504c:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 800504e:	60b4      	str	r4, [r6, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8005050:	68ab      	ldr	r3, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8005052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8005056:	1b1c      	subs	r4, r3, r4
 8005058:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800505a:	627a      	str	r2, [r7, #36]	; 0x24
}
 800505c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 800505e:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8005060:	1ae4      	subs	r4, r4, r3
 8005062:	68ab      	ldr	r3, [r5, #8]
 8005064:	e7e7      	b.n	8005036 <chVTDoSetI+0x2e>
      ch.vtlist.prev = vtp;
 8005066:	e9c7 0007 	strd	r0, r0, [r7, #28]
      ch.vtlist.lasttime = now;
 800506a:	62bc      	str	r4, [r7, #40]	; 0x28
  stStartAlarm(time);
 800506c:	1860      	adds	r0, r4, r1
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800506e:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 8005072:	60b1      	str	r1, [r6, #8]
}
 8005074:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005078:	f7fb bab2 	b.w	80005e0 <stStartAlarm>
  stSetAlarm(time);
 800507c:	4420      	add	r0, r4
 800507e:	f7fb fabd 	bl	80005fc <stSetAlarm>
 8005082:	68ab      	ldr	r3, [r5, #8]
 8005084:	e7d7      	b.n	8005036 <chVTDoSetI+0x2e>
 8005086:	bf00      	nop
 8005088:	20000e3c 	.word	0x20000e3c

0800508c <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <chVTDoResetI+0x70>)
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8005092:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8005094:	d010      	beq.n	80050b8 <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8005096:	e9d0 2100 	ldrd	r2, r1, [r0]
 800509a:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 800509c:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800509e:	331c      	adds	r3, #28
    vtp->func = NULL;
 80050a0:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80050a2:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80050a4:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80050a6:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80050a8:	d003      	beq.n	80050b2 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80050aa:	6881      	ldr	r1, [r0, #8]
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	440b      	add	r3, r1
 80050b0:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80050b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b6:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80050b8:	4618      	mov	r0, r3
 80050ba:	6811      	ldr	r1, [r2, #0]
 80050bc:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 80050c0:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80050c2:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80050c4:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80050c6:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80050c8:	d013      	beq.n	80050f2 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 80050ca:	6894      	ldr	r4, [r2, #8]
 80050cc:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80050ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80050d0:	4414      	add	r4, r2
 80050d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050d6:	608c      	str	r4, [r1, #8]
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	1a12      	subs	r2, r2, r0
  if (nowdelta >= ch.vtlist.next->delta) {
 80050dc:	4294      	cmp	r4, r2
 80050de:	d9e8      	bls.n	80050b2 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 80050e0:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80050e2:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80050e4:	bf98      	it	ls
 80050e6:	1c94      	addls	r4, r2, #2
 80050e8:	4420      	add	r0, r4
}
 80050ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ee:	f7fb ba85 	b.w	80005fc <stSetAlarm>
 80050f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  stStopAlarm();
 80050f6:	f7fb ba7b 	b.w	80005f0 <stStopAlarm>
 80050fa:	bf00      	nop
 80050fc:	20000e3c 	.word	0x20000e3c

08005100 <wakeup>:
 8005100:	2320      	movs	r3, #32
 8005102:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8005106:	f890 3020 	ldrb.w	r3, [r0, #32]
 800510a:	2b07      	cmp	r3, #7
 800510c:	d80e      	bhi.n	800512c <wakeup+0x2c>
 800510e:	e8df f003 	tbb	[pc, r3]
 8005112:	0d29      	.short	0x0d29
 8005114:	0408250d 	.word	0x0408250d
 8005118:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800511a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800511c:	6893      	ldr	r3, [r2, #8]
 800511e:	3301      	adds	r3, #1
 8005120:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8005122:	e9d0 2300 	ldrd	r2, r3, [r0]
 8005126:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8005128:	6802      	ldr	r2, [r0, #0]
 800512a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800512c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800512e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8005130:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8005134:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8005138:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800513a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800513e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	428a      	cmp	r2, r1
 8005144:	d2fb      	bcs.n	800513e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	2100      	movs	r1, #0
 800514a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800514e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8005150:	6058      	str	r0, [r3, #4]
 8005152:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515a:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800515c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    break;
 8005162:	e7e3      	b.n	800512c <wakeup+0x2c>
 8005164:	2300      	movs	r3, #0
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	4770      	bx	lr
 800516c:	20000e3c 	.word	0x20000e3c

08005170 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <_scheduler_init+0x10>)
  ch.rlist.prio = NOPRIO;
 8005172:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8005174:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8005178:	e9c3 3304 	strd	r3, r3, [r3, #16]
  ch.rlist.prio = NOPRIO;
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	4770      	bx	lr
 8005180:	20000e3c 	.word	0x20000e3c

08005184 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8005184:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8005186:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 800518a:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 800518c:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8005190:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	4282      	cmp	r2, r0
 8005196:	d2fb      	bcs.n	8005190 <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8005198:	685a      	ldr	r2, [r3, #4]
}
 800519a:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 800519c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80051a0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80051a2:	6059      	str	r1, [r3, #4]
}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000e3c 	.word	0x20000e3c

080051ac <chSchGoSleepS>:
  thread_t *otp = currp;
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <chSchGoSleepS+0x24>)
 80051ae:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80051b0:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 80051b2:	b410      	push	{r4}
  otp->state = newstate;
 80051b4:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80051b8:	6810      	ldr	r0, [r2, #0]
 80051ba:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 80051bc:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80051be:	6043      	str	r3, [r0, #4]
 80051c0:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 80051c4:	4610      	mov	r0, r2
}
 80051c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  currp = queue_fifo_remove(&ch.rlist.queue);
 80051ca:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80051cc:	f7fb b89e 	b.w	800030c <_port_switch>
 80051d0:	20000e3c 	.word	0x20000e3c

080051d4 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80051d4:	b530      	push	{r4, r5, lr}
 80051d6:	4c19      	ldr	r4, [pc, #100]	; (800523c <chSchGoSleepTimeoutS+0x68>)

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80051d8:	1c4a      	adds	r2, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80051da:	b087      	sub	sp, #28
 80051dc:	4605      	mov	r5, r0
 80051de:	69a3      	ldr	r3, [r4, #24]
  if (TIME_INFINITE != timeout) {
 80051e0:	d01a      	beq.n	8005218 <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 80051e2:	a801      	add	r0, sp, #4
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <chSchGoSleepTimeoutS+0x6c>)
 80051e6:	f7ff ff0f 	bl	8005008 <chVTDoSetI>
  thread_t *otp = currp;
 80051ea:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 80051ec:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 80051ee:	f881 5020 	strb.w	r5, [r1, #32]
  tqp->next             = tp->queue.next;
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80051f6:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80051f8:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 80051fa:	4618      	mov	r0, r3
  currp->state = CH_STATE_CURRENT;
 80051fc:	f883 5020 	strb.w	r5, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005200:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 8005202:	f7fb f883 	bl	800030c <_port_switch>
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt)) {
 8005206:	9b04      	ldr	r3, [sp, #16]
 8005208:	b113      	cbz	r3, 8005210 <chSchGoSleepTimeoutS+0x3c>
      chVTDoResetI(&vt);
 800520a:	a801      	add	r0, sp, #4
 800520c:	f7ff ff3e 	bl	800508c <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8005210:	69a3      	ldr	r3, [r4, #24]
}
 8005212:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005214:	b007      	add	sp, #28
 8005216:	bd30      	pop	{r4, r5, pc}
  thread_t *tp = tqp->next;
 8005218:	6822      	ldr	r2, [r4, #0]
  otp->state = newstate;
 800521a:	f883 0020 	strb.w	r0, [r3, #32]
  tqp->next             = tp->queue.next;
 800521e:	6810      	ldr	r0, [r2, #0]
 8005220:	6020      	str	r0, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8005222:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005224:	6044      	str	r4, [r0, #4]
  chSysSwitch(currp, otp);
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
  currp->state = CH_STATE_CURRENT;
 800522a:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800522e:	61a2      	str	r2, [r4, #24]
  chSysSwitch(currp, otp);
 8005230:	f7fb f86c 	bl	800030c <_port_switch>
  return currp->u.rdymsg;
 8005234:	69a3      	ldr	r3, [r4, #24]
}
 8005236:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005238:	b007      	add	sp, #28
 800523a:	bd30      	pop	{r4, r5, pc}
 800523c:	20000e3c 	.word	0x20000e3c
 8005240:	08005101 	.word	0x08005101

08005244 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005246:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8005248:	699e      	ldr	r6, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 800524a:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800524c:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 800524e:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 8005250:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8005252:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 8005254:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 8005258:	d80c      	bhi.n	8005274 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 800525a:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 800525e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	4295      	cmp	r5, r2
 8005264:	d9fb      	bls.n	800525e <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800526c:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800526e:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8005270:	bc70      	pop	{r4, r5, r6}
 8005272:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8005274:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8005278:	461a      	mov	r2, r3
    cp = cp->queue.next;
 800527a:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 800527c:	6891      	ldr	r1, [r2, #8]
 800527e:	4288      	cmp	r0, r1
 8005280:	d9fb      	bls.n	800527a <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8005282:	6851      	ldr	r1, [r2, #4]
 8005284:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8005286:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8005288:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 800528a:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 800528c:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 800528e:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8005292:	4631      	mov	r1, r6
 8005294:	4620      	mov	r0, r4
    currp = ntp;
 8005296:	619c      	str	r4, [r3, #24]
}
 8005298:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800529a:	f7fb b837 	b.w	800030c <_port_switch>
 800529e:	bf00      	nop
 80052a0:	20000e3c 	.word	0x20000e3c

080052a4 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <chSchRescheduleS+0x44>)
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 80052a6:	b430      	push	{r4, r5}
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80052ac:	6882      	ldr	r2, [r0, #8]
 80052ae:	68a1      	ldr	r1, [r4, #8]
 80052b0:	428a      	cmp	r2, r1
 80052b2:	d801      	bhi.n	80052b8 <chSchRescheduleS+0x14>
    chSchDoRescheduleAhead();
  }
}
 80052b4:	bc30      	pop	{r4, r5}
 80052b6:	4770      	bx	lr
  tqp->next             = tp->queue.next;
 80052b8:	6802      	ldr	r2, [r0, #0]
 80052ba:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80052bc:	6053      	str	r3, [r2, #4]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80052be:	2501      	movs	r5, #1
  tp->state = CH_STATE_READY;
 80052c0:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 80052c2:	f880 5020 	strb.w	r5, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80052c6:	6198      	str	r0, [r3, #24]
  tp->state = CH_STATE_READY;
 80052c8:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80052cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4291      	cmp	r1, r2
 80052d2:	d3fb      	bcc.n	80052cc <chSchRescheduleS+0x28>
  tp->queue.prev             = cp->queue.prev;
 80052d4:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80052d6:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 80052d8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80052dc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80052de:	605c      	str	r4, [r3, #4]
}
 80052e0:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80052e2:	f7fb b813 	b.w	800030c <_port_switch>
 80052e6:	bf00      	nop
 80052e8:	20000e3c 	.word	0x20000e3c

080052ec <chSchIsPreemptionRequired>:
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <chSchIsPreemptionRequired+0x14>)
 80052ee:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->prio;
 80052f0:	699b      	ldr	r3, [r3, #24]
  return p1 > p2;
 80052f2:	6890      	ldr	r0, [r2, #8]
 80052f4:	689b      	ldr	r3, [r3, #8]
}
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bf94      	ite	ls
 80052fa:	2000      	movls	r0, #0
 80052fc:	2001      	movhi	r0, #1
 80052fe:	4770      	bx	lr
 8005300:	20000e3c 	.word	0x20000e3c

08005304 <chSchDoReschedule>:
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <chSchDoReschedule+0x3c>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	6802      	ldr	r2, [r0, #0]
 800530a:	b410      	push	{r4}
 800530c:	2101      	movs	r1, #1
 800530e:	699c      	ldr	r4, [r3, #24]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	6053      	str	r3, [r2, #4]
 8005314:	f880 1020 	strb.w	r1, [r0, #32]
 8005318:	2200      	movs	r2, #0
 800531a:	68a1      	ldr	r1, [r4, #8]
 800531c:	f884 2020 	strb.w	r2, [r4, #32]
 8005320:	6198      	str	r0, [r3, #24]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4291      	cmp	r1, r2
 8005328:	d3fb      	bcc.n	8005322 <chSchDoReschedule+0x1e>
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4621      	mov	r1, r4
 800532e:	e9c4 3200 	strd	r3, r2, [r4]
 8005332:	6014      	str	r4, [r2, #0]
 8005334:	605c      	str	r4, [r3, #4]
 8005336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533a:	f7fa bfe7 	b.w	800030c <_port_switch>
 800533e:	bf00      	nop
 8005340:	20000e3c 	.word	0x20000e3c

08005344 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8005344:	b470      	push	{r4, r5, r6}
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005346:	4c0d      	ldr	r4, [pc, #52]	; (800537c <_thread_init+0x38>)
  tp->realprio  = prio;
 8005348:	63c2      	str	r2, [r0, #60]	; 0x3c
  REG_INSERT(tp);
 800534a:	6965      	ldr	r5, [r4, #20]
  tp->prio      = prio;
 800534c:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 800534e:	2602      	movs	r6, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005350:	2201      	movs	r2, #1
  tp->name      = name;
 8005352:	6181      	str	r1, [r0, #24]
  tp->state     = CH_STATE_WTSTART;
 8005354:	8406      	strh	r6, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005356:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 800535a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 800535e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  tp->mtxlist   = NULL;
 8005362:	2100      	movs	r1, #0
  REG_INSERT(tp);
 8005364:	6145      	str	r5, [r0, #20]
 8005366:	6104      	str	r4, [r0, #16]
  tp->epending  = (eventmask_t)0;
 8005368:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
  REG_INSERT(tp);
 800536c:	6128      	str	r0, [r5, #16]
 800536e:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8005370:	e9c0 620a 	strd	r6, r2, [r0, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8005374:	6302      	str	r2, [r0, #48]	; 0x30
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 8005376:	bc70      	pop	{r4, r5, r6}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000e3c 	.word	0x20000e3c

08005380 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	2320      	movs	r3, #32
 8005384:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8005388:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 800538a:	6844      	ldr	r4, [r0, #4]
  return _thread_init(tp, tdp->name, tdp->prio);
 800538c:	6806      	ldr	r6, [r0, #0]
  REG_INSERT(tp);
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <chThdCreate+0x7c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005390:	e9d0 5104 	ldrd	r5, r1, [r0, #16]
  return _thread_init(tp, tdp->name, tdp->prio);
 8005394:	68c0      	ldr	r0, [r0, #12]
  tp->wabase = tdp->wbase;
 8005396:	f843 4c2c 	str.w	r4, [r3, #-44]
  tp->state     = CH_STATE_WTSTART;
 800539a:	2402      	movs	r4, #2
 800539c:	f803 4c28 	strb.w	r4, [r3, #-40]
  tp->refs      = (trefs_t)1;
 80053a0:	2401      	movs	r4, #1
 80053a2:	f803 4c26 	strb.w	r4, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80053a6:	2400      	movs	r4, #0
 80053a8:	f803 4c27 	strb.w	r4, [r3, #-39]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80053ac:	e943 511b 	strd	r5, r1, [r3, #-108]	; 0x6c
  REG_INSERT(tp);
 80053b0:	6951      	ldr	r1, [r2, #20]
  tp->prio      = prio;
 80053b2:	f843 0c40 	str.w	r0, [r3, #-64]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80053b6:	f1a3 05ac 	sub.w	r5, r3, #172	; 0xac
  tp->realprio  = prio;
 80053ba:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80053be:	f843 5c3c 	str.w	r5, [r3, #-60]
 80053c2:	480f      	ldr	r0, [pc, #60]	; (8005400 <chThdCreate+0x80>)
 80053c4:	f843 0c4c 	str.w	r0, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80053c8:	f1a3 0548 	sub.w	r5, r3, #72	; 0x48
  REG_INSERT(tp);
 80053cc:	e943 210e 	strd	r2, r1, [r3, #-56]	; 0x38
  tp->name      = name;
 80053d0:	f843 6c30 	str.w	r6, [r3, #-48]
  list_init(&tp->waiting);
 80053d4:	f1a3 0020 	sub.w	r0, r3, #32
  tp->epending  = (eventmask_t)0;
 80053d8:	e943 4405 	strd	r4, r4, [r3, #-20]
  REG_INSERT(tp);
 80053dc:	610d      	str	r5, [r1, #16]
  queue_init(&tp->msgqueue);
 80053de:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 80053e2:	6155      	str	r5, [r2, #20]
  tlp->next = (thread_t *)tlp;
 80053e4:	f843 0c20 	str.w	r0, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 80053e8:	e943 1107 	strd	r1, r1, [r3, #-28]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 80053ec:	4628      	mov	r0, r5
 80053ee:	4621      	mov	r1, r4
 80053f0:	f7ff ff28 	bl	8005244 <chSchWakeupS>
 80053f4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
 80053f8:	4628      	mov	r0, r5
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	20000e3c 	.word	0x20000e3c
 8005400:	08000325 	.word	0x08000325

08005404 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	9d06      	ldr	r5, [sp, #24]
 8005408:	2420      	movs	r4, #32
 800540a:	f384 8811 	msr	BASEPRI, r4
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 800540e:	3948      	subs	r1, #72	; 0x48
 8005410:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 8005412:	4e16      	ldr	r6, [pc, #88]	; (800546c <chThdCreateStatic+0x68>)
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8005414:	61e0      	str	r0, [r4, #28]
  REG_INSERT(tp);
 8005416:	6971      	ldr	r1, [r6, #20]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8005418:	f844 3c24 	str.w	r3, [r4, #-36]
 800541c:	f844 5c20 	str.w	r5, [r4, #-32]
 8005420:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
  tp->state     = CH_STATE_WTSTART;
 8005424:	2502      	movs	r5, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005426:	2301      	movs	r3, #1
  tp->prio      = prio;
 8005428:	60a2      	str	r2, [r4, #8]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800542a:	60e0      	str	r0, [r4, #12]
  tp->realprio  = prio;
 800542c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 800542e:	8425      	strh	r5, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005430:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 8005434:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8005438:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 800543c:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800543e:	4f0c      	ldr	r7, [pc, #48]	; (8005470 <chThdCreateStatic+0x6c>)
  tp->name      = name;
 8005440:	480c      	ldr	r0, [pc, #48]	; (8005474 <chThdCreateStatic+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8005442:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 8005446:	e9c4 6104 	strd	r6, r1, [r4, #16]
  tp->name      = name;
 800544a:	61a0      	str	r0, [r4, #24]
  tp->epending  = (eventmask_t)0;
 800544c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8005450:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8005452:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 8005454:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8005458:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 800545a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800545c:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800545e:	f7ff fef1 	bl	8005244 <chSchWakeupS>
 8005462:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8005466:	4620      	mov	r0, r4
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546a:	bf00      	nop
 800546c:	20000e3c 	.word	0x20000e3c
 8005470:	08000325 	.word	0x08000325
 8005474:	08006958 	.word	0x08006958

08005478 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	2220      	movs	r2, #32
 800547c:	4603      	mov	r3, r0
 800547e:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8005482:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <chThdExit+0x4c>)
 8005484:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8005486:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8005488:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800548a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800548e:	42a8      	cmp	r0, r5
 8005490:	d006      	beq.n	80054a0 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8005492:	6803      	ldr	r3, [r0, #0]
 8005494:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8005496:	f7ff fe75 	bl	8005184 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800549a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800549c:	42a8      	cmp	r0, r5
 800549e:	d1f8      	bne.n	8005492 <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 80054a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80054a4:	b943      	cbnz	r3, 80054b8 <chThdExit+0x40>
 80054a6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80054aa:	079b      	lsls	r3, r3, #30
 80054ac:	d104      	bne.n	80054b8 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 80054ae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80054b2:	611a      	str	r2, [r3, #16]
 80054b4:	6922      	ldr	r2, [r4, #16]
 80054b6:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80054b8:	200f      	movs	r0, #15
}
 80054ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80054be:	f7ff be75 	b.w	80051ac <chSchGoSleepS>
 80054c2:	bf00      	nop
 80054c4:	20000e3c 	.word	0x20000e3c

080054c8 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80054c8:	b508      	push	{r3, lr}
 80054ca:	4601      	mov	r1, r0
 80054cc:	2320      	movs	r3, #32
 80054ce:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80054d2:	2008      	movs	r0, #8
 80054d4:	f7ff fe7e 	bl	80051d4 <chSchGoSleepTimeoutS>
 80054d8:	2300      	movs	r3, #0
 80054da:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 80054de:	bd08      	pop	{r3, pc}

080054e0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80054e0:	6803      	ldr	r3, [r0, #0]
 80054e2:	b12b      	cbz	r3, 80054f0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80054e4:	2200      	movs	r2, #0
 80054e6:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80054e8:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 80054ea:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80054ec:	f7ff be4a 	b.w	8005184 <chSchReadyI>
  }
}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80054f4:	b169      	cbz	r1, 8005512 <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80054f8:	b410      	push	{r4}
 80054fa:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 80054fc:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 80054fe:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8005500:	2004      	movs	r0, #4
 8005502:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8005506:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8005508:	6053      	str	r3, [r2, #4]
}
 800550a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800550e:	f7ff be61 	b.w	80051d4 <chSchGoSleepTimeoutS>
}
 8005512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005516:	4770      	bx	lr
 8005518:	20000e3c 	.word	0x20000e3c

0800551c <chThdDequeueNextI>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 800551c:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800551e:	4290      	cmp	r0, r2
 8005520:	d00a      	beq.n	8005538 <chThdDequeueNextI+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8005522:	b410      	push	{r4}
  tqp->next             = tp->queue.next;
 8005524:	6814      	ldr	r4, [r2, #0]
 8005526:	6004      	str	r4, [r0, #0]
 8005528:	4603      	mov	r3, r0
  tqp->next->queue.prev = (thread_t *)tqp;
 800552a:	6063      	str	r3, [r4, #4]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800552c:	4610      	mov	r0, r2
  tp->u.rdymsg = msg;
 800552e:	6251      	str	r1, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8005530:	f85d 4b04 	ldr.w	r4, [sp], #4
  (void) chSchReadyI(tp);
 8005534:	f7ff be26 	b.w	8005184 <chSchReadyI>
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop

0800553c <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800553c:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 800553e:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8005540:	4298      	cmp	r0, r3
 8005542:	d00b      	beq.n	800555c <chThdDequeueAllI+0x20>
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 800554e:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8005550:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8005552:	f7ff fe17 	bl	8005184 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	429c      	cmp	r4, r3
 800555a:	d1f5      	bne.n	8005548 <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800555c:	bd38      	pop	{r3, r4, r5, pc}
 800555e:	bf00      	nop

08005560 <chTMStartMeasurementX>:
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <chTMStartMeasurementX+0x8>)
 8005562:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005564:	6083      	str	r3, [r0, #8]
}
 8005566:	4770      	bx	lr
 8005568:	e0001000 	.word	0xe0001000

0800556c <chTMStopMeasurementX>:
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800556e:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <chTMStopMeasurementX+0x40>)
 8005570:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8005572:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005574:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8005576:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005578:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800557a:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 800557c:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 800557e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8005582:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8005584:	18e6      	adds	r6, r4, r3
 8005586:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 800558a:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800558c:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800558e:	bf88      	it	hi
 8005590:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8005592:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8005594:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8005596:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800559a:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 800559e:	bf38      	it	cc
 80055a0:	6003      	strcc	r3, [r0, #0]
}
 80055a2:	bcf0      	pop	{r4, r5, r6, r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e0001000 	.word	0xe0001000
 80055ac:	20000e3c 	.word	0x20000e3c

080055b0 <_tm_init>:
void _tm_init(void) {
 80055b0:	b510      	push	{r4, lr}
  ch.tm.offset = (rtcnt_t)0;
 80055b2:	4c0c      	ldr	r4, [pc, #48]	; (80055e4 <_tm_init+0x34>)
void _tm_init(void) {
 80055b4:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 80055b6:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
 80055bc:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 80055be:	4668      	mov	r0, sp
  ch.tm.offset = (rtcnt_t)0;
 80055c0:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->last       = (rtcnt_t)0;
 80055c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 80055c6:	9303      	str	r3, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 80055ce:	9100      	str	r1, [sp, #0]
  chTMStartMeasurementX(&tm);
 80055d0:	f7ff ffc6 	bl	8005560 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80055d4:	4668      	mov	r0, sp
 80055d6:	f7ff ffc9 	bl	800556c <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80055da:	9b02      	ldr	r3, [sp, #8]
 80055dc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80055de:	b006      	add	sp, #24
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	20000e3c 	.word	0x20000e3c

080055e8 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80055e8:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 80055ea:	e9c0 0000 	strd	r0, r0, [r0]
 80055ee:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop

080055f4 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	2320      	movs	r3, #32
 80055f8:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80055fc:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <chMtxLock+0xf0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80055fe:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 8005600:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 8005602:	2b00      	cmp	r3, #0
 8005604:	d042      	beq.n	800568c <chMtxLock+0x98>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8005606:	68a9      	ldr	r1, [r5, #8]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4291      	cmp	r1, r2
 800560c:	4604      	mov	r4, r0
 800560e:	d907      	bls.n	8005620 <chMtxLock+0x2c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8005610:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 8005614:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 8005616:	2a06      	cmp	r2, #6
 8005618:	d040      	beq.n	800569c <chMtxLock+0xa8>
 800561a:	2a07      	cmp	r2, #7
 800561c:	d017      	beq.n	800564e <chMtxLock+0x5a>
 800561e:	b352      	cbz	r2, 8005676 <chMtxLock+0x82>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 8005620:	4626      	mov	r6, r4
 8005622:	4623      	mov	r3, r4
 8005624:	e003      	b.n	800562e <chMtxLock+0x3a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	68aa      	ldr	r2, [r5, #8]
 800562a:	4291      	cmp	r1, r2
 800562c:	d32c      	bcc.n	8005688 <chMtxLock+0x94>
    cp = cp->queue.next;
 800562e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005630:	429c      	cmp	r4, r3
 8005632:	d1f8      	bne.n	8005626 <chMtxLock+0x32>
  tp->queue.prev             = cp->queue.prev;
 8005634:	6873      	ldr	r3, [r6, #4]
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8005636:	2006      	movs	r0, #6
 8005638:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 800563c:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 800563e:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8005640:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8005642:	f7ff fdb3 	bl	80051ac <chSchGoSleepS>
 8005646:	2300      	movs	r3, #0
 8005648:	f383 8811 	msr	BASEPRI, r3
}
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 800564e:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005652:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8005654:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	6042      	str	r2, [r0, #4]
 800565a:	4632      	mov	r2, r6
 800565c:	e002      	b.n	8005664 <chMtxLock+0x70>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800565e:	6890      	ldr	r0, [r2, #8]
 8005660:	4288      	cmp	r0, r1
 8005662:	d335      	bcc.n	80056d0 <chMtxLock+0xdc>
    cp = cp->queue.next;
 8005664:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005666:	4296      	cmp	r6, r2
 8005668:	d1f9      	bne.n	800565e <chMtxLock+0x6a>
  tp->queue.prev             = cp->queue.prev;
 800566a:	6872      	ldr	r2, [r6, #4]
 800566c:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8005670:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8005672:	6073      	str	r3, [r6, #4]
 8005674:	e7d4      	b.n	8005620 <chMtxLock+0x2c>
  tp->queue.prev->queue.next = tp->queue.next;
 8005676:	e9d3 1200 	ldrd	r1, r2, [r3]
 800567a:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800567c:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 800567e:	4618      	mov	r0, r3
 8005680:	604a      	str	r2, [r1, #4]
 8005682:	f7ff fd7f 	bl	8005184 <chSchReadyI>
 8005686:	e7cb      	b.n	8005620 <chMtxLock+0x2c>
    cp = cp->queue.next;
 8005688:	461e      	mov	r6, r3
 800568a:	e7d3      	b.n	8005634 <chMtxLock+0x40>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 800568c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800568e:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8005692:	63a8      	str	r0, [r5, #56]	; 0x38
 8005694:	2300      	movs	r3, #0
 8005696:	f383 8811 	msr	BASEPRI, r3
}
 800569a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 800569c:	e9d3 0200 	ldrd	r0, r2, [r3]
 80056a0:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80056a2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	4637      	mov	r7, r6
 80056a8:	6042      	str	r2, [r0, #4]
 80056aa:	4632      	mov	r2, r6
 80056ac:	e002      	b.n	80056b4 <chMtxLock+0xc0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80056ae:	6890      	ldr	r0, [r2, #8]
 80056b0:	4288      	cmp	r0, r1
 80056b2:	d314      	bcc.n	80056de <chMtxLock+0xea>
    cp = cp->queue.next;
 80056b4:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80056b6:	4296      	cmp	r6, r2
 80056b8:	d1f9      	bne.n	80056ae <chMtxLock+0xba>
  tp->queue.prev             = cp->queue.prev;
 80056ba:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 80056bc:	68a9      	ldr	r1, [r5, #8]
 80056be:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80056c2:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80056c4:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 80056c6:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d8a0      	bhi.n	8005610 <chMtxLock+0x1c>
 80056ce:	e7a7      	b.n	8005620 <chMtxLock+0x2c>
    cp = cp->queue.next;
 80056d0:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 80056d2:	6872      	ldr	r2, [r6, #4]
 80056d4:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80056d8:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80056da:	6073      	str	r3, [r6, #4]
 80056dc:	e7a0      	b.n	8005620 <chMtxLock+0x2c>
    cp = cp->queue.next;
 80056de:	4617      	mov	r7, r2
 80056e0:	e7eb      	b.n	80056ba <chMtxLock+0xc6>
 80056e2:	bf00      	nop
 80056e4:	20000e3c 	.word	0x20000e3c

080056e8 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 80056ea:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80056ec:	699d      	ldr	r5, [r3, #24]
 80056ee:	2320      	movs	r3, #32
 80056f0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80056f4:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80056f6:	68c3      	ldr	r3, [r0, #12]
 80056f8:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80056fa:	4284      	cmp	r4, r0
 80056fc:	d01d      	beq.n	800573a <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80056fe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8005700:	b14b      	cbz	r3, 8005716 <chMtxUnlock+0x2e>
 8005702:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <chMtxUnlock+0x28>
 8005708:	6892      	ldr	r2, [r2, #8]
 800570a:	4291      	cmp	r1, r2
 800570c:	bf38      	it	cc
 800570e:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8005710:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f5      	bne.n	8005702 <chMtxUnlock+0x1a>
 8005716:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8005718:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800571a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 800571c:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800571e:	4620      	mov	r0, r4
 8005720:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005722:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 8005724:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 8005728:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 800572a:	f7ff fd2b 	bl	8005184 <chSchReadyI>
      chSchRescheduleS();
 800572e:	f7ff fdb9 	bl	80052a4 <chSchRescheduleS>
 8005732:	2300      	movs	r3, #0
 8005734:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8005738:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	2300      	movs	r3, #0
 8005740:	f383 8811 	msr	BASEPRI, r3
}
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	bf00      	nop
 8005748:	20000e3c 	.word	0x20000e3c

0800574c <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 800574e:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8005750:	42a0      	cmp	r0, r4
 8005752:	d021      	beq.n	8005798 <chEvtBroadcastFlagsI+0x4c>
 8005754:	460d      	mov	r5, r1
 8005756:	4607      	mov	r7, r0
 8005758:	b341      	cbz	r1, 80057ac <chEvtBroadcastFlagsI+0x60>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800575a:	2600      	movs	r6, #0
 800575c:	e004      	b.n	8005768 <chEvtBroadcastFlagsI+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800575e:	2a0b      	cmp	r2, #11
 8005760:	d037      	beq.n	80057d2 <chEvtBroadcastFlagsI+0x86>
    elp = elp->next;
 8005762:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005764:	42a7      	cmp	r7, r4
 8005766:	d017      	beq.n	8005798 <chEvtBroadcastFlagsI+0x4c>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8005768:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    elp->flags |= flags;
 800576c:	432b      	orrs	r3, r5
    if ((flags == (eventflags_t)0) ||
 800576e:	4215      	tst	r5, r2
    elp->flags |= flags;
 8005770:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8005772:	d0f6      	beq.n	8005762 <chEvtBroadcastFlagsI+0x16>
  tp->epending |= events;
 8005774:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8005778:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800577a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 800577e:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005780:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8005782:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005784:	d1eb      	bne.n	800575e <chEvtBroadcastFlagsI+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005786:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005788:	4213      	tst	r3, r2
 800578a:	d0ea      	beq.n	8005762 <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 800578c:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800578e:	f7ff fcf9 	bl	8005184 <chSchReadyI>
    elp = elp->next;
 8005792:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005794:	42a7      	cmp	r7, r4
 8005796:	d1e7      	bne.n	8005768 <chEvtBroadcastFlagsI+0x1c>
}
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800579a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800579c:	4213      	tst	r3, r2
 800579e:	d002      	beq.n	80057a6 <chEvtBroadcastFlagsI+0x5a>
    tp->u.rdymsg = MSG_OK;
 80057a0:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80057a2:	f7ff fcef 	bl	8005184 <chSchReadyI>
    elp = elp->next;
 80057a6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80057a8:	42a7      	cmp	r7, r4
 80057aa:	d0f5      	beq.n	8005798 <chEvtBroadcastFlagsI+0x4c>
  tp->epending |= events;
 80057ac:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80057b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80057b2:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80057b6:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80057b8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80057ba:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80057bc:	d0ed      	beq.n	800579a <chEvtBroadcastFlagsI+0x4e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80057be:	2a0b      	cmp	r2, #11
 80057c0:	d1f1      	bne.n	80057a6 <chEvtBroadcastFlagsI+0x5a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80057c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80057c4:	ea32 0303 	bics.w	r3, r2, r3
 80057c8:	d0ea      	beq.n	80057a0 <chEvtBroadcastFlagsI+0x54>
    elp = elp->next;
 80057ca:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80057cc:	42a7      	cmp	r7, r4
 80057ce:	d1ed      	bne.n	80057ac <chEvtBroadcastFlagsI+0x60>
 80057d0:	e7e2      	b.n	8005798 <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80057d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80057d4:	ea32 0303 	bics.w	r3, r2, r3
 80057d8:	d1c3      	bne.n	8005762 <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 80057da:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80057dc:	f7ff fcd2 	bl	8005184 <chSchReadyI>
 80057e0:	e7d7      	b.n	8005792 <chEvtBroadcastFlagsI+0x46>
 80057e2:	bf00      	nop

080057e4 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <_core_init+0xc>)
 80057e6:	4903      	ldr	r1, [pc, #12]	; (80057f4 <_core_init+0x10>)
  ch_memcore.endmem  = __heap_end__;
 80057e8:	4a03      	ldr	r2, [pc, #12]	; (80057f8 <_core_init+0x14>)
 80057ea:	e9c3 1200 	strd	r1, r2, [r3]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 80057ee:	4770      	bx	lr
 80057f0:	20000eb4 	.word	0x20000eb4
 80057f4:	20001950 	.word	0x20001950
 80057f8:	20030000 	.word	0x20030000

080057fc <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 80057fc:	b470      	push	{r4, r5, r6}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80057fe:	4d0b      	ldr	r5, [pc, #44]	; (800582c <chCoreAllocAlignedWithOffsetI+0x30>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005800:	e9d5 6400 	ldrd	r6, r4, [r5]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005804:	4432      	add	r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8005806:	3801      	subs	r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005808:	3a01      	subs	r2, #1
  size = MEM_ALIGN_NEXT(size, align);
 800580a:	1843      	adds	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800580c:	1850      	adds	r0, r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 800580e:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005810:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8005812:	4019      	ands	r1, r3
  next = p + size;
 8005814:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005816:	428c      	cmp	r4, r1
 8005818:	d304      	bcc.n	8005824 <chCoreAllocAlignedWithOffsetI+0x28>
 800581a:	428e      	cmp	r6, r1
 800581c:	d802      	bhi.n	8005824 <chCoreAllocAlignedWithOffsetI+0x28>
    return NULL;
  }

  ch_memcore.nextmem = next;
 800581e:	6029      	str	r1, [r5, #0]

  return p;
}
 8005820:	bc70      	pop	{r4, r5, r6}
 8005822:	4770      	bx	lr
    return NULL;
 8005824:	2000      	movs	r0, #0
}
 8005826:	bc70      	pop	{r4, r5, r6}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000eb4 	.word	0x20000eb4

08005830 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8005830:	b4f0      	push	{r4, r5, r6, r7}
 8005832:	2320      	movs	r3, #32
 8005834:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005838:	4d0d      	ldr	r5, [pc, #52]	; (8005870 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800583a:	e9d5 7400 	ldrd	r7, r4, [r5]
 800583e:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005840:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 8005842:	1983      	adds	r3, r0, r6
 8005844:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005846:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8005848:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800584a:	4008      	ands	r0, r1
  next = p + size;
 800584c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800584e:	42a3      	cmp	r3, r4
 8005850:	d807      	bhi.n	8005862 <chCoreAllocAlignedWithOffset+0x32>
 8005852:	429f      	cmp	r7, r3
 8005854:	d805      	bhi.n	8005862 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800585e:	bcf0      	pop	{r4, r5, r6, r7}
 8005860:	4770      	bx	lr
    return NULL;
 8005862:	2000      	movs	r0, #0
 8005864:	2300      	movs	r3, #0
 8005866:	f383 8811 	msr	BASEPRI, r3
}
 800586a:	bcf0      	pop	{r4, r5, r6, r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000eb4 	.word	0x20000eb4

08005874 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <_heap_init+0x14>)
 8005876:	4a05      	ldr	r2, [pc, #20]	; (800588c <_heap_init+0x18>)
 8005878:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800587a:	f103 000c 	add.w	r0, r3, #12
  H_NEXT(&default_heap.header) = NULL;
 800587e:	2200      	movs	r2, #0
  H_PAGES(&default_heap.header) = 0;
 8005880:	e9c3 2201 	strd	r2, r2, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 8005884:	f7ff beb0 	b.w	80055e8 <chMtxObjectInit>
 8005888:	20000ebc 	.word	0x20000ebc
 800588c:	08005831 	.word	0x08005831

08005890 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8005892:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005896:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005898:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800589a:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800589e:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80058a2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80058a4:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 80058a8:	3504      	adds	r5, #4
  H_LOCK(heapp);
 80058aa:	4638      	mov	r0, r7
 80058ac:	f7ff fea2 	bl	80055f4 <chMtxLock>
  qp = &heapp->header;
 80058b0:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 80058b2:	42ab      	cmp	r3, r5
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	d001      	beq.n	80058bc <chHeapFree+0x2c>
 80058b8:	429c      	cmp	r4, r3
 80058ba:	d902      	bls.n	80058c2 <chHeapFree+0x32>
 80058bc:	b11a      	cbz	r2, 80058c6 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80058be:	4294      	cmp	r4, r2
 80058c0:	d301      	bcc.n	80058c6 <chHeapFree+0x36>
void chHeapFree(void *p) {
 80058c2:	4613      	mov	r3, r2
 80058c4:	e7f5      	b.n	80058b2 <chHeapFree+0x22>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80058c6:	f856 0c04 	ldr.w	r0, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80058ca:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 80058ce:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80058d0:	1c45      	adds	r5, r0, #1
 80058d2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80058d6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80058da:	4291      	cmp	r1, r2
 80058dc:	d00d      	beq.n	80058fa <chHeapFree+0x6a>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	3201      	adds	r2, #1
 80058e2:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80058e6:	42ac      	cmp	r4, r5
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80058e8:	bf04      	itt	eq
 80058ea:	1812      	addeq	r2, r2, r0
        H_NEXT(qp) = H_NEXT(hp);
 80058ec:	e9c3 1200 	strdeq	r1, r2, [r3]
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80058f0:	4638      	mov	r0, r7

  return;
}
 80058f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80058f6:	f7ff bef7 	b.w	80056e8 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80058fa:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80058fe:	4428      	add	r0, r5
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005900:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005904:	f846 0c04 	str.w	r0, [r6, #-4]
 8005908:	e7e9      	b.n	80058de <chHeapFree+0x4e>
 800590a:	bf00      	nop

0800590c <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 800590c:	b410      	push	{r4}
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800590e:	2400      	movs	r4, #0
 8005910:	6004      	str	r4, [r0, #0]
  mp->object_size = size;
  mp->align = align;
 8005912:	e9c0 1201 	strd	r1, r2, [r0, #4]
  mp->provider = provider;
 8005916:	60c3      	str	r3, [r0, #12]
}
 8005918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop

08005920 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8005920:	2200      	movs	r2, #0
 8005922:	f7ff bf6b 	b.w	80057fc <chCoreAllocAlignedWithOffsetI>
 8005926:	bf00      	nop

08005928 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8005928:	b570      	push	{r4, r5, r6, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 800592a:	4c13      	ldr	r4, [pc, #76]	; (8005978 <_factory_init+0x50>)
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800592c:	4d13      	ldr	r5, [pc, #76]	; (800597c <_factory_init+0x54>)
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff fe5a 	bl	80055e8 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8005934:	f104 0610 	add.w	r6, r4, #16
 8005938:	462b      	mov	r3, r5
 800593a:	f104 0014 	add.w	r0, r4, #20
 800593e:	2204      	movs	r2, #4
 8005940:	2114      	movs	r1, #20
 8005942:	6126      	str	r6, [r4, #16]
 8005944:	f7ff ffe2 	bl	800590c <chPoolObjectInitAligned>
 8005948:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800594c:	462b      	mov	r3, r5
 800594e:	2204      	movs	r2, #4
 8005950:	211c      	movs	r1, #28
 8005952:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005956:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800595a:	e9c4 6509 	strd	r6, r5, [r4, #36]	; 0x24
 800595e:	f7ff ffd5 	bl	800590c <chPoolObjectInitAligned>
 8005962:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005966:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800596a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800596e:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 8005972:	6463      	str	r3, [r4, #68]	; 0x44
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	bf00      	nop
 8005978:	20000ed8 	.word	0x20000ed8
 800597c:	08005921 	.word	0x08005921

08005980 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8005980:	4a06      	ldr	r2, [pc, #24]	; (800599c <SVC_Handler+0x1c>)
 8005982:	6853      	ldr	r3, [r2, #4]
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800598a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800598e:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005990:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005994:	2300      	movs	r3, #0
 8005996:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800599a:	4770      	bx	lr
 800599c:	e000ef30 	.word	0xe000ef30

080059a0 <_port_irq_epilogue>:
 80059a0:	2320      	movs	r3, #32
 80059a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <_port_irq_epilogue+0x50>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80059ae:	d102      	bne.n	80059b6 <_port_irq_epilogue+0x16>
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 80059b6:	b510      	push	{r4, lr}
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80059b8:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80059bc:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 80059c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 80059cc:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 80059d0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80059d4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80059d8:	f7ff fc88 	bl	80052ec <chSchIsPreemptionRequired>
 80059dc:	b118      	cbz	r0, 80059e6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <_port_irq_epilogue+0x58>)
 80059e0:	f844 3c50 	str.w	r3, [r4, #-80]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80059e4:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <_port_irq_epilogue+0x5c>)
 80059e8:	f844 3c50 	str.w	r3, [r4, #-80]
}
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	bf00      	nop
 80059f0:	e000ed00 	.word	0xe000ed00
 80059f4:	e000ef30 	.word	0xe000ef30
 80059f8:	08000335 	.word	0x08000335
 80059fc:	08000338 	.word	0x08000338

08005a00 <_fini>:
__attribute__((used))
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop

08005a04 <DR16_initDBus>:
/**
 * @brief start the uart driver for receiving from DR16
 * @note This will configure @p DR16_UART_DRIVER appropriately
 */
void DR16_initDBus(void)
{
 8005a04:	b510      	push	{r4, lr}
		100000,						 //baud rate 100k
		USART_CR1_M | USART_CR1_PCE, //parity control enable, 8+1 bits
		USART_CR2_LBDL,				 //10 bit break detection
		0};

	uartStart(&DR16_UART_DRIVER, &s_DR16_UART_Config);
 8005a06:	4c05      	ldr	r4, [pc, #20]	; (8005a1c <DR16_initDBus+0x18>)
 8005a08:	4905      	ldr	r1, [pc, #20]	; (8005a20 <DR16_initDBus+0x1c>)
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7fb fc34 	bl	8001278 <uartStart>
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 8005a10:	6a20      	ldr	r0, [r4, #32]
}
 8005a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 8005a16:	f7fc bef3 	b.w	8002800 <dmaStreamFree>
 8005a1a:	bf00      	nop
 8005a1c:	20000c5c 	.word	0x20000c5c
 8005a20:	08006978 	.word	0x08006978

08005a24 <get_descriptor>:
                                           uint16_t lang)
{

    (void)usbp;
    (void)lang;
    switch (dtype)
 8005a24:	2902      	cmp	r1, #2
 8005a26:	d006      	beq.n	8005a36 <get_descriptor+0x12>
 8005a28:	2903      	cmp	r1, #3
 8005a2a:	d006      	beq.n	8005a3a <get_descriptor+0x16>
 8005a2c:	2901      	cmp	r1, #1
        return &vcom_configuration_descriptor;
    case USB_DESCRIPTOR_STRING:
        if (dindex < 4)
            return &vcom_strings[dindex];
    }
    return NULL;
 8005a2e:	4806      	ldr	r0, [pc, #24]	; (8005a48 <get_descriptor+0x24>)
 8005a30:	bf18      	it	ne
 8005a32:	2000      	movne	r0, #0
 8005a34:	4770      	bx	lr
        return &vcom_configuration_descriptor;
 8005a36:	4805      	ldr	r0, [pc, #20]	; (8005a4c <get_descriptor+0x28>)
 8005a38:	4770      	bx	lr
        if (dindex < 4)
 8005a3a:	2a03      	cmp	r2, #3
            return &vcom_strings[dindex];
 8005a3c:	bf9a      	itte	ls
 8005a3e:	4804      	ldrls	r0, [pc, #16]	; (8005a50 <get_descriptor+0x2c>)
 8005a40:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
    return NULL;
 8005a44:	2000      	movhi	r0, #0
}
 8005a46:	4770      	bx	lr
 8005a48:	08006a44 	.word	0x08006a44
 8005a4c:	080069f8 	.word	0x080069f8
 8005a50:	08006acc 	.word	0x08006acc

08005a54 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp)
{
 8005a54:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005a56:	2320      	movs	r3, #32
 8005a58:	f383 8811 	msr	BASEPRI, r3

    (void)usbp;

    osalSysLockFromISR();
    sduSOFHookI(&SDU1);
 8005a5c:	4803      	ldr	r0, [pc, #12]	; (8005a6c <sof_handler+0x18>)
 8005a5e:	f7fb fb3d 	bl	80010dc <sduSOFHookI>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
}
 8005a68:	bd08      	pop	{r3, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000f20 	.word	0x20000f20

08005a70 <usb_event>:
{
 8005a70:	b510      	push	{r4, lr}
    switch (event)
 8005a72:	2905      	cmp	r1, #5
 8005a74:	d80d      	bhi.n	8005a92 <usb_event+0x22>
 8005a76:	e8df f001 	tbb	[pc, r1]
 8005a7a:	0c21      	.short	0x0c21
 8005a7c:	0321210d 	.word	0x0321210d
 8005a80:	2320      	movs	r3, #32
 8005a82:	f383 8811 	msr	BASEPRI, r3
        sduWakeupHookI(&SDU1);
 8005a86:	4812      	ldr	r0, [pc, #72]	; (8005ad0 <usb_event+0x60>)
 8005a88:	f7fb fac8 	bl	800101c <sduWakeupHookI>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f383 8811 	msr	BASEPRI, r3
}
 8005a92:	bd10      	pop	{r4, pc}
 8005a94:	4604      	mov	r4, r0
 8005a96:	2320      	movs	r3, #32
 8005a98:	f383 8811 	msr	BASEPRI, r3
        usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <usb_event+0x64>)
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	f7fb fc18 	bl	80012d4 <usbInitEndpointI>
        usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <usb_event+0x68>)
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	f7fb fc13 	bl	80012d4 <usbInitEndpointI>
        sduConfigureHookI(&SDU1);
 8005aae:	4808      	ldr	r0, [pc, #32]	; (8005ad0 <usb_event+0x60>)
 8005ab0:	f7fb fac0 	bl	8001034 <sduConfigureHookI>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f383 8811 	msr	BASEPRI, r3
}
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	2320      	movs	r3, #32
 8005abe:	f383 8811 	msr	BASEPRI, r3
        sduSuspendHookI(&SDU1);
 8005ac2:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <usb_event+0x60>)
 8005ac4:	f7fb fa8c 	bl	8000fe0 <sduSuspendHookI>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f383 8811 	msr	BASEPRI, r3
}
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	20000f20 	.word	0x20000f20
 8005ad4:	08006998 	.word	0x08006998
 8005ad8:	080069bc 	.word	0x080069bc

08005adc <setup_USB>:

/**
 * @brief Initializes USBD1 and serial-over-USB CDC driver SDU1
 */
void setup_USB(void)
{
 8005adc:	b538      	push	{r3, r4, r5, lr}
    sduObjectInit(&SDU1);
 8005ade:	4d0c      	ldr	r5, [pc, #48]	; (8005b10 <setup_USB+0x34>)
    sduStart(&SDU1, &serusbcfg);
    usbDisconnectBus(serusbcfg.usbp);
 8005ae0:	4c0c      	ldr	r4, [pc, #48]	; (8005b14 <setup_USB+0x38>)
    sduObjectInit(&SDU1);
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7fb fa36 	bl	8000f54 <sduObjectInit>
    sduStart(&SDU1, &serusbcfg);
 8005ae8:	4628      	mov	r0, r5
 8005aea:	490b      	ldr	r1, [pc, #44]	; (8005b18 <setup_USB+0x3c>)
 8005aec:	f7fb fa5e 	bl	8000fac <sduStart>
    usbDisconnectBus(serusbcfg.usbp);
 8005af0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    usbStart(serusbcfg.usbp, &usbcfg);
 8005af2:	490a      	ldr	r1, [pc, #40]	; (8005b1c <setup_USB+0x40>)
    usbDisconnectBus(serusbcfg.usbp);
 8005af4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005af6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005afa:	6393      	str	r3, [r2, #56]	; 0x38
    usbStart(serusbcfg.usbp, &usbcfg);
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7fb fbd7 	bl	80012b0 <usbStart>
    usbConnectBus(serusbcfg.usbp);
 8005b02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0a:	6393      	str	r3, [r2, #56]	; 0x38
};
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000f20 	.word	0x20000f20
 8005b14:	20000a84 	.word	0x20000a84
 8005b18:	080069e0 	.word	0x080069e0
 8005b1c:	080069e8 	.word	0x080069e8

08005b20 <Flash_SectorBegin>:
 * @param sector Sector to retrieve the beginning address of.
 * @return First address (inclusive) of @p sector.
 */
uint8_t *Flash_SectorBegin(flashsector_t sector)
{
    if (sector >= 24)
 8005b20:	2817      	cmp	r0, #23
 8005b22:	d826      	bhi.n	8005b72 <Flash_SectorBegin+0x52>
 8005b24:	4603      	mov	r3, r0
        return 0;
    uint8_t *address = (uint8_t *)FLASH_BASE;
    while (sector > 0)
 8005b26:	b308      	cbz	r0, 8005b6c <Flash_SectorBegin+0x4c>
 8005b28:	f1a0 020d 	sub.w	r2, r0, #13
{
 8005b2c:	b410      	push	{r4}
    uint8_t *address = (uint8_t *)FLASH_BASE;
 8005b2e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005b32:	e009      	b.n	8005b48 <Flash_SectorBegin+0x28>
    else if (sector == 4)
 8005b34:	2904      	cmp	r1, #4
    else if (sector >= 5 && sector <= 11)
 8005b36:	f1a1 0405 	sub.w	r4, r1, #5
    else if (sector == 4)
 8005b3a:	d014      	beq.n	8005b66 <Flash_SectorBegin+0x46>
    else if (sector >= 5 && sector <= 11)
 8005b3c:	2c06      	cmp	r4, #6
 8005b3e:	d801      	bhi.n	8005b44 <Flash_SectorBegin+0x24>
 8005b40:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8005b44:	3a01      	subs	r2, #1
    while (sector > 0)
 8005b46:	b15b      	cbz	r3, 8005b60 <Flash_SectorBegin+0x40>
    {
        --sector;
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	2a0b      	cmp	r2, #11
 8005b4c:	bf94      	ite	ls
 8005b4e:	4611      	movls	r1, r2
 8005b50:	4619      	movhi	r1, r3
    if (sector <= 3)
 8005b52:	2903      	cmp	r1, #3
 8005b54:	d8ee      	bhi.n	8005b34 <Flash_SectorBegin+0x14>
 8005b56:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8005b5a:	3a01      	subs	r2, #1
    while (sector > 0)
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f3      	bne.n	8005b48 <Flash_SectorBegin+0x28>
        address += Flash_SectorSize(sector);
    }
    return address;
}
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8005b6a:	e7eb      	b.n	8005b44 <Flash_SectorBegin+0x24>
    uint8_t *address = (uint8_t *)FLASH_BASE;
 8005b6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
}
 8005b70:	4770      	bx	lr
        return 0;
 8005b72:	2000      	movs	r0, #0
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop

08005b78 <_ZL12PAT9125ELThdPv>:
  
}

static THD_WORKING_AREA(PAT9125ELThd_wa, 1024);
static THD_FUNCTION(PAT9125ELThd, p)
{
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 8005b7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cf8 <_ZL12PAT9125ELThdPv+0x180>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005b80:	f8d9 3018 	ldr.w	r3, [r9, #24]

    (void)p;

    while (!chThdShouldTerminateX())
 8005b84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b88:	075a      	lsls	r2, r3, #29
 8005b8a:	f100 80ad 	bmi.w	8005ce8 <_ZL12PAT9125ELThdPv+0x170>
    {
    //PAT9125init();
    //swi2c_readByte_A8(PAT9125_I2C_ADDR,0x03,&mydata);
    
    palSetLine(LINE_C);
 8005b8e:	4e57      	ldr	r6, [pc, #348]	; (8005cec <_ZL12PAT9125ELThdPv+0x174>)
  palClearLine(LINE_A);
 8005b90:	4d57      	ldr	r5, [pc, #348]	; (8005cf0 <_ZL12PAT9125ELThdPv+0x178>)
  palClearLine(LINE_B);
 8005b92:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    palSetLine(LINE_F);
 8005b96:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  chThdSleepMicroseconds(1.5);
 8005b9a:	2401      	movs	r4, #1
    palSetLine(LINE_C);
 8005b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ba0:	8333      	strh	r3, [r6, #24]
    palSetLine(LINE_F);
 8005ba2:	4b54      	ldr	r3, [pc, #336]	; (8005cf4 <_ZL12PAT9125ELThdPv+0x17c>)
 8005ba4:	f8a3 b018 	strh.w	fp, [r3, #24]
  palClearLine(LINE_B);
 8005ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005bac:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005bae:	8373      	strh	r3, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005bb0:	f7ff fc8a 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005bb4:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	f7ff fc86 	bl	80054c8 <chThdSleep>
 8005bbc:	f04f 0a07 	mov.w	sl, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005bc0:	f04f 08e0 	mov.w	r8, #224	; 0xe0
 8005bc4:	fa48 f20a 	asr.w	r2, r8, sl
 8005bc8:	07d3      	lsls	r3, r2, #31
 8005bca:	bf4c      	ite	mi
 8005bcc:	8337      	strhmi	r7, [r6, #24]
    else palClearLine(LINE_B);
 8005bce:	8377      	strhpl	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005bd0:	f04f 0001 	mov.w	r0, #1
 8005bd4:	bf58      	it	pl
 8005bd6:	2001      	movpl	r0, #1
 8005bd8:	f7ff fc76 	bl	80054c8 <chThdSleep>
 8005bdc:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8005bde:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005be0:	f7ff fc72 	bl	80054c8 <chThdSleep>
 8005be4:	2001      	movs	r0, #1
 8005be6:	f7ff fc6f 	bl	80054c8 <chThdSleep>
 8005bea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8005bee:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7ff fc69 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005bf6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005bfa:	d1e3      	bne.n	8005bc4 <_ZL12PAT9125ELThdPv+0x4c>
  chThdSleepMicroseconds(1.5);
 8005bfc:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005bfe:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005c00:	f7ff fc62 	bl	80054c8 <chThdSleep>
 8005c04:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005c06:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005c08:	f7ff fc5e 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005c0c:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f7ff fc5a 	bl	80054c8 <chThdSleep>
 8005c14:	f04f 0a07 	mov.w	sl, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005c18:	f04f 0802 	mov.w	r8, #2
 8005c1c:	fa48 f20a 	asr.w	r2, r8, sl
 8005c20:	07d1      	lsls	r1, r2, #31
 8005c22:	bf4c      	ite	mi
 8005c24:	8337      	strhmi	r7, [r6, #24]
    else palClearLine(LINE_B);
 8005c26:	8377      	strhpl	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005c28:	f04f 0001 	mov.w	r0, #1
 8005c2c:	bf58      	it	pl
 8005c2e:	2001      	movpl	r0, #1
 8005c30:	f7ff fc4a 	bl	80054c8 <chThdSleep>
 8005c34:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8005c36:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005c38:	f7ff fc46 	bl	80054c8 <chThdSleep>
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	f7ff fc43 	bl	80054c8 <chThdSleep>
 8005c42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8005c46:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f7ff fc3d 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005c4e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005c52:	d1e3      	bne.n	8005c1c <_ZL12PAT9125ELThdPv+0xa4>
  chThdSleepMicroseconds(1.5);
 8005c54:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005c56:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005c58:	f7ff fc36 	bl	80054c8 <chThdSleep>
 8005c5c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005c5e:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005c60:	f7ff fc32 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005c64:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005c66:	2001      	movs	r0, #1
 8005c68:	f7ff fc2e 	bl	80054c8 <chThdSleep>
 8005c6c:	f04f 0a07 	mov.w	sl, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005c70:	f04f 08fb 	mov.w	r8, #251	; 0xfb
 8005c74:	fa48 f20a 	asr.w	r2, r8, sl
 8005c78:	07d2      	lsls	r2, r2, #31
 8005c7a:	bf4c      	ite	mi
 8005c7c:	8337      	strhmi	r7, [r6, #24]
    else palClearLine(LINE_B);
 8005c7e:	8377      	strhpl	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005c80:	f04f 0001 	mov.w	r0, #1
 8005c84:	bf58      	it	pl
 8005c86:	2001      	movpl	r0, #1
 8005c88:	f7ff fc1e 	bl	80054c8 <chThdSleep>
 8005c8c:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8005c8e:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005c90:	f7ff fc1a 	bl	80054c8 <chThdSleep>
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7ff fc17 	bl	80054c8 <chThdSleep>
 8005c9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8005c9e:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7ff fc11 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005ca6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005caa:	d1e3      	bne.n	8005c74 <_ZL12PAT9125ELThdPv+0xfc>
  chThdSleepMicroseconds(1.5);
 8005cac:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005cae:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005cb0:	f7ff fc0a 	bl	80054c8 <chThdSleep>
 8005cb4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005cb6:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005cb8:	f7ff fc06 	bl	80054c8 <chThdSleep>
 8005cbc:	2001      	movs	r0, #1
  palClearLine(LINE_A);
 8005cbe:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005cc0:	f7ff fc02 	bl	80054c8 <chThdSleep>
 8005cc4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005cc6:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005cc8:	f7ff fbfe 	bl	80054c8 <chThdSleep>
 8005ccc:	2001      	movs	r0, #1
  palSetLine(LINE_B);
 8005cce:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(1.5);
 8005cd0:	f7ff fbfa 	bl	80054c8 <chThdSleep>
    //   pat9125_x += iDX;
    //   pat9125_y -= iDY; //negative number, because direction switching does not work
    // }
    //else  Param_DebugHalt(&errormsg);
    
    chThdSleepMilliseconds(1);
 8005cd4:	200a      	movs	r0, #10
 8005cd6:	f7ff fbf7 	bl	80054c8 <chThdSleep>
 8005cda:	f8d9 3018 	ldr.w	r3, [r9, #24]
    while (!chThdShouldTerminateX())
 8005cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ce2:	075b      	lsls	r3, r3, #29
 8005ce4:	f57f af5a 	bpl.w	8005b9c <_ZL12PAT9125ELThdPv+0x24>
    }
}
 8005ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	40021c00 	.word	0x40021c00
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40020c00 	.word	0x40020c00
 8005cf8:	20000e3c 	.word	0x20000e3c

08005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>:
uint8_t swi2c_writeByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  palClearLine(LINE_B);
 8005d00:	4d75      	ldr	r5, [pc, #468]	; (8005ed8 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1dc>)
  palClearLine(LINE_A);
 8005d02:	4c76      	ldr	r4, [pc, #472]	; (8005edc <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1e0>)
  palClearLine(LINE_B);
 8005d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d08:	836b      	strh	r3, [r5, #26]
uint8_t swi2c_writeByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005d0a:	4607      	mov	r7, r0
  chThdSleepMicroseconds(1.5);
 8005d0c:	2001      	movs	r0, #1
uint8_t swi2c_writeByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005d0e:	4688      	mov	r8, r1
  chThdSleepMicroseconds(1.5);
 8005d10:	f7ff fbda 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005d14:	2001      	movs	r0, #1
 8005d16:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8005d18:	f7ff fbd6 	bl	80054c8 <chThdSleep>
    palSetLine(LINE_A);
 8005d1c:	46a1      	mov	r9, r4
    else palClearLine(LINE_B);
 8005d1e:	46aa      	mov	sl, r5
  chThdSleepMicroseconds(1.5);
 8005d20:	2407      	movs	r4, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d22:	f04f 0be0 	mov.w	fp, #224	; 0xe0
 8005d26:	fa4b f304 	asr.w	r3, fp, r4
    palSetLine(LINE_A);
 8005d2a:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d2c:	07db      	lsls	r3, r3, #31
 8005d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005d32:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d34:	f140 80b8 	bpl.w	8005ea8 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1ac>
 8005d38:	f8aa 1018 	strh.w	r1, [sl, #24]
  chThdSleepMicroseconds(1.5);
 8005d3c:	f7ff fbc4 	bl	80054c8 <chThdSleep>
 8005d40:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005d42:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005d46:	f7ff fbbf 	bl	80054c8 <chThdSleep>
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff fbbc 	bl	80054c8 <chThdSleep>
 8005d50:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005d52:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff fbb6 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005d5c:	1c61      	adds	r1, r4, #1
 8005d5e:	d1e2      	bne.n	8005d26 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x2a>
  palClearLine(LINE_B);
 8005d60:	4e5d      	ldr	r6, [pc, #372]	; (8005ed8 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1dc>)
  palSetLine(LINE_A);
 8005d62:	4d5e      	ldr	r5, [pc, #376]	; (8005edc <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1e0>)
  chThdSleepMicroseconds(1.5);
 8005d64:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005d66:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  palSetLine(LINE_A);
 8005d6a:	4604      	mov	r4, r0
  palClearLine(LINE_B);
 8005d6c:	f8a6 a01a 	strh.w	sl, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005d70:	f7ff fbaa 	bl	80054c8 <chThdSleep>
 8005d74:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005d76:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005d78:	f7ff fba6 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005d7c:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f7ff fba2 	bl	80054c8 <chThdSleep>
    else palClearLine(LINE_B);
 8005d84:	46b3      	mov	fp, r6
    palSetLine(LINE_A);
 8005d86:	46a9      	mov	r9, r5
  chThdSleepMicroseconds(1.5);
 8005d88:	2407      	movs	r4, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d8a:	fa47 f304 	asr.w	r3, r7, r4
    palSetLine(LINE_A);
 8005d8e:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d90:	07db      	lsls	r3, r3, #31
  chThdSleepMicroseconds(1.5);
 8005d92:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005d94:	d571      	bpl.n	8005e7a <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x17e>
 8005d96:	f8ab a018 	strh.w	sl, [fp, #24]
  chThdSleepMicroseconds(1.5);
 8005d9a:	f7ff fb95 	bl	80054c8 <chThdSleep>
 8005d9e:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005da0:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005da4:	f7ff fb90 	bl	80054c8 <chThdSleep>
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff fb8d 	bl	80054c8 <chThdSleep>
 8005dae:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005db0:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff fb87 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005dba:	1c65      	adds	r5, r4, #1
 8005dbc:	d1e5      	bne.n	8005d8a <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x8e>
  palClearLine(LINE_B);
 8005dbe:	4e46      	ldr	r6, [pc, #280]	; (8005ed8 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1dc>)
  palSetLine(LINE_A);
 8005dc0:	4f46      	ldr	r7, [pc, #280]	; (8005edc <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1e0>)
  chThdSleepMicroseconds(1.5);
 8005dc2:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005dc4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  palSetLine(LINE_A);
 8005dc8:	4604      	mov	r4, r0
  palClearLine(LINE_B);
 8005dca:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005dcc:	f7ff fb7c 	bl	80054c8 <chThdSleep>
 8005dd0:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005dd2:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(1.5);
 8005dd4:	f7ff fb78 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005dd8:	837c      	strh	r4, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff fb74 	bl	80054c8 <chThdSleep>
    else palClearLine(LINE_B);
 8005de0:	46b1      	mov	r9, r6
 8005de2:	f898 a000 	ldrb.w	sl, [r8]
  swi2c_write(*pbyte);
 8005de6:	2407      	movs	r4, #7
    else palClearLine(LINE_B);
 8005de8:	46a8      	mov	r8, r5
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005dea:	fa4a f304 	asr.w	r3, sl, r4
    palSetLine(LINE_A);
 8005dee:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005df0:	07d9      	lsls	r1, r3, #31
  chThdSleepMicroseconds(1.5);
 8005df2:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005df4:	d52d      	bpl.n	8005e52 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x156>
 8005df6:	f8a9 8018 	strh.w	r8, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005dfa:	f7ff fb65 	bl	80054c8 <chThdSleep>
 8005dfe:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005e00:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(1.5);
 8005e02:	f7ff fb61 	bl	80054c8 <chThdSleep>
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff fb5e 	bl	80054c8 <chThdSleep>
 8005e0c:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005e0e:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff fb59 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005e16:	1c62      	adds	r2, r4, #1
 8005e18:	d1e7      	bne.n	8005dea <_Z18swi2c_writeByte_A8hhPh.constprop.2+0xee>
  palClearLine(LINE_B);
 8005e1a:	4e2f      	ldr	r6, [pc, #188]	; (8005ed8 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1dc>)
  palSetLine(LINE_A);
 8005e1c:	4d2f      	ldr	r5, [pc, #188]	; (8005edc <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x1e0>)
  palClearLine(LINE_B);
 8005e1e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005e22:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005e24:	4604      	mov	r4, r0
  palClearLine(LINE_B);
 8005e26:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005e28:	f7ff fb4e 	bl	80054c8 <chThdSleep>
 8005e2c:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005e2e:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005e30:	f7ff fb4a 	bl	80054c8 <chThdSleep>
 8005e34:	4620      	mov	r0, r4
  palClearLine(LINE_A);
 8005e36:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005e38:	f7ff fb46 	bl	80054c8 <chThdSleep>
 8005e3c:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005e3e:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005e40:	f7ff fb42 	bl	80054c8 <chThdSleep>
 8005e44:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8005e46:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(1.5);
 8005e48:	f7ff fb3e 	bl	80054c8 <chThdSleep>
}
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(1.5);
 8005e52:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 8005e54:	f8a9 801a 	strh.w	r8, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005e58:	f7ff fb36 	bl	80054c8 <chThdSleep>
 8005e5c:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005e5e:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(1.5);
 8005e60:	f7ff fb32 	bl	80054c8 <chThdSleep>
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7ff fb2f 	bl	80054c8 <chThdSleep>
 8005e6a:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005e6c:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff fb2a 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005e74:	1c63      	adds	r3, r4, #1
 8005e76:	d1b8      	bne.n	8005dea <_Z18swi2c_writeByte_A8hhPh.constprop.2+0xee>
 8005e78:	e7cf      	b.n	8005e1a <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x11e>
  chThdSleepMicroseconds(1.5);
 8005e7a:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 8005e7c:	f8ab a01a 	strh.w	sl, [fp, #26]
  chThdSleepMicroseconds(1.5);
 8005e80:	f7ff fb22 	bl	80054c8 <chThdSleep>
 8005e84:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005e86:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005e8a:	f7ff fb1d 	bl	80054c8 <chThdSleep>
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7ff fb1a 	bl	80054c8 <chThdSleep>
 8005e94:	3c01      	subs	r4, #1
 8005e96:	4630      	mov	r0, r6
    palClearLine(LINE_A);
 8005e98:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005e9c:	f7ff fb14 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005ea0:	1c60      	adds	r0, r4, #1
 8005ea2:	f47f af72 	bne.w	8005d8a <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x8e>
 8005ea6:	e78a      	b.n	8005dbe <_Z18swi2c_writeByte_A8hhPh.constprop.2+0xc2>
    else palClearLine(LINE_B);
 8005ea8:	f8aa 101a 	strh.w	r1, [sl, #26]
  chThdSleepMicroseconds(1.5);
 8005eac:	2001      	movs	r0, #1
 8005eae:	f7ff fb0b 	bl	80054c8 <chThdSleep>
 8005eb2:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005eb4:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005eb8:	f7ff fb06 	bl	80054c8 <chThdSleep>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff fb03 	bl	80054c8 <chThdSleep>
 8005ec2:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005ec4:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7ff fafd 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005ece:	1c62      	adds	r2, r4, #1
 8005ed0:	f47f af29 	bne.w	8005d26 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x2a>
 8005ed4:	e744      	b.n	8005d60 <_Z18swi2c_writeByte_A8hhPh.constprop.2+0x64>
 8005ed6:	bf00      	nop
 8005ed8:	40021c00 	.word	0x40021c00
 8005edc:	40022000 	.word	0x40022000

08005ee0 <_Z17swi2c_readByte_A8hhPh.constprop.1>:
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  palClearLine(LINE_B);
 8005ee4:	4da2      	ldr	r5, [pc, #648]	; (8006170 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x290>)
  palClearLine(LINE_A);
 8005ee6:	4ca3      	ldr	r4, [pc, #652]	; (8006174 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x294>)
  palClearLine(LINE_B);
 8005ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eec:	836b      	strh	r3, [r5, #26]
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005eee:	4607      	mov	r7, r0
  chThdSleepMicroseconds(1.5);
 8005ef0:	2001      	movs	r0, #1
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t* pbyte)
 8005ef2:	4688      	mov	r8, r1
  chThdSleepMicroseconds(1.5);
 8005ef4:	f7ff fae8 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005ef8:	2001      	movs	r0, #1
 8005efa:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8005efc:	f7ff fae4 	bl	80054c8 <chThdSleep>
    palSetLine(LINE_A);
 8005f00:	46a1      	mov	r9, r4
    else palClearLine(LINE_B);
 8005f02:	46aa      	mov	sl, r5
  chThdSleepMicroseconds(1.5);
 8005f04:	2407      	movs	r4, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f06:	f04f 0be0 	mov.w	fp, #224	; 0xe0
 8005f0a:	fa4b f304 	asr.w	r3, fp, r4
    palSetLine(LINE_A);
 8005f0e:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f10:	07db      	lsls	r3, r3, #31
 8005f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005f16:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f18:	f140 8113 	bpl.w	8006142 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x262>
 8005f1c:	f8aa 1018 	strh.w	r1, [sl, #24]
  chThdSleepMicroseconds(1.5);
 8005f20:	f7ff fad2 	bl	80054c8 <chThdSleep>
 8005f24:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005f26:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005f2a:	f7ff facd 	bl	80054c8 <chThdSleep>
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff faca 	bl	80054c8 <chThdSleep>
 8005f34:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005f36:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff fac4 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005f40:	1c61      	adds	r1, r4, #1
 8005f42:	d1e2      	bne.n	8005f0a <_Z17swi2c_readByte_A8hhPh.constprop.1+0x2a>
  palClearLine(LINE_B);
 8005f44:	4e8a      	ldr	r6, [pc, #552]	; (8006170 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x290>)
  palSetLine(LINE_A);
 8005f46:	4d8b      	ldr	r5, [pc, #556]	; (8006174 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x294>)
  chThdSleepMicroseconds(1.5);
 8005f48:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8005f4a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  palSetLine(LINE_A);
 8005f4e:	4604      	mov	r4, r0
  palClearLine(LINE_B);
 8005f50:	f8a6 a01a 	strh.w	sl, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8005f54:	f7ff fab8 	bl	80054c8 <chThdSleep>
 8005f58:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005f5a:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005f5c:	f7ff fab4 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005f60:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7ff fab0 	bl	80054c8 <chThdSleep>
    else palClearLine(LINE_B);
 8005f68:	46b3      	mov	fp, r6
    palSetLine(LINE_A);
 8005f6a:	46a9      	mov	r9, r5
  chThdSleepMicroseconds(1.5);
 8005f6c:	2407      	movs	r4, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f6e:	fa47 f304 	asr.w	r3, r7, r4
    palSetLine(LINE_A);
 8005f72:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f74:	07db      	lsls	r3, r3, #31
  chThdSleepMicroseconds(1.5);
 8005f76:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005f78:	f140 80cc 	bpl.w	8006114 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x234>
 8005f7c:	f8ab a018 	strh.w	sl, [fp, #24]
  chThdSleepMicroseconds(1.5);
 8005f80:	f7ff faa2 	bl	80054c8 <chThdSleep>
 8005f84:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8005f86:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8005f8a:	f7ff fa9d 	bl	80054c8 <chThdSleep>
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7ff fa9a 	bl	80054c8 <chThdSleep>
 8005f94:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8005f96:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff fa94 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8005fa0:	1c61      	adds	r1, r4, #1
 8005fa2:	d1e4      	bne.n	8005f6e <_Z17swi2c_readByte_A8hhPh.constprop.1+0x8e>
  palClearLine(LINE_B);
 8005fa4:	4d72      	ldr	r5, [pc, #456]	; (8006170 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x290>)
  palSetLine(LINE_A);
 8005fa6:	4f73      	ldr	r7, [pc, #460]	; (8006174 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x294>)
  palClearLine(LINE_B);
 8005fa8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005fac:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005fae:	4604      	mov	r4, r0
  palClearLine(LINE_B);
 8005fb0:	836e      	strh	r6, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005fb2:	f7ff fa89 	bl	80054c8 <chThdSleep>
 8005fb6:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005fb8:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(1.5);
 8005fba:	f7ff fa85 	bl	80054c8 <chThdSleep>
 8005fbe:	4620      	mov	r0, r4
  palClearLine(LINE_A);
 8005fc0:	837c      	strh	r4, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8005fc2:	f7ff fa81 	bl	80054c8 <chThdSleep>
 8005fc6:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005fc8:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(1.5);
 8005fca:	f7ff fa7d 	bl	80054c8 <chThdSleep>
 8005fce:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8005fd0:	832e      	strh	r6, [r5, #24]
  chThdSleepMicroseconds(1.5);
 8005fd2:	f7ff fa79 	bl	80054c8 <chThdSleep>
 8005fd6:	4620      	mov	r0, r4
  palClearLine(LINE_B);
 8005fd8:	836e      	strh	r6, [r5, #26]
  chThdSleepMicroseconds(1.5);
 8005fda:	f7ff fa75 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8005fde:	837c      	strh	r4, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7ff fa71 	bl	80054c8 <chThdSleep>
    else palClearLine(LINE_B);
 8005fe6:	46a9      	mov	r9, r5
  chThdSleepMicroseconds(1.5);
 8005fe8:	2407      	movs	r4, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005fea:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
 8005fee:	fa4a f304 	asr.w	r3, sl, r4
    palSetLine(LINE_A);
 8005ff2:	2601      	movs	r6, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005ff4:	07db      	lsls	r3, r3, #31
 8005ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 8005ffa:	4630      	mov	r0, r6
    if (data & (1 << bit)) palSetLine(LINE_B);
 8005ffc:	d575      	bpl.n	80060ea <_Z17swi2c_readByte_A8hhPh.constprop.1+0x20a>
 8005ffe:	f8a9 1018 	strh.w	r1, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8006002:	f7ff fa61 	bl	80054c8 <chThdSleep>
 8006006:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006008:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(1.5);
 800600a:	f7ff fa5d 	bl	80054c8 <chThdSleep>
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff fa5a 	bl	80054c8 <chThdSleep>
 8006014:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006016:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff fa55 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800601e:	1c62      	adds	r2, r4, #1
 8006020:	d1e5      	bne.n	8005fee <_Z17swi2c_readByte_A8hhPh.constprop.1+0x10e>
  palClearLine(LINE_B);
 8006022:	4e53      	ldr	r6, [pc, #332]	; (8006170 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x290>)
  palSetLine(LINE_A);
 8006024:	4c53      	ldr	r4, [pc, #332]	; (8006174 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x294>)
  palClearLine(LINE_B);
 8006026:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 800602a:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800602c:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 800602e:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006030:	f7ff fa4a 	bl	80054c8 <chThdSleep>
 8006034:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006036:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006038:	f7ff fa46 	bl	80054c8 <chThdSleep>
 800603c:	4628      	mov	r0, r5
  palClearLine(LINE_A);
 800603e:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006040:	f7ff fa42 	bl	80054c8 <chThdSleep>
  palSetLine(LINE_B);
 8006044:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B,PAL_MODE_INPUT);
 8006046:	4639      	mov	r1, r7
 8006048:	4630      	mov	r0, r6
 800604a:	2200      	movs	r2, #0
 800604c:	f7fc fc70 	bl	8002930 <_pal_lld_setgroupmode>
    palClearLine(LINE_A);
 8006050:	462f      	mov	r7, r5
  palSetLineMode(LINE_B,PAL_MODE_INPUT);
 8006052:	f04f 0a07 	mov.w	sl, #7
  uint8_t data = 0;
 8006056:	f04f 0900 	mov.w	r9, #0
  chThdSleepMicroseconds(1.5);
 800605a:	2001      	movs	r0, #1
    palClearLine(LINE_A);
 800605c:	8367      	strh	r7, [r4, #26]
    data |= ((palReadLine(LINE_B)==PAL_HIGH)?1:0) << bit;
 800605e:	4e44      	ldr	r6, [pc, #272]	; (8006170 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x290>)
  chThdSleepMicroseconds(1.5);
 8006060:	f7ff fa32 	bl	80054c8 <chThdSleep>
 8006064:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8006066:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006068:	f7ff fa2e 	bl	80054c8 <chThdSleep>
    data |= ((palReadLine(LINE_B)==PAL_HIGH)?1:0) << bit;
 800606c:	6933      	ldr	r3, [r6, #16]
 800606e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006072:	fa03 f30a 	lsl.w	r3, r3, sl
 8006076:	ea43 0309 	orr.w	r3, r3, r9
  chThdSleepMicroseconds(1.5);
 800607a:	2001      	movs	r0, #1
    data |= ((palReadLine(LINE_B)==PAL_HIGH)?1:0) << bit;
 800607c:	fa5f f983 	uxtb.w	r9, r3
 8006080:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
  chThdSleepMicroseconds(1.5);
 8006084:	f7ff fa20 	bl	80054c8 <chThdSleep>
    palClearLine(LINE_A);
 8006088:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 800608a:	2001      	movs	r0, #1
 800608c:	f7ff fa1c 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006090:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006094:	d1e1      	bne.n	800605a <_Z17swi2c_readByte_A8hhPh.constprop.1+0x17a>
  palSetLineMode(LINE_B,PAL_MODE_OUTPUT_OPENDRAIN);
 8006096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palSetLine(LINE_B);
 800609a:	460f      	mov	r7, r1
  palSetLineMode(LINE_B,PAL_MODE_OUTPUT_OPENDRAIN);
 800609c:	2205      	movs	r2, #5
 800609e:	4630      	mov	r0, r6
 80060a0:	f7fc fc46 	bl	8002930 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(1.5);
 80060a4:	2001      	movs	r0, #1
  palSetLine(LINE_B);
 80060a6:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(1.5);
 80060a8:	f7ff fa0e 	bl	80054c8 <chThdSleep>
 80060ac:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80060ae:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80060b0:	f7ff fa0a 	bl	80054c8 <chThdSleep>
 80060b4:	2001      	movs	r0, #1
 80060b6:	f7ff fa07 	bl	80054c8 <chThdSleep>
 80060ba:	2001      	movs	r0, #1
  palClearLine(LINE_A);
 80060bc:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80060be:	f7ff fa03 	bl	80054c8 <chThdSleep>
 80060c2:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 80060c4:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80060c6:	f7ff f9ff 	bl	80054c8 <chThdSleep>
 80060ca:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80060cc:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80060ce:	f7ff f9fb 	bl	80054c8 <chThdSleep>
  palSetLine(LINE_B);
 80060d2:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(1.5);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f7ff f9f7 	bl	80054c8 <chThdSleep>
  if (pbyte) *pbyte = byte;
 80060da:	f1b8 0f00 	cmp.w	r8, #0
 80060de:	d001      	beq.n	80060e4 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x204>
 80060e0:	f888 9000 	strb.w	r9, [r8]
}
 80060e4:	2001      	movs	r0, #1
 80060e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else palClearLine(LINE_B);
 80060ea:	f8a9 101a 	strh.w	r1, [r9, #26]
  chThdSleepMicroseconds(1.5);
 80060ee:	2001      	movs	r0, #1
 80060f0:	f7ff f9ea 	bl	80054c8 <chThdSleep>
 80060f4:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80060f6:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(1.5);
 80060f8:	f7ff f9e6 	bl	80054c8 <chThdSleep>
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff f9e3 	bl	80054c8 <chThdSleep>
 8006102:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006104:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(1.5);
 8006106:	4630      	mov	r0, r6
 8006108:	f7ff f9de 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800610c:	1c63      	adds	r3, r4, #1
 800610e:	f47f af6e 	bne.w	8005fee <_Z17swi2c_readByte_A8hhPh.constprop.1+0x10e>
 8006112:	e786      	b.n	8006022 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x142>
  chThdSleepMicroseconds(1.5);
 8006114:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 8006116:	f8ab a01a 	strh.w	sl, [fp, #26]
  chThdSleepMicroseconds(1.5);
 800611a:	f7ff f9d5 	bl	80054c8 <chThdSleep>
 800611e:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006120:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8006124:	f7ff f9d0 	bl	80054c8 <chThdSleep>
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff f9cd 	bl	80054c8 <chThdSleep>
 800612e:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006130:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff f9c7 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800613a:	1c62      	adds	r2, r4, #1
 800613c:	f47f af17 	bne.w	8005f6e <_Z17swi2c_readByte_A8hhPh.constprop.1+0x8e>
 8006140:	e730      	b.n	8005fa4 <_Z17swi2c_readByte_A8hhPh.constprop.1+0xc4>
    else palClearLine(LINE_B);
 8006142:	f8aa 101a 	strh.w	r1, [sl, #26]
  chThdSleepMicroseconds(1.5);
 8006146:	2001      	movs	r0, #1
 8006148:	f7ff f9be 	bl	80054c8 <chThdSleep>
 800614c:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800614e:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(1.5);
 8006152:	f7ff f9b9 	bl	80054c8 <chThdSleep>
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff f9b6 	bl	80054c8 <chThdSleep>
 800615c:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 800615e:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(1.5);
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff f9b0 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006168:	1c62      	adds	r2, r4, #1
 800616a:	f47f aece 	bne.w	8005f0a <_Z17swi2c_readByte_A8hhPh.constprop.1+0x2a>
 800616e:	e6e9      	b.n	8005f44 <_Z17swi2c_readByte_A8hhPh.constprop.1+0x64>
 8006170:	40021c00 	.word	0x40021c00
 8006174:	40022000 	.word	0x40022000

08006178 <_Z11PAT9125initv>:
uint8_t PAT9125init(){
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	b085      	sub	sp, #20
 800617e:	a904      	add	r1, sp, #16
 8006180:	2300      	movs	r3, #0
 8006182:	f801 3d06 	strb.w	r3, [r1, #-6]!
  swi2c_writeByte_A8(PAT9125_I2C_ADDR, addr, &data);
 8006186:	207f      	movs	r0, #127	; 0x7f
 8006188:	f7ff fdb8 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
 800618c:	a904      	add	r1, sp, #16
 800618e:	2397      	movs	r3, #151	; 0x97
 8006190:	f801 3d07 	strb.w	r3, [r1, #-7]!
 8006194:	2006      	movs	r0, #6
 8006196:	f7ff fdb1 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
  chThdSleepMilliseconds(1);
 800619a:	200a      	movs	r0, #10
 800619c:	f7ff f994 	bl	80054c8 <chThdSleep>
 80061a0:	4b7f      	ldr	r3, [pc, #508]	; (80063a0 <_Z11PAT9125initv+0x228>)
  palClearLine(LINE_B);
 80061a2:	4e80      	ldr	r6, [pc, #512]	; (80063a4 <_Z11PAT9125initv+0x22c>)
  palClearLine(LINE_A);
 80061a4:	4c80      	ldr	r4, [pc, #512]	; (80063a8 <_Z11PAT9125initv+0x230>)
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	461a      	mov	r2, r3
      const uint8_t addr = pat9125_init_seq1[i++];
 80061aa:	7817      	ldrb	r7, [r2, #0]
      if (addr == 0x0ff)
 80061ac:	2fff      	cmp	r7, #255	; 0xff
 80061ae:	f000 80fd 	beq.w	80063ac <_Z11PAT9125initv+0x234>
  palClearLine(LINE_B);
 80061b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      if (! pat9125_wr_reg_verify(addr, pat9125_init_seq1[i++]))
 80061b6:	f892 8001 	ldrb.w	r8, [r2, #1]
  palClearLine(LINE_B);
 80061ba:	8373      	strh	r3, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80061bc:	2001      	movs	r0, #1
 80061be:	f7ff f983 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 80061c2:	2001      	movs	r0, #1
 80061c4:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80061c6:	f7ff f97f 	bl	80054c8 <chThdSleep>
 80061ca:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 80061cc:	f04f 0be0 	mov.w	fp, #224	; 0xe0
 80061d0:	fa4b f205 	asr.w	r2, fp, r5
    palSetLine(LINE_A);
 80061d4:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 80061d8:	07d3      	lsls	r3, r2, #31
 80061da:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 80061de:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 80061e0:	f140 80c7 	bpl.w	8006372 <_Z11PAT9125initv+0x1fa>
 80061e4:	f8a6 c018 	strh.w	ip, [r6, #24]
  chThdSleepMicroseconds(1.5);
 80061e8:	f7ff f96e 	bl	80054c8 <chThdSleep>
 80061ec:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 80061ee:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80061f2:	f7ff f969 	bl	80054c8 <chThdSleep>
 80061f6:	4648      	mov	r0, r9
 80061f8:	f7ff f966 	bl	80054c8 <chThdSleep>
 80061fc:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 80061fe:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006202:	4648      	mov	r0, r9
 8006204:	f7ff f960 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006208:	1c69      	adds	r1, r5, #1
 800620a:	d1e1      	bne.n	80061d0 <_Z11PAT9125initv+0x58>
  chThdSleepMicroseconds(1.5);
 800620c:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 800620e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  palSetLine(LINE_A);
 8006212:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 8006214:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006218:	f7ff f956 	bl	80054c8 <chThdSleep>
 800621c:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 800621e:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006220:	f7ff f952 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8006224:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006226:	4628      	mov	r0, r5
 8006228:	f7ff f94e 	bl	80054c8 <chThdSleep>
 800622c:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 800622e:	fa47 f205 	asr.w	r2, r7, r5
    palSetLine(LINE_A);
 8006232:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006236:	07d3      	lsls	r3, r2, #31
  chThdSleepMicroseconds(1.5);
 8006238:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 800623a:	f140 8083 	bpl.w	8006344 <_Z11PAT9125initv+0x1cc>
 800623e:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(1.5);
 8006242:	f7ff f941 	bl	80054c8 <chThdSleep>
 8006246:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006248:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 800624c:	f7ff f93c 	bl	80054c8 <chThdSleep>
 8006250:	4648      	mov	r0, r9
 8006252:	f7ff f939 	bl	80054c8 <chThdSleep>
 8006256:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006258:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 800625c:	4648      	mov	r0, r9
 800625e:	f7ff f933 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006262:	1c69      	adds	r1, r5, #1
 8006264:	d1e3      	bne.n	800622e <_Z11PAT9125initv+0xb6>
  chThdSleepMicroseconds(1.5);
 8006266:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8006268:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  palSetLine(LINE_A);
 800626c:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 800626e:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006272:	f7ff f929 	bl	80054c8 <chThdSleep>
 8006276:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006278:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 800627a:	f7ff f925 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 800627e:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006280:	4628      	mov	r0, r5
 8006282:	f7ff f921 	bl	80054c8 <chThdSleep>
 8006286:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006288:	fa48 f205 	asr.w	r2, r8, r5
    palSetLine(LINE_A);
 800628c:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006290:	07d3      	lsls	r3, r2, #31
  chThdSleepMicroseconds(1.5);
 8006292:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006294:	d540      	bpl.n	8006318 <_Z11PAT9125initv+0x1a0>
 8006296:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(1.5);
 800629a:	f7ff f915 	bl	80054c8 <chThdSleep>
 800629e:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 80062a0:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80062a4:	f7ff f910 	bl	80054c8 <chThdSleep>
 80062a8:	4648      	mov	r0, r9
 80062aa:	f7ff f90d 	bl	80054c8 <chThdSleep>
 80062ae:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 80062b0:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80062b4:	4648      	mov	r0, r9
 80062b6:	f7ff f907 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 80062ba:	1c69      	adds	r1, r5, #1
 80062bc:	d1e4      	bne.n	8006288 <_Z11PAT9125initv+0x110>
  chThdSleepMicroseconds(1.5);
 80062be:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 80062c0:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  palSetLine(LINE_A);
 80062c4:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 80062c6:	f8a6 a01a 	strh.w	sl, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80062ca:	f7ff f8fd 	bl	80054c8 <chThdSleep>
 80062ce:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80062d0:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80062d2:	f7ff f8f9 	bl	80054c8 <chThdSleep>
 80062d6:	4628      	mov	r0, r5
  palClearLine(LINE_A);
 80062d8:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80062da:	f7ff f8f5 	bl	80054c8 <chThdSleep>
 80062de:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80062e0:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80062e2:	f7ff f8f1 	bl	80054c8 <chThdSleep>
 80062e6:	4628      	mov	r0, r5
  palSetLine(LINE_B);
 80062e8:	f8a6 a018 	strh.w	sl, [r6, #24]
  chThdSleepMicroseconds(1.5);
 80062ec:	f7ff f8ec 	bl	80054c8 <chThdSleep>
  uint8_t data = 0;
 80062f0:	2300      	movs	r3, #0
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 80062f2:	4638      	mov	r0, r7
 80062f4:	f10d 010f 	add.w	r1, sp, #15
  uint8_t data = 0;
 80062f8:	f88d 300f 	strb.w	r3, [sp, #15]
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 80062fc:	f7ff fdf0 	bl	8005ee0 <_Z17swi2c_readByte_A8hhPh.constprop.1>
 8006300:	9a01      	ldr	r2, [sp, #4]
  return data;
 8006302:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006306:	3202      	adds	r2, #2
      if (! pat9125_wr_reg_verify(addr, pat9125_init_seq1[i++]))
 8006308:	4598      	cmp	r8, r3
 800630a:	9201      	str	r2, [sp, #4]
 800630c:	f43f af4d 	beq.w	80061aa <_Z11PAT9125initv+0x32>
        return 0;
 8006310:	2000      	movs	r0, #0
}
 8006312:	b005      	add	sp, #20
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(1.5);
 8006318:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 800631a:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 800631e:	f7ff f8d3 	bl	80054c8 <chThdSleep>
 8006322:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006324:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006328:	f7ff f8ce 	bl	80054c8 <chThdSleep>
 800632c:	4648      	mov	r0, r9
 800632e:	f7ff f8cb 	bl	80054c8 <chThdSleep>
 8006332:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006334:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006338:	4648      	mov	r0, r9
 800633a:	f7ff f8c5 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800633e:	1c6a      	adds	r2, r5, #1
 8006340:	d1a2      	bne.n	8006288 <_Z11PAT9125initv+0x110>
 8006342:	e7bc      	b.n	80062be <_Z11PAT9125initv+0x146>
  chThdSleepMicroseconds(1.5);
 8006344:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 8006346:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 800634a:	f7ff f8bd 	bl	80054c8 <chThdSleep>
 800634e:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006350:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006354:	f7ff f8b8 	bl	80054c8 <chThdSleep>
 8006358:	4648      	mov	r0, r9
 800635a:	f7ff f8b5 	bl	80054c8 <chThdSleep>
 800635e:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006360:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006364:	4648      	mov	r0, r9
 8006366:	f7ff f8af 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800636a:	1c6a      	adds	r2, r5, #1
 800636c:	f47f af5f 	bne.w	800622e <_Z11PAT9125initv+0xb6>
 8006370:	e779      	b.n	8006266 <_Z11PAT9125initv+0xee>
    else palClearLine(LINE_B);
 8006372:	f8a6 c01a 	strh.w	ip, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006376:	2001      	movs	r0, #1
 8006378:	f7ff f8a6 	bl	80054c8 <chThdSleep>
 800637c:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 800637e:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006382:	f7ff f8a1 	bl	80054c8 <chThdSleep>
 8006386:	4648      	mov	r0, r9
 8006388:	f7ff f89e 	bl	80054c8 <chThdSleep>
 800638c:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 800638e:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006392:	4648      	mov	r0, r9
 8006394:	f7ff f898 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006398:	1c6a      	adds	r2, r5, #1
 800639a:	f47f af19 	bne.w	80061d0 <_Z11PAT9125initv+0x58>
 800639e:	e735      	b.n	800620c <_Z11PAT9125initv+0x94>
 80063a0:	20000808 	.word	0x20000808
 80063a4:	40021c00 	.word	0x40021c00
 80063a8:	40022000 	.word	0x40022000
  chThdSleepMilliseconds(10);
 80063ac:	2064      	movs	r0, #100	; 0x64
 80063ae:	f7ff f88b 	bl	80054c8 <chThdSleep>
 80063b2:	a904      	add	r1, sp, #16
 80063b4:	2301      	movs	r3, #1
 80063b6:	f801 3d02 	strb.w	r3, [r1, #-2]!
  swi2c_writeByte_A8(PAT9125_I2C_ADDR, addr, &data);
 80063ba:	207f      	movs	r0, #127	; 0x7f
 80063bc:	f7ff fc9e 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
 80063c0:	4b8f      	ldr	r3, [pc, #572]	; (8006600 <_Z11PAT9125initv+0x488>)
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	461a      	mov	r2, r3
  palClearLine(LINE_B);
 80063c6:	4e8f      	ldr	r6, [pc, #572]	; (8006604 <_Z11PAT9125initv+0x48c>)
      const uint8_t addr = pat9125_init_seq2[i++];
 80063c8:	7817      	ldrb	r7, [r2, #0]
  palClearLine(LINE_A);
 80063ca:	4c8f      	ldr	r4, [pc, #572]	; (8006608 <_Z11PAT9125initv+0x490>)
      if (addr == 0x0ff)
 80063cc:	2fff      	cmp	r7, #255	; 0xff
 80063ce:	f000 80b3 	beq.w	8006538 <_Z11PAT9125initv+0x3c0>
  palClearLine(LINE_B);
 80063d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      if (! pat9125_wr_reg_verify(addr, pat9125_init_seq2[i++]))
 80063d6:	f892 8001 	ldrb.w	r8, [r2, #1]
  palClearLine(LINE_B);
 80063da:	8373      	strh	r3, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80063dc:	2001      	movs	r0, #1
 80063de:	f7ff f873 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 80063e2:	2001      	movs	r0, #1
 80063e4:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80063e6:	f7ff f86f 	bl	80054c8 <chThdSleep>
 80063ea:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 80063ec:	f04f 0be0 	mov.w	fp, #224	; 0xe0
 80063f0:	fa4b f205 	asr.w	r2, fp, r5
    palSetLine(LINE_A);
 80063f4:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 80063f8:	07d3      	lsls	r3, r2, #31
 80063fa:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  chThdSleepMicroseconds(1.5);
 80063fe:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006400:	f140 80e6 	bpl.w	80065d0 <_Z11PAT9125initv+0x458>
 8006404:	f8a6 c018 	strh.w	ip, [r6, #24]
  chThdSleepMicroseconds(1.5);
 8006408:	f7ff f85e 	bl	80054c8 <chThdSleep>
 800640c:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 800640e:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006412:	f7ff f859 	bl	80054c8 <chThdSleep>
 8006416:	4648      	mov	r0, r9
 8006418:	f7ff f856 	bl	80054c8 <chThdSleep>
 800641c:	3d01      	subs	r5, #1
 800641e:	4648      	mov	r0, r9
    palClearLine(LINE_A);
 8006420:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006424:	f7ff f850 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006428:	1c68      	adds	r0, r5, #1
 800642a:	d1e1      	bne.n	80063f0 <_Z11PAT9125initv+0x278>
  chThdSleepMicroseconds(1.5);
 800642c:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 800642e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  palSetLine(LINE_A);
 8006432:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 8006434:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006438:	f7ff f846 	bl	80054c8 <chThdSleep>
 800643c:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 800643e:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006440:	f7ff f842 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 8006444:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006446:	4628      	mov	r0, r5
 8006448:	f7ff f83e 	bl	80054c8 <chThdSleep>
 800644c:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 800644e:	fa47 f205 	asr.w	r2, r7, r5
    palSetLine(LINE_A);
 8006452:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 8006456:	07d2      	lsls	r2, r2, #31
  chThdSleepMicroseconds(1.5);
 8006458:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 800645a:	f140 80a2 	bpl.w	80065a2 <_Z11PAT9125initv+0x42a>
 800645e:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(1.5);
 8006462:	f7ff f831 	bl	80054c8 <chThdSleep>
 8006466:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006468:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 800646c:	f7ff f82c 	bl	80054c8 <chThdSleep>
 8006470:	4648      	mov	r0, r9
 8006472:	f7ff f829 	bl	80054c8 <chThdSleep>
 8006476:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006478:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 800647c:	4648      	mov	r0, r9
 800647e:	f7ff f823 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 8006482:	1c6b      	adds	r3, r5, #1
 8006484:	d1e3      	bne.n	800644e <_Z11PAT9125initv+0x2d6>
  chThdSleepMicroseconds(1.5);
 8006486:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8006488:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  palSetLine(LINE_A);
 800648c:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 800648e:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 8006492:	f7ff f819 	bl	80054c8 <chThdSleep>
 8006496:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006498:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 800649a:	f7ff f815 	bl	80054c8 <chThdSleep>
  palClearLine(LINE_A);
 800649e:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff f811 	bl	80054c8 <chThdSleep>
 80064a6:	2507      	movs	r5, #7
    if (data & (1 << bit)) palSetLine(LINE_B);
 80064a8:	fa48 f205 	asr.w	r2, r8, r5
    palSetLine(LINE_A);
 80064ac:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit)) palSetLine(LINE_B);
 80064b0:	07d1      	lsls	r1, r2, #31
  chThdSleepMicroseconds(1.5);
 80064b2:	4648      	mov	r0, r9
    if (data & (1 << bit)) palSetLine(LINE_B);
 80064b4:	d55f      	bpl.n	8006576 <_Z11PAT9125initv+0x3fe>
 80064b6:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(1.5);
 80064ba:	f7ff f805 	bl	80054c8 <chThdSleep>
 80064be:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 80064c0:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80064c4:	f7ff f800 	bl	80054c8 <chThdSleep>
 80064c8:	4648      	mov	r0, r9
 80064ca:	f7fe fffd 	bl	80054c8 <chThdSleep>
 80064ce:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 80064d0:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80064d4:	4648      	mov	r0, r9
 80064d6:	f7fe fff7 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 80064da:	1c6a      	adds	r2, r5, #1
 80064dc:	d1e4      	bne.n	80064a8 <_Z11PAT9125initv+0x330>
  chThdSleepMicroseconds(1.5);
 80064de:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 80064e0:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  palSetLine(LINE_A);
 80064e4:	4605      	mov	r5, r0
  palClearLine(LINE_B);
 80064e6:	f8a6 a01a 	strh.w	sl, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80064ea:	f7fe ffed 	bl	80054c8 <chThdSleep>
 80064ee:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80064f0:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80064f2:	f7fe ffe9 	bl	80054c8 <chThdSleep>
 80064f6:	4628      	mov	r0, r5
  palClearLine(LINE_A);
 80064f8:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80064fa:	f7fe ffe5 	bl	80054c8 <chThdSleep>
 80064fe:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006500:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006502:	f7fe ffe1 	bl	80054c8 <chThdSleep>
 8006506:	4628      	mov	r0, r5
  palSetLine(LINE_B);
 8006508:	f8a6 a018 	strh.w	sl, [r6, #24]
  chThdSleepMicroseconds(1.5);
 800650c:	f7fe ffdc 	bl	80054c8 <chThdSleep>
  uint8_t data = 0;
 8006510:	2300      	movs	r3, #0
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 8006512:	4638      	mov	r0, r7
 8006514:	f10d 010f 	add.w	r1, sp, #15
  uint8_t data = 0;
 8006518:	f88d 300f 	strb.w	r3, [sp, #15]
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 800651c:	f7ff fce0 	bl	8005ee0 <_Z17swi2c_readByte_A8hhPh.constprop.1>
 8006520:	9a01      	ldr	r2, [sp, #4]
  return data;
 8006522:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006526:	3202      	adds	r2, #2
      if (! pat9125_wr_reg_verify(addr, pat9125_init_seq2[i++]))
 8006528:	4598      	cmp	r8, r3
 800652a:	9201      	str	r2, [sp, #4]
 800652c:	f47f aef0 	bne.w	8006310 <_Z11PAT9125initv+0x198>
      const uint8_t addr = pat9125_init_seq2[i++];
 8006530:	7817      	ldrb	r7, [r2, #0]
      if (addr == 0x0ff)
 8006532:	2fff      	cmp	r7, #255	; 0xff
 8006534:	f47f af4d 	bne.w	80063d2 <_Z11PAT9125initv+0x25a>
 8006538:	a904      	add	r1, sp, #16
 800653a:	2400      	movs	r4, #0
 800653c:	f801 4d05 	strb.w	r4, [r1, #-5]!
  swi2c_writeByte_A8(PAT9125_I2C_ADDR, addr, &data);
 8006540:	207f      	movs	r0, #127	; 0x7f
 8006542:	f7ff fbdb 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
 8006546:	a904      	add	r1, sp, #16
 8006548:	2009      	movs	r0, #9
 800654a:	f801 4d04 	strb.w	r4, [r1, #-4]!
 800654e:	f7ff fbd5 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
 8006552:	a904      	add	r1, sp, #16
 8006554:	200d      	movs	r0, #13
 8006556:	f801 4d03 	strb.w	r4, [r1, #-3]!
 800655a:	f7ff fbcf 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
 800655e:	23f0      	movs	r3, #240	; 0xf0
 8006560:	f10d 010f 	add.w	r1, sp, #15
 8006564:	200e      	movs	r0, #14
 8006566:	f88d 300f 	strb.w	r3, [sp, #15]
 800656a:	f7ff fbc7 	bl	8005cfc <_Z18swi2c_writeByte_A8hhPh.constprop.2>
  return 1;
 800656e:	2001      	movs	r0, #1
}
 8006570:	b005      	add	sp, #20
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(1.5);
 8006576:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 8006578:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 800657c:	f7fe ffa4 	bl	80054c8 <chThdSleep>
 8006580:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006582:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 8006586:	f7fe ff9f 	bl	80054c8 <chThdSleep>
 800658a:	4648      	mov	r0, r9
 800658c:	f7fe ff9c 	bl	80054c8 <chThdSleep>
 8006590:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006592:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 8006596:	4648      	mov	r0, r9
 8006598:	f7fe ff96 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 800659c:	1c6b      	adds	r3, r5, #1
 800659e:	d183      	bne.n	80064a8 <_Z11PAT9125initv+0x330>
 80065a0:	e79d      	b.n	80064de <_Z11PAT9125initv+0x366>
  chThdSleepMicroseconds(1.5);
 80065a2:	2001      	movs	r0, #1
    else palClearLine(LINE_B);
 80065a4:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80065a8:	f7fe ff8e 	bl	80054c8 <chThdSleep>
 80065ac:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 80065ae:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80065b2:	f7fe ff89 	bl	80054c8 <chThdSleep>
 80065b6:	4648      	mov	r0, r9
 80065b8:	f7fe ff86 	bl	80054c8 <chThdSleep>
 80065bc:	3d01      	subs	r5, #1
 80065be:	4648      	mov	r0, r9
    palClearLine(LINE_A);
 80065c0:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80065c4:	f7fe ff80 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 80065c8:	1c68      	adds	r0, r5, #1
 80065ca:	f47f af40 	bne.w	800644e <_Z11PAT9125initv+0x2d6>
 80065ce:	e75a      	b.n	8006486 <_Z11PAT9125initv+0x30e>
    else palClearLine(LINE_B);
 80065d0:	f8a6 c01a 	strh.w	ip, [r6, #26]
  chThdSleepMicroseconds(1.5);
 80065d4:	2001      	movs	r0, #1
 80065d6:	f7fe ff77 	bl	80054c8 <chThdSleep>
 80065da:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 80065dc:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(1.5);
 80065e0:	f7fe ff72 	bl	80054c8 <chThdSleep>
 80065e4:	4648      	mov	r0, r9
 80065e6:	f7fe ff6f 	bl	80054c8 <chThdSleep>
 80065ea:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 80065ec:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(1.5);
 80065f0:	4648      	mov	r0, r9
 80065f2:	f7fe ff69 	bl	80054c8 <chThdSleep>
  int8_t bit; for (bit = 7; bit >= 0; bit--)
 80065f6:	1c69      	adds	r1, r5, #1
 80065f8:	f47f aefa 	bne.w	80063f0 <_Z11PAT9125initv+0x278>
 80065fc:	e716      	b.n	800642c <_Z11PAT9125initv+0x2b4>
 80065fe:	bf00      	nop
 8006600:	20000818 	.word	0x20000818
 8006604:	40021c00 	.word	0x40021c00
 8006608:	40022000 	.word	0x40022000

0800660c <_Z10myi2cstartv>:


void myi2cstart(){
 800660c:	b530      	push	{r4, r5, lr}
  
    //palSetLineMode(LINE_K1, PAL_MODE_OUTPUT_PUSHPULL);
    //palSetLineMode(LINE_K2, PAL_MODE_ALTERNATE(5));
    palSetLineMode(LINE_C, PAL_MODE_OUTPUT_PUSHPULL);//for 3.3V
 800660e:	4d17      	ldr	r5, [pc, #92]	; (800666c <_Z10myi2cstartv+0x60>)
    palSetLineMode(LINE_F, PAL_MODE_OUTPUT_PUSHPULL);//for 3.3V
    //palSetLineMode(LINE_A, PAL_MODE_ALTERNATE(4));
    //palSetLineMode(LINE_B, PAL_MODE_ALTERNATE(4));
    palSetLineMode(LINE_A, PAL_MODE_OUTPUT_OPENDRAIN);
 8006610:	4c17      	ldr	r4, [pc, #92]	; (8006670 <_Z10myi2cstartv+0x64>)
void myi2cstart(){
 8006612:	b083      	sub	sp, #12
    palSetLineMode(LINE_C, PAL_MODE_OUTPUT_PUSHPULL);//for 3.3V
 8006614:	4628      	mov	r0, r5
 8006616:	2201      	movs	r2, #1
 8006618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800661c:	f7fc f988 	bl	8002930 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_F, PAL_MODE_OUTPUT_PUSHPULL);//for 3.3V
 8006620:	2201      	movs	r2, #1
 8006622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006626:	4813      	ldr	r0, [pc, #76]	; (8006674 <_Z10myi2cstartv+0x68>)
 8006628:	f7fc f982 	bl	8002930 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_A, PAL_MODE_OUTPUT_OPENDRAIN);
 800662c:	4620      	mov	r0, r4
 800662e:	2205      	movs	r2, #5
 8006630:	2101      	movs	r1, #1
 8006632:	f7fc f97d 	bl	8002930 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_B, PAL_MODE_OUTPUT_PUSHPULL);
 8006636:	4628      	mov	r0, r5
 8006638:	2201      	movs	r2, #1
 800663a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800663e:	f7fc f977 	bl	8002930 <_pal_lld_setgroupmode>
    palSetLine(LINE_A);
 8006642:	2201      	movs	r2, #1
  position = 1;
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <_Z10myi2cstartv+0x6c>)
    palSetLine(LINE_A);
 8006646:	8322      	strh	r2, [r4, #24]
  position = 1;
 8006648:	2100      	movs	r1, #0
 800664a:	2001      	movs	r0, #1
 800664c:	e9c3 0100 	strd	r0, r1, [r3]

  PAT9125init();
 8006650:	f7ff fd92 	bl	8006178 <_Z11PAT9125initv>
    chThdCreateStatic(PAT9125ELThd_wa, sizeof(PAT9125ELThd_wa),
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2289      	movs	r2, #137	; 0x89
 800665a:	4b08      	ldr	r3, [pc, #32]	; (800667c <_Z10myi2cstartv+0x70>)
 800665c:	4808      	ldr	r0, [pc, #32]	; (8006680 <_Z10myi2cstartv+0x74>)
 800665e:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8006662:	f7fe fecf 	bl	8005404 <chThdCreateStatic>
                      NORMALPRIO + 9, PAT9125ELThd, NULL);
}
 8006666:	b003      	add	sp, #12
 8006668:	bd30      	pop	{r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	40021c00 	.word	0x40021c00
 8006670:	40022000 	.word	0x40022000
 8006674:	40020c00 	.word	0x40020c00
 8006678:	20001930 	.word	0x20001930
 800667c:	08005b79 	.word	0x08005b79
 8006680:	200013e0 	.word	0x200013e0

08006684 <main>:
        chThdSleep(ADIS16470_UPDATE_PERIOD);
   }
}

int main(void)
{
 8006684:	b508      	push	{r3, lr}
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */

    halInit();
 8006686:	f7f9 ff89 	bl	800059c <halInit>

    chSysInit();
 800668a:	f7fe fc0d 	bl	8004ea8 <chSysInit>

    board_setup_all();
 800668e:	f7f9 ff23 	bl	80004d8 <board_setup_all>
    //spiInit();
    //palSetLineMode(GPIOE_K1, PAL_MODE_ALTERNATE);
    //palSetLineMode(GPIOE_K2, PAL_MODE_ALTERNATE);
    //spiStop(ADIS16470_SPID);

    myi2cstart();
 8006692:	f7ff ffbb 	bl	800660c <_Z10myi2cstartv>
    while (true)
    {

        //g_rpm_1 = 1;
        //sprintf(tempStr, "%d", g_rpm_1);
        palToggleLine(LINE_LED_GREEN);
 8006696:	4c04      	ldr	r4, [pc, #16]	; (80066a8 <main+0x24>)
 8006698:	6963      	ldr	r3, [r4, #20]
 800669a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800669e:	6163      	str	r3, [r4, #20]
        chThdSleepMilliseconds(10);
 80066a0:	2064      	movs	r0, #100	; 0x64
 80066a2:	f7fe ff11 	bl	80054c8 <chThdSleep>
 80066a6:	e7f7      	b.n	8006698 <main+0x14>
 80066a8:	40021400 	.word	0x40021400

080066ac <_ZdlPv>:
  return chHeapAlloc(NULL, size);
}

void operator delete(void *ptr)
{
  chHeapFree(ptr);
 80066ac:	f7ff b8f0 	b.w	8005890 <chHeapFree>

080066b0 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80066b4:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 80066b6:	42a8      	cmp	r0, r5
 80066b8:	d005      	beq.n	80066c6 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0x16>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 80066ba:	6804      	ldr	r4, [r0, #0]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80066bc:	f7ff fff6 	bl	80066ac <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 80066c0:	42ac      	cmp	r4, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	d1f9      	bne.n	80066ba <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0xa>
 80066c6:	4628      	mov	r0, r5
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop

080066cc <_GLOBAL__sub_I__Z16Param_getDefByIDj>:
}

/**
 * @brief ShellCommand definition for interfacing with this module
 */
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 80066cc:	b510      	push	{r4, lr}
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 80066ce:	2017      	movs	r0, #23
 80066d0:	f7ff fa26 	bl	8005b20 <Flash_SectorBegin>
	: _Node_alloc_type(), _M_node()
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x24>)
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x28>)
static std::list<const Param_Definition_t *> params;
 80066d8:	4907      	ldr	r1, [pc, #28]	; (80066f8 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x2c>)
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 80066da:	6010      	str	r0, [r2, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 80066dc:	e9c3 3300 	strd	r3, r3, [r3]
	: _Node_alloc_type(), _M_node()
 80066e0:	2400      	movs	r4, #0
 80066e2:	609c      	str	r4, [r3, #8]
static std::list<const Param_Definition_t *> params;
 80066e4:	4618      	mov	r0, r3
 80066e6:	4a05      	ldr	r2, [pc, #20]	; (80066fc <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x30>)
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::list<const Param_Definition_t *> params;
 80066ec:	f000 b808 	b.w	8006700 <__aeabi_atexit>
 80066f0:	20001940 	.word	0x20001940
 80066f4:	2000193c 	.word	0x2000193c
 80066f8:	080066b1 	.word	0x080066b1
 80066fc:	20001938 	.word	0x20001938

08006700 <__aeabi_atexit>:
 8006700:	460b      	mov	r3, r1
 8006702:	4601      	mov	r1, r0
 8006704:	4618      	mov	r0, r3
 8006706:	f000 b801 	b.w	800670c <__cxa_atexit>
	...

0800670c <__cxa_atexit>:
 800670c:	b510      	push	{r4, lr}
 800670e:	4c05      	ldr	r4, [pc, #20]	; (8006724 <__cxa_atexit+0x18>)
 8006710:	4613      	mov	r3, r2
 8006712:	b12c      	cbz	r4, 8006720 <__cxa_atexit+0x14>
 8006714:	460a      	mov	r2, r1
 8006716:	4601      	mov	r1, r0
 8006718:	2002      	movs	r0, #2
 800671a:	f3af 8000 	nop.w
 800671e:	bd10      	pop	{r4, pc}
 8006720:	4620      	mov	r0, r4
 8006722:	e7fc      	b.n	800671e <__cxa_atexit+0x12>
 8006724:	00000000 	.word	0x00000000

08006728 <memcpy>:
 8006728:	b510      	push	{r4, lr}
 800672a:	1e43      	subs	r3, r0, #1
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	bd10      	pop	{r4, pc}
 8006734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673c:	e7f7      	b.n	800672e <memcpy+0x6>

0800673e <memset>:
 800673e:	4402      	add	r2, r0
 8006740:	4603      	mov	r3, r0
 8006742:	4293      	cmp	r3, r2
 8006744:	d100      	bne.n	8006748 <memset+0xa>
 8006746:	4770      	bx	lr
 8006748:	f803 1b01 	strb.w	r1, [r3], #1
 800674c:	e7f9      	b.n	8006742 <memset+0x4>
