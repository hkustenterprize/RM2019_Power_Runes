
build/RM18A.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000309 	.word	0x08000309
 8000008:	0800030b 	.word	0x0800030b
 800000c:	0800030b 	.word	0x0800030b
 8000010:	0800030b 	.word	0x0800030b
 8000014:	0800030b 	.word	0x0800030b
 8000018:	0800030b 	.word	0x0800030b
 800001c:	0800030b 	.word	0x0800030b
 8000020:	0800030b 	.word	0x0800030b
 8000024:	0800030b 	.word	0x0800030b
 8000028:	0800030b 	.word	0x0800030b
 800002c:	080065bd 	.word	0x080065bd
 8000030:	0800030b 	.word	0x0800030b
 8000034:	0800030b 	.word	0x0800030b
 8000038:	0800030b 	.word	0x0800030b
 800003c:	0800030b 	.word	0x0800030b
 8000040:	0800030b 	.word	0x0800030b
 8000044:	0800030b 	.word	0x0800030b
 8000048:	0800030b 	.word	0x0800030b
 800004c:	0800030b 	.word	0x0800030b
 8000050:	0800030b 	.word	0x0800030b
 8000054:	0800030b 	.word	0x0800030b
 8000058:	080022e9 	.word	0x080022e9
 800005c:	08002321 	.word	0x08002321
 8000060:	08002359 	.word	0x08002359
 8000064:	08002391 	.word	0x08002391
 8000068:	080023c9 	.word	0x080023c9
 800006c:	08002d29 	.word	0x08002d29
 8000070:	08002d51 	.word	0x08002d51
 8000074:	08002d7d 	.word	0x08002d7d
 8000078:	08002da9 	.word	0x08002da9
 800007c:	08002dd5 	.word	0x08002dd5
 8000080:	08002dfd 	.word	0x08002dfd
 8000084:	08002e29 	.word	0x08002e29
 8000088:	08002749 	.word	0x08002749
 800008c:	08002859 	.word	0x08002859
 8000090:	08002951 	.word	0x08002951
 8000094:	080029a5 	.word	0x080029a5
 8000098:	080029f9 	.word	0x080029f9
 800009c:	08002401 	.word	0x08002401
 80000a0:	0800030b 	.word	0x0800030b
 80000a4:	08004fa9 	.word	0x08004fa9
 80000a8:	0800030b 	.word	0x0800030b
 80000ac:	0800500d 	.word	0x0800500d
 80000b0:	08004f29 	.word	0x08004f29
 80000b4:	08005071 	.word	0x08005071
 80000b8:	0800030b 	.word	0x0800030b
 80000bc:	0800030b 	.word	0x0800030b
 80000c0:	0800030b 	.word	0x0800030b
 80000c4:	080033a5 	.word	0x080033a5
 80000c8:	08003499 	.word	0x08003499
 80000cc:	0800030b 	.word	0x0800030b
 80000d0:	0800030b 	.word	0x0800030b
 80000d4:	08005435 	.word	0x08005435
 80000d8:	0800030b 	.word	0x0800030b
 80000dc:	0800030b 	.word	0x0800030b
 80000e0:	080024b1 	.word	0x080024b1
 80000e4:	0800030b 	.word	0x0800030b
 80000e8:	0800030b 	.word	0x0800030b
 80000ec:	080050d5 	.word	0x080050d5
 80000f0:	0800030b 	.word	0x0800030b
 80000f4:	0800030b 	.word	0x0800030b
 80000f8:	0800030b 	.word	0x0800030b
 80000fc:	08002e55 	.word	0x08002e55
 8000100:	0800030b 	.word	0x0800030b
 8000104:	0800030b 	.word	0x0800030b
 8000108:	0800030b 	.word	0x0800030b
 800010c:	0800030b 	.word	0x0800030b
 8000110:	0800030b 	.word	0x0800030b
 8000114:	0800030b 	.word	0x0800030b
 8000118:	0800030b 	.word	0x0800030b
 800011c:	0800030b 	.word	0x0800030b
 8000120:	08002e81 	.word	0x08002e81
 8000124:	08002ea9 	.word	0x08002ea9
 8000128:	08002ed5 	.word	0x08002ed5
 800012c:	08002f01 	.word	0x08002f01
 8000130:	08002f2d 	.word	0x08002f2d
 8000134:	0800030b 	.word	0x0800030b
 8000138:	0800030b 	.word	0x0800030b
 800013c:	08002a3d 	.word	0x08002a3d
 8000140:	08002b35 	.word	0x08002b35
 8000144:	08002b89 	.word	0x08002b89
 8000148:	08002bdd 	.word	0x08002bdd
 800014c:	080037a1 	.word	0x080037a1
 8000150:	08002f55 	.word	0x08002f55
 8000154:	08002f81 	.word	0x08002f81
 8000158:	08002fad 	.word	0x08002fad
 800015c:	08005591 	.word	0x08005591
 8000160:	0800030b 	.word	0x0800030b
 8000164:	0800030b 	.word	0x0800030b
 8000168:	0800030b 	.word	0x0800030b
 800016c:	0800030b 	.word	0x0800030b
 8000170:	0800030b 	.word	0x0800030b
 8000174:	0800030b 	.word	0x0800030b
 8000178:	0800030b 	.word	0x0800030b
 800017c:	0800030b 	.word	0x0800030b
 8000180:	0800030b 	.word	0x0800030b
 8000184:	0800030b 	.word	0x0800030b
 8000188:	08005195 	.word	0x08005195
 800018c:	080056ed 	.word	0x080056ed
 8000190:	0800030b 	.word	0x0800030b
 8000194:	0800030b 	.word	0x0800030b
 8000198:	0800030b 	.word	0x0800030b
 800019c:	0800030b 	.word	0x0800030b
 80001a0:	0800030b 	.word	0x0800030b
 80001a4:	0800030b 	.word	0x0800030b
 80001a8:	0800030b 	.word	0x0800030b
 80001ac:	0800030b 	.word	0x0800030b
 80001b0:	0800030b 	.word	0x0800030b
 80001b4:	0800030b 	.word	0x0800030b
 80001b8:	0800030b 	.word	0x0800030b
 80001bc:	0800030b 	.word	0x0800030b
 80001c0:	0800030b 	.word	0x0800030b
 80001c4:	0800030b 	.word	0x0800030b
 80001c8:	0800030b 	.word	0x0800030b
 80001cc:	0800030b 	.word	0x0800030b
 80001d0:	0800030b 	.word	0x0800030b
 80001d4:	0800030b 	.word	0x0800030b
 80001d8:	0800030b 	.word	0x0800030b
 80001dc:	0800030b 	.word	0x0800030b

Disassembly of section .text:

080001e8 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e8:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001ea:	4839      	ldr	r0, [pc, #228]	; (80002d0 <endfiniloop+0x6>)
                msr     MSP, r0
 80001ec:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001f0:	4838      	ldr	r0, [pc, #224]	; (80002d4 <endfiniloop+0xa>)
                msr     PSP, r0
 80001f2:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001f6:	4838      	ldr	r0, [pc, #224]	; (80002d8 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f8:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001fc:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 8000202:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 8000206:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 800020a:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 800020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000212:	6008      	str	r0, [r1, #0]
                dsb
 8000214:	f3bf 8f4f 	dsb	sy
                isb
 8000218:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800021c:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000220:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000224:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000228:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800022c:	6008      	str	r0, [r1, #0]
                dsb
 800022e:	f3bf 8f4f 	dsb	sy
                isb
 8000232:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000236:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800023a:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 800023e:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000242:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000246:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000248:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800024a:	f380 8814 	msr	CONTROL, r0
                isb
 800024e:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000252:	f000 fe4d 	bl	8000ef0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000256:	f000 fd6b 	bl	8000d30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800025a:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800025e:	491f      	ldr	r1, [pc, #124]	; (80002dc <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000260:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <endfiniloop+0x6>)

08000262 <msloop>:
msloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800026a:	e7fa      	bcc.n	8000262 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800026c:	491c      	ldr	r1, [pc, #112]	; (80002e0 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <endfiniloop+0xa>)

08000270 <psloop>:
psloop:
                cmp     r1, r2
 8000270:	4291      	cmp	r1, r2
                itt     lo
 8000272:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000274:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000278:	e7fa      	bcc.n	8000270 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800027a:	491a      	ldr	r1, [pc, #104]	; (80002e4 <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <endfiniloop+0x22>)

08000280 <dloop>:
dloop:
                cmp     r2, r3
 8000280:	429a      	cmp	r2, r3
                ittt    lo
 8000282:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000284:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000288:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800028c:	e7f8      	bcc.n	8000280 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 800028e:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000290:	4917      	ldr	r1, [pc, #92]	; (80002f0 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <endfiniloop+0x2a>)

08000294 <bloop>:
bloop:
                cmp     r1, r2
 8000294:	4291      	cmp	r1, r2
                itt     lo
 8000296:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000298:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800029c:	e7fa      	bcc.n	8000294 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800029e:	f000 fe2d 	bl	8000efc <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80002a2:	f000 fe27 	bl	8000ef4 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002a6:	4c14      	ldr	r4, [pc, #80]	; (80002f8 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 80002a8:	4d14      	ldr	r5, [pc, #80]	; (80002fc <endfiniloop+0x32>)

080002aa <initloop>:
initloop:
                cmp     r4, r5
 80002aa:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002ac:	da03      	bge.n	80002b6 <endinitloop>
                ldr     r1, [r4], #4
 80002ae:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b2:	4788      	blx	r1
                b       initloop
 80002b4:	e7f9      	b.n	80002aa <initloop>

080002b6 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002b6:	f007 ff4b 	bl	8008150 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002ba:	4c11      	ldr	r4, [pc, #68]	; (8000300 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 80002bc:	4d11      	ldr	r5, [pc, #68]	; (8000304 <endfiniloop+0x3a>)

080002be <finiloop>:
finiloop:
                cmp     r4, r5
 80002be:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002c0:	da03      	bge.n	80002ca <endfiniloop>
                ldr     r1, [r4], #4
 80002c2:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002c6:	4788      	blx	r1
                b       finiloop
 80002c8:	e7f9      	b.n	80002be <finiloop>

080002ca <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002ca:	f000 be15 	b.w	8000ef8 <__default_exit>
 80002ce:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80002d0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002d4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002d8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002dc:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002e0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002e4:	08008720 	.word	0x08008720
                ldr     r2, =_data_start
 80002e8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002ec:	2000084c 	.word	0x2000084c
                ldr     r1, =_bss_start
 80002f0:	20000850 	.word	0x20000850
                ldr     r2, =_bss_end
 80002f4:	200018d4 	.word	0x200018d4
                ldr     r4, =__init_array_start
 80002f8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002fc:	080001e8 	.word	0x080001e8
                ldr     r4, =__fini_array_start
 8000300:	080001e8 	.word	0x080001e8
                ldr     r5, =__fini_array_end
 8000304:	080001e8 	.word	0x080001e8

08000308 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000308:	e76e      	b.n	80001e8 <_crt0_entry>

0800030a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800030a:	f000 f800 	bl	800030e <_unhandled_exception>

0800030e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800030e:	e7fe      	b.n	800030e <_unhandled_exception>

08000310 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 8000314:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000318:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 800031c:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800031e:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 8000320:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000328 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000328:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 800032a:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800032e:	4628      	mov	r0, r5
                blx     r4
 8000330:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 8000332:	2000      	movs	r0, #0
                bl      chThdExit
 8000334:	f005 feb0 	bl	8006098 <chThdExit>

08000338 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000338:	f005 fdf4 	bl	8005f24 <chSchDoReschedule>

0800033c <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033c:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 800033e:	e7fe      	b.n	800033e <_port_exit_from_isr+0x2>

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2uiz>:
 8000bec:	004a      	lsls	r2, r1, #1
 8000bee:	d211      	bcs.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf4:	d211      	bcs.n	8000c1a <__aeabi_d2uiz+0x2e>
 8000bf6:	d50d      	bpl.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d40e      	bmi.n	8000c20 <__aeabi_d2uiz+0x34>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d102      	bne.n	8000c26 <__aeabi_d2uiz+0x3a>
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	4770      	bx	lr
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2f>:
 8000c2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c34:	bf24      	itt	cs
 8000c36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3e:	d90d      	bls.n	8000c5c <__aeabi_d2f+0x30>
 8000c40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c54:	bf08      	it	eq
 8000c56:	f020 0001 	biceq.w	r0, r0, #1
 8000c5a:	4770      	bx	lr
 8000c5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c60:	d121      	bne.n	8000ca6 <__aeabi_d2f+0x7a>
 8000c62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c66:	bfbc      	itt	lt
 8000c68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	4770      	bxlt	lr
 8000c6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c76:	f1c2 0218 	rsb	r2, r2, #24
 8000c7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c82:	fa20 f002 	lsr.w	r0, r0, r2
 8000c86:	bf18      	it	ne
 8000c88:	f040 0001 	orrne.w	r0, r0, #1
 8000c8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c98:	ea40 000c 	orr.w	r0, r0, ip
 8000c9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca4:	e7cc      	b.n	8000c40 <__aeabi_d2f+0x14>
 8000ca6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000caa:	d107      	bne.n	8000cbc <__aeabi_d2f+0x90>
 8000cac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cba:	4770      	bxne	lr
 8000cbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <board_setup_all>:
    // enable interrupt from the user button (normal high)
    // palEnableLineEvent(LINE_USER_BUTTON, PAL_EVENT_MODE_FALLING_EDGE);
};

void board_setup_all(void)
{
 8000ccc:	b508      	push	{r3, lr}
     */
    static inline void CRC32_init(void)
    {
//enable CRC clock
#ifdef STM32F4XX
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <board_setup_all+0x48>)
        (void)RCC->APB1ENR;
        CRC_CR |= CRC_CR_RESET;
 8000cd0:	4911      	ldr	r1, [pc, #68]	; (8000d18 <board_setup_all+0x4c>)
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 8000cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CRC32_init();
    DR16_initDBus(&UARTD1);
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <board_setup_all+0x50>)
 8000cd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
        (void)RCC->APB1ENR;
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        CRC_CR |= CRC_CR_RESET;
 8000cde:	680b      	ldr	r3, [r1, #0]
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	600b      	str	r3, [r1, #0]
 8000ce6:	f005 fcab 	bl	8006640 <DR16_initDBus>
    palSetLineMode(LINE_OLED_5_SCLK, PAL_MODE_ALTERNATE(5));
 8000cea:	f240 2282 	movw	r2, #642	; 0x282
 8000cee:	2108      	movs	r1, #8
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <board_setup_all+0x54>)
 8000cf2:	f002 fa99 	bl	8003228 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_OLED_6_MOSI, PAL_MODE_ALTERNATE(5));
 8000cf6:	f240 2282 	movw	r2, #642	; 0x282
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <board_setup_all+0x58>)
 8000cfe:	f002 fa93 	bl	8003228 <_pal_lld_setgroupmode>
    spiStart(&SPID1, &SPI1_Config);
 8000d02:	4909      	ldr	r1, [pc, #36]	; (8000d28 <board_setup_all+0x5c>)
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <board_setup_all+0x60>)
 8000d06:	f000 ff99 	bl	8001c3c <spiStart>
    setup_SPI1();

#ifndef SHELL_SD
    setup_USB();
#endif //SHELL_USE_USB
};
 8000d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup_USB();
 8000d0e:	f005 bd03 	b.w	8006718 <setup_USB>
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40023008 	.word	0x40023008
 8000d1c:	20000bc0 	.word	0x20000bc0
 8000d20:	40020400 	.word	0x40020400
 8000d24:	40020000 	.word	0x40020000
 8000d28:	08008378 	.word	0x08008378
 8000d2c:	20000a90 	.word	0x20000a90

08000d30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000d30:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <__early_init+0x13c>)
  gpiop->OTYPER  = config->otyper;
 8000d32:	484f      	ldr	r0, [pc, #316]	; (8000e70 <__early_init+0x140>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000d34:	6913      	ldr	r3, [r2, #16]
 8000d36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d3a:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8000d3c:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000d3e:	6113      	str	r3, [r2, #16]
 8000d40:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8000d42:	4d4c      	ldr	r5, [pc, #304]	; (8000e74 <__early_init+0x144>)
  gpiop->OSPEEDR = config->ospeedr;
 8000d44:	4e4c      	ldr	r6, [pc, #304]	; (8000e78 <__early_init+0x148>)
  gpiop->OTYPER  = config->otyper;
 8000d46:	4c4d      	ldr	r4, [pc, #308]	; (8000e7c <__early_init+0x14c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8000d48:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	6113      	str	r3, [r2, #16]
 8000d52:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8000d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6513      	str	r3, [r2, #80]	; 0x50
 8000d60:	6d12      	ldr	r2, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8000d62:	4947      	ldr	r1, [pc, #284]	; (8000e80 <__early_init+0x150>)
 8000d64:	2300      	movs	r3, #0
  gpiop->PUPDR   = config->pupdr;
 8000d66:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  gpiop->OTYPER  = config->otyper;
 8000d6a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d6c:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d6e:	60ea      	str	r2, [r5, #12]
  gpiop->ODR     = config->odr;
 8000d70:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8000d74:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
  gpiop->ODR     = config->odr;
 8000d78:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8000d7a:	622a      	str	r2, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <__early_init+0x154>)
 8000d7e:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <__early_init+0x158>)
 8000d82:	602a      	str	r2, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000d84:	4d41      	ldr	r5, [pc, #260]	; (8000e8c <__early_init+0x15c>)
  gpiop->OTYPER  = config->otyper;
 8000d86:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d88:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d8a:	f244 0520 	movw	r5, #16416	; 0x4020
 8000d8e:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8000d90:	f64f 75df 	movw	r5, #65503	; 0xffdf
 8000d94:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000d96:	4d3e      	ldr	r5, [pc, #248]	; (8000e90 <__early_init+0x160>)
 8000d98:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000d9a:	f44f 0519 	mov.w	r5, #10027008	; 0x990000
 8000d9e:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000da0:	4d3c      	ldr	r5, [pc, #240]	; (8000e94 <__early_init+0x164>)
 8000da2:	6025      	str	r5, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000da4:	f04f 35aa 	mov.w	r5, #2863311530	; 0xaaaaaaaa
  gpiop->AFRH    = config->afrh;
 8000da8:	4c3b      	ldr	r4, [pc, #236]	; (8000e98 <__early_init+0x168>)
  gpiop->OTYPER  = config->otyper;
 8000daa:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000dac:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000dae:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 8000db0:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000db2:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000db4:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000db6:	4c39      	ldr	r4, [pc, #228]	; (8000e9c <__early_init+0x16c>)
 8000db8:	6004      	str	r4, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000dba:	4839      	ldr	r0, [pc, #228]	; (8000ea0 <__early_init+0x170>)
  gpiop->OTYPER  = config->otyper;
 8000dbc:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000dbe:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000dc0:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <__early_init+0x174>)
 8000dc2:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 8000dc4:	4838      	ldr	r0, [pc, #224]	; (8000ea8 <__early_init+0x178>)
  gpiop->ODR     = config->odr;
 8000dc6:	614e      	str	r6, [r1, #20]
  gpiop->OTYPER  = config->otyper;
 8000dc8:	f102 52ab 	add.w	r2, r2, #358612992	; 0x15600000
  gpiop->AFRL    = config->afrl;
 8000dcc:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8000dce:	2077      	movs	r0, #119	; 0x77
 8000dd0:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8000dd2:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
  gpiop->MODER   = config->moder;
 8000dd6:	4835      	ldr	r0, [pc, #212]	; (8000eac <__early_init+0x17c>)
 8000dd8:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8000dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dde:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000de0:	4933      	ldr	r1, [pc, #204]	; (8000eb0 <__early_init+0x180>)
 8000de2:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000de4:	4933      	ldr	r1, [pc, #204]	; (8000eb4 <__early_init+0x184>)
 8000de6:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8000de8:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8000dec:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000dee:	4932      	ldr	r1, [pc, #200]	; (8000eb8 <__early_init+0x188>)
 8000df0:	6211      	str	r1, [r2, #32]
  gpiop->OTYPER  = config->otyper;
 8000df2:	4c32      	ldr	r4, [pc, #200]	; (8000ebc <__early_init+0x18c>)
  gpiop->AFRH    = config->afrh;
 8000df4:	4932      	ldr	r1, [pc, #200]	; (8000ec0 <__early_init+0x190>)
 8000df6:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8000df8:	f244 0703 	movw	r7, #16387	; 0x4003
  gpiop->MODER   = config->moder;
 8000dfc:	4931      	ldr	r1, [pc, #196]	; (8000ec4 <__early_init+0x194>)
 8000dfe:	6011      	str	r1, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000e00:	6067      	str	r7, [r4, #4]
  gpiop->ODR     = config->odr;
 8000e02:	f64b 77ff 	movw	r7, #49151	; 0xbfff
  gpiop->OSPEEDR = config->ospeedr;
 8000e06:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8000e08:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8000e0a:	6167      	str	r7, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000e0c:	4f2e      	ldr	r7, [pc, #184]	; (8000ec8 <__early_init+0x198>)
 8000e0e:	6227      	str	r7, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000e10:	2755      	movs	r7, #85	; 0x55
 8000e12:	6267      	str	r7, [r4, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8000e14:	482d      	ldr	r0, [pc, #180]	; (8000ecc <__early_init+0x19c>)
  gpiop->MODER   = config->moder;
 8000e16:	4f2e      	ldr	r7, [pc, #184]	; (8000ed0 <__early_init+0x1a0>)
 8000e18:	6027      	str	r7, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8000e1a:	f44f 74ff 	mov.w	r4, #510	; 0x1fe
 8000e1e:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000e20:	4c2c      	ldr	r4, [pc, #176]	; (8000ed4 <__early_init+0x1a4>)
 8000e22:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000e24:	4c2c      	ldr	r4, [pc, #176]	; (8000ed8 <__early_init+0x1a8>)
 8000e26:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8000e28:	f64f 6401 	movw	r4, #65025	; 0xfe01
 8000e2c:	6144      	str	r4, [r0, #20]
  gpiop->AFRH    = config->afrh;
 8000e2e:	4c2b      	ldr	r4, [pc, #172]	; (8000edc <__early_init+0x1ac>)
  gpiop->AFRL    = config->afrl;
 8000e30:	6203      	str	r3, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 8000e32:	492b      	ldr	r1, [pc, #172]	; (8000ee0 <__early_init+0x1b0>)
  gpiop->AFRH    = config->afrh;
 8000e34:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e36:	4c2b      	ldr	r4, [pc, #172]	; (8000ee4 <__early_init+0x1b4>)
 8000e38:	6004      	str	r4, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000e3a:	482b      	ldr	r0, [pc, #172]	; (8000ee8 <__early_init+0x1b8>)
  gpiop->OTYPER  = config->otyper;
 8000e3c:	604b      	str	r3, [r1, #4]
 8000e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 8000e42:	6088      	str	r0, [r1, #8]
  gpiop->AFRL    = config->afrl;
 8000e44:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
  gpiop->PUPDR   = config->pupdr;
 8000e48:	60cb      	str	r3, [r1, #12]
  gpiop->ODR     = config->odr;
 8000e4a:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8000e4c:	6208      	str	r0, [r1, #32]
  gpiop->MODER   = config->moder;
 8000e4e:	f242 5050 	movw	r0, #9552	; 0x2550
  gpiop->AFRH    = config->afrh;
 8000e52:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e54:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8000e56:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000e58:	6095      	str	r5, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000e5a:	60d3      	str	r3, [r2, #12]
  gpiop->ODR     = config->odr;
 8000e5c:	6156      	str	r6, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000e5e:	6213      	str	r3, [r2, #32]

  stm32_gpio_init();
  stm32_clock_init();
}
 8000e60:	bcf0      	pop	{r4, r5, r6, r7}
  gpiop->AFRH    = config->afrh;
 8000e62:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e64:	6013      	str	r3, [r2, #0]
  stm32_clock_init();
 8000e66:	f001 bbf5 	b.w	8002654 <stm32_clock_init>
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	bffeeaea 	.word	0xbffeeaea
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	000aaa00 	.word	0x000aaa00
 8000e88:	2aa0b000 	.word	0x2aa0b000
 8000e8c:	afbfeaea 	.word	0xafbfeaea
 8000e90:	70005000 	.word	0x70005000
 8000e94:	0a148484 	.word	0x0a148484
 8000e98:	000ccccc 	.word	0x000ccccc
 8000e9c:	02aa0000 	.word	0x02aa0000
 8000ea0:	aaaaaabf 	.word	0xaaaaaabf
 8000ea4:	00051400 	.word	0x00051400
 8000ea8:	07700c99 	.word	0x07700c99
 8000eac:	000a282a 	.word	0x000a282a
 8000eb0:	aaaaabaa 	.word	0xaaaaabaa
 8000eb4:	00014005 	.word	0x00014005
 8000eb8:	85500088 	.word	0x85500088
 8000ebc:	40021400 	.word	0x40021400
 8000ec0:	00050008 	.word	0x00050008
 8000ec4:	0242a90a 	.word	0x0242a90a
 8000ec8:	55000044 	.word	0x55000044
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	100aa00a 	.word	0x100aa00a
 8000ed4:	aeaaaaaa 	.word	0xaeaaaaaa
 8000ed8:	10040000 	.word	0x10040000
 8000edc:	08000080 	.word	0x08000080
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	24095554 	.word	0x24095554
 8000ee8:	aaaaaaaf 	.word	0xaaaaaaaf

08000eec <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__late_init>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000ef8:	e7fe      	b.n	8000ef8 <__default_exit>
 8000efa:	bf00      	nop

08000efc <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4d13      	ldr	r5, [pc, #76]	; (8000f4c <__init_ram_areas+0x50>)
 8000f00:	f105 0680 	add.w	r6, r5, #128	; 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000f04:	e955 0403 	ldrd	r0, r4, [r5, #-12]
 8000f08:	42a0      	cmp	r0, r4
    uint32_t *tp = rap->init_text_area;
 8000f0a:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8000f0e:	d20d      	bcs.n	8000f2c <__init_ram_areas+0x30>
 8000f10:	3a04      	subs	r2, #4
 8000f12:	4603      	mov	r3, r0
      *p = *tp;
 8000f14:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8000f18:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->clear_area) {
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d3f9      	bcc.n	8000f14 <__init_ram_areas+0x18>
 8000f20:	43c3      	mvns	r3, r0
 8000f22:	441c      	add	r4, r3
 8000f24:	f024 0403 	bic.w	r4, r4, #3
 8000f28:	3404      	adds	r4, #4
 8000f2a:	4420      	add	r0, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000f2c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000f30:	4283      	cmp	r3, r0
 8000f32:	d907      	bls.n	8000f44 <__init_ram_areas+0x48>
      *p = 0;
 8000f34:	43c2      	mvns	r2, r0
 8000f36:	441a      	add	r2, r3
 8000f38:	f022 0203 	bic.w	r2, r2, #3
 8000f3c:	3204      	adds	r2, #4
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f007 fa11 	bl	8008366 <memset>
 8000f44:	3510      	adds	r5, #16
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000f46:	42b5      	cmp	r5, r6
 8000f48:	d1dc      	bne.n	8000f04 <__init_ram_areas+0x8>
#endif
}
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	08008398 	.word	0x08008398

08000f50 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000f50:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8000f52:	f001 fb35 	bl	80025c0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 8000f56:	f002 f923 	bl	80031a0 <_pal_lld_init>
#else
  palInit(&pal_default_config);
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 8000f5a:	f000 fbb5 	bl	80016c8 <adcInit>
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 8000f5e:	f000 fbc1 	bl	80016e4 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8000f62:	f000 fbd5 	bl	8001710 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 8000f66:	f000 fc09 	bl	800177c <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8000f6a:	f000 fc3b 	bl	80017e4 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8000f6e:	f000 fe5d 	bl	8001c2c <spiInit>
#endif
#if (HAL_USE_TRNG == TRUE) || defined(__DOXYGEN__)
  trngInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8000f72:	f000 fe71 	bl	8001c58 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8000f76:	f000 fe89 	bl	8001c8c <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 8000f7a:	f000 fce5 	bl	8001948 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000f7e:	f7ff ffb5 	bl	8000eec <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8000f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 8000f86:	f000 b801 	b.w	8000f8c <stInit>
 8000f8a:	bf00      	nop

08000f8c <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8000f8c:	f003 bfe2 	b.w	8004f54 <st_lld_init>

08000f90 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8000f94:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f96:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f98:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000f9a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f9c:	60da      	str	r2, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 8000f9e:	4770      	bx	lr

08000fa0 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8000fb2:	4770      	bx	lr

08000fb4 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 8000fb4:	b470      	push	{r4, r5, r6}
 8000fb6:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000fba:	3304      	adds	r3, #4
  ibqp->suspended = suspended;
 8000fbc:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 8000fbe:	9905      	ldr	r1, [sp, #20]
  ibqp->bsize     = size + sizeof (size_t);
 8000fc0:	61c3      	str	r3, [r0, #28]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000fc2:	fb05 2603 	mla	r6, r5, r3, r2
  ibqp->bcounter  = 0;
 8000fc6:	2300      	movs	r3, #0
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000fc8:	6186      	str	r6, [r0, #24]
  ibqp->bn        = n;
 8000fca:	6205      	str	r5, [r0, #32]
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
  ibqp->link      = link;
 8000fcc:	e9c0 410c 	strd	r4, r1, [r0, #48]	; 0x30
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8000fd0:	e9c0 0000 	strd	r0, r0, [r0]
  ibqp->bwrptr    = bp;
 8000fd4:	e9c0 2204 	strd	r2, r2, [r0, #16]
  ibqp->buffers   = bp;
 8000fd8:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 8000fda:	60c3      	str	r3, [r0, #12]
  ibqp->top       = NULL;
 8000fdc:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 8000fe0:	bc70      	pop	{r4, r5, r6}
 8000fe2:	4770      	bx	lr

08000fe4 <ibqResetI>:
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
  ibqp->brdptr    = ibqp->buffers;
 8000fe4:	6a41      	ldr	r1, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 8000fe6:	2200      	movs	r2, #0
  ibqp->bwrptr    = ibqp->buffers;
 8000fe8:	e9c0 1104 	strd	r1, r1, [r0, #16]
  ibqp->bcounter  = 0;
 8000fec:	60c2      	str	r2, [r0, #12]
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
 8000fee:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000ff2:	f06f 0101 	mvn.w	r1, #1
 8000ff6:	f005 b8bf 	b.w	8006178 <chThdDequeueAllI>
 8000ffa:	bf00      	nop

08000ffc <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8000ffc:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8001000:	4293      	cmp	r3, r2
 8001002:	d001      	beq.n	8001008 <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001004:	1d18      	adds	r0, r3, #4
}
 8001006:	4770      	bx	lr
  if (ibqIsFullI(ibqp)) {
 8001008:	68c2      	ldr	r2, [r0, #12]
 800100a:	2a00      	cmp	r2, #0
 800100c:	d0fa      	beq.n	8001004 <ibqGetEmptyBufferI+0x8>
    return NULL;
 800100e:	2000      	movs	r0, #0
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ibqPostFullBufferI>:

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001014:	6903      	ldr	r3, [r0, #16]
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8001016:	b410      	push	{r4}

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001018:	6984      	ldr	r4, [r0, #24]
  *((size_t *)ibqp->bwrptr) = size;
 800101a:	6019      	str	r1, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 800101c:	69c1      	ldr	r1, [r0, #28]
  ibqp->bcounter++;
 800101e:	68c2      	ldr	r2, [r0, #12]
  ibqp->bwrptr += ibqp->bsize;
 8001020:	440b      	add	r3, r1
  if (ibqp->bwrptr >= ibqp->btop) {
 8001022:	42a3      	cmp	r3, r4
  ibqp->bwrptr += ibqp->bsize;
 8001024:	6103      	str	r3, [r0, #16]
  ibqp->bcounter++;
 8001026:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 800102a:	bf28      	it	cs
 800102c:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  ibqp->bcounter++;
 800102e:	60c2      	str	r2, [r0, #12]
    ibqp->bwrptr = ibqp->buffers;
 8001030:	bf28      	it	cs
 8001032:	6103      	strcs	r3, [r0, #16]
  chThdDequeueNextI(tqp, msg);
 8001034:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 8001036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800103a:	f005 b88d 	b.w	8006158 <chThdDequeueNextI>
 800103e:	bf00      	nop

08001040 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001040:	b570      	push	{r4, r5, r6, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001042:	2320      	movs	r3, #32
 8001044:	4604      	mov	r4, r0
 8001046:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 800104a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800104c:	b1e3      	cbz	r3, 8001088 <ibqGetTimeout+0x48>
 800104e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001050:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8001054:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001056:	4293      	cmp	r3, r2
 8001058:	d311      	bcc.n	800107e <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 800105a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 800105e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001060:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001062:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001064:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001066:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001068:	bf24      	itt	cs
 800106a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800106c:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 800106e:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001070:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001072:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001074:	2200      	movs	r2, #0
 8001076:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001078:	b10b      	cbz	r3, 800107e <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 800107a:	4620      	mov	r0, r4
 800107c:	4798      	blx	r3
 800107e:	2300      	movs	r3, #0
 8001080:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
}
 8001084:	4628      	mov	r0, r5
 8001086:	bd70      	pop	{r4, r5, r6, pc}
 8001088:	460e      	mov	r6, r1
 800108a:	e005      	b.n	8001098 <ibqGetTimeout+0x58>
    if (ibqp->suspended) {
 800108c:	7a23      	ldrb	r3, [r4, #8]
 800108e:	b97b      	cbnz	r3, 80010b0 <ibqGetTimeout+0x70>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001090:	f005 f84e 	bl	8006130 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001094:	1e05      	subs	r5, r0, #0
 8001096:	dbf2      	blt.n	800107e <ibqGetTimeout+0x3e>
  while (ibqIsEmptyI(ibqp)) {
 8001098:	68e3      	ldr	r3, [r4, #12]
 800109a:	4631      	mov	r1, r6
 800109c:	4620      	mov	r0, r4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f4      	beq.n	800108c <ibqGetTimeout+0x4c>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80010a2:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80010a4:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80010a6:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80010a8:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80010aa:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 80010ae:	e7cf      	b.n	8001050 <ibqGetTimeout+0x10>
      return MSG_RESET;
 80010b0:	f06f 0501 	mvn.w	r5, #1
 80010b4:	e7e3      	b.n	800107e <ibqGetTimeout+0x3e>
 80010b6:	bf00      	nop

080010b8 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80010b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010bc:	4604      	mov	r4, r0
 80010be:	460e      	mov	r6, r1
 80010c0:	4617      	mov	r7, r2
 80010c2:	4699      	mov	r9, r3
 80010c4:	f04f 0a20 	mov.w	sl, #32
 80010c8:	f38a 8811 	msr	BASEPRI, sl
  size_t r = 0;
 80010cc:	2500      	movs	r5, #0
  ibqp->ptr = NULL;
 80010ce:	46a8      	mov	r8, r5

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 80010d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010d2:	2900      	cmp	r1, #0
 80010d4:	d046      	beq.n	8001164 <ibqReadTimeout+0xac>
 80010d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
    if (size > (n - r)) {
 80010d8:	eba7 0b05 	sub.w	fp, r7, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80010dc:	1a5b      	subs	r3, r3, r1
 80010de:	459b      	cmp	fp, r3
 80010e0:	bf28      	it	cs
 80010e2:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80010e4:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80010e8:	d948      	bls.n	800117c <ibqReadTimeout+0xc4>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80010ea:	f101 0240 	add.w	r2, r1, #64	; 0x40
 80010ee:	4633      	mov	r3, r6
 80010f0:	f8d1 e000 	ldr.w	lr, [r1]
 80010f4:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80010f8:	6888      	ldr	r0, [r1, #8]
 80010fa:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80010fe:	f8c3 b00c 	str.w	fp, [r3, #12]
 8001102:	3110      	adds	r1, #16
 8001104:	4291      	cmp	r1, r2
 8001106:	f8c3 e000 	str.w	lr, [r3]
 800110a:	f8c3 c004 	str.w	ip, [r3, #4]
 800110e:	6098      	str	r0, [r3, #8]
 8001110:	f103 0310 	add.w	r3, r3, #16
 8001114:	d1ec      	bne.n	80010f0 <ibqReadTimeout+0x38>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001118:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800111a:	3640      	adds	r6, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 800111c:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800111e:	62a3      	str	r3, [r4, #40]	; 0x28
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001120:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001122:	429a      	cmp	r2, r3
 8001124:	d811      	bhi.n	800114a <ibqReadTimeout+0x92>
  if (ibqp->brdptr >= ibqp->btop) {
 8001126:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 800112a:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 800112c:	68e2      	ldr	r2, [r4, #12]
  ibqp->ptr = NULL;
 800112e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8001132:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001134:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001136:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001138:	bf24      	itt	cs
 800113a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800113c:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 800113e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001140:	3a01      	subs	r2, #1
 8001142:	60e2      	str	r2, [r4, #12]
  if (ibqp->notify != NULL) {
 8001144:	b10b      	cbz	r3, 800114a <ibqReadTimeout+0x92>
    ibqp->notify(ibqp);
 8001146:	4620      	mov	r0, r4
 8001148:	4798      	blx	r3
 800114a:	f388 8811 	msr	BASEPRI, r8
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 800114e:	42bd      	cmp	r5, r7
 8001150:	d221      	bcs.n	8001196 <ibqReadTimeout+0xde>
 8001152:	f38a 8811 	msr	BASEPRI, sl
 8001156:	e7bb      	b.n	80010d0 <ibqReadTimeout+0x18>
    if (ibqp->suspended) {
 8001158:	7a23      	ldrb	r3, [r4, #8]
 800115a:	b9cb      	cbnz	r3, 8001190 <ibqReadTimeout+0xd8>
 800115c:	f004 ffe8 	bl	8006130 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001160:	2800      	cmp	r0, #0
 8001162:	db15      	blt.n	8001190 <ibqReadTimeout+0xd8>
  while (ibqIsEmptyI(ibqp)) {
 8001164:	68e3      	ldr	r3, [r4, #12]
 8001166:	4649      	mov	r1, r9
 8001168:	4620      	mov	r0, r4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f4      	beq.n	8001158 <ibqReadTimeout+0xa0>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800116e:	6961      	ldr	r1, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001170:	680b      	ldr	r3, [r1, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001172:	3104      	adds	r1, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001174:	440b      	add	r3, r1
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001176:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 800117a:	e7ad      	b.n	80010d8 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800117c:	4630      	mov	r0, r6
 800117e:	465a      	mov	r2, fp
 8001180:	f007 f8e6 	bl	8008350 <memcpy>
      ibqp->ptr += size;
 8001184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001186:	445b      	add	r3, fp
      r         += size;
 8001188:	445d      	add	r5, fp
      bp        += size;
 800118a:	445e      	add	r6, fp
      ibqp->ptr += size;
 800118c:	62a3      	str	r3, [r4, #40]	; 0x28
 800118e:	e7c7      	b.n	8001120 <ibqReadTimeout+0x68>
 8001190:	2300      	movs	r3, #0
 8001192:	f383 8811 	msr	BASEPRI, r3
      return r;
    }
    osalSysLock();
  }
}
 8001196:	4628      	mov	r0, r5
 8001198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800119c <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 800119c:	b470      	push	{r4, r5, r6}
 800119e:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80011a2:	3304      	adds	r3, #4
  obqp->suspended = suspended;
 80011a4:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 80011a6:	9905      	ldr	r1, [sp, #20]
  obqp->bsize     = size + sizeof (size_t);
 80011a8:	61c3      	str	r3, [r0, #28]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80011aa:	fb04 2603 	mla	r6, r4, r3, r2
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
 80011ae:	2300      	movs	r3, #0
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80011b0:	6186      	str	r6, [r0, #24]
  obqp->bcounter  = n;
 80011b2:	60c4      	str	r4, [r0, #12]
  obqp->bn        = n;
 80011b4:	6204      	str	r4, [r0, #32]
  obqp->top       = NULL;
  obqp->notify    = onfy;
  obqp->link      = link;
 80011b6:	e9c0 510c 	strd	r5, r1, [r0, #48]	; 0x30
 80011ba:	e9c0 0000 	strd	r0, r0, [r0]
  obqp->bwrptr    = bp;
 80011be:	e9c0 2204 	strd	r2, r2, [r0, #16]
  obqp->buffers   = bp;
 80011c2:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top       = NULL;
 80011c4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 80011c8:	bc70      	pop	{r4, r5, r6}
 80011ca:	4770      	bx	lr

080011cc <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 80011cc:	b410      	push	{r4}

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
  obqp->brdptr    = obqp->buffers;
 80011ce:	e9d0 4108 	ldrd	r4, r1, [r0, #32]
  obqp->bwrptr    = obqp->buffers;
  obqp->ptr       = NULL;
 80011d2:	2200      	movs	r2, #0
  obqp->bcounter  = bqSizeX(obqp);
 80011d4:	60c4      	str	r4, [r0, #12]
  obqp->bwrptr    = obqp->buffers;
 80011d6:	e9c0 1104 	strd	r1, r1, [r0, #16]
  obqp->top       = NULL;
 80011da:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  chThdDequeueAllI(tqp, msg);
 80011de:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 80011e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011e6:	f004 bfc7 	b.w	8006178 <chThdDequeueAllI>
 80011ea:	bf00      	nop

080011ec <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 80011ec:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d004      	beq.n	80011fe <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 80011f4:	4618      	mov	r0, r3
 80011f6:	f850 3b04 	ldr.w	r3, [r0], #4
 80011fa:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 80011fc:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 80011fe:	68c2      	ldr	r2, [r0, #12]
 8001200:	2a00      	cmp	r2, #0
 8001202:	d0f7      	beq.n	80011f4 <obqGetFullBufferI+0x8>
    return NULL;
 8001204:	2000      	movs	r0, #0
 8001206:	4770      	bx	lr

08001208 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8001208:	b410      	push	{r4}
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
 800120a:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
  obqp->brdptr += obqp->bsize;
 800120e:	6943      	ldr	r3, [r0, #20]
  obqp->bcounter++;
 8001210:	68c2      	ldr	r2, [r0, #12]
  obqp->brdptr += obqp->bsize;
 8001212:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8001214:	428b      	cmp	r3, r1
  obqp->brdptr += obqp->bsize;
 8001216:	6143      	str	r3, [r0, #20]
  obqp->bcounter++;
 8001218:	f102 0201 	add.w	r2, r2, #1
    obqp->brdptr = obqp->buffers;
 800121c:	bf28      	it	cs
 800121e:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  obqp->bcounter++;
 8001220:	60c2      	str	r2, [r0, #12]
    obqp->brdptr = obqp->buffers;
 8001222:	bf28      	it	cs
 8001224:	6143      	strcs	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 8001226:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8001228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800122c:	f004 bf94 	b.w	8006158 <chThdDequeueNextI>

08001230 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	2320      	movs	r3, #32
 8001234:	4604      	mov	r4, r0
 8001236:	460e      	mov	r6, r1
 8001238:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 800123c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800123e:	b1fb      	cbz	r3, 8001280 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8001240:	701e      	strb	r6, [r3, #0]
  obqp->ptr++;

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001242:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001246:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001248:	4293      	cmp	r3, r2
  obqp->ptr++;
 800124a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800124c:	d314      	bcc.n	8001278 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800124e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001250:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001252:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001254:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001256:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001258:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 800125a:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 800125c:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 800125e:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001260:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001262:	bf24      	itt	cs
 8001264:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001266:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001268:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 800126a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 800126c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 800126e:	2200      	movs	r2, #0
 8001270:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001272:	b10b      	cbz	r3, 8001278 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001274:	4620      	mov	r0, r4
 8001276:	4798      	blx	r3
 8001278:	2000      	movs	r0, #0
 800127a:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();
  return MSG_OK;
}
 800127e:	bd70      	pop	{r4, r5, r6, pc}
 8001280:	4615      	mov	r5, r2
 8001282:	e005      	b.n	8001290 <obqPutTimeout+0x60>
    if (obqp->suspended) {
 8001284:	7a23      	ldrb	r3, [r4, #8]
 8001286:	b97b      	cbnz	r3, 80012a8 <obqPutTimeout+0x78>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001288:	f004 ff52 	bl	8006130 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800128c:	2800      	cmp	r0, #0
 800128e:	db0d      	blt.n	80012ac <obqPutTimeout+0x7c>
  while (obqIsFullI(obqp)) {
 8001290:	68e3      	ldr	r3, [r4, #12]
 8001292:	4629      	mov	r1, r5
 8001294:	4620      	mov	r0, r4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f4      	beq.n	8001284 <obqPutTimeout+0x54>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800129a:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 800129c:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800129e:	1d13      	adds	r3, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80012a0:	440a      	add	r2, r1
 80012a2:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 80012a6:	e7cb      	b.n	8001240 <obqPutTimeout+0x10>
      return MSG_RESET;
 80012a8:	f06f 0001 	mvn.w	r0, #1
 80012ac:	2300      	movs	r3, #0
 80012ae:	f383 8811 	msr	BASEPRI, r3
}
 80012b2:	bd70      	pop	{r4, r5, r6, pc}

080012b4 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 80012b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	4617      	mov	r7, r2
 80012be:	4699      	mov	r9, r3
 80012c0:	f04f 0a20 	mov.w	sl, #32
 80012c4:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 80012c8:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 80012ca:	46b0      	mov	r8, r6

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 80012cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d045      	beq.n	800135e <obqWriteTimeout+0xaa>
 80012d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
    if (size > (n - w)) {
 80012d4:	eba7 0b06 	sub.w	fp, r7, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80012d8:	1a1b      	subs	r3, r3, r0
 80012da:	459b      	cmp	fp, r3
 80012dc:	bf28      	it	cs
 80012de:	469b      	movcs	fp, r3
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80012e0:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80012e4:	d947      	bls.n	8001376 <obqWriteTimeout+0xc2>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 80012e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80012ea:	f8d5 c000 	ldr.w	ip, [r5]
 80012ee:	6869      	ldr	r1, [r5, #4]
 80012f0:	68aa      	ldr	r2, [r5, #8]
 80012f2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80012f6:	f8c0 e00c 	str.w	lr, [r0, #12]
 80012fa:	3510      	adds	r5, #16
 80012fc:	429d      	cmp	r5, r3
 80012fe:	f8c0 c000 	str.w	ip, [r0]
 8001302:	6041      	str	r1, [r0, #4]
 8001304:	6082      	str	r2, [r0, #8]
 8001306:	f100 0010 	add.w	r0, r0, #16
 800130a:	d1ee      	bne.n	80012ea <obqWriteTimeout+0x36>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800130c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800130e:	3340      	adds	r3, #64	; 0x40
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8001310:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001312:	62a3      	str	r3, [r4, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001316:	429a      	cmp	r2, r3
 8001318:	d814      	bhi.n	8001344 <obqWriteTimeout+0x90>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800131a:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 800131c:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800131e:	69a1      	ldr	r1, [r4, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001320:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001322:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001324:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001326:	68e2      	ldr	r2, [r4, #12]
  obqp->ptr = NULL;
 8001328:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 800132c:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 800132e:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001330:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001332:	bf24      	itt	cs
 8001334:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001336:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8001338:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 800133a:	3a01      	subs	r2, #1
 800133c:	60e2      	str	r2, [r4, #12]
  if (obqp->notify != NULL) {
 800133e:	b10b      	cbz	r3, 8001344 <obqWriteTimeout+0x90>
    obqp->notify(obqp);
 8001340:	4620      	mov	r0, r4
 8001342:	4798      	blx	r3
 8001344:	f388 8811 	msr	BASEPRI, r8
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8001348:	42be      	cmp	r6, r7
 800134a:	d221      	bcs.n	8001390 <obqWriteTimeout+0xdc>
 800134c:	f38a 8811 	msr	BASEPRI, sl
 8001350:	e7bc      	b.n	80012cc <obqWriteTimeout+0x18>
    if (obqp->suspended) {
 8001352:	7a23      	ldrb	r3, [r4, #8]
 8001354:	b9cb      	cbnz	r3, 800138a <obqWriteTimeout+0xd6>
 8001356:	f004 feeb 	bl	8006130 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800135a:	2800      	cmp	r0, #0
 800135c:	db15      	blt.n	800138a <obqWriteTimeout+0xd6>
  while (obqIsFullI(obqp)) {
 800135e:	68e3      	ldr	r3, [r4, #12]
 8001360:	4649      	mov	r1, r9
 8001362:	4620      	mov	r0, r4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f4      	beq.n	8001352 <obqWriteTimeout+0x9e>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001368:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 800136a:	69e2      	ldr	r2, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800136c:	1d18      	adds	r0, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 800136e:	4413      	add	r3, r2
 8001370:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
 8001374:	e7ae      	b.n	80012d4 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8001376:	4629      	mov	r1, r5
 8001378:	465a      	mov	r2, fp
 800137a:	f006 ffe9 	bl	8008350 <memcpy>
      obqp->ptr += size;
 800137e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001380:	445b      	add	r3, fp
      w         += size;
 8001382:	445e      	add	r6, fp
      bp        += size;
 8001384:	445d      	add	r5, fp
      obqp->ptr += size;
 8001386:	62a3      	str	r3, [r4, #40]	; 0x28
 8001388:	e7c4      	b.n	8001314 <obqWriteTimeout+0x60>
 800138a:	2300      	movs	r3, #0
 800138c:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    osalSysLock();
  }
}
 8001390:	4630      	mov	r0, r6
 8001392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001396:	bf00      	nop

08001398 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001398:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 80013a0:	2000      	movs	r0, #0
 80013a2:	4770      	bx	lr
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80013a4:	68c3      	ldr	r3, [r0, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0fa      	beq.n	80013a0 <obqTryFlushI+0x8>
 80013aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f7      	beq.n	80013a0 <obqTryFlushI+0x8>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80013b0:	3b04      	subs	r3, #4
    if (size > 0U) {
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	d0f4      	beq.n	80013a0 <obqTryFlushI+0x8>
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 80013b6:	b410      	push	{r4}
      *((size_t *)obqp->bwrptr) = size;
 80013b8:	6013      	str	r3, [r2, #0]
      if (obqp->bwrptr >= obqp->btop) {
 80013ba:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
      obqp->bcounter--;
 80013be:	68c3      	ldr	r3, [r0, #12]
      obqp->bwrptr += obqp->bsize;
 80013c0:	4422      	add	r2, r4
      obqp->bcounter--;
 80013c2:	3b01      	subs	r3, #1
      if (obqp->bwrptr >= obqp->btop) {
 80013c4:	428a      	cmp	r2, r1
      obqp->bcounter--;
 80013c6:	60c3      	str	r3, [r0, #12]
        obqp->bwrptr = obqp->buffers;
 80013c8:	bf28      	it	cs
 80013ca:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
      obqp->bwrptr += obqp->bsize;
 80013cc:	6102      	str	r2, [r0, #16]
        obqp->bwrptr = obqp->buffers;
 80013ce:	bf28      	it	cs
 80013d0:	6103      	strcs	r3, [r0, #16]
      obqp->ptr = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	6283      	str	r3, [r0, #40]	; 0x28
}
 80013d6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return true;
 80013da:	2001      	movs	r0, #1
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 80013e0:	b430      	push	{r4, r5}
 80013e2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80013e4:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 80013e6:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 80013e8:	440a      	add	r2, r1
  iqp->q_counter = 0;
 80013ea:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 80013ec:	6102      	str	r2, [r0, #16]
 80013ee:	e9c0 0000 	strd	r0, r0, [r0]
  iqp->q_buffer  = bp;
 80013f2:	60c1      	str	r1, [r0, #12]
  iqp->q_wrptr   = bp;
 80013f4:	e9c0 1105 	strd	r1, r1, [r0, #20]
  iqp->q_notify  = infy;
 80013f8:	61c3      	str	r3, [r0, #28]
}
 80013fa:	bc30      	pop	{r4, r5}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8001400:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001404:	4293      	cmp	r3, r2
 8001406:	d011      	beq.n	800142c <iqPutI+0x2c>
    iqp->q_counter++;
 8001408:	6882      	ldr	r2, [r0, #8]
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 800140a:	b510      	push	{r4, lr}
    iqp->q_counter++;
 800140c:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
 800140e:	1c5c      	adds	r4, r3, #1
    iqp->q_counter++;
 8001410:	6082      	str	r2, [r0, #8]
    *iqp->q_wrptr++ = b;
 8001412:	6144      	str	r4, [r0, #20]
 8001414:	7019      	strb	r1, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001416:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 800141a:	429a      	cmp	r2, r3
 800141c:	d301      	bcc.n	8001422 <iqPutI+0x22>
      iqp->q_wrptr = iqp->q_buffer;
 800141e:	68c3      	ldr	r3, [r0, #12]
 8001420:	6143      	str	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 8001422:	2100      	movs	r1, #0
 8001424:	f004 fe98 	bl	8006158 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
 8001428:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 800142a:	bd10      	pop	{r4, pc}
  if (!iqIsFullI(iqp)) {
 800142c:	6882      	ldr	r2, [r0, #8]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d0ea      	beq.n	8001408 <iqPutI+0x8>
  return MSG_TIMEOUT;
 8001432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001436:	4770      	bx	lr

08001438 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001438:	b570      	push	{r4, r5, r6, lr}
 800143a:	2320      	movs	r3, #32
 800143c:	4604      	mov	r4, r0
 800143e:	460e      	mov	r6, r1
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	e003      	b.n	800144e <iqGetTimeout+0x16>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001446:	f004 fe73 	bl	8006130 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800144a:	2800      	cmp	r0, #0
 800144c:	db1a      	blt.n	8001484 <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800144e:	68a5      	ldr	r5, [r4, #8]
 8001450:	4631      	mov	r1, r6
 8001452:	4620      	mov	r0, r4
 8001454:	2d00      	cmp	r5, #0
 8001456:	d0f6      	beq.n	8001446 <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001458:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800145a:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800145c:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 800145e:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001460:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001462:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001464:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001466:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001468:	bf28      	it	cs
 800146a:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800146c:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800146e:	bf28      	it	cs
 8001470:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8001472:	69e3      	ldr	r3, [r4, #28]
 8001474:	b10b      	cbz	r3, 800147a <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001476:	4620      	mov	r0, r4
 8001478:	4798      	blx	r3
 800147a:	2300      	movs	r3, #0
 800147c:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8001480:	4628      	mov	r0, r5
}
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	f385 8811 	msr	BASEPRI, r5
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	bf00      	nop

0800148c <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 800148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001490:	b085      	sub	sp, #20
 8001492:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8001496:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800149a:	f04f 0a20 	mov.w	sl, #32
 800149e:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 80014a2:	b33a      	cbz	r2, 80014f4 <iqReadTimeout+0x68>
 80014a4:	4604      	mov	r4, r0
 80014a6:	460f      	mov	r7, r1
 80014a8:	4616      	mov	r6, r2
 80014aa:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 80014ae:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80014b0:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80014b2:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80014b4:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80014b6:	bf8c      	ite	hi
 80014b8:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80014ba:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80014bc:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80014c0:	45a8      	cmp	r8, r5
 80014c2:	d840      	bhi.n	8001546 <iqReadTimeout+0xba>
  else if (n > s1) {
 80014c4:	d32b      	bcc.n	800151e <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80014c6:	462a      	mov	r2, r5
 80014c8:	4638      	mov	r0, r7
 80014ca:	f006 ff41 	bl	8008350 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80014ce:	68e2      	ldr	r2, [r4, #12]
 80014d0:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80014d2:	68a2      	ldr	r2, [r4, #8]
 80014d4:	1b52      	subs	r2, r2, r5
 80014d6:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 80014d8:	b19d      	cbz	r5, 8001502 <iqReadTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 80014da:	f1b9 0f00 	cmp.w	r9, #0
 80014de:	d001      	beq.n	80014e4 <iqReadTimeout+0x58>
        nfy(iqp);
 80014e0:	4620      	mov	r0, r4
 80014e2:	47c8      	blx	r9
 80014e4:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80014e8:	1b76      	subs	r6, r6, r5
      bp += done;
 80014ea:	442f      	add	r7, r5
 80014ec:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	d1dc      	bne.n	80014ae <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 80014f4:	9803      	ldr	r0, [sp, #12]
 80014f6:	2300      	movs	r3, #0
 80014f8:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80014fc:	b005      	add	sp, #20
 80014fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001502:	9902      	ldr	r1, [sp, #8]
 8001504:	4620      	mov	r0, r4
 8001506:	f004 fe13 	bl	8006130 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800150a:	2800      	cmp	r0, #0
 800150c:	d0cf      	beq.n	80014ae <iqReadTimeout+0x22>
 800150e:	9b03      	ldr	r3, [sp, #12]
 8001510:	1b98      	subs	r0, r3, r6
 8001512:	2300      	movs	r3, #0
 8001514:	f383 8811 	msr	BASEPRI, r3
}
 8001518:	b005      	add	sp, #20
 800151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 800151e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001522:	4642      	mov	r2, r8
 8001524:	4638      	mov	r0, r7
    s2 = n - s1;
 8001526:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001528:	f006 ff12 	bl	8008350 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800152c:	eb07 0008 	add.w	r0, r7, r8
 8001530:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001534:	68e1      	ldr	r1, [r4, #12]
 8001536:	4642      	mov	r2, r8
 8001538:	f006 ff0a 	bl	8008350 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800153c:	68e2      	ldr	r2, [r4, #12]
 800153e:	4643      	mov	r3, r8
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	61a3      	str	r3, [r4, #24]
 8001544:	e7c5      	b.n	80014d2 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001546:	462a      	mov	r2, r5
 8001548:	4638      	mov	r0, r7
 800154a:	f006 ff01 	bl	8008350 <memcpy>
    iqp->q_rdptr += n;
 800154e:	69a2      	ldr	r2, [r4, #24]
 8001550:	442a      	add	r2, r5
 8001552:	61a2      	str	r2, [r4, #24]
 8001554:	e7bd      	b.n	80014d2 <iqReadTimeout+0x46>
 8001556:	bf00      	nop

08001558 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8001558:	b430      	push	{r4, r5}
 800155a:	9c02      	ldr	r4, [sp, #8]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800155c:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800155e:	188d      	adds	r5, r1, r2
  oqp->q_buffer  = bp;
 8001560:	e9c0 1503 	strd	r1, r5, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001564:	e9c0 3407 	strd	r3, r4, [r0, #28]
 8001568:	e9c0 0000 	strd	r0, r0, [r0]
  oqp->q_wrptr   = bp;
 800156c:	e9c0 1105 	strd	r1, r1, [r0, #20]
}
 8001570:	bc30      	pop	{r4, r5}
 8001572:	4770      	bx	lr

08001574 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	4604      	mov	r4, r0
 8001578:	460f      	mov	r7, r1
 800157a:	4616      	mov	r6, r2
 800157c:	2320      	movs	r3, #32
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	e003      	b.n	800158c <oqPutTimeout+0x18>
 8001584:	f004 fdd4 	bl	8006130 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001588:	2800      	cmp	r0, #0
 800158a:	db18      	blt.n	80015be <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 800158c:	68a5      	ldr	r5, [r4, #8]
 800158e:	4631      	mov	r1, r6
 8001590:	4620      	mov	r0, r4
 8001592:	2d00      	cmp	r5, #0
 8001594:	d0f6      	beq.n	8001584 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001596:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001598:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800159a:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800159c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800159e:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80015a0:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80015a2:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80015a4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80015a8:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80015aa:	bf24      	itt	cs
 80015ac:	68e3      	ldrcs	r3, [r4, #12]
 80015ae:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80015b0:	69e3      	ldr	r3, [r4, #28]
 80015b2:	b103      	cbz	r3, 80015b6 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80015b4:	4798      	blx	r3
 80015b6:	2000      	movs	r0, #0
 80015b8:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80015bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015be:	f385 8811 	msr	BASEPRI, r5
 80015c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015c4 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 80015c4:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80015c6:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d00f      	beq.n	80015ee <oqGetI+0x2a>
    uint8_t b;

    oqp->q_counter++;
 80015ce:	6882      	ldr	r2, [r0, #8]
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 80015d0:	6905      	ldr	r5, [r0, #16]
    b = *oqp->q_rdptr++;
 80015d2:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 80015d4:	3201      	adds	r2, #1
 80015d6:	6082      	str	r2, [r0, #8]
    b = *oqp->q_rdptr++;
 80015d8:	6181      	str	r1, [r0, #24]
    if (oqp->q_rdptr >= oqp->q_top) {
 80015da:	42a9      	cmp	r1, r5
    b = *oqp->q_rdptr++;
 80015dc:	781c      	ldrb	r4, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80015de:	d301      	bcc.n	80015e4 <oqGetI+0x20>
      oqp->q_rdptr = oqp->q_buffer;
 80015e0:	68c3      	ldr	r3, [r0, #12]
 80015e2:	6183      	str	r3, [r0, #24]
  chThdDequeueNextI(tqp, msg);
 80015e4:	2100      	movs	r1, #0
 80015e6:	f004 fdb7 	bl	8006158 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 80015ea:	4620      	mov	r0, r4
  }

  return MSG_TIMEOUT;
}
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
  if (!oqIsEmptyI(oqp)) {
 80015ee:	6882      	ldr	r2, [r0, #8]
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d0ec      	beq.n	80015ce <oqGetI+0xa>
  return MSG_TIMEOUT;
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80015f8:	bd38      	pop	{r3, r4, r5, pc}
 80015fa:	bf00      	nop

080015fc <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	b085      	sub	sp, #20
 8001602:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8001606:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800160a:	f04f 0a20 	mov.w	sl, #32
 800160e:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8001612:	b33a      	cbz	r2, 8001664 <oqWriteTimeout+0x68>
 8001614:	4604      	mov	r4, r0
 8001616:	460f      	mov	r7, r1
 8001618:	4616      	mov	r6, r2
 800161a:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 800161e:	68a2      	ldr	r2, [r4, #8]
 8001620:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001622:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8001626:	bf8c      	ite	hi
 8001628:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800162a:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800162c:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8001630:	45a8      	cmp	r8, r5
 8001632:	d840      	bhi.n	80016b6 <oqWriteTimeout+0xba>
  else if (n > s1) {
 8001634:	d32b      	bcc.n	800168e <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001636:	462a      	mov	r2, r5
 8001638:	4639      	mov	r1, r7
 800163a:	f006 fe89 	bl	8008350 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800163e:	68e2      	ldr	r2, [r4, #12]
 8001640:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001642:	68a2      	ldr	r2, [r4, #8]
 8001644:	1b52      	subs	r2, r2, r5
 8001646:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8001648:	b19d      	cbz	r5, 8001672 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800164a:	f1b9 0f00 	cmp.w	r9, #0
 800164e:	d001      	beq.n	8001654 <oqWriteTimeout+0x58>
        nfy(oqp);
 8001650:	4620      	mov	r0, r4
 8001652:	47c8      	blx	r9
 8001654:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001658:	1b76      	subs	r6, r6, r5
      bp += done;
 800165a:	442f      	add	r7, r5
 800165c:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001660:	2e00      	cmp	r6, #0
 8001662:	d1dc      	bne.n	800161e <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8001664:	9803      	ldr	r0, [sp, #12]
 8001666:	2300      	movs	r3, #0
 8001668:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 800166c:	b005      	add	sp, #20
 800166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001672:	9902      	ldr	r1, [sp, #8]
 8001674:	4620      	mov	r0, r4
 8001676:	f004 fd5b 	bl	8006130 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800167a:	2800      	cmp	r0, #0
 800167c:	d0cf      	beq.n	800161e <oqWriteTimeout+0x22>
 800167e:	9b03      	ldr	r3, [sp, #12]
 8001680:	1b98      	subs	r0, r3, r6
 8001682:	2300      	movs	r3, #0
 8001684:	f383 8811 	msr	BASEPRI, r3
}
 8001688:	b005      	add	sp, #20
 800168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 800168e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001692:	4642      	mov	r2, r8
 8001694:	4639      	mov	r1, r7
    s2 = n - s1;
 8001696:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001698:	f006 fe5a 	bl	8008350 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800169c:	eb07 0108 	add.w	r1, r7, r8
 80016a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80016a4:	68e0      	ldr	r0, [r4, #12]
 80016a6:	4642      	mov	r2, r8
 80016a8:	f006 fe52 	bl	8008350 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80016ac:	68e2      	ldr	r2, [r4, #12]
 80016ae:	4643      	mov	r3, r8
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	6163      	str	r3, [r4, #20]
 80016b4:	e7c5      	b.n	8001642 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80016b6:	462a      	mov	r2, r5
 80016b8:	4639      	mov	r1, r7
 80016ba:	f006 fe49 	bl	8008350 <memcpy>
    oqp->q_wrptr += n;
 80016be:	6962      	ldr	r2, [r4, #20]
 80016c0:	442a      	add	r2, r5
 80016c2:	6162      	str	r2, [r4, #20]
 80016c4:	e7bd      	b.n	8001642 <oqWriteTimeout+0x46>
 80016c6:	bf00      	nop

080016c8 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 80016c8:	f001 b8ae 	b.w	8002828 <adc_lld_init>

080016cc <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 80016cc:	2300      	movs	r3, #0
  adcp->state    = ADC_STOP;
 80016ce:	2201      	movs	r2, #1
 80016d0:	7002      	strb	r2, [r0, #0]
  adcp->samples  = NULL;
 80016d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 80016d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80016da:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 80016dc:	3018      	adds	r0, #24
 80016de:	f004 bda1 	b.w	8006224 <chMtxObjectInit>
 80016e2:	bf00      	nop

080016e4 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 80016e4:	f001 ba9c 	b.w	8002c20 <can_lld_init>

080016e8 <canObjectInit>:
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state       = CAN_STOP;
  canp->config      = NULL;
 80016e8:	2300      	movs	r3, #0
void canObjectInit(CANDriver *canp) {
 80016ea:	b410      	push	{r4}
  osalThreadQueueObjectInit(&canp->txqueue);
 80016ec:	f100 0108 	add.w	r1, r0, #8
  canp->state       = CAN_STOP;
 80016f0:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->rxqueue);
 80016f2:	f100 0210 	add.w	r2, r0, #16
  canp->state       = CAN_STOP;
 80016f6:	7004      	strb	r4, [r0, #0]
 80016f8:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80016fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
  canp->config      = NULL;
 8001700:	6043      	str	r3, [r0, #4]
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
#else /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
  canp->rxfull_cb   = NULL;
  canp->txempty_cb  = NULL;
 8001702:	e9c0 3306 	strd	r3, r3, [r0, #24]
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
 8001706:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 800170a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800170e:	4770      	bx	lr

08001710 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8001710:	f001 bf32 	b.w	8003578 <i2c_lld_init>

08001714 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001714:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8001716:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 8001718:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800171a:	6043      	str	r3, [r0, #4]
 800171c:	300c      	adds	r0, #12
 800171e:	f004 bd81 	b.w	8006224 <chMtxObjectInit>
 8001722:	bf00      	nop

08001724 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8001724:	b510      	push	{r4, lr}
 8001726:	2320      	movs	r3, #32
 8001728:	4604      	mov	r4, r0
 800172a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800172e:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 8001730:	f001 ff32 	bl	8003598 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8001734:	2302      	movs	r3, #2
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800173e:	bd10      	pop	{r4, pc}

08001740 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	4604      	mov	r4, r0
 8001746:	e9dd 670b 	ldrd	r6, r7, [sp, #44]	; 0x2c
 800174a:	f04f 0c20 	mov.w	ip, #32
 800174e:	f38c 8811 	msr	BASEPRI, ip

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8001752:	f04f 0c03 	mov.w	ip, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8001756:	e9cd 6701 	strd	r6, r7, [sp, #4]
  i2cp->errors = I2C_NO_ERROR;
 800175a:	2500      	movs	r5, #0
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800175c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800175e:	9600      	str	r6, [sp, #0]
  i2cp->state = I2C_ACTIVE_TX;
 8001760:	f880 c000 	strb.w	ip, [r0]
  i2cp->errors = I2C_NO_ERROR;
 8001764:	6085      	str	r5, [r0, #8]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8001766:	f001 ffd3 	bl	8003710 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800176a:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800176c:	bf14      	ite	ne
 800176e:	2302      	movne	r3, #2
 8001770:	2305      	moveq	r3, #5
 8001772:	7023      	strb	r3, [r4, #0]
 8001774:	f385 8811 	msr	BASEPRI, r5
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8001778:	b005      	add	sp, #20
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800177c <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 800177c:	f003 bcdc 	b.w	8005138 <pwm_lld_init>

08001780 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8001780:	2300      	movs	r3, #0
  pwmp->state    = PWM_STOP;
 8001782:	2201      	movs	r2, #1
 8001784:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8001786:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8001788:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 800178a:	7403      	strb	r3, [r0, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <_readt>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001790:	300c      	adds	r0, #12
 8001792:	f7ff be7b 	b.w	800148c <iqReadTimeout>
 8001796:	bf00      	nop

08001798 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001798:	300c      	adds	r0, #12
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179e:	f7ff be75 	b.w	800148c <iqReadTimeout>
 80017a2:	bf00      	nop

080017a4 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80017a4:	3030      	adds	r0, #48	; 0x30
 80017a6:	f7ff bf29 	b.w	80015fc <oqWriteTimeout>
 80017aa:	bf00      	nop

080017ac <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80017ac:	3030      	adds	r0, #48	; 0x30
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b2:	f7ff bf23 	b.w	80015fc <oqWriteTimeout>
 80017b6:	bf00      	nop

080017b8 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80017b8:	300c      	adds	r0, #12
 80017ba:	f7ff be3d 	b.w	8001438 <iqGetTimeout>
 80017be:	bf00      	nop

080017c0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80017c0:	300c      	adds	r0, #12
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c6:	f7ff be37 	b.w	8001438 <iqGetTimeout>
 80017ca:	bf00      	nop

080017cc <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80017cc:	3030      	adds	r0, #48	; 0x30
 80017ce:	f7ff bed1 	b.w	8001574 <oqPutTimeout>
 80017d2:	bf00      	nop

080017d4 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80017d4:	3030      	adds	r0, #48	; 0x30
 80017d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017da:	f7ff becb 	b.w	8001574 <oqPutTimeout>
 80017de:	bf00      	nop

080017e0 <_ctl>:
 80017e0:	2000      	movs	r0, #0
 80017e2:	4770      	bx	lr

080017e4 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 80017e4:	f003 bd8e 	b.w	8005304 <sd_lld_init>

080017e8 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80017e8:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <sdObjectInit+0x3c>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80017ec:	4604      	mov	r4, r0
 80017ee:	b082      	sub	sp, #8
  sdp->vmt = &vmt;
 80017f0:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80017f4:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80017f6:	9400      	str	r4, [sp, #0]
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80017f8:	4615      	mov	r5, r2
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80017fa:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80017fc:	6060      	str	r0, [r4, #4]
 80017fe:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8001802:	f104 000c 	add.w	r0, r4, #12
  sdp->state = SD_STOP;
 8001806:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001808:	2210      	movs	r2, #16
 800180a:	f7ff fde9 	bl	80013e0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800180e:	9400      	str	r4, [sp, #0]
 8001810:	462b      	mov	r3, r5
 8001812:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8001816:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800181a:	2210      	movs	r2, #16
 800181c:	f7ff fe9c 	bl	8001558 <oqObjectInit>
}
 8001820:	b002      	add	sp, #8
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	08008408 	.word	0x08008408

08001828 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8001828:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800182a:	6943      	ldr	r3, [r0, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
  if (iqIsEmptyI(&sdp->iqueue))
 8001830:	b13b      	cbz	r3, 8001842 <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001832:	4629      	mov	r1, r5
 8001834:	f104 000c 	add.w	r0, r4, #12
 8001838:	f7ff fde2 	bl	8001400 <iqPutI>
 800183c:	2800      	cmp	r0, #0
 800183e:	db0b      	blt.n	8001858 <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 8001840:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8001842:	2104      	movs	r1, #4
 8001844:	4408      	add	r0, r1
 8001846:	f004 fd9f 	bl	8006388 <chEvtBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 800184a:	4629      	mov	r1, r5
 800184c:	f104 000c 	add.w	r0, r4, #12
 8001850:	f7ff fdd6 	bl	8001400 <iqPutI>
 8001854:	2800      	cmp	r0, #0
 8001856:	daf3      	bge.n	8001840 <sdIncomingDataI+0x18>
 8001858:	1d20      	adds	r0, r4, #4
 800185a:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 800185e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001862:	f004 bd91 	b.w	8006388 <chEvtBroadcastFlagsI>
 8001866:	bf00      	nop

08001868 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8001868:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 800186a:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800186c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	7819      	ldrb	r1, [r3, #0]
 8001874:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 8001876:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001878:	d001      	beq.n	800187e <obnotify+0x16>
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
    osalDbgAssert(buf != NULL, "buffer not found");
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 800187a:	b002      	add	sp, #8
 800187c:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800187e:	7a21      	ldrb	r1, [r4, #8]
 8001880:	2902      	cmp	r1, #2
 8001882:	d1fa      	bne.n	800187a <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001884:	7911      	ldrb	r1, [r2, #4]
 8001886:	891a      	ldrh	r2, [r3, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	408b      	lsls	r3, r1
 800188c:	4213      	tst	r3, r2
 800188e:	d1f4      	bne.n	800187a <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001890:	a901      	add	r1, sp, #4
 8001892:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001896:	f7ff fca9 	bl	80011ec <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800189a:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	7921      	ldrb	r1, [r4, #4]
 80018a2:	4602      	mov	r2, r0
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	f000 fa3b 	bl	8001d20 <usbStartTransmitI>
 80018aa:	e7e6      	b.n	800187a <obnotify+0x12>

080018ac <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80018ac:	300c      	adds	r0, #12
 80018ae:	f7ff bc03 	b.w	80010b8 <ibqReadTimeout>
 80018b2:	bf00      	nop

080018b4 <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80018b4:	300c      	adds	r0, #12
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	f7ff bbfd 	b.w	80010b8 <ibqReadTimeout>
 80018be:	bf00      	nop

080018c0 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80018c0:	3044      	adds	r0, #68	; 0x44
 80018c2:	f7ff bcf7 	b.w	80012b4 <obqWriteTimeout>
 80018c6:	bf00      	nop

080018c8 <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80018c8:	3044      	adds	r0, #68	; 0x44
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ce:	f7ff bcf1 	b.w	80012b4 <obqWriteTimeout>
 80018d2:	bf00      	nop

080018d4 <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80018d4:	300c      	adds	r0, #12
 80018d6:	f7ff bbb3 	b.w	8001040 <ibqGetTimeout>
 80018da:	bf00      	nop

080018dc <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80018dc:	300c      	adds	r0, #12
 80018de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e2:	f7ff bbad 	b.w	8001040 <ibqGetTimeout>
 80018e6:	bf00      	nop

080018e8 <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80018e8:	3044      	adds	r0, #68	; 0x44
 80018ea:	f7ff bca1 	b.w	8001230 <obqPutTimeout>
 80018ee:	bf00      	nop

080018f0 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 80018f0:	3044      	adds	r0, #68	; 0x44
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f6:	f7ff bc9b 	b.w	8001230 <obqPutTimeout>
 80018fa:	bf00      	nop

080018fc <_ctl>:
 80018fc:	2000      	movs	r0, #0
 80018fe:	4770      	bx	lr

08001900 <ibnotify>:
static void ibnotify(io_buffers_queue_t *bqp) {
 8001900:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001902:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001904:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	2904      	cmp	r1, #4
 800190e:	d000      	beq.n	8001912 <ibnotify+0x12>
}
 8001910:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001912:	7a21      	ldrb	r1, [r4, #8]
 8001914:	2902      	cmp	r1, #2
 8001916:	d1fb      	bne.n	8001910 <ibnotify+0x10>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001918:	7911      	ldrb	r1, [r2, #4]
 800191a:	895a      	ldrh	r2, [r3, #10]
 800191c:	2301      	movs	r3, #1
 800191e:	408b      	lsls	r3, r1
 8001920:	4213      	tst	r3, r2
 8001922:	d1f5      	bne.n	8001910 <ibnotify+0x10>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8001924:	f104 000c 	add.w	r0, r4, #12
 8001928:	f7ff fb68 	bl	8000ffc <ibqGetEmptyBufferI>
  if (buf == NULL) {
 800192c:	2800      	cmp	r0, #0
 800192e:	d0ef      	beq.n	8001910 <ibnotify+0x10>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001930:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8001934:	4602      	mov	r2, r0
 8001936:	7959      	ldrb	r1, [r3, #5]
 8001938:	6818      	ldr	r0, [r3, #0]
}
 800193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	f000 b9d9 	b.w	8001cf8 <usbStartReceiveI>
 8001946:	bf00      	nop

08001948 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}

  sdup->vmt = &vmt;
 800194e:	4603      	mov	r3, r0
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <sduObjectInit+0x4c>)
 8001952:	f843 2b04 	str.w	r2, [r3], #4
void sduObjectInit(SerialUSBDriver *sdup) {
 8001956:	b085      	sub	sp, #20
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8001958:	4f10      	ldr	r7, [pc, #64]	; (800199c <sduObjectInit+0x50>)
 800195a:	9002      	str	r0, [sp, #8]
  sdup->state = SDU_STOP;
 800195c:	2501      	movs	r5, #1
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 800195e:	2602      	movs	r6, #2
void sduObjectInit(SerialUSBDriver *sdup) {
 8001960:	4604      	mov	r4, r0
 8001962:	6043      	str	r3, [r0, #4]
  sdup->state = SDU_STOP;
 8001964:	7205      	strb	r5, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8001966:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 800196a:	4629      	mov	r1, r5
 800196c:	300c      	adds	r0, #12
 800196e:	e9cd 6700 	strd	r6, r7, [sp]
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	f7ff fb1d 	bl	8000fb4 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <sduObjectInit+0x54>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9402      	str	r4, [sp, #8]
 8001980:	9600      	str	r6, [sp, #0]
 8001982:	4629      	mov	r1, r5
 8001984:	f504 7221 	add.w	r2, r4, #644	; 0x284
 8001988:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	f7ff fc04 	bl	800119c <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8001994:	b005      	add	sp, #20
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001998:	08008430 	.word	0x08008430
 800199c:	08001901 	.word	0x08001901
 80019a0:	08001869 	.word	0x08001869

080019a4 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 80019a4:	680b      	ldr	r3, [r1, #0]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80019ac:	790a      	ldrb	r2, [r1, #4]
 80019ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80019b2:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80019b4:	794a      	ldrb	r2, [r1, #5]
 80019b6:	3209      	adds	r2, #9
 80019b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 80019bc:	798a      	ldrb	r2, [r1, #6]
 80019be:	b112      	cbz	r2, 80019c6 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 80019c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80019c4:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	7203      	strb	r3, [r0, #8]
  sdup->config = config;
 80019ca:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
 80019ce:	2300      	movs	r3, #0
 80019d0:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 80019d8:	b538      	push	{r3, r4, r5, lr}

  /* Avoiding events spam.*/
  if(bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 80019da:	7d03      	ldrb	r3, [r0, #20]
 80019dc:	b113      	cbz	r3, 80019e4 <sduSuspendHookI+0xc>
 80019de:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80019e2:	b9b3      	cbnz	r3, 8001a12 <sduSuspendHookI+0x3a>
 80019e4:	4604      	mov	r4, r0
    return;
  }
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  bqSuspendI(&sdup->ibqueue);
 80019e6:	2501      	movs	r5, #1
 80019e8:	2102      	movs	r1, #2
 80019ea:	3004      	adds	r0, #4
 80019ec:	f004 fccc 	bl	8006388 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 80019f0:	f104 000c 	add.w	r0, r4, #12
 80019f4:	7525      	strb	r5, [r4, #20]
 80019f6:	f06f 0101 	mvn.w	r1, #1
 80019fa:	f004 fbbd 	bl	8006178 <chThdDequeueAllI>
  bqSuspendI(&sdup->obqueue);
 80019fe:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8001a02:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001a06:	f06f 0101 	mvn.w	r1, #1
}
 8001a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a0e:	f004 bbb3 	b.w	8006178 <chThdDequeueAllI>
 8001a12:	bd38      	pop	{r3, r4, r5, pc}

08001a14 <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 8001a14:	b510      	push	{r4, lr}
  chEvtBroadcastFlagsI(esp, flags);
 8001a16:	2101      	movs	r1, #1
 8001a18:	4604      	mov	r4, r0
 8001a1a:	3004      	adds	r0, #4
 8001a1c:	f004 fcb4 	bl	8006388 <chEvtBroadcastFlagsI>

  chnAddFlagsI(sdup, CHN_CONNECTED);
  bqResumeX(&sdup->ibqueue);
 8001a20:	2300      	movs	r3, #0
 8001a22:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8001a24:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	bf00      	nop

08001a2c <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4604      	mov	r4, r0

  ibqResetI(&sdup->ibqueue);
 8001a30:	f100 060c 	add.w	r6, r0, #12
 8001a34:	4630      	mov	r0, r6
  bqResumeX(&sdup->ibqueue);
 8001a36:	2500      	movs	r5, #0
  ibqResetI(&sdup->ibqueue);
 8001a38:	f7ff fad4 	bl	8000fe4 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8001a3c:	f104 0044 	add.w	r0, r4, #68	; 0x44
  bqResumeX(&sdup->ibqueue);
 8001a40:	7525      	strb	r5, [r4, #20]
  obqResetI(&sdup->obqueue);
 8001a42:	f7ff fbc3 	bl	80011cc <obqResetI>
 8001a46:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8001a48:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8001a4c:	1d20      	adds	r0, r4, #4
 8001a4e:	f004 fc9b 	bl	8006388 <chEvtBroadcastFlagsI>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001a52:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	2904      	cmp	r1, #4
 8001a5c:	d000      	beq.n	8001a60 <sduConfigureHookI+0x34>
  chnAddFlagsI(sdup, CHN_CONNECTED);
  (void) sdu_start_receive(sdup);
}
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001a60:	7a21      	ldrb	r1, [r4, #8]
 8001a62:	2902      	cmp	r1, #2
 8001a64:	d1fb      	bne.n	8001a5e <sduConfigureHookI+0x32>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001a66:	7911      	ldrb	r1, [r2, #4]
 8001a68:	895a      	ldrh	r2, [r3, #10]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	408b      	lsls	r3, r1
 8001a6e:	4213      	tst	r3, r2
 8001a70:	d1f5      	bne.n	8001a5e <sduConfigureHookI+0x32>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8001a72:	4630      	mov	r0, r6
 8001a74:	f7ff fac2 	bl	8000ffc <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d0f0      	beq.n	8001a5e <sduConfigureHookI+0x32>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001a7c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8001a80:	4602      	mov	r2, r0
 8001a82:	7959      	ldrb	r1, [r3, #5]
 8001a84:	6818      	ldr	r0, [r3, #0]
}
 8001a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8e:	f000 b933 	b.w	8001cf8 <usbStartReceiveI>
 8001a92:	bf00      	nop

08001a94 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001a94:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001a98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d001      	beq.n	8001aa4 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 8001aa0:	2000      	movs	r0, #0
    }
  }
  return false;
}
 8001aa2:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001aa4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d3f9      	bcc.n	8001aa0 <sduRequestsHook+0xc>
 8001aac:	2b21      	cmp	r3, #33	; 0x21
 8001aae:	d807      	bhi.n	8001ac0 <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <sduRequestsHook+0x3c>)
 8001ab2:	6383      	str	r3, [r0, #56]	; 0x38
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
      return true;
 8001abc:	2001      	movs	r0, #1
 8001abe:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001ac0:	2b22      	cmp	r3, #34	; 0x22
 8001ac2:	d1ed      	bne.n	8001aa0 <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001aca:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8001acc:	2001      	movs	r0, #1
 8001ace:	4770      	bx	lr
 8001ad0:	20000800 	.word	0x20000800

08001ad4 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ad4:	f8d0 248c 	ldr.w	r2, [r0, #1164]	; 0x48c
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	7819      	ldrb	r1, [r3, #0]
 8001adc:	2904      	cmp	r1, #4
 8001ade:	d000      	beq.n	8001ae2 <sduSOFHookI+0xe>
 8001ae0:	4770      	bx	lr
 8001ae2:	7a01      	ldrb	r1, [r0, #8]
 8001ae4:	2902      	cmp	r1, #2
 8001ae6:	d1fb      	bne.n	8001ae0 <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001ae8:	7911      	ldrb	r1, [r2, #4]
 8001aea:	891a      	ldrh	r2, [r3, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	408b      	lsls	r3, r1
 8001af0:	4213      	tst	r3, r2
 8001af2:	d1f5      	bne.n	8001ae0 <sduSOFHookI+0xc>
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001af4:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8001af6:	f100 0544 	add.w	r5, r0, #68	; 0x44
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001afa:	b083      	sub	sp, #12
 8001afc:	4604      	mov	r4, r0
  if (obqTryFlushI(&sdup->obqueue)) {
 8001afe:	4628      	mov	r0, r5
 8001b00:	f7ff fc4a 	bl	8001398 <obqTryFlushI>
 8001b04:	b908      	cbnz	r0, 8001b0a <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8001b06:	b003      	add	sp, #12
 8001b08:	bd30      	pop	{r4, r5, pc}
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001b0a:	a901      	add	r1, sp, #4
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f7ff fb6d 	bl	80011ec <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001b12:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	7921      	ldrb	r1, [r4, #4]
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f000 f8ff 	bl	8001d20 <usbStartTransmitI>
 8001b22:	e7f0      	b.n	8001b06 <sduSOFHookI+0x32>

08001b24 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001b26:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001b2a:	b083      	sub	sp, #12
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001b2c:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 8001b2e:	b1ec      	cbz	r4, 8001b6c <sduDataTransmitted+0x48>
 8001b30:	460e      	mov	r6, r1
 8001b32:	4605      	mov	r5, r0
 8001b34:	2320      	movs	r3, #32
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8001b3e:	1d20      	adds	r0, r4, #4
 8001b40:	2108      	movs	r1, #8
 8001b42:	f004 fc21 	bl	8006388 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3444      	adds	r4, #68	; 0x44
 8001b4e:	b9fb      	cbnz	r3, 8001b90 <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001b50:	4620      	mov	r0, r4
 8001b52:	a901      	add	r1, sp, #4
 8001b54:	f7ff fb4a 	bl	80011ec <obqGetFullBufferI>

  if (buf != NULL) {
 8001b58:	b150      	cbz	r0, 8001b70 <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4631      	mov	r1, r6
 8001b5e:	4628      	mov	r0, r5
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	f000 f8dd 	bl	8001d20 <usbStartTransmitI>
 8001b66:	2300      	movs	r3, #0
 8001b68:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	d0f5      	beq.n	8001b66 <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001b7a:	8a1b      	ldrh	r3, [r3, #16]
 8001b7c:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f1      	bne.n	8001b66 <sduDataTransmitted+0x42>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001b82:	4631      	mov	r1, r6
 8001b84:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f000 f8c9 	bl	8001d20 <usbStartTransmitI>
 8001b8e:	e7ea      	b.n	8001b66 <sduDataTransmitted+0x42>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff fb39 	bl	8001208 <obqReleaseEmptyBufferI>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001b96:	4620      	mov	r0, r4
 8001b98:	a901      	add	r1, sp, #4
 8001b9a:	f7ff fb27 	bl	80011ec <obqGetFullBufferI>
  if (buf != NULL) {
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d1db      	bne.n	8001b5a <sduDataTransmitted+0x36>
 8001ba2:	e7e5      	b.n	8001b70 <sduDataTransmitted+0x4c>

08001ba4 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001ba4:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001ba6:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001ba8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 8001bac:	b194      	cbz	r4, 8001bd4 <sduDataReceived+0x30>
 8001bae:	2320      	movs	r3, #32
 8001bb0:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysLockFromISR();

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001bb4:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001bb8:	6811      	ldr	r1, [r2, #0]
 8001bba:	7953      	ldrb	r3, [r2, #5]
 8001bbc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	685d      	ldr	r5, [r3, #4]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 8001bc6:	b9fd      	cbnz	r5, 8001c08 <sduDataReceived+0x64>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001bc8:	780b      	ldrb	r3, [r1, #0]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <sduDataReceived+0x32>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f383 8811 	msr	BASEPRI, r3
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);

  osalSysUnlockFromISR();
}
 8001bd4:	bd38      	pop	{r3, r4, r5, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001bd6:	7a23      	ldrb	r3, [r4, #8]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d1f8      	bne.n	8001bce <sduDataReceived+0x2a>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001bdc:	7910      	ldrb	r0, [r2, #4]
 8001bde:	894a      	ldrh	r2, [r1, #10]
 8001be0:	2301      	movs	r3, #1
 8001be2:	4083      	lsls	r3, r0
 8001be4:	4213      	tst	r3, r2
 8001be6:	d1f2      	bne.n	8001bce <sduDataReceived+0x2a>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8001be8:	f104 000c 	add.w	r0, r4, #12
 8001bec:	f7ff fa06 	bl	8000ffc <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d0ec      	beq.n	8001bce <sduDataReceived+0x2a>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001bf4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	7959      	ldrb	r1, [r3, #5]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c02:	f000 f879 	bl	8001cf8 <usbStartReceiveI>
 8001c06:	e7e2      	b.n	8001bce <sduDataReceived+0x2a>
 8001c08:	2104      	movs	r1, #4
 8001c0a:	1860      	adds	r0, r4, r1
 8001c0c:	f004 fbbc 	bl	8006388 <chEvtBroadcastFlagsI>
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001c10:	4629      	mov	r1, r5
 8001c12:	f104 000c 	add.w	r0, r4, #12
 8001c16:	f7ff f9fd 	bl	8001014 <ibqPostFullBufferI>
 8001c1a:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001c1e:	6811      	ldr	r1, [r2, #0]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001c20:	780b      	ldrb	r3, [r1, #0]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d1d3      	bne.n	8001bce <sduDataReceived+0x2a>
 8001c26:	e7d6      	b.n	8001bd6 <sduDataReceived+0x32>

08001c28 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8001c2c:	f003 b89e 	b.w	8004d6c <spi_lld_init>

08001c30 <spiObjectInit>:
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001c30:	2201      	movs	r2, #1
  spip->config = NULL;
 8001c32:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 8001c34:	7002      	strb	r2, [r0, #0]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001c36:	e9c0 3301 	strd	r3, r3, [r0, #4]
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8001c3a:	4770      	bx	lr

08001c3c <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	2320      	movs	r3, #32
 8001c40:	4604      	mov	r4, r0
 8001c42:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8001c46:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 8001c48:	f003 f8d0 	bl	8004dec <spi_lld_start>
  spip->state = SPI_READY;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	7023      	strb	r3, [r4, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001c56:	bd10      	pop	{r4, pc}

08001c58 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001c58:	f003 bdf6 	b.w	8005848 <uart_lld_init>

08001c5c <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
 8001c5c:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	7002      	strb	r2, [r0, #0]
  uartp->txstate    = UART_TX_IDLE;
 8001c62:	7043      	strb	r3, [r0, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8001c64:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 8001c66:	6043      	str	r3, [r0, #4]
#if UART_USE_WAIT == TRUE
  uartp->early      = false;
 8001c68:	7203      	strb	r3, [r0, #8]
  uartp->threadrx   = NULL;
  uartp->threadtx   = NULL;
 8001c6a:	e9c0 3303 	strd	r3, r3, [r0, #12]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8001c6e:	4770      	bx	lr

08001c70 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8001c70:	b510      	push	{r4, lr}
 8001c72:	2320      	movs	r3, #32
 8001c74:	4604      	mov	r4, r0
 8001c76:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 8001c7a:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 8001c7c:	f003 fe12 	bl	80058a4 <uart_lld_start>
  uartp->state = UART_READY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	7023      	strb	r3, [r4, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8001c8c:	f002 bafc 	b.w	8004288 <usb_lld_init>

08001c90 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8001c90:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 8001c92:	2201      	movs	r2, #1
 8001c94:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8001c96:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8001c98:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 8001c9a:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8001c9c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 8001c9e:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8001ca0:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8001ca2:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8001ca4:	6083      	str	r3, [r0, #8]
  usbp->receiving    = 0;
}
 8001ca6:	4770      	bx	lr

08001ca8 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4604      	mov	r4, r0
 8001cac:	2320      	movs	r3, #32
 8001cae:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001cb2:	2500      	movs	r5, #0
  usbp->config = config;
 8001cb4:	6041      	str	r1, [r0, #4]
    usbp->epc[i] = NULL;
 8001cb6:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8001cba:	e9c0 5505 	strd	r5, r5, [r0, #20]
  }
  usb_lld_start(usbp);
 8001cbe:	f002 faf3 	bl	80042a8 <usb_lld_start>
  usbp->state = USB_READY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	7023      	strb	r3, [r4, #0]
 8001cc6:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 8001cca:	bd38      	pop	{r3, r4, r5, pc}

08001ccc <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8001ccc:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 8001cce:	6953      	ldr	r3, [r2, #20]
  usbp->epc[ep] = epcp;
 8001cd0:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001cd4:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 8001cd6:	b123      	cbz	r3, 8001ce2 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8001cd8:	2400      	movs	r4, #0
 8001cda:	601c      	str	r4, [r3, #0]
 8001cdc:	605c      	str	r4, [r3, #4]
 8001cde:	609c      	str	r4, [r3, #8]
 8001ce0:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 8001ce2:	6993      	ldr	r3, [r2, #24]
 8001ce4:	b123      	cbz	r3, 8001cf0 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 8001cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
  usb_lld_init_endpoint(usbp, ep);
 8001cf4:	f002 bd2a 	b.w	800474c <usb_lld_init_endpoint>

08001cf8 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8001cf8:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8001cfa:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001cfe:	8947      	ldrh	r7, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8001d00:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d04:	2401      	movs	r4, #1
  osp = usbp->epc[ep]->out_state;
 8001d06:	f8dc 5018 	ldr.w	r5, [ip, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d0a:	408c      	lsls	r4, r1
 8001d0c:	433c      	orrs	r4, r7
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8001d0e:	2700      	movs	r7, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d10:	8144      	strh	r4, [r0, #10]
  osp->rxbuf  = buf;
 8001d12:	60aa      	str	r2, [r5, #8]
  osp->rxcnt  = 0;
 8001d14:	e9c5 3700 	strd	r3, r7, [r5]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 8001d18:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_out(usbp, ep);
 8001d1a:	f002 bee3 	b.w	8004ae4 <usb_lld_start_out>
 8001d1e:	bf00      	nop

08001d20 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8001d20:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8001d22:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d26:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001d28:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d2c:	2401      	movs	r4, #1
  isp = usbp->epc[ep]->in_state;
 8001d2e:	f8dc 5014 	ldr.w	r5, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d32:	408c      	lsls	r4, r1
 8001d34:	433c      	orrs	r4, r7
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8001d36:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d38:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
 8001d3a:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
 8001d3c:	e9c5 3700 	strd	r3, r7, [r5]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8001d40:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001d42:	f002 bf0f 	b.w	8004b64 <usb_lld_start_in>
 8001d46:	bf00      	nop

08001d48 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8001d48:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8001d4a:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 8001d4c:	2500      	movs	r5, #0
void _usb_reset(USBDriver *usbp) {
 8001d4e:	4604      	mov	r4, r0
  usbp->state         = USB_READY;
 8001d50:	7003      	strb	r3, [r0, #0]
  usbp->status        = 0;
 8001d52:	64c5      	str	r5, [r0, #76]	; 0x4c
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8001d54:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8001d58:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8001d5c:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 8001d5e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8001d62:	f002 fbf7 	bl	8004554 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b123      	cbz	r3, 8001d76 <_usb_reset+0x2e>
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4620      	mov	r0, r4
}
 8001d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8001d74:	4718      	bx	r3
}
 8001d76:	bd70      	pop	{r4, r5, r6, pc}

08001d78 <_usb_suspend>:
  /* State transition.*/
  usbp->saved_state = usbp->state;
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001d78:	6842      	ldr	r2, [r0, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
void _usb_suspend(USBDriver *usbp) {
 8001d7c:	b410      	push	{r4}
  usbp->state       = USB_SUSPENDED;
 8001d7e:	2105      	movs	r1, #5
  usbp->saved_state = usbp->state;
 8001d80:	7804      	ldrb	r4, [r0, #0]
 8001d82:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 8001d86:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001d88:	b11a      	cbz	r2, 8001d92 <_usb_suspend+0x1a>
 8001d8a:	2104      	movs	r1, #4
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 8001d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001d90:	4710      	bx	r2
}
 8001d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_usb_wakeup>:

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001d98:	6842      	ldr	r2, [r0, #4]
  usbp->state = usbp->saved_state;
 8001d9a:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001d9e:	6812      	ldr	r2, [r2, #0]
  usbp->state = usbp->saved_state;
 8001da0:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001da2:	b10a      	cbz	r2, 8001da8 <_usb_wakeup+0x10>
 8001da4:	2105      	movs	r1, #5
 8001da6:	4710      	bx	r2
}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001dac:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001db4:	b113      	cbz	r3, 8001dbc <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 8001dbc:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f002 fe85 	bl	8004ad0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	b363      	cbz	r3, 8001e26 <_usb_ep0setup+0x7a>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001dd0:	b348      	cbz	r0, 8001e26 <_usb_ep0setup+0x7a>
 8001dd2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001dd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8001dd8:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 8001ddc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8001de0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8001de4:	428a      	cmp	r2, r1
 8001de6:	bf2c      	ite	cs
 8001de8:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 8001dea:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001dec:	0619      	lsls	r1, r3, #24
 8001dee:	f100 808a 	bmi.w	8001f06 <_usb_ep0setup+0x15a>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d05a      	beq.n	8001eac <_usb_ep0setup+0x100>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 8001df6:	2315      	movs	r3, #21
 8001df8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001e02:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e04:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001e06:	699b      	ldr	r3, [r3, #24]
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001e08:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8001e10:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e12:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001e14:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001e16:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f002 fe62 	bl	8004ae4 <usb_lld_start_out>
 8001e20:	f385 8811 	msr	BASEPRI, r5
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001e26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001e2a:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001e2e:	4618      	mov	r0, r3
 8001e30:	d011      	beq.n	8001e56 <_usb_ep0setup+0xaa>
      usb_lld_stall_in(usbp, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	4620      	mov	r0, r4
 8001e36:	f002 fef3 	bl	8004c20 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f002 fee5 	bl	8004c0c <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b113      	cbz	r3, 8001e4e <_usb_ep0setup+0xa2>
 8001e48:	2106      	movs	r1, #6
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001e56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001e5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e62:	f240 3102 	movw	r1, #770	; 0x302
 8001e66:	428a      	cmp	r2, r1
 8001e68:	f000 80f1 	beq.w	800204e <_usb_ep0setup+0x2a2>
 8001e6c:	d835      	bhi.n	8001eda <_usb_ep0setup+0x12e>
 8001e6e:	2a02      	cmp	r2, #2
 8001e70:	f000 80d6 	beq.w	8002020 <_usb_ep0setup+0x274>
 8001e74:	f240 80af 	bls.w	8001fd6 <_usb_ep0setup+0x22a>
 8001e78:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001e7c:	f000 80b3 	beq.w	8001fe6 <_usb_ep0setup+0x23a>
 8001e80:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e84:	f000 8087 	beq.w	8001f96 <_usb_ep0setup+0x1ea>
 8001e88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001e8c:	d1d1      	bne.n	8001e32 <_usb_ep0setup+0x86>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001e8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d1cd      	bne.n	8001e32 <_usb_ep0setup+0x86>
      usbp->status &= ~2U;
 8001e96:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001e9a:	63a5      	str	r5, [r4, #56]	; 0x38
 8001e9c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001ea8:	0603      	lsls	r3, r0, #24
 8001eaa:	d445      	bmi.n	8001f38 <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001eac:	230b      	movs	r3, #11
 8001eae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001eb8:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001eba:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001ebc:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001ebe:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001ec6:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 8001ec8:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001eca:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f002 fe48 	bl	8004b64 <usb_lld_start_in>
 8001ed4:	f385 8811 	msr	BASEPRI, r5
}
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001eda:	f240 6101 	movw	r1, #1537	; 0x601
 8001ede:	428a      	cmp	r2, r1
 8001ee0:	d968      	bls.n	8001fb4 <_usb_ep0setup+0x208>
 8001ee2:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8001ee6:	d03e      	beq.n	8001f66 <_usb_ep0setup+0x1ba>
 8001ee8:	f640 4102 	movw	r1, #3074	; 0xc02
 8001eec:	428a      	cmp	r2, r1
 8001eee:	f000 8090 	beq.w	8002012 <_usb_ep0setup+0x266>
 8001ef2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001ef6:	d19c      	bne.n	8001e32 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001ef8:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8001efc:	2101      	movs	r1, #1
 8001efe:	6425      	str	r5, [r4, #64]	; 0x40
 8001f00:	e9c4 210e 	strd	r2, r1, [r4, #56]	; 0x38
 8001f04:	e768      	b.n	8001dd8 <_usb_ep0setup+0x2c>
    if (usbp->ep0n != 0U) {
 8001f06:	b1ba      	cbz	r2, 8001f38 <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_TX;
 8001f08:	2309      	movs	r3, #9
 8001f0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001f0e:	2320      	movs	r3, #32
 8001f10:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001f14:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f16:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001f18:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001f1a:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8001f22:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f24:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001f26:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001f28:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f002 fe19 	bl	8004b64 <usb_lld_start_in>
 8001f32:	f385 8811 	msr	BASEPRI, r5
}
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001f38:	2314      	movs	r3, #20
 8001f3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001f3e:	2320      	movs	r3, #32
 8001f40:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001f44:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f46:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001f48:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001f4a:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001f52:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8001f54:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8001f56:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f002 fdc2 	bl	8004ae4 <usb_lld_start_out>
 8001f60:	f385 8811 	msr	BASEPRI, r5
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
      if (usbp->state == USB_ACTIVE) {
 8001f66:	7823      	ldrb	r3, [r4, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	f000 80b3 	beq.w	80020d4 <_usb_ep0setup+0x328>
      if (usbp->setup[2] != 0U) {
 8001f6e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001f72:	b14b      	cbz	r3, 8001f88 <_usb_ep0setup+0x1dc>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001f74:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001f76:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001f7a:	6813      	ldr	r3, [r2, #0]
        usbp->state = USB_ACTIVE;
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	7022      	strb	r2, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001f80:	b113      	cbz	r3, 8001f88 <_usb_ep0setup+0x1dc>
 8001f82:	2102      	movs	r1, #2
 8001f84:	4620      	mov	r0, r4
 8001f86:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001f8e:	6423      	str	r3, [r4, #64]	; 0x40
 8001f90:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001f94:	e788      	b.n	8001ea8 <_usb_ep0setup+0xfc>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001f96:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	f47f af49 	bne.w	8001e32 <_usb_ep0setup+0x86>
      usbp->status |= 2U;
 8001fa0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fa4:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001faa:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8001fae:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8001fb2:	e779      	b.n	8001ea8 <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001fb4:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8001fb8:	d25b      	bcs.n	8002072 <_usb_ep0setup+0x2c6>
 8001fba:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001fbe:	f47f af38 	bne.w	8001e32 <_usb_ep0setup+0x86>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8001fc2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8001fc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fca:	d071      	beq.n	80020b0 <_usb_ep0setup+0x304>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001fd2:	6423      	str	r3, [r4, #64]	; 0x40
 8001fd4:	e768      	b.n	8001ea8 <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001fd6:	b9ca      	cbnz	r2, 800200c <_usb_ep0setup+0x260>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001fd8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8001fdc:	2102      	movs	r1, #2
 8001fde:	6422      	str	r2, [r4, #64]	; 0x40
 8001fe0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8001fe4:	e6f8      	b.n	8001dd8 <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001fe6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f af21 	bne.w	8001e32 <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001ff0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001ff4:	f013 010f 	ands.w	r1, r3, #15
 8001ff8:	d0e8      	beq.n	8001fcc <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001ffa:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8001ffc:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001ffe:	f100 8088 	bmi.w	8002112 <_usb_ep0setup+0x366>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 8002002:	f002 fe17 	bl	8004c34 <usb_lld_clear_out>
 8002006:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800200a:	e7df      	b.n	8001fcc <_usb_ep0setup+0x220>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800200c:	2a01      	cmp	r2, #1
 800200e:	f47f af10 	bne.w	8001e32 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8002012:	4a45      	ldr	r2, [pc, #276]	; (8002128 <_usb_ep0setup+0x37c>)
 8002014:	63a2      	str	r2, [r4, #56]	; 0x38
 8002016:	2102      	movs	r1, #2
 8002018:	2200      	movs	r2, #0
 800201a:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 800201e:	e6db      	b.n	8001dd8 <_usb_ep0setup+0x2c>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8002020:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002024:	f003 010f 	and.w	r1, r3, #15
 8002028:	061b      	lsls	r3, r3, #24
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800202a:	4620      	mov	r0, r4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800202c:	d43a      	bmi.n	80020a4 <_usb_ep0setup+0x2f8>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800202e:	f002 fd33 	bl	8004a98 <usb_lld_get_status_out>
 8002032:	2801      	cmp	r0, #1
 8002034:	d03a      	beq.n	80020ac <_usb_ep0setup+0x300>
 8002036:	2802      	cmp	r0, #2
 8002038:	f47f aefb 	bne.w	8001e32 <_usb_ep0setup+0x86>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <_usb_ep0setup+0x380>)
 800203e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002040:	2102      	movs	r1, #2
 8002042:	2300      	movs	r3, #0
 8002044:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
 8002048:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800204c:	e6c4      	b.n	8001dd8 <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800204e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f aeed 	bne.w	8001e32 <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002058:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800205c:	f013 010f 	ands.w	r1, r3, #15
 8002060:	d0b4      	beq.n	8001fcc <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002062:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8002064:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002066:	d459      	bmi.n	800211c <_usb_ep0setup+0x370>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8002068:	f002 fdd0 	bl	8004c0c <usb_lld_stall_out>
 800206c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8002070:	e7ac      	b.n	8001fcc <_usb_ep0setup+0x220>
  hw |= (uint16_t)*p << 8U;
 8002072:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002076:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8002078:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800207c:	684e      	ldr	r6, [r1, #4]
 800207e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002082:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8002086:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800208a:	4620      	mov	r0, r4
 800208c:	47b0      	blx	r6
    if (dp == NULL) {
 800208e:	2800      	cmp	r0, #0
 8002090:	f43f aecf 	beq.w	8001e32 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8002094:	e9d0 1300 	ldrd	r1, r3, [r0]
 8002098:	6425      	str	r5, [r4, #64]	; 0x40
 800209a:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
 800209e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80020a2:	e699      	b.n	8001dd8 <_usb_ep0setup+0x2c>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80020a4:	f002 fd06 	bl	8004ab4 <usb_lld_get_status_in>
 80020a8:	2801      	cmp	r0, #1
 80020aa:	d1c4      	bne.n	8002036 <_usb_ep0setup+0x28a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <_usb_ep0setup+0x384>)
 80020ae:	e7c6      	b.n	800203e <_usb_ep0setup+0x292>
  usbp->address = usbp->setup[2];
 80020b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80020b4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 80020b8:	4620      	mov	r0, r4
 80020ba:	f002 fb3b 	bl	8004734 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b113      	cbz	r3, 80020ca <_usb_ep0setup+0x31e>
 80020c4:	2101      	movs	r1, #1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80020d0:	7023      	strb	r3, [r4, #0]
 80020d2:	e77b      	b.n	8001fcc <_usb_ep0setup+0x220>
 80020d4:	2320      	movs	r3, #32
 80020d6:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting &= 1U;
 80020da:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80020dc:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 80020de:	6125      	str	r5, [r4, #16]
  usbp->transmitting &= 1U;
 80020e0:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 80020e4:	f003 0301 	and.w	r3, r3, #1
    usbp->epc[i] = NULL;
 80020e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
  usbp->transmitting &= 1U;
 80020ec:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80020ee:	8163      	strh	r3, [r4, #10]
  usb_lld_disable_endpoints(usbp);
 80020f0:	4620      	mov	r0, r4
 80020f2:	f002 fbdd 	bl	80048b0 <usb_lld_disable_endpoints>
 80020f6:	f385 8811 	msr	BASEPRI, r5
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80020fa:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 80020fc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002100:	681b      	ldr	r3, [r3, #0]
        usbp->state = USB_SELECTED;
 8002102:	2103      	movs	r1, #3
 8002104:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002106:	2b00      	cmp	r3, #0
 8002108:	f43f af31 	beq.w	8001f6e <_usb_ep0setup+0x1c2>
 800210c:	4620      	mov	r0, r4
 800210e:	4798      	blx	r3
 8002110:	e72d      	b.n	8001f6e <_usb_ep0setup+0x1c2>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8002112:	f002 fd99 	bl	8004c48 <usb_lld_clear_in>
 8002116:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800211a:	e757      	b.n	8001fcc <_usb_ep0setup+0x220>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800211c:	f002 fd80 	bl	8004c20 <usb_lld_stall_in>
 8002120:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8002124:	e752      	b.n	8001fcc <_usb_ep0setup+0x220>
 8002126:	bf00      	nop
 8002128:	08008460 	.word	0x08008460
 800212c:	08008458 	.word	0x08008458
 8002130:	0800845c 	.word	0x0800845c

08002134 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002134:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002136:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800213a:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800213c:	2b15      	cmp	r3, #21
 800213e:	d81c      	bhi.n	800217a <_usb_ep0in+0x46>
 8002140:	e8df f003 	tbb	[pc, r3]
 8002144:	1b1b1b0b 	.word	0x1b1b1b0b
 8002148:	1b0b1b1b 	.word	0x1b0b1b1b
 800214c:	432c1c1b 	.word	0x432c1c1b
 8002150:	1b1b1b1b 	.word	0x1b1b1b1b
 8002154:	1b1b1b1b 	.word	0x1b1b1b1b
 8002158:	0b0b      	.short	0x0b0b
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800215a:	2100      	movs	r1, #0
 800215c:	f002 fd60 	bl	8004c20 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002160:	2100      	movs	r1, #0
 8002162:	4620      	mov	r0, r4
 8002164:	f002 fd52 	bl	8004c0c <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b113      	cbz	r3, 8002174 <_usb_ep0in+0x40>
 800216e:	2106      	movs	r1, #6
 8002170:	4620      	mov	r0, r4
 8002172:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002174:	2306      	movs	r3, #6
 8002176:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800217a:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 800217c:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8002180:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 8002184:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 8002186:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 800218a:	429a      	cmp	r2, r3
 800218c:	d206      	bcs.n	800219c <_usb_ep0in+0x68>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800218e:	68c3      	ldr	r3, [r0, #12]
 8002190:	8a1b      	ldrh	r3, [r3, #16]
 8002192:	fbb2 f5f3 	udiv	r5, r2, r3
 8002196:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 800219a:	b1ed      	cbz	r5, 80021d8 <_usb_ep0in+0xa4>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800219c:	2314      	movs	r3, #20
 800219e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80021a2:	2320      	movs	r3, #32
 80021a4:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 80021a8:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021aa:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80021ac:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 80021ae:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80021b6:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 80021b8:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80021ba:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80021be:	4629      	mov	r1, r5
 80021c0:	f002 fc90 	bl	8004ae4 <usb_lld_start_out>
 80021c4:	f385 8811 	msr	BASEPRI, r5
}
 80021c8:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 80021ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021cc:	b103      	cbz	r3, 80021d0 <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 80021ce:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	2320      	movs	r3, #32
 80021da:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80021de:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021e0:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80021e2:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80021ea:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 80021ec:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 80021ee:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 80021f2:	f002 fcb7 	bl	8004b64 <usb_lld_start_in>
 80021f6:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 80021fa:	230a      	movs	r3, #10
 80021fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002200:	bd38      	pop	{r3, r4, r5, pc}
 8002202:	bf00      	nop

08002204 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8002204:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8002208:	2a15      	cmp	r2, #21
 800220a:	d815      	bhi.n	8002238 <_usb_ep0out+0x34>
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	2301      	movs	r3, #1
 8002210:	4093      	lsls	r3, r2
 8002212:	f640 6241 	movw	r2, #3649	; 0xe41
 8002216:	4213      	tst	r3, r2
 8002218:	4604      	mov	r4, r0
 800221a:	d125      	bne.n	8002268 <_usb_ep0out+0x64>
 800221c:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8002220:	d00b      	beq.n	800223a <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8002222:	68c3      	ldr	r3, [r0, #12]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	b92b      	cbnz	r3, 8002236 <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800222a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800222c:	b103      	cbz	r3, 8002230 <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 800222e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8002230:	2300      	movs	r3, #0
 8002232:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	4770      	bx	lr
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	d5fb      	bpl.n	8002236 <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800223e:	230b      	movs	r3, #11
 8002240:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8002244:	2320      	movs	r3, #32
 8002246:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 800224a:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800224c:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 800224e:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8002256:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8002258:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 800225a:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 800225e:	f002 fc81 	bl	8004b64 <usb_lld_start_in>
 8002262:	f385 8811 	msr	BASEPRI, r5
}
 8002266:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_stall_in(usbp, 0);
 8002268:	2100      	movs	r1, #0
 800226a:	f002 fcd9 	bl	8004c20 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800226e:	2100      	movs	r1, #0
 8002270:	4620      	mov	r0, r4
 8002272:	f002 fccb 	bl	8004c0c <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b113      	cbz	r3, 8002282 <_usb_ep0out+0x7e>
 800227c:	2106      	movs	r1, #6
 800227e:	4620      	mov	r0, r4
 8002280:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002282:	2306      	movs	r3, #6
 8002284:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002288:	bd38      	pop	{r3, r4, r5, pc}
 800228a:	bf00      	nop

0800228c <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800228c:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800228e:	b410      	push	{r4}
 8002290:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002292:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8002296:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800229a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800229e:	0109      	lsls	r1, r1, #4
 80022a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022a4:	f000 001f 	and.w	r0, r0, #31
 80022a8:	2201      	movs	r2, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022aa:	b2c9      	uxtb	r1, r1
 80022ac:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022b0:	fa02 f000 	lsl.w	r0, r2, r0
 80022b4:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
}
 80022b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80022bc:	6018      	str	r0, [r3, #0]
}
 80022be:	4770      	bx	lr

080022c0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80022c0:	4908      	ldr	r1, [pc, #32]	; (80022e4 <nvicDisableVector+0x24>)
 80022c2:	0943      	lsrs	r3, r0, #5
void nvicDisableVector(uint32_t n) {
 80022c4:	b410      	push	{r4}
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80022c6:	3320      	adds	r3, #32
 80022c8:	f000 041f 	and.w	r4, r0, #31
 80022cc:	2201      	movs	r2, #1
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80022ce:	4408      	add	r0, r1
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80022d0:	40a2      	lsls	r2, r4
  NVIC->IP[n] = 0U;
 80022d2:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n] = 0U;
 80022d8:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
#endif
}
 80022dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <Vector58+0x30>)
OSAL_IRQ_HANDLER(Vector58) {
 80022ea:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80022ec:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	400b      	ands	r3, r1
 80022f2:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80022f6:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 80022f8:	b14b      	cbz	r3, 800230e <Vector58+0x26>
 80022fa:	2320      	movs	r3, #32
 80022fc:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8002300:	2100      	movs	r1, #0
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <Vector58+0x34>)
 8002304:	f003 ff38 	bl	8006178 <chThdDequeueAllI>
 8002308:	2300      	movs	r3, #0
 800230a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800230e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002312:	f004 b963 	b.w	80065dc <_port_irq_epilogue>
 8002316:	bf00      	nop
 8002318:	40013c00 	.word	0x40013c00
 800231c:	20000960 	.word	0x20000960

08002320 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <Vector5C+0x30>)
OSAL_IRQ_HANDLER(Vector5C) {
 8002322:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8002324:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	400b      	ands	r3, r1
 800232a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800232e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8002330:	b14b      	cbz	r3, 8002346 <Vector5C+0x26>
 8002332:	2320      	movs	r3, #32
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	2100      	movs	r1, #0
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <Vector5C+0x34>)
 800233c:	f003 ff1c 	bl	8006178 <chThdDequeueAllI>
 8002340:	2300      	movs	r3, #0
 8002342:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800234a:	f004 b947 	b.w	80065dc <_port_irq_epilogue>
 800234e:	bf00      	nop
 8002350:	40013c00 	.word	0x40013c00
 8002354:	20000968 	.word	0x20000968

08002358 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002358:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <Vector60+0x30>)
OSAL_IRQ_HANDLER(Vector60) {
 800235a:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800235c:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	400b      	ands	r3, r1
 8002362:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8002366:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8002368:	b14b      	cbz	r3, 800237e <Vector60+0x26>
 800236a:	2320      	movs	r3, #32
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	2100      	movs	r1, #0
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <Vector60+0x34>)
 8002374:	f003 ff00 	bl	8006178 <chThdDequeueAllI>
 8002378:	2300      	movs	r3, #0
 800237a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800237e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002382:	f004 b92b 	b.w	80065dc <_port_irq_epilogue>
 8002386:	bf00      	nop
 8002388:	40013c00 	.word	0x40013c00
 800238c:	20000970 	.word	0x20000970

08002390 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <Vector64+0x30>)
OSAL_IRQ_HANDLER(Vector64) {
 8002392:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8002394:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	400b      	ands	r3, r1
 800239a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800239e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 80023a0:	b14b      	cbz	r3, 80023b6 <Vector64+0x26>
 80023a2:	2320      	movs	r3, #32
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <Vector64+0x34>)
 80023ac:	f003 fee4 	bl	8006178 <chThdDequeueAllI>
 80023b0:	2300      	movs	r3, #0
 80023b2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80023b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80023ba:	f004 b90f 	b.w	80065dc <_port_irq_epilogue>
 80023be:	bf00      	nop
 80023c0:	40013c00 	.word	0x40013c00
 80023c4:	20000978 	.word	0x20000978

080023c8 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <Vector68+0x30>)
OSAL_IRQ_HANDLER(Vector68) {
 80023ca:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80023cc:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	400b      	ands	r3, r1
 80023d2:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 80023d6:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 80023d8:	b14b      	cbz	r3, 80023ee <Vector68+0x26>
 80023da:	2320      	movs	r3, #32
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	2100      	movs	r1, #0
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <Vector68+0x34>)
 80023e4:	f003 fec8 	bl	8006178 <chThdDequeueAllI>
 80023e8:	2300      	movs	r3, #0
 80023ea:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80023ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80023f2:	f004 b8f3 	b.w	80065dc <_port_irq_epilogue>
 80023f6:	bf00      	nop
 80023f8:	40013c00 	.word	0x40013c00
 80023fc:	20000980 	.word	0x20000980

08002400 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <Vector9C+0x98>)
OSAL_IRQ_HANDLER(Vector9C) {
 8002402:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8002404:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8002406:	681c      	ldr	r4, [r3, #0]
 8002408:	4014      	ands	r4, r2
 800240a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 800240e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 5);
 8002410:	06a3      	lsls	r3, r4, #26
 8002412:	d436      	bmi.n	8002482 <Vector9C+0x82>
  exti_serve_irq(pr, 6);
 8002414:	0660      	lsls	r0, r4, #25
 8002416:	d429      	bmi.n	800246c <Vector9C+0x6c>
  exti_serve_irq(pr, 7);
 8002418:	0621      	lsls	r1, r4, #24
 800241a:	d41c      	bmi.n	8002456 <Vector9C+0x56>
  exti_serve_irq(pr, 8);
 800241c:	05e2      	lsls	r2, r4, #23
 800241e:	d40f      	bmi.n	8002440 <Vector9C+0x40>
  exti_serve_irq(pr, 9);
 8002420:	05a3      	lsls	r3, r4, #22
 8002422:	d509      	bpl.n	8002438 <Vector9C+0x38>
 8002424:	2320      	movs	r3, #32
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	2100      	movs	r1, #0
 800242c:	481b      	ldr	r0, [pc, #108]	; (800249c <Vector9C+0x9c>)
 800242e:	f003 fea3 	bl	8006178 <chThdDequeueAllI>
 8002432:	2300      	movs	r3, #0
 8002434:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800243c:	f004 b8ce 	b.w	80065dc <_port_irq_epilogue>
 8002440:	2320      	movs	r3, #32
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	2100      	movs	r1, #0
 8002448:	4815      	ldr	r0, [pc, #84]	; (80024a0 <Vector9C+0xa0>)
 800244a:	f003 fe95 	bl	8006178 <chThdDequeueAllI>
 800244e:	2300      	movs	r3, #0
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	e7e4      	b.n	8002420 <Vector9C+0x20>
 8002456:	2320      	movs	r3, #32
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	2100      	movs	r1, #0
 800245e:	4811      	ldr	r0, [pc, #68]	; (80024a4 <Vector9C+0xa4>)
 8002460:	f003 fe8a 	bl	8006178 <chThdDequeueAllI>
 8002464:	2300      	movs	r3, #0
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	e7d7      	b.n	800241c <Vector9C+0x1c>
 800246c:	2320      	movs	r3, #32
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	2100      	movs	r1, #0
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <Vector9C+0xa8>)
 8002476:	f003 fe7f 	bl	8006178 <chThdDequeueAllI>
 800247a:	2300      	movs	r3, #0
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	e7ca      	b.n	8002418 <Vector9C+0x18>
 8002482:	2320      	movs	r3, #32
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	2100      	movs	r1, #0
 800248a:	4808      	ldr	r0, [pc, #32]	; (80024ac <Vector9C+0xac>)
 800248c:	f003 fe74 	bl	8006178 <chThdDequeueAllI>
 8002490:	2300      	movs	r3, #0
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	e7bd      	b.n	8002414 <Vector9C+0x14>
 8002498:	40013c00 	.word	0x40013c00
 800249c:	200009a8 	.word	0x200009a8
 80024a0:	200009a0 	.word	0x200009a0
 80024a4:	20000998 	.word	0x20000998
 80024a8:	20000990 	.word	0x20000990
 80024ac:	20000988 	.word	0x20000988

080024b0 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <VectorE0+0xb4>)
OSAL_IRQ_HANDLER(VectorE0) {
 80024b2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 80024b4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 80024b6:	681c      	ldr	r4, [r3, #0]
 80024b8:	4014      	ands	r4, r2
 80024ba:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 80024be:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 80024c0:	0562      	lsls	r2, r4, #21
 80024c2:	d443      	bmi.n	800254c <VectorE0+0x9c>
  exti_serve_irq(pr, 11);
 80024c4:	0523      	lsls	r3, r4, #20
 80024c6:	d436      	bmi.n	8002536 <VectorE0+0x86>
  exti_serve_irq(pr, 12);
 80024c8:	04e0      	lsls	r0, r4, #19
 80024ca:	d429      	bmi.n	8002520 <VectorE0+0x70>
  exti_serve_irq(pr, 13);
 80024cc:	04a1      	lsls	r1, r4, #18
 80024ce:	d41c      	bmi.n	800250a <VectorE0+0x5a>
  exti_serve_irq(pr, 14);
 80024d0:	0462      	lsls	r2, r4, #17
 80024d2:	d40f      	bmi.n	80024f4 <VectorE0+0x44>
  exti_serve_irq(pr, 15);
 80024d4:	0423      	lsls	r3, r4, #16
 80024d6:	d509      	bpl.n	80024ec <VectorE0+0x3c>
 80024d8:	2320      	movs	r3, #32
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	4821      	ldr	r0, [pc, #132]	; (8002568 <VectorE0+0xb8>)
 80024e2:	f003 fe49 	bl	8006178 <chThdDequeueAllI>
 80024e6:	2300      	movs	r3, #0
 80024e8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80024ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80024f0:	f004 b874 	b.w	80065dc <_port_irq_epilogue>
 80024f4:	2320      	movs	r3, #32
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	2100      	movs	r1, #0
 80024fc:	481b      	ldr	r0, [pc, #108]	; (800256c <VectorE0+0xbc>)
 80024fe:	f003 fe3b 	bl	8006178 <chThdDequeueAllI>
 8002502:	2300      	movs	r3, #0
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	e7e4      	b.n	80024d4 <VectorE0+0x24>
 800250a:	2320      	movs	r3, #32
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	2100      	movs	r1, #0
 8002512:	4817      	ldr	r0, [pc, #92]	; (8002570 <VectorE0+0xc0>)
 8002514:	f003 fe30 	bl	8006178 <chThdDequeueAllI>
 8002518:	2300      	movs	r3, #0
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	e7d7      	b.n	80024d0 <VectorE0+0x20>
 8002520:	2320      	movs	r3, #32
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	2100      	movs	r1, #0
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <VectorE0+0xc4>)
 800252a:	f003 fe25 	bl	8006178 <chThdDequeueAllI>
 800252e:	2300      	movs	r3, #0
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	e7ca      	b.n	80024cc <VectorE0+0x1c>
 8002536:	2320      	movs	r3, #32
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	2100      	movs	r1, #0
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <VectorE0+0xc8>)
 8002540:	f003 fe1a 	bl	8006178 <chThdDequeueAllI>
 8002544:	2300      	movs	r3, #0
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	e7bd      	b.n	80024c8 <VectorE0+0x18>
 800254c:	2320      	movs	r3, #32
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	2100      	movs	r1, #0
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <VectorE0+0xcc>)
 8002556:	f003 fe0f 	bl	8006178 <chThdDequeueAllI>
 800255a:	2300      	movs	r3, #0
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	e7b0      	b.n	80024c4 <VectorE0+0x14>
 8002562:	bf00      	nop
 8002564:	40013c00 	.word	0x40013c00
 8002568:	200009d8 	.word	0x200009d8
 800256c:	200009d0 	.word	0x200009d0
 8002570:	200009c8 	.word	0x200009c8
 8002574:	200009c0 	.word	0x200009c0
 8002578:	200009b8 	.word	0x200009b8
 800257c:	200009b0 	.word	0x200009b0

08002580 <irqInit>:
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8002580:	2106      	movs	r1, #6
void irqInit(void) {
 8002582:	b508      	push	{r3, lr}
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8002584:	4608      	mov	r0, r1
 8002586:	f7ff fe81 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800258a:	2106      	movs	r1, #6
 800258c:	2007      	movs	r0, #7
 800258e:	f7ff fe7d 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8002592:	2106      	movs	r1, #6
 8002594:	2008      	movs	r0, #8
 8002596:	f7ff fe79 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800259a:	2106      	movs	r1, #6
 800259c:	2009      	movs	r0, #9
 800259e:	f7ff fe75 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 80025a2:	2106      	movs	r1, #6
 80025a4:	200a      	movs	r0, #10
 80025a6:	f7ff fe71 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 80025aa:	2106      	movs	r1, #6
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fe6d 	bl	800228c <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 80025b2:	2106      	movs	r1, #6
 80025b4:	2028      	movs	r0, #40	; 0x28
#endif
}
 80025b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 80025ba:	f7ff be67 	b.w	800228c <nvicEnableVector>
 80025be:	bf00      	nop

080025c0 <hal_lld_init>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <hal_lld_init+0x8c>)
  PWR->CR |= PWR_CR_DBP;
 80025c2:	4823      	ldr	r0, [pc, #140]	; (8002650 <hal_lld_init+0x90>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 80025ca:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
void hal_lld_init(void) {
 80025ce:	b510      	push	{r4, lr}
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d8:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80025da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80025de:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	615c      	str	r4, [r3, #20]
 80025e4:	2100      	movs	r1, #0
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	6159      	str	r1, [r3, #20]
 80025ea:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 80025f2:	621a      	str	r2, [r3, #32]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80025fa:	621a      	str	r2, [r3, #32]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	625c      	str	r4, [r3, #36]	; 0x24
 8002602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002604:	6259      	str	r1, [r3, #36]	; 0x24
 8002606:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
 8002610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002612:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002616:	661a      	str	r2, [r3, #96]	; 0x60
 8002618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002624:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002628:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800262c:	d003      	beq.n	8002636 <hal_lld_init+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 800262e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002632:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002634:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002636:	4a06      	ldr	r2, [pc, #24]	; (8002650 <hal_lld_init+0x90>)
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800263e:	6053      	str	r3, [r2, #4]
  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8002640:	f000 fcca 	bl	8002fd8 <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  irqInit();
 8002648:	f7ff bf9a 	b.w	8002580 <irqInit>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <stm32_clock_init+0xd0>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <stm32_clock_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002658:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 800265c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002660:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8002662:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	0792      	lsls	r2, r2, #30
 8002670:	d5fc      	bpl.n	800266c <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002672:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <stm32_clock_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002676:	f021 0103 	bic.w	r1, r1, #3
 800267a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800267c:	6893      	ldr	r3, [r2, #8]
 800267e:	f013 030c 	ands.w	r3, r3, #12
 8002682:	d1fb      	bne.n	800267c <stm32_clock_init+0x28>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002684:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002686:	4927      	ldr	r1, [pc, #156]	; (8002724 <stm32_clock_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002688:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800268c:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800268e:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002698:	680b      	ldr	r3, [r1, #0]
 800269a:	0398      	lsls	r0, r3, #14
 800269c:	d5fc      	bpl.n	8002698 <stm32_clock_init+0x44>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800269e:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <stm32_clock_init+0xd0>)
  RCC->CSR |= RCC_CSR_LSION;
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80026a8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80026aa:	0799      	lsls	r1, r3, #30
 80026ac:	d5fc      	bpl.n	80026a8 <stm32_clock_init+0x54>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <stm32_clock_init+0xd8>)
 80026b0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80026b2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80026b4:	491c      	ldr	r1, [pc, #112]	; (8002728 <stm32_clock_init+0xd4>)
  RCC->CR |= RCC_CR_PLLON;
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80026bc:	684b      	ldr	r3, [r1, #4]
 80026be:	045a      	lsls	r2, r3, #17
 80026c0:	d5fc      	bpl.n	80026bc <stm32_clock_init+0x68>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <stm32_clock_init+0xd0>)
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	019b      	lsls	r3, r3, #6
 80026c8:	d5fc      	bpl.n	80026c4 <stm32_clock_init+0x70>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80026ca:	4919      	ldr	r1, [pc, #100]	; (8002730 <stm32_clock_init+0xdc>)
 80026cc:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <stm32_clock_init+0xe0>)
    RCC->DCKCFGR = dckcfgr |
 80026d0:	2103      	movs	r1, #3
 80026d2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <stm32_clock_init+0xe4>)
 80026da:	429a      	cmp	r2, r3
 80026dc:	d017      	beq.n	800270e <stm32_clock_init+0xba>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <stm32_clock_init+0xe8>)
 80026e0:	f240 7205 	movw	r2, #1797	; 0x705
 80026e4:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <stm32_clock_init+0xd0>)
 80026e8:	6893      	ldr	r3, [r2, #8]
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80026f0:	6893      	ldr	r3, [r2, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d1fa      	bne.n	80026f0 <stm32_clock_init+0x9c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80026fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6653      	str	r3, [r2, #100]	; 0x64
 800270a:	6e53      	ldr	r3, [r2, #100]	; 0x64
}
 800270c:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <stm32_clock_init+0xec>)
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <stm32_clock_init+0xf0>)
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1e2      	bne.n	80026de <stm32_clock_init+0x8a>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <stm32_clock_init+0xe8>)
 800271a:	f240 1205 	movw	r2, #261	; 0x105
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e7e1      	b.n	80026e6 <stm32_clock_init+0x92>
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000
 800272c:	0740540c 	.word	0x0740540c
 8002730:	38889400 	.word	0x38889400
 8002734:	e0042000 	.word	0xe0042000
 8002738:	20006411 	.word	0x20006411
 800273c:	40023c00 	.word	0x40023c00
 8002740:	e000ed00 	.word	0xe000ed00
 8002744:	410fc241 	.word	0x410fc241

08002748 <Vector88>:
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <Vector88+0xd4>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 800274a:	b570      	push	{r4, r5, r6, lr}
  sr = ADC1->SR;
 800274c:	6815      	ldr	r5, [r2, #0]
  ADC1->SR = 0;
 800274e:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002750:	06ab      	lsls	r3, r5, #26
  ADC1->SR = 0;
 8002752:	6011      	str	r1, [r2, #0]
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002754:	d42c      	bmi.n	80027b0 <Vector88+0x68>
 8002756:	f005 0501 	and.w	r5, r5, #1
      /* ADC overflow condition, this could happen only if the DMA is unable
        to read data fast enough.*/
      if (ADCD1.grpp != NULL)
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
    }
  if (sr & ADC_SR_AWD) {
 800275a:	b32d      	cbz	r5, 80027a8 <Vector88+0x60>
    if (ADCD1.grpp != NULL) {
 800275c:	4c30      	ldr	r4, [pc, #192]	; (8002820 <Vector88+0xd8>)
 800275e:	6922      	ldr	r2, [r4, #16]
 8002760:	b312      	cbz	r2, 80027a8 <Vector88+0x60>

  if (adcp->config->useDMA)
  {
  // dmaStreamDisable(adcp->dmastp);
  }
  adcp->adc->CR1 = 0;
 8002762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8002764:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 800276a:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800276c:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 800276e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002772:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002774:	6099      	str	r1, [r3, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8002776:	2d00      	cmp	r5, #0
 8002778:	d048      	beq.n	800280c <Vector88+0xc4>
 800277a:	2305      	movs	r3, #5
 800277c:	7023      	strb	r3, [r4, #0]
 800277e:	2102      	movs	r1, #2
 8002780:	4620      	mov	r0, r4
 8002782:	47a8      	blx	r5
 8002784:	7823      	ldrb	r3, [r4, #0]
 8002786:	2b05      	cmp	r3, #5
 8002788:	bf04      	itt	eq
 800278a:	2302      	moveq	r3, #2
 800278c:	7023      	strbeq	r3, [r4, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	6123      	str	r3, [r4, #16]
 8002792:	2320      	movs	r3, #32
 8002794:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800279c:	4821      	ldr	r0, [pc, #132]	; (8002824 <Vector88+0xdc>)
 800279e:	f003 fcbd 	bl	800611c <chThdResumeI>
 80027a2:	2300      	movs	r3, #0
 80027a4:	f383 8811 	msr	BASEPRI, r3
}
 80027a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80027ac:	f003 bf16 	b.w	80065dc <_port_irq_epilogue>
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 80027b0:	4c1b      	ldr	r4, [pc, #108]	; (8002820 <Vector88+0xd8>)
 80027b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	6852      	ldr	r2, [r2, #4]
 80027b8:	f005 0501 	and.w	r5, r5, #1
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d0cc      	beq.n	800275a <Vector88+0x12>
      if (ADCD1.grpp != NULL)
 80027c0:	6922      	ldr	r2, [r4, #16]
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d0f0      	beq.n	80027a8 <Vector88+0x60>
  adcp->adc->CR1 = 0;
 80027c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80027c8:	6896      	ldr	r6, [r2, #8]
  adcp->adc->CR1 = 0;
 80027ca:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80027cc:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80027ce:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80027d0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80027d4:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80027d6:	6099      	str	r1, [r3, #8]
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80027d8:	b1e6      	cbz	r6, 8002814 <Vector88+0xcc>
 80027da:	2305      	movs	r3, #5
 80027dc:	7023      	strb	r3, [r4, #0]
 80027de:	4620      	mov	r0, r4
 80027e0:	47b0      	blx	r6
 80027e2:	7823      	ldrb	r3, [r4, #0]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	bf04      	itt	eq
 80027e8:	2302      	moveq	r3, #2
 80027ea:	7023      	strbeq	r3, [r4, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	6123      	str	r3, [r4, #16]
 80027f0:	2320      	movs	r3, #32
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027fa:	480a      	ldr	r0, [pc, #40]	; (8002824 <Vector88+0xdc>)
 80027fc:	f003 fc8e 	bl	800611c <chThdResumeI>
 8002800:	2300      	movs	r3, #0
 8002802:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 8002806:	2d00      	cmp	r5, #0
 8002808:	d1a8      	bne.n	800275c <Vector88+0x14>
 800280a:	e7cd      	b.n	80027a8 <Vector88+0x60>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 800280c:	2302      	movs	r3, #2
 800280e:	6125      	str	r5, [r4, #16]
 8002810:	7023      	strb	r3, [r4, #0]
 8002812:	e7be      	b.n	8002792 <Vector88+0x4a>
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8002814:	2302      	movs	r3, #2
 8002816:	6126      	str	r6, [r4, #16]
 8002818:	7023      	strb	r3, [r4, #0]
 800281a:	e7e9      	b.n	80027f0 <Vector88+0xa8>
 800281c:	40012000 	.word	0x40012000
 8002820:	20000850 	.word	0x20000850
 8002824:	20000864 	.word	0x20000864

08002828 <adc_lld_init>:
void adc_lld_init(void) {
 8002828:	b510      	push	{r4, lr}
  adcObjectInit(&ADCD1);
 800282a:	4c08      	ldr	r4, [pc, #32]	; (800284c <adc_lld_init+0x24>)
 800282c:	4620      	mov	r0, r4
 800282e:	f7fe ff4d 	bl	80016cc <adcObjectInit>
  ADCD1.adc     = ADC1;
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <adc_lld_init+0x28>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <adc_lld_init+0x2c>)
  ADCD1.adc     = ADC1;
 8002836:	62a2      	str	r2, [r4, #40]	; 0x28
  ADCD1.dmastp  = NULL;
 8002838:	2200      	movs	r2, #0
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800283a:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 800283e:	2106      	movs	r1, #6
 8002840:	2012      	movs	r0, #18
}
 8002842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8002846:	f7ff bd21 	b.w	800228c <nvicEnableVector>
 800284a:	bf00      	nop
 800284c:	20000850 	.word	0x20000850
 8002850:	40012000 	.word	0x40012000
 8002854:	00022c16 	.word	0x00022c16

08002858 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <Vector8C+0xc0>)
 800285a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800285c:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800285e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 8002862:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002864:	f013 0101 	ands.w	r1, r3, #1
 8002868:	d045      	beq.n	80028f6 <Vector8C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 800286a:	f003 0c0c 	and.w	ip, r3, #12
 800286e:	492b      	ldr	r1, [pc, #172]	; (800291c <Vector8C+0xc4>)
 8002870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800293c <Vector8C+0xe4>
 8002874:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002940 <Vector8C+0xe8>
 8002878:	4e29      	ldr	r6, [pc, #164]	; (8002920 <Vector8C+0xc8>)
 800287a:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8002944 <Vector8C+0xec>
 800287e:	4829      	ldr	r0, [pc, #164]	; (8002924 <Vector8C+0xcc>)
 8002880:	4c29      	ldr	r4, [pc, #164]	; (8002928 <Vector8C+0xd0>)
 8002882:	4f2a      	ldr	r7, [pc, #168]	; (800292c <Vector8C+0xd4>)
 8002884:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002948 <Vector8C+0xf0>
 8002888:	4d29      	ldr	r5, [pc, #164]	; (8002930 <Vector8C+0xd8>)
 800288a:	f1bc 0f00 	cmp.w	ip, #0
 800288e:	bf01      	itttt	eq
 8002890:	468c      	moveq	ip, r1
 8002892:	4656      	moveq	r6, sl
 8002894:	46ce      	moveq	lr, r9
 8002896:	2005      	moveq	r0, #5
 8002898:	bf15      	itete	ne
 800289a:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 800289e:	2707      	moveq	r7, #7
 80028a0:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 80028a4:	2503      	moveq	r5, #3
 80028a6:	bf16      	itet	ne
 80028a8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 80028ac:	2101      	moveq	r1, #1
 80028ae:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 80028b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028b6:	d005      	beq.n	80028c4 <Vector8C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80028b8:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80028bc:	d028      	beq.n	8002910 <Vector8C+0xb8>
 80028be:	4670      	mov	r0, lr
 80028c0:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 80028c2:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80028c4:	03dd      	lsls	r5, r3, #15
 80028c6:	d504      	bpl.n	80028d2 <Vector8C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 80028c8:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 80028cc:	bf14      	ite	ne
 80028ce:	4621      	movne	r1, r4
 80028d0:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 80028d2:	69d3      	ldr	r3, [r2, #28]
 80028d4:	b10b      	cbz	r3, 80028da <Vector8C+0x82>
 80028d6:	4810      	ldr	r0, [pc, #64]	; (8002918 <Vector8C+0xc0>)
 80028d8:	4798      	blx	r3
 80028da:	2320      	movs	r3, #32
 80028dc:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 80028e0:	2100      	movs	r1, #0
 80028e2:	4814      	ldr	r0, [pc, #80]	; (8002934 <Vector8C+0xdc>)
 80028e4:	f003 fc48 	bl	8006178 <chThdDequeueAllI>
 80028e8:	2300      	movs	r3, #0
 80028ea:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80028ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80028f2:	f003 be73 	b.w	80065dc <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 80028f6:	4e10      	ldr	r6, [pc, #64]	; (8002938 <Vector8C+0xe0>)
 80028f8:	f8df e050 	ldr.w	lr, [pc, #80]	; 800294c <Vector8C+0xf4>
 80028fc:	2004      	movs	r0, #4
 80028fe:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8002902:	2706      	movs	r7, #6
 8002904:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 8002908:	2502      	movs	r5, #2
 800290a:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 800290e:	e7d0      	b.n	80028b2 <Vector8C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002910:	4638      	mov	r0, r7
 8002912:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8002914:	4629      	mov	r1, r5
 8002916:	e7d5      	b.n	80028c4 <Vector8C+0x6c>
 8002918:	20000884 	.word	0x20000884
 800291c:	00020001 	.word	0x00020001
 8002920:	00050002 	.word	0x00050002
 8002924:	00010004 	.word	0x00010004
 8002928:	00040001 	.word	0x00040001
 800292c:	00010006 	.word	0x00010006
 8002930:	00010002 	.word	0x00010002
 8002934:	2000088c 	.word	0x2000088c
 8002938:	00040002 	.word	0x00040002
 800293c:	00040003 	.word	0x00040003
 8002940:	00020005 	.word	0x00020005
 8002944:	00030004 	.word	0x00030004
 8002948:	00060001 	.word	0x00060001
 800294c:	00020004 	.word	0x00020004

08002950 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8002950:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8002952:	4c12      	ldr	r4, [pc, #72]	; (800299c <Vector90+0x4c>)
 8002954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002956:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002958:	07aa      	lsls	r2, r5, #30
 800295a:	d012      	beq.n	8002982 <Vector90+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800295c:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 800295e:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002960:	f022 0202 	bic.w	r2, r2, #2
 8002964:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002966:	b116      	cbz	r6, 800296e <Vector90+0x1e>
 8002968:	2101      	movs	r1, #1
 800296a:	4620      	mov	r0, r4
 800296c:	47b0      	blx	r6
 800296e:	2320      	movs	r3, #32
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	2100      	movs	r1, #0
 8002976:	480a      	ldr	r0, [pc, #40]	; (80029a0 <Vector90+0x50>)
 8002978:	f003 fbfe 	bl	8006178 <chThdDequeueAllI>
 800297c:	2300      	movs	r3, #0
 800297e:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8002982:	06eb      	lsls	r3, r5, #27
 8002984:	d506      	bpl.n	8002994 <Vector90+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002986:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002988:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800298a:	2110      	movs	r1, #16
 800298c:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 800298e:	b10b      	cbz	r3, 8002994 <Vector90+0x44>
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <Vector90+0x4c>)
 8002992:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002998:	f003 be20 	b.w	80065dc <_port_irq_epilogue>
 800299c:	20000884 	.word	0x20000884
 80029a0:	20000894 	.word	0x20000894

080029a4 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 80029a4:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 80029a6:	4c12      	ldr	r4, [pc, #72]	; (80029f0 <Vector94+0x4c>)
 80029a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029aa:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 80029ac:	07aa      	lsls	r2, r5, #30
 80029ae:	d012      	beq.n	80029d6 <Vector94+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 80029b0:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 80029b2:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 80029ba:	b116      	cbz	r6, 80029c2 <Vector94+0x1e>
 80029bc:	2102      	movs	r1, #2
 80029be:	4620      	mov	r0, r4
 80029c0:	47b0      	blx	r6
 80029c2:	2320      	movs	r3, #32
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	2100      	movs	r1, #0
 80029ca:	480a      	ldr	r0, [pc, #40]	; (80029f4 <Vector94+0x50>)
 80029cc:	f003 fbd4 	bl	8006178 <chThdDequeueAllI>
 80029d0:	2300      	movs	r3, #0
 80029d2:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 80029d6:	06eb      	lsls	r3, r5, #27
 80029d8:	d506      	bpl.n	80029e8 <Vector94+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 80029da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80029dc:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 80029de:	2110      	movs	r1, #16
 80029e0:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80029e2:	b10b      	cbz	r3, 80029e8 <Vector94+0x44>
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <Vector94+0x4c>)
 80029e6:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80029e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80029ec:	f003 bdf6 	b.w	80065dc <_port_irq_epilogue>
 80029f0:	20000884 	.word	0x20000884
 80029f4:	20000894 	.word	0x20000894

080029f8 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 80029f8:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 80029fa:	4c0f      	ldr	r4, [pc, #60]	; (8002a38 <Vector98+0x40>)
 80029fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029fe:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8002a00:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8002a02:	072a      	lsls	r2, r5, #28
 8002a04:	d50a      	bpl.n	8002a1c <Vector98+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002a06:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002a0a:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 8002a0e:	2103      	movs	r1, #3
 8002a10:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002a12:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002a14:	b116      	cbz	r6, 8002a1c <Vector98+0x24>
 8002a16:	2100      	movs	r1, #0
 8002a18:	4620      	mov	r0, r4
 8002a1a:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 8002a1c:	076b      	lsls	r3, r5, #29
 8002a1e:	d506      	bpl.n	8002a2e <Vector98+0x36>
    uint32_t esr = canp->can->ESR;
 8002a20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 8002a22:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 8002a24:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 8002a26:	b113      	cbz	r3, 8002a2e <Vector98+0x36>
 8002a28:	0409      	lsls	r1, r1, #16
 8002a2a:	4803      	ldr	r0, [pc, #12]	; (8002a38 <Vector98+0x40>)
 8002a2c:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002a32:	f003 bdd3 	b.w	80065dc <_port_irq_epilogue>
 8002a36:	bf00      	nop
 8002a38:	20000884 	.word	0x20000884

08002a3c <Vector13C>:
  tsr = canp->can->TSR;
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <Vector13C+0xc0>)
 8002a3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a40:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN2 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_TX_HANDLER) {
 8002a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 8002a46:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002a48:	f013 0101 	ands.w	r1, r3, #1
 8002a4c:	d045      	beq.n	8002ada <Vector13C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8002a4e:	f003 0c0c 	and.w	ip, r3, #12
 8002a52:	492b      	ldr	r1, [pc, #172]	; (8002b00 <Vector13C+0xc4>)
 8002a54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b20 <Vector13C+0xe4>
 8002a58:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002b24 <Vector13C+0xe8>
 8002a5c:	4e29      	ldr	r6, [pc, #164]	; (8002b04 <Vector13C+0xc8>)
 8002a5e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8002b28 <Vector13C+0xec>
 8002a62:	4829      	ldr	r0, [pc, #164]	; (8002b08 <Vector13C+0xcc>)
 8002a64:	4c29      	ldr	r4, [pc, #164]	; (8002b0c <Vector13C+0xd0>)
 8002a66:	4f2a      	ldr	r7, [pc, #168]	; (8002b10 <Vector13C+0xd4>)
 8002a68:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002b2c <Vector13C+0xf0>
 8002a6c:	4d29      	ldr	r5, [pc, #164]	; (8002b14 <Vector13C+0xd8>)
 8002a6e:	f1bc 0f00 	cmp.w	ip, #0
 8002a72:	bf01      	itttt	eq
 8002a74:	468c      	moveq	ip, r1
 8002a76:	4656      	moveq	r6, sl
 8002a78:	46ce      	moveq	lr, r9
 8002a7a:	2005      	moveq	r0, #5
 8002a7c:	bf15      	itete	ne
 8002a7e:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 8002a82:	2707      	moveq	r7, #7
 8002a84:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 8002a88:	2503      	moveq	r5, #3
 8002a8a:	bf16      	itet	ne
 8002a8c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 8002a90:	2101      	moveq	r1, #1
 8002a92:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8002a96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a9a:	d005      	beq.n	8002aa8 <Vector13C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002a9c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002aa0:	d028      	beq.n	8002af4 <Vector13C+0xb8>
 8002aa2:	4670      	mov	r0, lr
 8002aa4:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8002aa6:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8002aa8:	03dd      	lsls	r5, r3, #15
 8002aaa:	d504      	bpl.n	8002ab6 <Vector13C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8002aac:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8002ab0:	bf14      	ite	ne
 8002ab2:	4621      	movne	r1, r4
 8002ab4:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 8002ab6:	69d3      	ldr	r3, [r2, #28]
 8002ab8:	b10b      	cbz	r3, 8002abe <Vector13C+0x82>
 8002aba:	4810      	ldr	r0, [pc, #64]	; (8002afc <Vector13C+0xc0>)
 8002abc:	4798      	blx	r3
 8002abe:	2320      	movs	r3, #32
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4814      	ldr	r0, [pc, #80]	; (8002b18 <Vector13C+0xdc>)
 8002ac8:	f003 fb56 	bl	8006178 <chThdDequeueAllI>
 8002acc:	2300      	movs	r3, #0
 8002ace:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002ad2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8002ad6:	f003 bd81 	b.w	80065dc <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8002ada:	4e10      	ldr	r6, [pc, #64]	; (8002b1c <Vector13C+0xe0>)
 8002adc:	f8df e050 	ldr.w	lr, [pc, #80]	; 8002b30 <Vector13C+0xf4>
 8002ae0:	2004      	movs	r0, #4
 8002ae2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8002ae6:	2706      	movs	r7, #6
 8002ae8:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 8002aec:	2502      	movs	r5, #2
 8002aee:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8002af2:	e7d0      	b.n	8002a96 <Vector13C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002af4:	4638      	mov	r0, r7
 8002af6:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8002af8:	4629      	mov	r1, r5
 8002afa:	e7d5      	b.n	8002aa8 <Vector13C+0x6c>
 8002afc:	200008b0 	.word	0x200008b0
 8002b00:	00020001 	.word	0x00020001
 8002b04:	00050002 	.word	0x00050002
 8002b08:	00010004 	.word	0x00010004
 8002b0c:	00040001 	.word	0x00040001
 8002b10:	00010006 	.word	0x00010006
 8002b14:	00010002 	.word	0x00010002
 8002b18:	200008b8 	.word	0x200008b8
 8002b1c:	00040002 	.word	0x00040002
 8002b20:	00040003 	.word	0x00040003
 8002b24:	00020005 	.word	0x00020005
 8002b28:	00030004 	.word	0x00030004
 8002b2c:	00060001 	.word	0x00060001
 8002b30:	00020004 	.word	0x00020004

08002b34 <Vector140>:
/**
 * @brief   CAN2 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX0_HANDLER) {
 8002b34:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8002b36:	4c12      	ldr	r4, [pc, #72]	; (8002b80 <Vector140+0x4c>)
 8002b38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b3a:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002b3c:	07aa      	lsls	r2, r5, #30
 8002b3e:	d012      	beq.n	8002b66 <Vector140+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002b40:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002b42:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002b44:	f022 0202 	bic.w	r2, r2, #2
 8002b48:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002b4a:	b116      	cbz	r6, 8002b52 <Vector140+0x1e>
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	47b0      	blx	r6
 8002b52:	2320      	movs	r3, #32
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	2100      	movs	r1, #0
 8002b5a:	480a      	ldr	r0, [pc, #40]	; (8002b84 <Vector140+0x50>)
 8002b5c:	f003 fb0c 	bl	8006178 <chThdDequeueAllI>
 8002b60:	2300      	movs	r3, #0
 8002b62:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8002b66:	06eb      	lsls	r3, r5, #27
 8002b68:	d506      	bpl.n	8002b78 <Vector140+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002b6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002b6c:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002b6e:	2110      	movs	r1, #16
 8002b70:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002b72:	b10b      	cbz	r3, 8002b78 <Vector140+0x44>
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <Vector140+0x4c>)
 8002b76:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002b7c:	f003 bd2e 	b.w	80065dc <_port_irq_epilogue>
 8002b80:	200008b0 	.word	0x200008b0
 8002b84:	200008c0 	.word	0x200008c0

08002b88 <Vector144>:
/**
 * @brief   CAN2 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX1_HANDLER) {
 8002b88:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 8002b8a:	4c12      	ldr	r4, [pc, #72]	; (8002bd4 <Vector144+0x4c>)
 8002b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b8e:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002b90:	07aa      	lsls	r2, r5, #30
 8002b92:	d012      	beq.n	8002bba <Vector144+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002b94:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002b96:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002b98:	f022 0210 	bic.w	r2, r2, #16
 8002b9c:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002b9e:	b116      	cbz	r6, 8002ba6 <Vector144+0x1e>
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	47b0      	blx	r6
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	2100      	movs	r1, #0
 8002bae:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <Vector144+0x50>)
 8002bb0:	f003 fae2 	bl	8006178 <chThdDequeueAllI>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8002bba:	06eb      	lsls	r3, r5, #27
 8002bbc:	d506      	bpl.n	8002bcc <Vector144+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002bbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002bc0:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002bc6:	b10b      	cbz	r3, 8002bcc <Vector144+0x44>
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <Vector144+0x4c>)
 8002bca:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002bd0:	f003 bd04 	b.w	80065dc <_port_irq_epilogue>
 8002bd4:	200008b0 	.word	0x200008b0
 8002bd8:	200008c0 	.word	0x200008c0

08002bdc <Vector148>:
/**
 * @brief   CAN2 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_SCE_HANDLER) {
 8002bdc:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 8002bde:	4c0f      	ldr	r4, [pc, #60]	; (8002c1c <Vector148+0x40>)
 8002be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002be2:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8002be4:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8002be6:	072a      	lsls	r2, r5, #28
 8002be8:	d50a      	bpl.n	8002c00 <Vector148+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002bea:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002bec:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002bee:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002bf6:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002bf8:	b116      	cbz	r6, 8002c00 <Vector148+0x24>
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 8002c00:	076b      	lsls	r3, r5, #29
 8002c02:	d506      	bpl.n	8002c12 <Vector148+0x36>
    uint32_t esr = canp->can->ESR;
 8002c04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 8002c06:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 8002c08:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 8002c0a:	b113      	cbz	r3, 8002c12 <Vector148+0x36>
 8002c0c:	0409      	lsls	r1, r1, #16
 8002c0e:	4803      	ldr	r0, [pc, #12]	; (8002c1c <Vector148+0x40>)
 8002c10:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002c16:	f003 bce1 	b.w	80065dc <_port_irq_epilogue>
 8002c1a:	bf00      	nop
 8002c1c:	200008b0 	.word	0x200008b0

08002c20 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 8002c20:	b538      	push	{r3, r4, r5, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 8002c22:	4c3b      	ldr	r4, [pc, #236]	; (8002d10 <can_lld_init+0xf0>)
#endif
#endif

#if STM32_CAN_USE_CAN2
  /* Driver initialization.*/
  canObjectInit(&CAND2);
 8002c24:	4d3b      	ldr	r5, [pc, #236]	; (8002d14 <can_lld_init+0xf4>)
  canObjectInit(&CAND1);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fe fd5e 	bl	80016e8 <canObjectInit>
  CAND1.can = CAN1;
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <can_lld_init+0xf8>)
 8002c2e:	62a3      	str	r3, [r4, #40]	; 0x28
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8002c30:	210b      	movs	r1, #11
 8002c32:	2013      	movs	r0, #19
 8002c34:	f7ff fb2a 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8002c38:	210b      	movs	r1, #11
 8002c3a:	2014      	movs	r0, #20
 8002c3c:	f7ff fb26 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8002c40:	210b      	movs	r1, #11
 8002c42:	2015      	movs	r0, #21
 8002c44:	f7ff fb22 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8002c48:	210b      	movs	r1, #11
 8002c4a:	2016      	movs	r0, #22
 8002c4c:	f7ff fb1e 	bl	800228c <nvicEnableVector>
  canObjectInit(&CAND2);
 8002c50:	4628      	mov	r0, r5
 8002c52:	f7fe fd49 	bl	80016e8 <canObjectInit>
  CAND2.can = CAN2;
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <can_lld_init+0xfc>)
 8002c58:	62ab      	str	r3, [r5, #40]	; 0x28
#if defined(STM32_CAN2_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN2_UNIFIED_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN2_TX_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002c5a:	210b      	movs	r1, #11
 8002c5c:	203f      	movs	r0, #63	; 0x3f
 8002c5e:	f7ff fb15 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX0_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002c62:	210b      	movs	r1, #11
 8002c64:	2040      	movs	r0, #64	; 0x40
 8002c66:	f7ff fb11 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX1_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002c6a:	210b      	movs	r1, #11
 8002c6c:	2041      	movs	r0, #65	; 0x41
 8002c6e:	f7ff fb0d 	bl	800228c <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_SCE_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 8002c72:	210b      	movs	r1, #11
 8002c74:	2042      	movs	r0, #66	; 0x42
 8002c76:	f7ff fb09 	bl	800228c <nvicEnableVector>
    rccEnableCAN1(true);
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <can_lld_init+0x100>)
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    rccEnableCAN1(true);
 8002c7e:	6c10      	ldr	r0, [r2, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002c80:	4c28      	ldr	r4, [pc, #160]	; (8002d24 <can_lld_init+0x104>)
    rccEnableCAN1(true);
 8002c82:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002c86:	6410      	str	r0, [r2, #64]	; 0x40
 8002c88:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002c8a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002c8e:	6610      	str	r0, [r2, #96]	; 0x60
 8002c90:	6e11      	ldr	r1, [r2, #96]	; 0x60
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002c92:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8002c96:	4020      	ands	r0, r4
 8002c98:	f040 0001 	orr.w	r0, r0, #1
 8002c9c:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002ca0:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002ca4:	4021      	ands	r1, r4
 8002ca6:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
    canp->can->sFilterRegister[0].FR1 = 0;
 8002caa:	2000      	movs	r0, #0
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002cac:	f041 0101 	orr.w	r1, r1, #1
    canp->can->FS1R = 1;
 8002cb0:	2401      	movs	r4, #1
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002cb2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
 8002cb6:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 8002cba:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
      canp->can->sFilterRegister[can2sb].FR1 = 0;
 8002cbe:	f8c3 02b0 	str.w	r0, [r3, #688]	; 0x2b0
      canp->can->sFilterRegister[can2sb].FR2 = 0;
 8002cc2:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
    canp->can->FM1R = 0;
 8002cc6:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 8002cca:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 8002cce:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 8002cd2:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
 8002cd6:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002cda:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002cde:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
      canp->can->FA1R |= 1 << can2sb;
 8002ce2:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002ce6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002cea:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8002cee:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002cf2:	f021 0101 	bic.w	r1, r1, #1
 8002cf6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
 8002cfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cfc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002d04:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d08:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0a:	6e13      	ldr	r3, [r2, #96]	; 0x60
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000884 	.word	0x20000884
 8002d14:	200008b0 	.word	0x200008b0
 8002d18:	40006400 	.word	0x40006400
 8002d1c:	40006800 	.word	0x40006800
 8002d20:	40023800 	.word	0x40023800
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002d28:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8002d2c:	4807      	ldr	r0, [pc, #28]	; (8002d4c <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d2e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002d30:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d32:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002d36:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002d38:	b10a      	cbz	r2, 8002d3e <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002d3a:	6880      	ldr	r0, [r0, #8]
 8002d3c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002d42:	f003 bc4b 	b.w	80065dc <_port_irq_epilogue>
 8002d46:	bf00      	nop
 8002d48:	40026000 	.word	0x40026000
 8002d4c:	200008dc 	.word	0x200008dc

08002d50 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d54:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8002d56:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d58:	0989      	lsrs	r1, r1, #6
 8002d5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002d5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8002d60:	018c      	lsls	r4, r1, #6
 8002d62:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8002d64:	b10a      	cbz	r2, 8002d6a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8002d66:	6900      	ldr	r0, [r0, #16]
 8002d68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002d6e:	f003 bc35 	b.w	80065dc <_port_irq_epilogue>
 8002d72:	bf00      	nop
 8002d74:	40026000 	.word	0x40026000
 8002d78:	200008dc 	.word	0x200008dc

08002d7c <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8002d7e:	4809      	ldr	r0, [pc, #36]	; (8002da4 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d80:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8002d82:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d84:	0c09      	lsrs	r1, r1, #16
 8002d86:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002d8a:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8002d8c:	040c      	lsls	r4, r1, #16
 8002d8e:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8002d90:	b10a      	cbz	r2, 8002d96 <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002d92:	6980      	ldr	r0, [r0, #24]
 8002d94:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002d9a:	f003 bc1f 	b.w	80065dc <_port_irq_epilogue>
 8002d9e:	bf00      	nop
 8002da0:	40026000 	.word	0x40026000
 8002da4:	200008dc 	.word	0x200008dc

08002da8 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8002daa:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002dac:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8002dae:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002db0:	0d89      	lsrs	r1, r1, #22
 8002db2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002db6:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8002db8:	058c      	lsls	r4, r1, #22
 8002dba:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8002dbc:	b10a      	cbz	r2, 8002dc2 <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002dbe:	6a00      	ldr	r0, [r0, #32]
 8002dc0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002dc6:	f003 bc09 	b.w	80065dc <_port_irq_epilogue>
 8002dca:	bf00      	nop
 8002dcc:	40026000 	.word	0x40026000
 8002dd0:	200008dc 	.word	0x200008dc

08002dd4 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002dd4:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002dda:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8002ddc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002dde:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002de2:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8002de4:	b10a      	cbz	r2, 8002dea <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8002de6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002de8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002dee:	f003 bbf5 	b.w	80065dc <_port_irq_epilogue>
 8002df2:	bf00      	nop
 8002df4:	40026000 	.word	0x40026000
 8002df8:	200008dc 	.word	0x200008dc

08002dfc <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8002dfe:	4809      	ldr	r0, [pc, #36]	; (8002e24 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e00:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8002e02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e04:	0989      	lsrs	r1, r1, #6
 8002e06:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002e0a:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8002e0c:	018c      	lsls	r4, r1, #6
 8002e0e:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8002e10:	b10a      	cbz	r2, 8002e16 <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002e12:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002e14:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002e1a:	f003 bbdf 	b.w	80065dc <_port_irq_epilogue>
 8002e1e:	bf00      	nop
 8002e20:	40026000 	.word	0x40026000
 8002e24:	200008dc 	.word	0x200008dc

08002e28 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 8002e2a:	4809      	ldr	r0, [pc, #36]	; (8002e50 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e2c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8002e2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e30:	0c09      	lsrs	r1, r1, #16
 8002e32:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002e36:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8002e38:	040c      	lsls	r4, r1, #16
 8002e3a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8002e3c:	b10a      	cbz	r2, 8002e42 <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002e3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e40:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002e46:	f003 bbc9 	b.w	80065dc <_port_irq_epilogue>
 8002e4a:	bf00      	nop
 8002e4c:	40026000 	.word	0x40026000
 8002e50:	200008dc 	.word	0x200008dc

08002e54 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e58:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8002e5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e5c:	0d89      	lsrs	r1, r1, #22
 8002e5e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002e62:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8002e64:	058c      	lsls	r4, r1, #22
 8002e66:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8002e68:	b10a      	cbz	r2, 8002e6e <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8002e6a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002e6c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002e72:	f003 bbb3 	b.w	80065dc <_port_irq_epilogue>
 8002e76:	bf00      	nop
 8002e78:	40026000 	.word	0x40026000
 8002e7c:	200008dc 	.word	0x200008dc

08002e80 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002e80:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8002e84:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e86:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8002e88:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002e8e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002e90:	b10a      	cbz	r2, 8002e96 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002e92:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002e94:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002e9a:	f003 bb9f 	b.w	80065dc <_port_irq_epilogue>
 8002e9e:	bf00      	nop
 8002ea0:	40026400 	.word	0x40026400
 8002ea4:	200008dc 	.word	0x200008dc

08002ea8 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 8002eaa:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002eac:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8002eae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002eb0:	0989      	lsrs	r1, r1, #6
 8002eb2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002eb6:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8002eb8:	018c      	lsls	r4, r1, #6
 8002eba:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8002ebc:	b10a      	cbz	r2, 8002ec2 <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002ebe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002ec0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002ec6:	f003 bb89 	b.w	80065dc <_port_irq_epilogue>
 8002eca:	bf00      	nop
 8002ecc:	40026400 	.word	0x40026400
 8002ed0:	200008dc 	.word	0x200008dc

08002ed4 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ed8:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8002eda:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002edc:	0c09      	lsrs	r1, r1, #16
 8002ede:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002ee2:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8002ee4:	040c      	lsls	r4, r1, #16
 8002ee6:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8002ee8:	b10a      	cbz	r2, 8002eee <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8002eea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002eec:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002ef2:	f003 bb73 	b.w	80065dc <_port_irq_epilogue>
 8002ef6:	bf00      	nop
 8002ef8:	40026400 	.word	0x40026400
 8002efc:	200008dc 	.word	0x200008dc

08002f00 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f04:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8002f06:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f08:	0d89      	lsrs	r1, r1, #22
 8002f0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002f0e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8002f10:	058c      	lsls	r4, r1, #22
 8002f12:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8002f14:	b10a      	cbz	r2, 8002f1a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8002f16:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8002f18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002f1e:	f003 bb5d 	b.w	80065dc <_port_irq_epilogue>
 8002f22:	bf00      	nop
 8002f24:	40026400 	.word	0x40026400
 8002f28:	200008dc 	.word	0x200008dc

08002f2c <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002f2c:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f32:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8002f34:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f36:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002f3a:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002f3c:	b10a      	cbz	r2, 8002f42 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002f3e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002f40:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002f46:	f003 bb49 	b.w	80065dc <_port_irq_epilogue>
 8002f4a:	bf00      	nop
 8002f4c:	40026400 	.word	0x40026400
 8002f50:	200008dc 	.word	0x200008dc

08002f54 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8002f56:	4809      	ldr	r0, [pc, #36]	; (8002f7c <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f58:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8002f5a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f5c:	0989      	lsrs	r1, r1, #6
 8002f5e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002f62:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8002f64:	018c      	lsls	r4, r1, #6
 8002f66:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 8002f68:	b10a      	cbz	r2, 8002f6e <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002f6a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002f6c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002f72:	f003 bb33 	b.w	80065dc <_port_irq_epilogue>
 8002f76:	bf00      	nop
 8002f78:	40026400 	.word	0x40026400
 8002f7c:	200008dc 	.word	0x200008dc

08002f80 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f84:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8002f86:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f88:	0c09      	lsrs	r1, r1, #16
 8002f8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002f8e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8002f90:	040c      	lsls	r4, r1, #16
 8002f92:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8002f94:	b10a      	cbz	r2, 8002f9a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8002f96:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002f98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002f9e:	f003 bb1d 	b.w	80065dc <_port_irq_epilogue>
 8002fa2:	bf00      	nop
 8002fa4:	40026400 	.word	0x40026400
 8002fa8:	200008dc 	.word	0x200008dc

08002fac <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8002fae:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fb0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8002fb2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fb4:	0d89      	lsrs	r1, r1, #22
 8002fb6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002fba:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8002fbc:	058c      	lsls	r4, r1, #22
 8002fbe:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002fc0:	b112      	cbz	r2, 8002fc8 <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002fc2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002fc6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002fcc:	f003 bb06 	b.w	80065dc <_port_irq_epilogue>
 8002fd0:	40026400 	.word	0x40026400
 8002fd4:	200008dc 	.word	0x200008dc

08002fd8 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8002fd8:	b4f0      	push	{r4, r5, r6, r7}
  unsigned i;

  dma.allocated_mask = 0U;
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <dmaInit+0x7c>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002fdc:	4c1e      	ldr	r4, [pc, #120]	; (8003058 <dmaInit+0x80>)
 8002fde:	491f      	ldr	r1, [pc, #124]	; (800305c <dmaInit+0x84>)
 8002fe0:	4d1f      	ldr	r5, [pc, #124]	; (8003060 <dmaInit+0x88>)
 8002fe2:	4820      	ldr	r0, [pc, #128]	; (8003064 <dmaInit+0x8c>)
 8002fe4:	4f20      	ldr	r7, [pc, #128]	; (8003068 <dmaInit+0x90>)
 8002fe6:	4e21      	ldr	r6, [pc, #132]	; (800306c <dmaInit+0x94>)
  dma.allocated_mask = 0U;
 8002fe8:	2300      	movs	r3, #0
    dma.streams[i].func = NULL;
 8002fea:	e9c2 3300 	strd	r3, r3, [r2]
 8002fee:	60d3      	str	r3, [r2, #12]
 8002ff0:	6153      	str	r3, [r2, #20]
 8002ff2:	61d3      	str	r3, [r2, #28]
 8002ff4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ff8:	6353      	str	r3, [r2, #52]	; 0x34
 8002ffa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003000:	6553      	str	r3, [r2, #84]	; 0x54
 8003002:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003004:	6653      	str	r3, [r2, #100]	; 0x64
 8003006:	66d3      	str	r3, [r2, #108]	; 0x6c
 8003008:	6753      	str	r3, [r2, #116]	; 0x74
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800300a:	3c70      	subs	r4, #112	; 0x70
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	600b      	str	r3, [r1, #0]
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	6723      	str	r3, [r4, #112]	; 0x70
 8003016:	6003      	str	r3, [r0, #0]
 8003018:	660b      	str	r3, [r1, #96]	; 0x60
 800301a:	662b      	str	r3, [r5, #96]	; 0x60
 800301c:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 8003020:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
 8003024:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8003028:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
 800302c:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
 8003030:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 8003034:	f8c1 3460 	str.w	r3, [r1, #1120]	; 0x460
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800303c:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
    dma.streams[i].func = NULL;
 8003040:	67d3      	str	r3, [r2, #124]	; 0x7c
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003042:	60a1      	str	r1, [r4, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003044:	60e1      	str	r1, [r4, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003046:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 800304a:	bcf0      	pop	{r4, r5, r6, r7}
  DMA2->HIFCR = 0xFFFFFFFFU;
 800304c:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200008dc 	.word	0x200008dc
 8003058:	40026070 	.word	0x40026070
 800305c:	40026040 	.word	0x40026040
 8003060:	40026058 	.word	0x40026058
 8003064:	40026088 	.word	0x40026088
 8003068:	40026010 	.word	0x40026010
 800306c:	40026028 	.word	0x40026028

08003070 <dmaStreamAllocI>:
    osalDbgCheck(false);
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8003070:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8003138 <dmaStreamAllocI+0xc8>
  if (id < STM32_DMA_STREAMS) {
 8003074:	280f      	cmp	r0, #15
                                          void *param) {
 8003076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (id < STM32_DMA_STREAMS) {
 8003078:	bf98      	it	ls
 800307a:	4607      	movls	r7, r0
    if ((dma.allocated_mask & mask) == 0U) {
 800307c:	f8dc 0000 	ldr.w	r0, [ip]
  if (id < STM32_DMA_STREAMS) {
 8003080:	bf98      	it	ls
 8003082:	463c      	movls	r4, r7
    uint32_t mask = (1U << i);
 8003084:	2601      	movs	r6, #1
 8003086:	fa06 f504 	lsl.w	r5, r6, r4
    if ((dma.allocated_mask & mask) == 0U) {
 800308a:	4228      	tst	r0, r5
 800308c:	d005      	beq.n	800309a <dmaStreamAllocI+0x2a>
  for (i = startid; i <= endid; i++) {
 800308e:	3401      	adds	r4, #1
 8003090:	42a7      	cmp	r7, r4
 8003092:	d2f8      	bcs.n	8003086 <dmaStreamAllocI+0x16>

      return dmastp;
    }
  }

  return NULL;
 8003094:	2700      	movs	r7, #0
}
 8003096:	4638      	mov	r0, r7
 8003098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      dma.allocated_mask  |= mask;
 800309a:	4328      	orrs	r0, r5
      dma.streams[i].func  = func;
 800309c:	eb0c 07c4 	add.w	r7, ip, r4, lsl #3
      dma.allocated_mask  |= mask;
 80030a0:	f8cc 0000 	str.w	r0, [ip]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80030a4:	4e22      	ldr	r6, [pc, #136]	; (8003130 <dmaStreamAllocI+0xc0>)
 80030a6:	ea4f 0c44 	mov.w	ip, r4, lsl #1
      dma.streams[i].param = param;
 80030aa:	e9c7 2301 	strd	r2, r3, [r7, #4]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80030ae:	f015 0fff 	tst.w	r5, #255	; 0xff
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80030b2:	eb0c 0704 	add.w	r7, ip, r4
 80030b6:	eb06 0787 	add.w	r7, r6, r7, lsl #2
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80030ba:	d009      	beq.n	80030d0 <dmaStreamAllocI+0x60>
        rccEnableDMA1(true);
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <dmaStreamAllocI+0xc4>)
 80030be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030c0:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80030c4:	6318      	str	r0, [r3, #48]	; 0x30
 80030c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030c8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80030cc:	6518      	str	r0, [r3, #80]	; 0x50
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 80030d0:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 80030d4:	d009      	beq.n	80030ea <dmaStreamAllocI+0x7a>
        rccEnableDMA2(true);
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <dmaStreamAllocI+0xc4>)
 80030d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030da:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80030de:	6318      	str	r0, [r3, #48]	; 0x30
 80030e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030e2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80030e6:	6518      	str	r0, [r3, #80]	; 0x50
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80030ea:	eb0c 0304 	add.w	r3, ip, r4
 80030ee:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80030f2:	6803      	ldr	r3, [r0, #0]
 80030f4:	f023 031f 	bic.w	r3, r3, #31
 80030f8:	6003      	str	r3, [r0, #0]
 80030fa:	6803      	ldr	r3, [r0, #0]
 80030fc:	f013 0301 	ands.w	r3, r3, #1
 8003100:	d1fb      	bne.n	80030fa <dmaStreamAllocI+0x8a>
 8003102:	4464      	add	r4, ip
 8003104:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8003108:	243d      	movs	r4, #61	; 0x3d
 800310a:	f896 c009 	ldrb.w	ip, [r6, #9]
 800310e:	6875      	ldr	r5, [r6, #4]
 8003110:	fa04 f40c 	lsl.w	r4, r4, ip
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003114:	f04f 0c21 	mov.w	ip, #33	; 0x21
      dmaStreamDisable(dmastp);
 8003118:	602c      	str	r4, [r5, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800311a:	6003      	str	r3, [r0, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800311c:	f8c0 c014 	str.w	ip, [r0, #20]
      if (func != NULL) {
 8003120:	2a00      	cmp	r2, #0
 8003122:	d0b8      	beq.n	8003096 <dmaStreamAllocI+0x26>
        nvicEnableVector(dmastp->vector, priority);
 8003124:	7af0      	ldrb	r0, [r6, #11]
 8003126:	f7ff f8b1 	bl	800228c <nvicEnableVector>
}
 800312a:	4638      	mov	r0, r7
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800312e:	bf00      	nop
 8003130:	08008464 	.word	0x08008464
 8003134:	40023800 	.word	0x40023800
 8003138:	200008dc 	.word	0x200008dc

0800313c <dmaStreamFree>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @api
 */
void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 800313c:	b510      	push	{r4, lr}
 800313e:	2320      	movs	r3, #32
 8003140:	4604      	mov	r4, r0
 8003142:	f383 8811 	msr	BASEPRI, r3
  nvicDisableVector(dmastp->vector);
 8003146:	7ac0      	ldrb	r0, [r0, #11]
 8003148:	f7ff f8ba 	bl	80022c0 <nvicDisableVector>
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 800314c:	4912      	ldr	r1, [pc, #72]	; (8003198 <dmaStreamFree+0x5c>)
 800314e:	7aa0      	ldrb	r0, [r4, #10]
 8003150:	680b      	ldr	r3, [r1, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	4082      	lsls	r2, r0
 8003156:	ea23 0302 	bic.w	r3, r3, r2
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800315a:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 800315e:	600b      	str	r3, [r1, #0]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8003160:	d109      	bne.n	8003176 <dmaStreamFree+0x3a>
    rccDisableDMA1();
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <dmaStreamFree+0x60>)
 8003164:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003166:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 800316a:	6311      	str	r1, [r2, #48]	; 0x30
 800316c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800316e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8003172:	6511      	str	r1, [r2, #80]	; 0x50
 8003174:	6d12      	ldr	r2, [r2, #80]	; 0x50
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8003176:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800317a:	d109      	bne.n	8003190 <dmaStreamFree+0x54>
    rccDisableDMA2();
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <dmaStreamFree+0x60>)
 800317e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003180:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
 8003186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003188:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800318c:	651a      	str	r2, [r3, #80]	; 0x50
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	2300      	movs	r3, #0
 8003192:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  dmaStreamFreeI(dmastp);
  osalSysUnlock();
}
 8003196:	bd10      	pop	{r4, pc}
 8003198:	200008dc 	.word	0x200008dc
 800319c:	40023800 	.word	0x40023800

080031a0 <_pal_lld_init>:
  tqp->next = (thread_t *)tqp;
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <_pal_lld_init+0x84>)
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 80031a2:	b430      	push	{r4, r5}
 80031a4:	f103 0018 	add.w	r0, r3, #24
 80031a8:	f103 0508 	add.w	r5, r3, #8
 80031ac:	f103 0410 	add.w	r4, r3, #16
 80031b0:	f103 0120 	add.w	r1, r3, #32
 80031b4:	f103 0228 	add.w	r2, r3, #40	; 0x28
  tqp->prev = (thread_t *)tqp;
 80031b8:	e9c3 5502 	strd	r5, r5, [r3, #8]
 80031bc:	e9c3 4404 	strd	r4, r4, [r3, #16]
  tqp->next = (thread_t *)tqp;
 80031c0:	f103 0530 	add.w	r5, r3, #48	; 0x30
 80031c4:	f103 0438 	add.w	r4, r3, #56	; 0x38
  tqp->prev = (thread_t *)tqp;
 80031c8:	e9c3 0006 	strd	r0, r0, [r3, #24]
 80031cc:	e9c3 1108 	strd	r1, r1, [r3, #32]
  tqp->next = (thread_t *)tqp;
 80031d0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80031d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
  tqp->prev = (thread_t *)tqp;
 80031d8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  tqp->next = (thread_t *)tqp;
 80031dc:	f103 0250 	add.w	r2, r3, #80	; 0x50
  tqp->prev = (thread_t *)tqp;
 80031e0:	e9c3 550c 	strd	r5, r5, [r3, #48]	; 0x30
 80031e4:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
  tqp->next = (thread_t *)tqp;
 80031e8:	f103 0558 	add.w	r5, r3, #88	; 0x58
 80031ec:	f103 0460 	add.w	r4, r3, #96	; 0x60
  tqp->prev = (thread_t *)tqp;
 80031f0:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
 80031f4:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
 80031f8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 80031fc:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003200:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8003204:	f103 0278 	add.w	r2, r3, #120	; 0x78
  tqp->prev = (thread_t *)tqp;
 8003208:	e9c3 5516 	strd	r5, r5, [r3, #88]	; 0x58
 800320c:	e9c3 4418 	strd	r4, r4, [r3, #96]	; 0x60
 8003210:	e9c3 3300 	strd	r3, r3, [r3]
 8003214:	e9c3 001a 	strd	r0, r0, [r3, #104]	; 0x68
 8003218:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
 800321c:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8003220:	bc30      	pop	{r4, r5}
 8003222:	4770      	bx	lr
 8003224:	20000960 	.word	0x20000960

08003228 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800322c:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8003230:	f3c2 0e80 	ubfx	lr, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8003234:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8003238:	f3c2 1741 	ubfx	r7, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800323c:	46c8      	mov	r8, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800323e:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 8003242:	2600      	movs	r6, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8003244:	f04f 0a01 	mov.w	sl, #1
 8003248:	e016      	b.n	8003278 <_pal_lld_setgroupmode+0x50>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800324a:	f8d0 b000 	ldr.w	fp, [r0]
 800324e:	ea03 030b 	and.w	r3, r3, fp
 8003252:	ea43 0308 	orr.w	r3, r3, r8
        if (bit < 8)
 8003256:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8003258:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 800325a:	d844      	bhi.n	80032e6 <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800325c:	6a03      	ldr	r3, [r0, #32]
 800325e:	401d      	ands	r5, r3
 8003260:	432c      	orrs	r4, r5
 8003262:	6204      	str	r4, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8003264:	0849      	lsrs	r1, r1, #1
 8003266:	d03c      	beq.n	80032e2 <_pal_lld_setgroupmode+0xba>
      return;
    otyper <<= 1;
 8003268:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    ospeedr <<= 2;
 800326c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8003270:	00bf      	lsls	r7, r7, #2
    moder <<= 2;
 8003272:	ea4f 0888 	mov.w	r8, r8, lsl #2
    bit++;
 8003276:	3601      	adds	r6, #1
    if ((mask & 1) != 0) {
 8003278:	07cb      	lsls	r3, r1, #31
 800327a:	d5f3      	bpl.n	8003264 <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800327c:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 800327e:	fa0a f406 	lsl.w	r4, sl, r6
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8003282:	ea23 0304 	bic.w	r3, r3, r4
 8003286:	ea43 030e 	orr.w	r3, r3, lr
 800328a:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 800328c:	2503      	movs	r5, #3
 800328e:	0073      	lsls	r3, r6, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003290:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8003292:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003296:	43db      	mvns	r3, r3
 8003298:	401c      	ands	r4, r3
 800329a:	ea44 040c 	orr.w	r4, r4, ip
 800329e:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80032a0:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80032a2:	f006 0407 	and.w	r4, r6, #7
 80032a6:	00a4      	lsls	r4, r4, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80032a8:	401d      	ands	r5, r3
      m4 = 15 << ((bit & 7) * 4);
 80032aa:	f04f 0b0f 	mov.w	fp, #15
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80032ae:	433d      	orrs	r5, r7
      m4 = 15 << ((bit & 7) * 4);
 80032b0:	fa0b fb04 	lsl.w	fp, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80032b4:	f1b9 0f02 	cmp.w	r9, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80032b8:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80032ba:	fa02 f404 	lsl.w	r4, r2, r4
 80032be:	ea6f 050b 	mvn.w	r5, fp
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80032c2:	d1c2      	bne.n	800324a <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 80032c4:	2e07      	cmp	r6, #7
 80032c6:	d813      	bhi.n	80032f0 <_pal_lld_setgroupmode+0xc8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80032c8:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80032cc:	ea0b 0505 	and.w	r5, fp, r5
 80032d0:	432c      	orrs	r4, r5
 80032d2:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80032d4:	6804      	ldr	r4, [r0, #0]
 80032d6:	4023      	ands	r3, r4
 80032d8:	ea43 0308 	orr.w	r3, r3, r8
    if (!mask)
 80032dc:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80032de:	6003      	str	r3, [r0, #0]
    if (!mask)
 80032e0:	d1c2      	bne.n	8003268 <_pal_lld_setgroupmode+0x40>
  }
}
 80032e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80032e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032e8:	401d      	ands	r5, r3
 80032ea:	432c      	orrs	r4, r5
 80032ec:	6244      	str	r4, [r0, #36]	; 0x24
 80032ee:	e7b9      	b.n	8003264 <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80032f0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80032f4:	ea0b 0505 	and.w	r5, fp, r5
 80032f8:	432c      	orrs	r4, r5
 80032fa:	6244      	str	r4, [r0, #36]	; 0x24
 80032fc:	e7ea      	b.n	80032d4 <_pal_lld_setgroupmode+0xac>
 80032fe:	bf00      	nop

08003300 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003300:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8003308:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800330a:	d112      	bne.n	8003332 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800330c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800330e:	680a      	ldr	r2, [r1, #0]
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	f023 031f 	bic.w	r3, r3, #31
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	07db      	lsls	r3, r3, #31
 800331c:	d4fc      	bmi.n	8003318 <i2c_lld_serve_tx_end_irq+0x18>
 800331e:	7a48      	ldrb	r0, [r1, #9]
 8003320:	684a      	ldr	r2, [r1, #4]
 8003322:	233d      	movs	r3, #61	; 0x3d
 8003324:	4083      	lsls	r3, r0
 8003326:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003328:	6863      	ldr	r3, [r4, #4]
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6063      	str	r3, [r4, #4]
}
 8003330:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8003332:	4802      	ldr	r0, [pc, #8]	; (800333c <i2c_lld_serve_tx_end_irq+0x3c>)
 8003334:	f002 fc1a 	bl	8005b6c <chSysHalt>
 8003338:	e7e8      	b.n	800330c <i2c_lld_serve_tx_end_irq+0xc>
 800333a:	bf00      	nop
 800333c:	08008524 	.word	0x08008524

08003340 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003340:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8003348:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800334a:	d125      	bne.n	8003398 <i2c_lld_serve_rx_end_irq+0x58>
  dmaStreamDisable(i2cp->dmarx);
 800334c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	f021 011f 	bic.w	r1, r1, #31
 8003356:	6019      	str	r1, [r3, #0]
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	f014 0401 	ands.w	r4, r4, #1
 800335e:	d1fb      	bne.n	8003358 <i2c_lld_serve_rx_end_irq+0x18>
 8003360:	7a51      	ldrb	r1, [r2, #9]
 8003362:	6852      	ldr	r2, [r2, #4]
 8003364:	233d      	movs	r3, #61	; 0x3d
 8003366:	408b      	lsls	r3, r1
 8003368:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800336a:	686b      	ldr	r3, [r5, #4]
 800336c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003370:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003378:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	2320      	movs	r3, #32
 8003384:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8003388:	f106 001c 	add.w	r0, r6, #28
 800338c:	4621      	mov	r1, r4
 800338e:	f002 fec5 	bl	800611c <chThdResumeI>
 8003392:	f384 8811 	msr	BASEPRI, r4
}
 8003396:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <i2c_lld_serve_rx_end_irq+0x60>)
 800339a:	f002 fbe7 	bl	8005b6c <chSysHalt>
 800339e:	e7d5      	b.n	800334c <i2c_lld_serve_rx_end_irq+0xc>
 80033a0:	08008524 	.word	0x08008524

080033a4 <VectorC4>:
  I2C_TypeDef *dp = i2cp->i2c;
 80033a4:	4839      	ldr	r0, [pc, #228]	; (800348c <VectorC4+0xe8>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80033a6:	4a3a      	ldr	r2, [pc, #232]	; (8003490 <VectorC4+0xec>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 80033a8:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80033aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80033ac:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80033ae:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80033b0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80033b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d050      	beq.n	800345e <VectorC4+0xba>
 80033bc:	d822      	bhi.n	8003404 <VectorC4+0x60>
 80033be:	3a07      	subs	r2, #7
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d040      	beq.n	8003446 <VectorC4+0xa2>
 80033c4:	3201      	adds	r2, #1
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d114      	bne.n	80033f4 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80033ca:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80033cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80033ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80033d2:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80033d4:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033e4:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d803      	bhi.n	80033f4 <VectorC4+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f2:	6023      	str	r3, [r4, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80033f4:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80033f8:	bf18      	it	ne
 80033fa:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 80033fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8003400:	f003 b8ec 	b.w	80065dc <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003404:	4a23      	ldr	r2, [pc, #140]	; (8003494 <VectorC4+0xf0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d012      	beq.n	8003430 <VectorC4+0x8c>
 800340a:	3202      	adds	r2, #2
 800340c:	4293      	cmp	r3, r2
 800340e:	d1f1      	bne.n	80033f4 <VectorC4+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8003410:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685e      	ldr	r6, [r3, #4]
 8003416:	b33e      	cbz	r6, 8003468 <VectorC4+0xc4>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003418:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800341a:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800341c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003426:	6023      	str	r3, [r4, #0]
}
 8003428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800342c:	f003 b8d6 	b.w	80065dc <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003430:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003432:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8003438:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800343a:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e7d6      	b.n	80033f4 <VectorC4+0x50>
    if ((i2cp->addr >> 8) > 0) { 
 8003446:	8c03      	ldrh	r3, [r0, #32]
 8003448:	0a1a      	lsrs	r2, r3, #8
 800344a:	d00b      	beq.n	8003464 <VectorC4+0xc0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003454:	f002 0206 	and.w	r2, r2, #6
 8003458:	4313      	orrs	r3, r2
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	e7ca      	b.n	80033f4 <VectorC4+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800345e:	8c03      	ldrh	r3, [r0, #32]
 8003460:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003464:	6123      	str	r3, [r4, #16]
 8003466:	e7c5      	b.n	80033f4 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346e:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2320      	movs	r3, #32
 800347a:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800347e:	301c      	adds	r0, #28
 8003480:	4631      	mov	r1, r6
 8003482:	f002 fe4b 	bl	800611c <chThdResumeI>
 8003486:	f386 8811 	msr	BASEPRI, r6
 800348a:	e7b3      	b.n	80033f4 <VectorC4+0x50>
 800348c:	200009e0 	.word	0x200009e0
 8003490:	00030008 	.word	0x00030008
 8003494:	00070082 	.word	0x00070082

08003498 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8003498:	4835      	ldr	r0, [pc, #212]	; (8003570 <VectorC8+0xd8>)
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800349a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 800349c:	e9d0 750c 	ldrd	r7, r5, [r0, #48]	; 0x30
  uint16_t sr = I2CD2.i2c->SR1;
 80034a0:	696c      	ldr	r4, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 80034a2:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80034a4:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 80034a8:	43db      	mvns	r3, r3
 80034aa:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	f023 031f 	bic.w	r3, r3, #31
 80034b2:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD2.i2c->SR1;
 80034b4:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	07db      	lsls	r3, r3, #31
 80034ba:	d4fc      	bmi.n	80034b6 <VectorC8+0x1e>
 80034bc:	7a7a      	ldrb	r2, [r7, #9]
  dmaStreamDisable(i2cp->dmarx);
 80034be:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80034c0:	687f      	ldr	r7, [r7, #4]
 80034c2:	233d      	movs	r3, #61	; 0x3d
 80034c4:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 80034c6:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 80034c8:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	f023 031f 	bic.w	r3, r3, #31
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	6813      	ldr	r3, [r2, #0]
 80034d4:	07df      	lsls	r7, r3, #31
 80034d6:	d4fc      	bmi.n	80034d2 <VectorC8+0x3a>
 80034d8:	7a77      	ldrb	r7, [r6, #9]
 80034da:	6872      	ldr	r2, [r6, #4]
 80034dc:	233d      	movs	r3, #61	; 0x3d
 80034de:	40bb      	lsls	r3, r7
 80034e0:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80034e2:	f411 7380 	ands.w	r3, r1, #256	; 0x100
 80034e6:	d133      	bne.n	8003550 <VectorC8+0xb8>
  i2cp->errors = I2C_NO_ERROR;
 80034e8:	6083      	str	r3, [r0, #8]
 80034ea:	2202      	movs	r2, #2
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80034ec:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80034ee:	bf44      	itt	mi
 80034f0:	6082      	strmi	r2, [r0, #8]
 80034f2:	4613      	movmi	r3, r2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80034f4:	054f      	lsls	r7, r1, #21
 80034f6:	d50a      	bpl.n	800350e <VectorC8+0x76>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80034f8:	686a      	ldr	r2, [r5, #4]
 80034fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034fe:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003500:	682a      	ldr	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003502:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350a:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800350c:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800350e:	050e      	lsls	r6, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8003510:	bf44      	itt	mi
 8003512:	f043 0308 	orrmi.w	r3, r3, #8
 8003516:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003518:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800351a:	bf44      	itt	mi
 800351c:	f043 0320 	orrmi.w	r3, r3, #32
 8003520:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003522:	04ca      	lsls	r2, r1, #19
 8003524:	b224      	sxth	r4, r4
 8003526:	d517      	bpl.n	8003558 <VectorC8+0xc0>
    i2cp->errors |= I2C_PEC_ERROR;
 8003528:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800352c:	2c00      	cmp	r4, #0
    i2cp->errors |= I2C_PEC_ERROR;
 800352e:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003530:	db1a      	blt.n	8003568 <VectorC8+0xd0>
 8003532:	2320      	movs	r3, #32
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f06f 0101 	mvn.w	r1, #1
 800353c:	480d      	ldr	r0, [pc, #52]	; (8003574 <VectorC8+0xdc>)
 800353e:	f002 fded 	bl	800611c <chThdResumeI>
 8003542:	2300      	movs	r3, #0
 8003544:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800354c:	f003 b846 	b.w	80065dc <_port_irq_epilogue>
    i2cp->errors |= I2C_BUS_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	6083      	str	r3, [r0, #8]
 8003554:	2203      	movs	r2, #3
 8003556:	e7c9      	b.n	80034ec <VectorC8+0x54>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003558:	2c00      	cmp	r4, #0
 800355a:	db05      	blt.n	8003568 <VectorC8+0xd0>
  if (i2cp->errors != I2C_NO_ERROR)
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e8      	bne.n	8003532 <VectorC8+0x9a>
}
 8003560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8003564:	f003 b83a 	b.w	80065dc <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8003568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356c:	6083      	str	r3, [r0, #8]
 800356e:	e7e0      	b.n	8003532 <VectorC8+0x9a>
 8003570:	200009e0 	.word	0x200009e0
 8003574:	200009fc 	.word	0x200009fc

08003578 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8003578:	b510      	push	{r4, lr}
  I2CD1.dmarx  = NULL;
  I2CD1.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800357a:	4c05      	ldr	r4, [pc, #20]	; (8003590 <i2c_lld_init+0x18>)
 800357c:	4620      	mov	r0, r4
 800357e:	f7fe f8c9 	bl	8001714 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <i2c_lld_init+0x1c>)
 8003584:	6363      	str	r3, [r4, #52]	; 0x34
  I2CD2.thread = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61e3      	str	r3, [r4, #28]
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 800358a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 800358e:	bd10      	pop	{r4, pc}
 8003590:	200009e0 	.word	0x200009e0
 8003594:	40005800 	.word	0x40005800

08003598 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800359a:	7803      	ldrb	r3, [r0, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 800359c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if (i2cp->state == I2C_STOP) {
 800359e:	2b01      	cmp	r3, #1
void i2c_lld_start(I2CDriver *i2cp) {
 80035a0:	4605      	mov	r5, r0
  if (i2cp->state == I2C_STOP) {
 80035a2:	d03c      	beq.n	800361e <i2c_lld_start+0x86>
  I2C_TypeDef *dp = i2cp->i2c;
 80035a4:	4623      	mov	r3, r4
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80035a6:	e9d5 120b 	ldrd	r1, r2, [r5, #44]	; 0x2c
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 80035aa:	6868      	ldr	r0, [r5, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80035ac:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80035ae:	f8d2 c000 	ldr.w	ip, [r2]
  int32_t clock_speed = i2cp->config->clock_speed;
 80035b2:	6841      	ldr	r1, [r0, #4]
  if (clock_speed <= 100000) {
 80035b4:	4e4e      	ldr	r6, [pc, #312]	; (80036f0 <i2c_lld_start+0x158>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80035b6:	f104 0210 	add.w	r2, r4, #16
 80035ba:	60ba      	str	r2, [r7, #8]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80035bc:	f44f 6510 	mov.w	r5, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80035c0:	f8cc 2008 	str.w	r2, [ip, #8]
  dp->CR1 = I2C_CR1_SWRST;
 80035c4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 80035c8:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 80035ca:	6027      	str	r7, [r4, #0]
  dp->CR1 = 0;
 80035cc:	6022      	str	r2, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80035ce:	6065      	str	r5, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80035d0:	685d      	ldr	r5, [r3, #4]
 80035d2:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 80035d6:	403d      	ands	r5, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80035d8:	7a07      	ldrb	r7, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80035da:	605d      	str	r5, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80035dc:	685d      	ldr	r5, [r3, #4]
  if (clock_speed <= 100000) {
 80035de:	42b1      	cmp	r1, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80035e0:	f045 052a 	orr.w	r5, r5, #42	; 0x2a
 80035e4:	605d      	str	r5, [r3, #4]
  if (clock_speed <= 100000) {
 80035e6:	dd59      	ble.n	800369c <i2c_lld_start+0x104>
  else if (clock_speed <= 400000) {
 80035e8:	4d42      	ldr	r5, [pc, #264]	; (80036f4 <i2c_lld_start+0x15c>)
 80035ea:	42a9      	cmp	r1, r5
 80035ec:	dc07      	bgt.n	80035fe <i2c_lld_start+0x66>
    if (duty == FAST_DUTY_CYCLE_2) {
 80035ee:	2f02      	cmp	r7, #2
 80035f0:	d066      	beq.n	80036c0 <i2c_lld_start+0x128>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 80035f2:	2f03      	cmp	r7, #3
 80035f4:	d06f      	beq.n	80036d6 <i2c_lld_start+0x13e>
 80035f6:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80035fa:	210d      	movs	r1, #13
 80035fc:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 80035fe:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 8003600:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 8003602:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8003604:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8003606:	b292      	uxth	r2, r2
  switch (opmode) {
 8003608:	d054      	beq.n	80036b4 <i2c_lld_start+0x11c>
 800360a:	2903      	cmp	r1, #3
 800360c:	d04f      	beq.n	80036ae <i2c_lld_start+0x116>
 800360e:	2901      	cmp	r1, #1
 8003610:	d040      	beq.n	8003694 <i2c_lld_start+0xfc>
  dp->CR1 = regCR1;
 8003612:	601a      	str	r2, [r3, #0]
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6023      	str	r3, [r4, #0]
}
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&I2CD2 == i2cp) {
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <i2c_lld_start+0x160>)
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003620:	f240 4216 	movw	r2, #1046	; 0x416
 8003624:	f240 4156 	movw	r1, #1110	; 0x456
    if (&I2CD2 == i2cp) {
 8003628:	4298      	cmp	r0, r3
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800362a:	e9c0 2109 	strd	r2, r1, [r0, #36]	; 0x24
    if (&I2CD2 == i2cp) {
 800362e:	d1b9      	bne.n	80035a4 <i2c_lld_start+0xc>
      rccResetI2C2();
 8003630:	4e32      	ldr	r6, [pc, #200]	; (80036fc <i2c_lld_start+0x164>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8003632:	4a33      	ldr	r2, [pc, #204]	; (8003700 <i2c_lld_start+0x168>)
      rccResetI2C2();
 8003634:	6a33      	ldr	r3, [r6, #32]
 8003636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800363a:	6233      	str	r3, [r6, #32]
 800363c:	6a33      	ldr	r3, [r6, #32]
 800363e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003642:	6233      	str	r3, [r6, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8003644:	2103      	movs	r1, #3
 8003646:	4603      	mov	r3, r0
 8003648:	2002      	movs	r0, #2
      rccResetI2C2();
 800364a:	6a37      	ldr	r7, [r6, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 800364c:	f7ff fd10 	bl	8003070 <dmaStreamAllocI>
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <i2c_lld_start+0x16c>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8003652:	62e8      	str	r0, [r5, #44]	; 0x2c
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8003654:	462b      	mov	r3, r5
 8003656:	2103      	movs	r1, #3
 8003658:	2007      	movs	r0, #7
 800365a:	f7ff fd09 	bl	8003070 <dmaStreamAllocI>
      rccEnableI2C2(true);
 800365e:	6c33      	ldr	r3, [r6, #64]	; 0x40
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8003660:	6328      	str	r0, [r5, #48]	; 0x30
      rccEnableI2C2(true);
 8003662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003666:	6433      	str	r3, [r6, #64]	; 0x40
 8003668:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800366a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800366e:	6633      	str	r3, [r6, #96]	; 0x60
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8003670:	2103      	movs	r1, #3
 8003672:	2021      	movs	r0, #33	; 0x21
      rccEnableI2C2(true);
 8003674:	6e33      	ldr	r3, [r6, #96]	; 0x60
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8003676:	f7fe fe09 	bl	800228c <nvicEnableVector>
      nvicEnableVector(I2C2_ER_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 800367a:	2103      	movs	r1, #3
 800367c:	2022      	movs	r0, #34	; 0x22
 800367e:	f7fe fe05 	bl	800228c <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8003682:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003684:	4820      	ldr	r0, [pc, #128]	; (8003708 <i2c_lld_start+0x170>)
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8003686:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003688:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 800368a:	4301      	orrs	r1, r0
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 800368c:	4302      	orrs	r2, r0
 800368e:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
 8003692:	e788      	b.n	80035a6 <i2c_lld_start+0xe>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003694:	f022 020a 	bic.w	r2, r2, #10
 8003698:	b292      	uxth	r2, r2
 800369a:	e7ba      	b.n	8003612 <i2c_lld_start+0x7a>
    dp->TRISE = I2C_CLK_FREQ + 1;
 800369c:	252b      	movs	r5, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 800369e:	0049      	lsls	r1, r1, #1
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <i2c_lld_start+0x174>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 80036a2:	621d      	str	r5, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80036a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80036a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80036ac:	e7a7      	b.n	80035fe <i2c_lld_start+0x66>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80036ae:	f042 020a 	orr.w	r2, r2, #10
 80036b2:	e7ae      	b.n	8003612 <i2c_lld_start+0x7a>
 80036b4:	f022 0208 	bic.w	r2, r2, #8
 80036b8:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80036ba:	f042 0202 	orr.w	r2, r2, #2
 80036be:	e7a8      	b.n	8003612 <i2c_lld_start+0x7a>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80036c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <i2c_lld_start+0x174>)
 80036c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80036ca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80036ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036d2:	b292      	uxth	r2, r2
 80036d4:	e791      	b.n	80035fa <i2c_lld_start+0x62>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 80036d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80036da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <i2c_lld_start+0x174>)
 80036e0:	fbb2 f2f1 	udiv	r2, r2, r1
 80036e4:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 80036e8:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 80036ec:	b292      	uxth	r2, r2
 80036ee:	e784      	b.n	80035fa <i2c_lld_start+0x62>
 80036f0:	000186a0 	.word	0x000186a0
 80036f4:	00061a80 	.word	0x00061a80
 80036f8:	200009e0 	.word	0x200009e0
 80036fc:	40023800 	.word	0x40023800
 8003700:	08003341 	.word	0x08003341
 8003704:	08003301 	.word	0x08003301
 8003708:	0e030000 	.word	0x0e030000
 800370c:	0280de80 	.word	0x0280de80

08003710 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8003710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003714:	0049      	lsls	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 8003716:	2500      	movs	r5, #0
                                      sysinterval_t timeout) {
 8003718:	4616      	mov	r6, r2
 800371a:	469e      	mov	lr, r3
  i2cp->addr = (addr << 1);
 800371c:	8401      	strh	r1, [r0, #32]
  I2C_TypeDef *dp = i2cp->i2c;
 800371e:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8003720:	6085      	str	r5, [r0, #8]
                                      sysinterval_t timeout) {
 8003722:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003726:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800372a:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800372e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8003730:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003732:	f8d7 c000 	ldr.w	ip, [r7]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003736:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8003738:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 800373c:	683f      	ldr	r7, [r7, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800373e:	f8cc 1000 	str.w	r1, [ip]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8003742:	f8cc 600c 	str.w	r6, [ip, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8003746:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 800374a:	f8cc e004 	str.w	lr, [ip, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800374e:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8003752:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8003758:	462a      	mov	r2, r5
 800375a:	4635      	mov	r5, r6
 800375c:	2620      	movs	r6, #32
 800375e:	e001      	b.n	8003764 <i2c_lld_master_transmit_timeout+0x54>
 8003760:	f382 8811 	msr	BASEPRI, r2
 8003764:	f386 8811 	msr	BASEPRI, r6
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8003768:	69a3      	ldr	r3, [r4, #24]
 800376a:	0799      	lsls	r1, r3, #30
 800376c:	d402      	bmi.n	8003774 <i2c_lld_master_transmit_timeout+0x64>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	059b      	lsls	r3, r3, #22
 8003772:	d507      	bpl.n	8003784 <i2c_lld_master_transmit_timeout+0x74>
 8003774:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8003776:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end))
 8003778:	2b09      	cmp	r3, #9
 800377a:	d9f1      	bls.n	8003760 <i2c_lld_master_transmit_timeout+0x50>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 800377c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378a:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return chThdSuspendTimeoutS(trp, timeout);
 8003792:	4641      	mov	r1, r8
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	301c      	adds	r0, #28
}
 8003798:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800379c:	f002 bcb0 	b.w	8006100 <chThdSuspendTimeoutS>

080037a0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 80037a4:	4cba      	ldr	r4, [pc, #744]	; (8003a90 <Vector14C+0x2f0>)
 80037a6:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 80037aa:	f8da 2014 	ldr.w	r2, [sl, #20]
  sts &= otgp->GINTMSK;
 80037ae:	f8da 3018 	ldr.w	r3, [sl, #24]
 80037b2:	ea02 0b03 	and.w	fp, r2, r3
  if (sts & GINTSTS_USBRST) {
 80037b6:	f41b 5580 	ands.w	r5, fp, #4096	; 0x1000
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 80037ba:	b085      	sub	sp, #20
  otgp->GINTSTS = sts;
 80037bc:	f8ca b014 	str.w	fp, [sl, #20]
  if (sts & GINTSTS_USBRST) {
 80037c0:	f040 815e 	bne.w	8003a80 <Vector14C+0x2e0>
  if (sts & GINTSTS_WKUPINT) {
 80037c4:	f1bb 0f00 	cmp.w	fp, #0
 80037c8:	db4c      	blt.n	8003864 <Vector14C+0xc4>
  if (sts & GINTSTS_USBSUSP) {
 80037ca:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 80037ce:	f040 8123 	bne.w	8003a18 <Vector14C+0x278>
  if (sts & GINTSTS_ENUMDNE) {
 80037d2:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 80037d6:	d00e      	beq.n	80037f6 <Vector14C+0x56>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 80037d8:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 80037dc:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80037e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80037e4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80037e8:	bf0c      	ite	eq
 80037ea:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80037ee:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 80037f2:	f8ca 300c 	str.w	r3, [sl, #12]
  if (sts & GINTSTS_SOF) {
 80037f6:	f01b 0f08 	tst.w	fp, #8
 80037fa:	d004      	beq.n	8003806 <Vector14C+0x66>
    _usb_isr_invoke_sof_cb(usbp);
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	b10b      	cbz	r3, 8003806 <Vector14C+0x66>
 8003802:	48a3      	ldr	r0, [pc, #652]	; (8003a90 <Vector14C+0x2f0>)
 8003804:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8003806:	f41b 1f80 	tst.w	fp, #1048576	; 0x100000
 800380a:	d179      	bne.n	8003900 <Vector14C+0x160>
  if (sts & GINTSTS_IISOOXFR) {
 800380c:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 8003810:	f040 810a 	bne.w	8003a28 <Vector14C+0x288>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8003814:	f01b 0f10 	tst.w	fp, #16
 8003818:	d13b      	bne.n	8003892 <Vector14C+0xf2>
  if (sts & GINTSTS_OEPINT) {
 800381a:	f41b 2f00 	tst.w	fp, #524288	; 0x80000
  src = otgp->DAINT;
 800381e:	f8da 5818 	ldr.w	r5, [sl, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8003822:	d00b      	beq.n	800383c <Vector14C+0x9c>
    if (src & (1 << 16))
 8003824:	03e9      	lsls	r1, r5, #15
 8003826:	f100 8360 	bmi.w	8003eea <Vector14C+0x74a>
    if (src & (1 << 17))
 800382a:	03a9      	lsls	r1, r5, #14
 800382c:	f100 8338 	bmi.w	8003ea0 <Vector14C+0x700>
    if (src & (1 << 18))
 8003830:	0369      	lsls	r1, r5, #13
 8003832:	f100 8310 	bmi.w	8003e56 <Vector14C+0x6b6>
    if (src & (1 << 19))
 8003836:	0329      	lsls	r1, r5, #12
 8003838:	f100 818b 	bmi.w	8003b52 <Vector14C+0x3b2>
  if (sts & GINTSTS_IEPINT) {
 800383c:	f41b 2f80 	tst.w	fp, #262144	; 0x40000
 8003840:	d00b      	beq.n	800385a <Vector14C+0xba>
    if (src & (1 << 0))
 8003842:	07e9      	lsls	r1, r5, #31
 8003844:	f100 823f 	bmi.w	8003cc6 <Vector14C+0x526>
    if (src & (1 << 1))
 8003848:	07a9      	lsls	r1, r5, #30
 800384a:	f100 81d9 	bmi.w	8003c00 <Vector14C+0x460>
    if (src & (1 << 2))
 800384e:	0769      	lsls	r1, r5, #29
 8003850:	f100 829e 	bmi.w	8003d90 <Vector14C+0x5f0>
    if (src & (1 << 3))
 8003854:	072d      	lsls	r5, r5, #28
 8003856:	f100 811d 	bmi.w	8003a94 <Vector14C+0x2f4>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800385a:	b005      	add	sp, #20
 800385c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8003860:	f002 bebc 	b.w	80065dc <_port_irq_epilogue>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8003864:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8003868:	079a      	lsls	r2, r3, #30
 800386a:	d005      	beq.n	8003878 <Vector14C+0xd8>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800386c:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8003870:	f023 0303 	bic.w	r3, r3, #3
 8003874:	f8ca 3e00 	str.w	r3, [sl, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
 8003878:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 800387c:	4884      	ldr	r0, [pc, #528]	; (8003a90 <Vector14C+0x2f0>)
    otgp->DCTL &= ~DCTL_RWUSIG;
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 8003886:	f7fe fa87 	bl	8001d98 <_usb_wakeup>
  if (sts & GINTSTS_USBSUSP) {
 800388a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 800388e:	d0a0      	beq.n	80037d2 <Vector14C+0x32>
 8003890:	e0c2      	b.n	8003a18 <Vector14C+0x278>
  sts = usbp->otg->GRXSTSP;
 8003892:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003894:	6a2b      	ldr	r3, [r5, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003896:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 800389a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800389e:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 80038a2:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80038a6:	f000 8179 	beq.w	8003b9c <Vector14C+0x3fc>
 80038aa:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80038ae:	d1b4      	bne.n	800381a <Vector14C+0x7a>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 80038b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	6a1e      	ldr	r6, [r3, #32]
  while (i < n) {
 80038b8:	2a00      	cmp	r2, #0
 80038ba:	d0ae      	beq.n	800381a <Vector14C+0x7a>
 80038bc:	1e53      	subs	r3, r2, #1
 80038be:	2b07      	cmp	r3, #7
 80038c0:	bf28      	it	cs
 80038c2:	2307      	movcs	r3, #7
  uint32_t w = 0;
 80038c4:	2000      	movs	r0, #0
 80038c6:	3301      	adds	r3, #1
  size_t i = 0;
 80038c8:	4601      	mov	r1, r0
      w = *fifop;
 80038ca:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 80038ce:	f011 0f03 	tst.w	r1, #3
 80038d2:	f040 8185 	bne.w	8003be0 <Vector14C+0x440>
      w = *fifop;
 80038d6:	6838      	ldr	r0, [r7, #0]
      *buf++ = (uint8_t)w;
 80038d8:	f806 0b01 	strb.w	r0, [r6], #1
    i++;
 80038dc:	3101      	adds	r1, #1
  while (i < n) {
 80038de:	428b      	cmp	r3, r1
      w >>= 8;
 80038e0:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 80038e4:	d1f3      	bne.n	80038ce <Vector14C+0x12e>
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d997      	bls.n	800381a <Vector14C+0x7a>
      w = *fifop;
 80038ea:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 80038ee:	f013 0f03 	tst.w	r3, #3
    i++;
 80038f2:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 80038f6:	bf08      	it	eq
 80038f8:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d1f7      	bne.n	80038ee <Vector14C+0x14e>
 80038fe:	e78c      	b.n	800381a <Vector14C+0x7a>
  stm32_otg_t *otgp = usbp->otg;
 8003900:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003904:	f04f 0900 	mov.w	r9, #0
      _usb_isr_invoke_in_cb(usbp, ep);
 8003908:	e9cd ab00 	strd	sl, fp, [sp]
 800390c:	e009      	b.n	8003922 <Vector14C+0x182>
 800390e:	f109 0c01 	add.w	ip, r9, #1
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	fa5f f98c 	uxtb.w	r9, ip
 800391a:	4599      	cmp	r9, r3
 800391c:	464d      	mov	r5, r9
 800391e:	f200 8168 	bhi.w	8003bf2 <Vector14C+0x452>
 8003922:	eb08 1249 	add.w	r2, r8, r9, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003926:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800392a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800392e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003932:	d1ec      	bne.n	800390e <Vector14C+0x16e>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8003934:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	dae8      	bge.n	800390e <Vector14C+0x16e>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 800393c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003940:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8003944:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8003948:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800394c:	2b00      	cmp	r3, #0
 800394e:	dbfb      	blt.n	8003948 <Vector14C+0x1a8>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003950:	01ad      	lsls	r5, r5, #6
      otg_txfifo_flush(usbp, ep);
 8003952:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003954:	f045 0520 	orr.w	r5, r5, #32
 8003958:	6115      	str	r5, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800395a:	6913      	ldr	r3, [r2, #16]
 800395c:	069b      	lsls	r3, r3, #26
 800395e:	d4fc      	bmi.n	800395a <Vector14C+0x1ba>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003960:	f109 0502 	add.w	r5, r9, #2
 8003964:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  chSysPolledDelayX(cycles);
 8003968:	2012      	movs	r0, #18
 800396a:	f002 f945 	bl	8005bf8 <chSysPolledDelayX>
 800396e:	686b      	ldr	r3, [r5, #4]
 8003970:	8921      	ldrh	r1, [r4, #8]
 8003972:	689e      	ldr	r6, [r3, #8]
 8003974:	2201      	movs	r2, #1
 8003976:	fa02 f209 	lsl.w	r2, r2, r9
 800397a:	ea21 0202 	bic.w	r2, r1, r2
 800397e:	8122      	strh	r2, [r4, #8]
 8003980:	b11e      	cbz	r6, 800398a <Vector14C+0x1ea>
 8003982:	4649      	mov	r1, r9
 8003984:	4842      	ldr	r0, [pc, #264]	; (8003a90 <Vector14C+0x2f0>)
 8003986:	47b0      	blx	r6
 8003988:	686b      	ldr	r3, [r5, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800398a:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800398e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	e9de a700 	ldrd	sl, r7, [lr]
 8003996:	4557      	cmp	r7, sl
 8003998:	bf28      	it	cs
 800399a:	f109 0c01 	addcs.w	ip, r9, #1
 800399e:	f080 82f8 	bcs.w	8003f92 <Vector14C+0x7f2>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80039a2:	eb02 1249 	add.w	r2, r2, r9, lsl #5
    if (n > usbp->epc[ep]->in_maxsize)
 80039a6:	f8b3 b010 	ldrh.w	fp, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80039aa:	f8d2 3918 	ldr.w	r3, [r2, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80039ae:	ebaa 0007 	sub.w	r0, sl, r7
 80039b2:	4558      	cmp	r0, fp
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	bf28      	it	cs
 80039b8:	4658      	movcs	r0, fp
 80039ba:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80039be:	f109 0c01 	add.w	ip, r9, #1
 80039c2:	d8a6      	bhi.n	8003912 <Vector14C+0x172>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80039c4:	9b02      	ldr	r3, [sp, #8]
 80039c6:	f8de 6008 	ldr.w	r6, [lr, #8]
 80039ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80039ce:	eb03 350c 	add.w	r5, r3, ip, lsl #12
 80039d2:	4691      	mov	r9, r2
    *fifop = *((uint32_t *)buf);
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	602b      	str	r3, [r5, #0]
    if (n <= 4) {
 80039d8:	2804      	cmp	r0, #4
 80039da:	d90a      	bls.n	80039f2 <Vector14C+0x252>
 80039dc:	1f42      	subs	r2, r0, #5
 80039de:	f022 0203 	bic.w	r2, r2, #3
 80039e2:	3204      	adds	r2, #4
 80039e4:	4432      	add	r2, r6
 80039e6:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 80039e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80039ec:	6029      	str	r1, [r5, #0]
    if (n <= 4) {
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d1fa      	bne.n	80039e8 <Vector14C+0x248>
    usbp->epc[ep]->in_state->txcnt += n;
 80039f2:	4407      	add	r7, r0
    usbp->epc[ep]->in_state->txbuf += n;
 80039f4:	4406      	add	r6, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80039f6:	4557      	cmp	r7, sl
    usbp->epc[ep]->in_state->txcnt += n;
 80039f8:	e9ce 7601 	strd	r7, r6, [lr, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80039fc:	f080 82c7 	bcs.w	8003f8e <Vector14C+0x7ee>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003a00:	ebaa 0007 	sub.w	r0, sl, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003a04:	f8d9 3918 	ldr.w	r3, [r9, #2328]	; 0x918
 8003a08:	4558      	cmp	r0, fp
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	bf28      	it	cs
 8003a0e:	4658      	movcs	r0, fp
 8003a10:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8003a14:	d9de      	bls.n	80039d4 <Vector14C+0x234>
 8003a16:	e77c      	b.n	8003912 <Vector14C+0x172>
    _usb_suspend(usbp);
 8003a18:	481d      	ldr	r0, [pc, #116]	; (8003a90 <Vector14C+0x2f0>)
 8003a1a:	f7fe f9ad 	bl	8001d78 <_usb_suspend>
  if (sts & GINTSTS_ENUMDNE) {
 8003a1e:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 8003a22:	f43f aee8 	beq.w	80037f6 <Vector14C+0x56>
 8003a26:	e6d7      	b.n	80037d8 <Vector14C+0x38>
  stm32_otg_t *otgp = usbp->otg;
 8003a28:	6d66      	ldr	r6, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8003a2a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003a90 <Vector14C+0x2f0>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003a2e:	2500      	movs	r5, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8003a30:	2701      	movs	r7, #1
 8003a32:	e006      	b.n	8003a42 <Vector14C+0x2a2>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003a34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a36:	3501      	adds	r5, #1
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	b2ed      	uxtb	r5, r5
 8003a3c:	429d      	cmp	r5, r3
 8003a3e:	f63f aee9 	bhi.w	8003814 <Vector14C+0x74>
 8003a42:	eb06 1245 	add.w	r2, r6, r5, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003a46:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003a4a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a52:	d1ef      	bne.n	8003a34 <Vector14C+0x294>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8003a54:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	daeb      	bge.n	8003a34 <Vector14C+0x294>
      _usb_isr_invoke_out_cb(usbp, ep);
 8003a5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a60:	8962      	ldrh	r2, [r4, #10]
 8003a62:	68d9      	ldr	r1, [r3, #12]
 8003a64:	fa07 f305 	lsl.w	r3, r7, r5
 8003a68:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8003a6c:	ea22 0303 	bic.w	r3, r2, r3
 8003a70:	4629      	mov	r1, r5
 8003a72:	4640      	mov	r0, r8
 8003a74:	8163      	strh	r3, [r4, #10]
 8003a76:	f1b9 0f00 	cmp.w	r9, #0
 8003a7a:	d0db      	beq.n	8003a34 <Vector14C+0x294>
 8003a7c:	47c8      	blx	r9
 8003a7e:	e7d9      	b.n	8003a34 <Vector14C+0x294>
    _usb_reset(usbp);
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7fe f961 	bl	8001d48 <_usb_reset>
}
 8003a86:	b005      	add	sp, #20
 8003a88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8003a8c:	f002 bda6 	b.w	80065dc <_port_irq_epilogue>
 8003a90:	20000a18 	.word	0x20000a18
  stm32_otg_t *otgp = usbp->otg;
 8003a94:	6d65      	ldr	r5, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003a96:	f8d5 6968 	ldr.w	r6, [r5, #2408]	; 0x968
  otgp->ie[ep].DIEPINT = epint;
 8003a9a:	f8c5 6968 	str.w	r6, [r5, #2408]	; 0x968
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003a9e:	07f0      	lsls	r0, r6, #31
 8003aa0:	d513      	bpl.n	8003aca <Vector14C+0x32a>
 8003aa2:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	d50f      	bpl.n	8003aca <Vector14C+0x32a>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003aaa:	69a1      	ldr	r1, [r4, #24]
 8003aac:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	4290      	cmp	r0, r2
 8003ab4:	f0c0 8296 	bcc.w	8003fe4 <Vector14C+0x844>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003ab8:	8923      	ldrh	r3, [r4, #8]
 8003aba:	688a      	ldr	r2, [r1, #8]
 8003abc:	f023 0308 	bic.w	r3, r3, #8
 8003ac0:	8123      	strh	r3, [r4, #8]
 8003ac2:	b112      	cbz	r2, 8003aca <Vector14C+0x32a>
 8003ac4:	2103      	movs	r1, #3
 8003ac6:	48b1      	ldr	r0, [pc, #708]	; (8003d8c <Vector14C+0x5ec>)
 8003ac8:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8003aca:	0632      	lsls	r2, r6, #24
 8003acc:	f57f aec5 	bpl.w	800385a <Vector14C+0xba>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003ad0:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	f57f aec0 	bpl.w	800385a <Vector14C+0xba>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003ada:	69a3      	ldr	r3, [r4, #24]
 8003adc:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8003ae0:	695e      	ldr	r6, [r3, #20]
 8003ae2:	e9d6 7500 	ldrd	r7, r5, [r6]
 8003ae6:	42af      	cmp	r7, r5
 8003ae8:	f240 825d 	bls.w	8003fa6 <Vector14C+0x806>
    if (n > usbp->epc[ep]->in_maxsize)
 8003aec:	f8b3 e010 	ldrh.w	lr, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003af0:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003af4:	1b79      	subs	r1, r7, r5
 8003af6:	4571      	cmp	r1, lr
 8003af8:	bf28      	it	cs
 8003afa:	4671      	movcs	r1, lr
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003b02:	f63f aeaa 	bhi.w	800385a <Vector14C+0xba>
 8003b06:	68b4      	ldr	r4, [r6, #8]
 8003b08:	f50c 4080 	add.w	r0, ip, #16384	; 0x4000
 8003b0c:	46b8      	mov	r8, r7
    *fifop = *((uint32_t *)buf);
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003b12:	2904      	cmp	r1, #4
 8003b14:	d90a      	bls.n	8003b2c <Vector14C+0x38c>
 8003b16:	1f4a      	subs	r2, r1, #5
 8003b18:	f022 0203 	bic.w	r2, r2, #3
 8003b1c:	3204      	adds	r2, #4
 8003b1e:	4422      	add	r2, r4
 8003b20:	4623      	mov	r3, r4
    *fifop = *((uint32_t *)buf);
 8003b22:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8003b26:	6007      	str	r7, [r0, #0]
    if (n <= 4) {
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d1fa      	bne.n	8003b22 <Vector14C+0x382>
    usbp->epc[ep]->in_state->txcnt += n;
 8003b2c:	440d      	add	r5, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8003b2e:	440c      	add	r4, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003b30:	45a8      	cmp	r8, r5
    usbp->epc[ep]->in_state->txcnt += n;
 8003b32:	e9c6 5401 	strd	r5, r4, [r6, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003b36:	f240 8236 	bls.w	8003fa6 <Vector14C+0x806>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003b3a:	eba8 0105 	sub.w	r1, r8, r5
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003b3e:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
 8003b42:	4571      	cmp	r1, lr
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	bf28      	it	cs
 8003b48:	4671      	movcs	r1, lr
 8003b4a:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003b4e:	d9de      	bls.n	8003b0e <Vector14C+0x36e>
 8003b50:	e683      	b.n	800385a <Vector14C+0xba>
  stm32_otg_t *otgp = usbp->otg;
 8003b52:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003b54:	f8d6 7b68 	ldr.w	r7, [r6, #2920]	; 0xb68
  otgp->oe[ep].DOEPINT = epint;
 8003b58:	f8c6 7b68 	str.w	r7, [r6, #2920]	; 0xb68
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003b5c:	073a      	lsls	r2, r7, #28
 8003b5e:	d508      	bpl.n	8003b72 <Vector14C+0x3d2>
 8003b60:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	d504      	bpl.n	8003b72 <Vector14C+0x3d2>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003b68:	69a3      	ldr	r3, [r4, #24]
 8003b6a:	4888      	ldr	r0, [pc, #544]	; (8003d8c <Vector14C+0x5ec>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2103      	movs	r1, #3
 8003b70:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003b72:	07ff      	lsls	r7, r7, #31
 8003b74:	f57f ae62 	bpl.w	800383c <Vector14C+0x9c>
 8003b78:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003b7c:	07d8      	lsls	r0, r3, #31
 8003b7e:	f57f ae5d 	bpl.w	800383c <Vector14C+0x9c>
    osp = usbp->epc[ep]->out_state;
 8003b82:	69a2      	ldr	r2, [r4, #24]
    _usb_isr_invoke_out_cb(usbp, ep);
 8003b84:	8963      	ldrh	r3, [r4, #10]
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	f023 0308 	bic.w	r3, r3, #8
 8003b8c:	8163      	strh	r3, [r4, #10]
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	f43f ae54 	beq.w	800383c <Vector14C+0x9c>
 8003b94:	2103      	movs	r1, #3
 8003b96:	487d      	ldr	r0, [pc, #500]	; (8003d8c <Vector14C+0x5ec>)
 8003b98:	4790      	blx	r2
 8003b9a:	e64f      	b.n	800383c <Vector14C+0x9c>
                            usbp->epc[ep]->out_state->rxbuf,
 8003b9c:	1c98      	adds	r0, r3, #2
 8003b9e:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	6999      	ldr	r1, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8003ba6:	e9d1 3700 	ldrd	r3, r7, [r1]
 8003baa:	688e      	ldr	r6, [r1, #8]
 8003bac:	1bdb      	subs	r3, r3, r7
  while (i < n) {
 8003bae:	b192      	cbz	r2, 8003bd6 <Vector14C+0x436>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 81cc 	bne.w	8003f4e <Vector14C+0x7ae>
      w = *fifop;
 8003bb6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8003bba:	f013 0f03 	tst.w	r3, #3
    i++;
 8003bbe:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 8003bc2:	bf08      	it	eq
 8003bc4:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d8f7      	bhi.n	8003bba <Vector14C+0x41a>
 8003bca:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6999      	ldr	r1, [r3, #24]
 8003bd2:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8003bd6:	4416      	add	r6, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8003bd8:	443a      	add	r2, r7
 8003bda:	e9c1 2601 	strd	r2, r6, [r1, #4]
 8003bde:	e61c      	b.n	800381a <Vector14C+0x7a>
    i++;
 8003be0:	3101      	adds	r1, #1
  while (i < n) {
 8003be2:	4299      	cmp	r1, r3
      *buf++ = (uint8_t)w;
 8003be4:	f806 0b01 	strb.w	r0, [r6], #1
      w >>= 8;
 8003be8:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 8003bec:	f47f ae6f 	bne.w	80038ce <Vector14C+0x12e>
 8003bf0:	e679      	b.n	80038e6 <Vector14C+0x146>
 8003bf2:	e9dd ab00 	ldrd	sl, fp, [sp]
  if (sts & GINTSTS_IISOOXFR) {
 8003bf6:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 8003bfa:	f43f ae0b 	beq.w	8003814 <Vector14C+0x74>
 8003bfe:	e713      	b.n	8003a28 <Vector14C+0x288>
  stm32_otg_t *otgp = usbp->otg;
 8003c00:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003c02:	f8d6 7928 	ldr.w	r7, [r6, #2344]	; 0x928
  otgp->ie[ep].DIEPINT = epint;
 8003c06:	f8c6 7928 	str.w	r7, [r6, #2344]	; 0x928
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003c0a:	07fa      	lsls	r2, r7, #31
 8003c0c:	d513      	bpl.n	8003c36 <Vector14C+0x496>
 8003c0e:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003c12:	07db      	lsls	r3, r3, #31
 8003c14:	d50f      	bpl.n	8003c36 <Vector14C+0x496>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4290      	cmp	r0, r2
 8003c20:	f0c0 8280 	bcc.w	8004124 <Vector14C+0x984>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003c24:	8923      	ldrh	r3, [r4, #8]
 8003c26:	688a      	ldr	r2, [r1, #8]
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	8123      	strh	r3, [r4, #8]
 8003c2e:	b112      	cbz	r2, 8003c36 <Vector14C+0x496>
 8003c30:	2101      	movs	r1, #1
 8003c32:	4856      	ldr	r0, [pc, #344]	; (8003d8c <Vector14C+0x5ec>)
 8003c34:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8003c36:	063f      	lsls	r7, r7, #24
 8003c38:	f57f ae09 	bpl.w	800384e <Vector14C+0xae>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003c3c:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003c40:	0798      	lsls	r0, r3, #30
 8003c42:	f57f ae04 	bpl.w	800384e <Vector14C+0xae>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003c4c:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8003c50:	e9dc e700 	ldrd	lr, r7, [ip]
 8003c54:	45be      	cmp	lr, r7
 8003c56:	f240 81ae 	bls.w	8003fb6 <Vector14C+0x816>
    if (n > usbp->epc[ep]->in_maxsize)
 8003c5a:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003c5e:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003c62:	ebae 0107 	sub.w	r1, lr, r7
 8003c66:	4549      	cmp	r1, r9
 8003c68:	bf28      	it	cs
 8003c6a:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003c72:	f63f adec 	bhi.w	800384e <Vector14C+0xae>
 8003c76:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8003c7a:	f508 5000 	add.w	r0, r8, #8192	; 0x2000
 8003c7e:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8003c80:	6833      	ldr	r3, [r6, #0]
 8003c82:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003c84:	2904      	cmp	r1, #4
 8003c86:	d90a      	bls.n	8003c9e <Vector14C+0x4fe>
 8003c88:	1f4a      	subs	r2, r1, #5
 8003c8a:	f022 0203 	bic.w	r2, r2, #3
 8003c8e:	3204      	adds	r2, #4
 8003c90:	4432      	add	r2, r6
 8003c92:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003c94:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8003c98:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d1fa      	bne.n	8003c94 <Vector14C+0x4f4>
    usbp->epc[ep]->in_state->txcnt += n;
 8003c9e:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8003ca0:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003ca2:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8003ca4:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003ca8:	f080 8184 	bcs.w	8003fb4 <Vector14C+0x814>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003cac:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003cb0:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
 8003cb4:	4549      	cmp	r1, r9
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	bf28      	it	cs
 8003cba:	4649      	movcs	r1, r9
 8003cbc:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003cc0:	d9de      	bls.n	8003c80 <Vector14C+0x4e0>
 8003cc2:	4655      	mov	r5, sl
 8003cc4:	e5c3      	b.n	800384e <Vector14C+0xae>
  stm32_otg_t *otgp = usbp->otg;
 8003cc6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003cc8:	f8d6 7908 	ldr.w	r7, [r6, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8003ccc:	f8c6 7908 	str.w	r7, [r6, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003cd0:	07fa      	lsls	r2, r7, #31
 8003cd2:	d513      	bpl.n	8003cfc <Vector14C+0x55c>
 8003cd4:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003cd8:	07db      	lsls	r3, r3, #31
 8003cda:	d50f      	bpl.n	8003cfc <Vector14C+0x55c>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003cdc:	68e1      	ldr	r1, [r4, #12]
 8003cde:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	4290      	cmp	r0, r2
 8003ce6:	f0c0 81e9 	bcc.w	80040bc <Vector14C+0x91c>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003cea:	8923      	ldrh	r3, [r4, #8]
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	8123      	strh	r3, [r4, #8]
 8003cf4:	b112      	cbz	r2, 8003cfc <Vector14C+0x55c>
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4824      	ldr	r0, [pc, #144]	; (8003d8c <Vector14C+0x5ec>)
 8003cfa:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8003cfc:	063f      	lsls	r7, r7, #24
 8003cfe:	f57f ada3 	bpl.w	8003848 <Vector14C+0xa8>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003d02:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003d06:	07d8      	lsls	r0, r3, #31
 8003d08:	f57f ad9e 	bpl.w	8003848 <Vector14C+0xa8>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003d0c:	68e3      	ldr	r3, [r4, #12]
 8003d0e:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003d12:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8003d16:	e9dc e700 	ldrd	lr, r7, [ip]
 8003d1a:	4577      	cmp	r7, lr
 8003d1c:	f080 8153 	bcs.w	8003fc6 <Vector14C+0x826>
    if (n > usbp->epc[ep]->in_maxsize)
 8003d20:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003d24:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003d28:	ebae 0107 	sub.w	r1, lr, r7
 8003d2c:	4549      	cmp	r1, r9
 8003d2e:	bf28      	it	cs
 8003d30:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003d38:	f63f ad86 	bhi.w	8003848 <Vector14C+0xa8>
 8003d3c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8003d40:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
 8003d44:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8003d46:	6833      	ldr	r3, [r6, #0]
 8003d48:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003d4a:	2904      	cmp	r1, #4
 8003d4c:	d90a      	bls.n	8003d64 <Vector14C+0x5c4>
 8003d4e:	1f4a      	subs	r2, r1, #5
 8003d50:	f022 0203 	bic.w	r2, r2, #3
 8003d54:	3204      	adds	r2, #4
 8003d56:	4432      	add	r2, r6
 8003d58:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003d5a:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8003d5e:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1fa      	bne.n	8003d5a <Vector14C+0x5ba>
    usbp->epc[ep]->in_state->txcnt += n;
 8003d64:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8003d66:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003d68:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8003d6a:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003d6e:	f080 8129 	bcs.w	8003fc4 <Vector14C+0x824>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003d72:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003d76:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8003d7a:	4549      	cmp	r1, r9
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	bf28      	it	cs
 8003d80:	4649      	movcs	r1, r9
 8003d82:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003d86:	d9de      	bls.n	8003d46 <Vector14C+0x5a6>
 8003d88:	4655      	mov	r5, sl
 8003d8a:	e55d      	b.n	8003848 <Vector14C+0xa8>
 8003d8c:	20000a18 	.word	0x20000a18
  stm32_otg_t *otgp = usbp->otg;
 8003d90:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003d92:	f8d6 7948 	ldr.w	r7, [r6, #2376]	; 0x948
  otgp->ie[ep].DIEPINT = epint;
 8003d96:	f8c6 7948 	str.w	r7, [r6, #2376]	; 0x948
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003d9a:	07fa      	lsls	r2, r7, #31
 8003d9c:	d513      	bpl.n	8003dc6 <Vector14C+0x626>
 8003d9e:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003da2:	07db      	lsls	r3, r3, #31
 8003da4:	d50f      	bpl.n	8003dc6 <Vector14C+0x626>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003da6:	6961      	ldr	r1, [r4, #20]
 8003da8:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	4290      	cmp	r0, r2
 8003db0:	f0c0 814d 	bcc.w	800404e <Vector14C+0x8ae>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003db4:	8923      	ldrh	r3, [r4, #8]
 8003db6:	688a      	ldr	r2, [r1, #8]
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	8123      	strh	r3, [r4, #8]
 8003dbe:	b112      	cbz	r2, 8003dc6 <Vector14C+0x626>
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	48bd      	ldr	r0, [pc, #756]	; (80040b8 <Vector14C+0x918>)
 8003dc4:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8003dc6:	063f      	lsls	r7, r7, #24
 8003dc8:	f57f ad44 	bpl.w	8003854 <Vector14C+0xb4>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003dcc:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003dd0:	075e      	lsls	r6, r3, #29
 8003dd2:	f57f ad3f 	bpl.w	8003854 <Vector14C+0xb4>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003dd6:	6963      	ldr	r3, [r4, #20]
 8003dd8:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003ddc:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8003de0:	e9dc e700 	ldrd	lr, r7, [ip]
 8003de4:	45be      	cmp	lr, r7
 8003de6:	f240 80f6 	bls.w	8003fd6 <Vector14C+0x836>
    if (n > usbp->epc[ep]->in_maxsize)
 8003dea:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003dee:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003df2:	ebae 0107 	sub.w	r1, lr, r7
 8003df6:	4549      	cmp	r1, r9
 8003df8:	bf28      	it	cs
 8003dfa:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003e02:	f63f ad27 	bhi.w	8003854 <Vector14C+0xb4>
 8003e06:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8003e0a:	f508 5040 	add.w	r0, r8, #12288	; 0x3000
 8003e0e:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003e14:	2904      	cmp	r1, #4
 8003e16:	d90a      	bls.n	8003e2e <Vector14C+0x68e>
 8003e18:	1f4a      	subs	r2, r1, #5
 8003e1a:	f022 0203 	bic.w	r2, r2, #3
 8003e1e:	3204      	adds	r2, #4
 8003e20:	4432      	add	r2, r6
 8003e22:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003e24:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8003e28:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d1fa      	bne.n	8003e24 <Vector14C+0x684>
    usbp->epc[ep]->in_state->txcnt += n;
 8003e2e:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8003e30:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003e32:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8003e34:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003e38:	f080 80cc 	bcs.w	8003fd4 <Vector14C+0x834>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003e3c:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003e40:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
 8003e44:	4549      	cmp	r1, r9
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	bf28      	it	cs
 8003e4a:	4649      	movcs	r1, r9
 8003e4c:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003e50:	d9de      	bls.n	8003e10 <Vector14C+0x670>
 8003e52:	4655      	mov	r5, sl
 8003e54:	e4fe      	b.n	8003854 <Vector14C+0xb4>
  stm32_otg_t *otgp = usbp->otg;
 8003e56:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003e58:	f8d6 7b48 	ldr.w	r7, [r6, #2888]	; 0xb48
  otgp->oe[ep].DOEPINT = epint;
 8003e5c:	f8c6 7b48 	str.w	r7, [r6, #2888]	; 0xb48
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003e60:	073a      	lsls	r2, r7, #28
 8003e62:	d508      	bpl.n	8003e76 <Vector14C+0x6d6>
 8003e64:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	d504      	bpl.n	8003e76 <Vector14C+0x6d6>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003e6c:	6963      	ldr	r3, [r4, #20]
 8003e6e:	4892      	ldr	r0, [pc, #584]	; (80040b8 <Vector14C+0x918>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2102      	movs	r1, #2
 8003e74:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003e76:	07ff      	lsls	r7, r7, #31
 8003e78:	f57f acdd 	bpl.w	8003836 <Vector14C+0x96>
 8003e7c:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003e80:	07d8      	lsls	r0, r3, #31
 8003e82:	f57f acd8 	bpl.w	8003836 <Vector14C+0x96>
    osp = usbp->epc[ep]->out_state;
 8003e86:	6962      	ldr	r2, [r4, #20]
    _usb_isr_invoke_out_cb(usbp, ep);
 8003e88:	8963      	ldrh	r3, [r4, #10]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	8163      	strh	r3, [r4, #10]
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	f43f accf 	beq.w	8003836 <Vector14C+0x96>
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4887      	ldr	r0, [pc, #540]	; (80040b8 <Vector14C+0x918>)
 8003e9c:	4790      	blx	r2
 8003e9e:	e4ca      	b.n	8003836 <Vector14C+0x96>
  stm32_otg_t *otgp = usbp->otg;
 8003ea0:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003ea2:	f8d6 7b28 	ldr.w	r7, [r6, #2856]	; 0xb28
  otgp->oe[ep].DOEPINT = epint;
 8003ea6:	f8c6 7b28 	str.w	r7, [r6, #2856]	; 0xb28
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003eaa:	073a      	lsls	r2, r7, #28
 8003eac:	d508      	bpl.n	8003ec0 <Vector14C+0x720>
 8003eae:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003eb2:	071b      	lsls	r3, r3, #28
 8003eb4:	d504      	bpl.n	8003ec0 <Vector14C+0x720>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	487f      	ldr	r0, [pc, #508]	; (80040b8 <Vector14C+0x918>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003ec0:	07ff      	lsls	r7, r7, #31
 8003ec2:	f57f acb5 	bpl.w	8003830 <Vector14C+0x90>
 8003ec6:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003eca:	07d8      	lsls	r0, r3, #31
 8003ecc:	f57f acb0 	bpl.w	8003830 <Vector14C+0x90>
    osp = usbp->epc[ep]->out_state;
 8003ed0:	6922      	ldr	r2, [r4, #16]
    _usb_isr_invoke_out_cb(usbp, ep);
 8003ed2:	8963      	ldrh	r3, [r4, #10]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	f023 0302 	bic.w	r3, r3, #2
 8003eda:	8163      	strh	r3, [r4, #10]
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	f43f aca7 	beq.w	8003830 <Vector14C+0x90>
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4874      	ldr	r0, [pc, #464]	; (80040b8 <Vector14C+0x918>)
 8003ee6:	4790      	blx	r2
 8003ee8:	e4a2      	b.n	8003830 <Vector14C+0x90>
  stm32_otg_t *otgp = usbp->otg;
 8003eea:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003eec:	f8d6 7b08 	ldr.w	r7, [r6, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8003ef0:	f8c6 7b08 	str.w	r7, [r6, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003ef4:	073a      	lsls	r2, r7, #28
 8003ef6:	d508      	bpl.n	8003f0a <Vector14C+0x76a>
 8003ef8:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	d504      	bpl.n	8003f0a <Vector14C+0x76a>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003f00:	68e3      	ldr	r3, [r4, #12]
 8003f02:	486d      	ldr	r0, [pc, #436]	; (80040b8 <Vector14C+0x918>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2100      	movs	r1, #0
 8003f08:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003f0a:	07ff      	lsls	r7, r7, #31
 8003f0c:	f57f ac8d 	bpl.w	800382a <Vector14C+0x8a>
 8003f10:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003f14:	07d8      	lsls	r0, r3, #31
 8003f16:	f57f ac88 	bpl.w	800382a <Vector14C+0x8a>
    osp = usbp->epc[ep]->out_state;
 8003f1a:	68e2      	ldr	r2, [r4, #12]
 8003f1c:	6991      	ldr	r1, [r2, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003f1e:	8a50      	ldrh	r0, [r2, #18]
 8003f20:	684e      	ldr	r6, [r1, #4]
 8003f22:	fbb6 f3f0 	udiv	r3, r6, r0
 8003f26:	fb00 6313 	mls	r3, r0, r3, r6
 8003f2a:	b923      	cbnz	r3, 8003f36 <Vector14C+0x796>
          (osp->rxsize < osp->totsize)) {
 8003f2c:	680e      	ldr	r6, [r1, #0]
 8003f2e:	68c8      	ldr	r0, [r1, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003f30:	4286      	cmp	r6, r0
 8003f32:	f0c0 816a 	bcc.w	800420a <Vector14C+0xa6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 8003f36:	8963      	ldrh	r3, [r4, #10]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	8163      	strh	r3, [r4, #10]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	f43f ac72 	beq.w	800382a <Vector14C+0x8a>
 8003f46:	2100      	movs	r1, #0
 8003f48:	485b      	ldr	r0, [pc, #364]	; (80040b8 <Vector14C+0x918>)
 8003f4a:	4790      	blx	r2
 8003f4c:	e46d      	b.n	800382a <Vector14C+0x8a>
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bf28      	it	cs
 8003f52:	4613      	movcs	r3, r2
 8003f54:	461f      	mov	r7, r3
  uint32_t w = 0;
 8003f56:	2300      	movs	r3, #0
  size_t i = 0;
 8003f58:	4619      	mov	r1, r3
      w = *fifop;
 8003f5a:	f505 5c80 	add.w	ip, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8003f5e:	f013 0f03 	tst.w	r3, #3
 8003f62:	d10c      	bne.n	8003f7e <Vector14C+0x7de>
      w = *fifop;
 8003f64:	f8dc 1000 	ldr.w	r1, [ip]
      *buf++ = (uint8_t)w;
 8003f68:	f806 1b01 	strb.w	r1, [r6], #1
    i++;
 8003f6c:	3301      	adds	r3, #1
  while (i < n) {
 8003f6e:	42bb      	cmp	r3, r7
      w >>= 8;
 8003f70:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 8003f74:	d3f3      	bcc.n	8003f5e <Vector14C+0x7be>
 8003f76:	429a      	cmp	r2, r3
 8003f78:	f63f ae1d 	bhi.w	8003bb6 <Vector14C+0x416>
 8003f7c:	e625      	b.n	8003bca <Vector14C+0x42a>
    i++;
 8003f7e:	3301      	adds	r3, #1
  while (i < n) {
 8003f80:	42bb      	cmp	r3, r7
      *buf++ = (uint8_t)w;
 8003f82:	f806 1b01 	strb.w	r1, [r6], #1
      w >>= 8;
 8003f86:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 8003f8a:	d3e8      	bcc.n	8003f5e <Vector14C+0x7be>
 8003f8c:	e7f3      	b.n	8003f76 <Vector14C+0x7d6>
 8003f8e:	e9dd 2902 	ldrd	r2, r9, [sp, #8]
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8003f92:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f909 	lsl.w	r9, r1, r9
 8003f9c:	ea23 0309 	bic.w	r3, r3, r9
 8003fa0:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 8003fa4:	e4b5      	b.n	8003912 <Vector14C+0x172>
 8003fa6:	f8dc 3834 	ldr.w	r3, [ip, #2100]	; 0x834
 8003faa:	f023 0308 	bic.w	r3, r3, #8
 8003fae:	f8cc 3834 	str.w	r3, [ip, #2100]	; 0x834
 8003fb2:	e452      	b.n	800385a <Vector14C+0xba>
 8003fb4:	4655      	mov	r5, sl
 8003fb6:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8003fba:	f023 0302 	bic.w	r3, r3, #2
 8003fbe:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003fc2:	e444      	b.n	800384e <Vector14C+0xae>
 8003fc4:	4655      	mov	r5, sl
 8003fc6:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003fd2:	e439      	b.n	8003848 <Vector14C+0xa8>
 8003fd4:	4655      	mov	r5, sl
 8003fd6:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003fe2:	e437      	b.n	8003854 <Vector14C+0xb4>
      isp->txsize = isp->totsize - isp->txsize;
 8003fe4:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	e9c3 2100 	strd	r2, r1, [r3]
 8003fec:	2320      	movs	r3, #32
 8003fee:	f383 8811 	msr	BASEPRI, r3
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003ff2:	69a1      	ldr	r1, [r4, #24]
 8003ff4:	694b      	ldr	r3, [r1, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	f040 80c5 	bne.w	800418a <Vector14C+0x9ea>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8004000:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004002:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004006:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800400a:	680a      	ldr	r2, [r1, #0]
 800400c:	f002 0203 	and.w	r2, r2, #3
 8004010:	2a01      	cmp	r2, #1
 8004012:	d10c      	bne.n	800402e <Vector14C+0x88e>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004014:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004018:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800401c:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 8004020:	bf14      	ite	ne
 8004022:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8004026:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 800402a:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800402e:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 8004032:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004036:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800403a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8004046:	2300      	movs	r3, #0
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	e53d      	b.n	8003aca <Vector14C+0x32a>
      isp->txsize = isp->totsize - isp->txsize;
 800404e:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8004050:	2100      	movs	r1, #0
 8004052:	e9c3 2100 	strd	r2, r1, [r3]
 8004056:	2320      	movs	r3, #32
 8004058:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800405c:	6961      	ldr	r1, [r4, #20]
 800405e:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8004064:	2a00      	cmp	r2, #0
 8004066:	f040 80c1 	bne.w	80041ec <Vector14C+0xa4c>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800406a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800406c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004070:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004074:	680a      	ldr	r2, [r1, #0]
 8004076:	f002 0203 	and.w	r2, r2, #3
 800407a:	2a01      	cmp	r2, #1
 800407c:	d10c      	bne.n	8004098 <Vector14C+0x8f8>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800407e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004082:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8004086:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 800408a:	bf14      	ite	ne
 800408c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8004090:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8004094:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004098:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 800409c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80040a0:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80040a4:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80040a8:	f042 0204 	orr.w	r2, r2, #4
 80040ac:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80040b0:	2300      	movs	r3, #0
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	e686      	b.n	8003dc6 <Vector14C+0x626>
 80040b8:	20000a18 	.word	0x20000a18
      isp->txsize = isp->totsize - isp->txsize;
 80040bc:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 80040be:	2100      	movs	r1, #0
 80040c0:	e9c3 2100 	strd	r2, r1, [r3]
 80040c4:	2320      	movs	r3, #32
 80040c6:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80040ca:	68e1      	ldr	r1, [r4, #12]
 80040cc:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	d175      	bne.n	80041c2 <Vector14C+0xa22>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80040d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040dc:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80040e0:	680a      	ldr	r2, [r1, #0]
 80040e2:	f002 0203 	and.w	r2, r2, #3
 80040e6:	2a01      	cmp	r2, #1
 80040e8:	d10c      	bne.n	8004104 <Vector14C+0x964>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80040ea:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80040ee:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80040f2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80040f6:	bf14      	ite	ne
 80040f8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80040fc:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8004100:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004104:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004108:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800410c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004110:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800411c:	2300      	movs	r3, #0
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	e5eb      	b.n	8003cfc <Vector14C+0x55c>
      isp->txsize = isp->totsize - isp->txsize;
 8004124:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8004126:	2100      	movs	r1, #0
 8004128:	e9c3 2100 	strd	r2, r1, [r3]
 800412c:	2320      	movs	r3, #32
 800412e:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004132:	6921      	ldr	r1, [r4, #16]
 8004134:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 800413a:	bb9a      	cbnz	r2, 80041a4 <Vector14C+0xa04>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800413c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800413e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004142:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004146:	680a      	ldr	r2, [r1, #0]
 8004148:	f002 0203 	and.w	r2, r2, #3
 800414c:	2a01      	cmp	r2, #1
 800414e:	d10c      	bne.n	800416a <Vector14C+0x9ca>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004150:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004154:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8004158:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 800415c:	bf14      	ite	ne
 800415e:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8004162:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8004166:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800416a:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 800416e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004172:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004176:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800417a:	f042 0202 	orr.w	r2, r2, #2
 800417e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8004182:	2300      	movs	r3, #0
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	e555      	b.n	8003c36 <Vector14C+0x496>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800418a:	8a0f      	ldrh	r7, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800418c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800418e:	19d0      	adds	r0, r2, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8004190:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004194:	3801      	subs	r0, #1
 8004196:	fbb0 f0f7 	udiv	r0, r0, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800419a:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 800419e:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
 80041a2:	e732      	b.n	800400a <Vector14C+0x86a>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041a4:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041aa:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041b2:	3801      	subs	r0, #1
 80041b4:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041b8:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 80041bc:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
 80041c0:	e7c1      	b.n	8004146 <Vector14C+0x9a6>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 80041c2:	2a40      	cmp	r2, #64	; 0x40
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041c4:	f8b1 e010 	ldrh.w	lr, [r1, #16]
      isp->txsize = EP0_MAX_INSIZE;
 80041c8:	bf85      	ittet	hi
 80041ca:	f8df c0b8 	ldrhi.w	ip, [pc, #184]	; 8004284 <Vector14C+0xae4>
 80041ce:	2240      	movhi	r2, #64	; 0x40
 80041d0:	f042 5c00 	orrls.w	ip, r2, #536870912	; 0x20000000
 80041d4:	601a      	strhi	r2, [r3, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041d6:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041da:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041dc:	4402      	add	r2, r0
 80041de:	fbb2 f2fe 	udiv	r2, r2, lr
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041e2:	ea4c 42c2 	orr.w	r2, ip, r2, lsl #19
 80041e6:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
 80041ea:	e779      	b.n	80040e0 <Vector14C+0x940>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041ec:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041f2:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80041f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80041fa:	3801      	subs	r0, #1
 80041fc:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8004200:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8004204:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
 8004208:	e734      	b.n	8004074 <Vector14C+0x8d4>
        osp->rxsize = osp->totsize - osp->rxsize;
 800420a:	1b80      	subs	r0, r0, r6
        osp->rxcnt  = 0;
 800420c:	e9c1 0300 	strd	r0, r3, [r1]
 8004210:	2320      	movs	r3, #32
 8004212:	f383 8811 	msr	BASEPRI, r3
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004216:	68e2      	ldr	r2, [r4, #12]
 8004218:	6993      	ldr	r3, [r2, #24]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800421a:	6816      	ldr	r6, [r2, #0]
  osp->totsize = osp->rxsize;
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	60d9      	str	r1, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8004220:	2940      	cmp	r1, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8004222:	bf84      	itt	hi
 8004224:	2140      	movhi	r1, #64	; 0x40
 8004226:	6019      	strhi	r1, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004228:	8a53      	ldrh	r3, [r2, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800422a:	6d62      	ldr	r2, [r4, #84]	; 0x54
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800422c:	1e58      	subs	r0, r3, #1
 800422e:	4401      	add	r1, r0
 8004230:	fbb1 f1f3 	udiv	r1, r1, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	3303      	adds	r3, #3
 800423a:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800423e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004242:	f006 0103 	and.w	r1, r6, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004246:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800424a:	2901      	cmp	r1, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800424c:	f8c2 3b10 	str.w	r3, [r2, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004250:	d10c      	bne.n	800426c <Vector14C+0xacc>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004252:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8004256:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800425a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800425e:	bf14      	ite	ne
 8004260:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8004264:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004268:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800426c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8004270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004274:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8004278:	2300      	movs	r3, #0
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f7ff bad4 	b.w	800382a <Vector14C+0x8a>
 8004282:	bf00      	nop
 8004284:	20000040 	.word	0x20000040

08004288 <usb_lld_init>:
void usb_lld_init(void) {
 8004288:	b510      	push	{r4, lr}
  usbObjectInit(&USBD1);
 800428a:	4c05      	ldr	r4, [pc, #20]	; (80042a0 <usb_lld_init+0x18>)
 800428c:	4620      	mov	r0, r4
 800428e:	f7fd fcff 	bl	8001c90 <usbObjectInit>
  USBD1.otgparams = &fsparams;
 8004292:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <usb_lld_init+0x1c>)
  USBD1.otg       = OTG_FS;
 8004294:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 8004298:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
}
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	20000a18 	.word	0x20000a18
 80042a4:	08008554 	.word	0x08008554

080042a8 <usb_lld_start>:
  if (usbp->state == USB_STOP) {
 80042a8:	7803      	ldrb	r3, [r0, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d000      	beq.n	80042b0 <usb_lld_start+0x8>
 80042ae:	4770      	bx	lr
    if (&USBD1 == usbp) {
 80042b0:	4ba2      	ldr	r3, [pc, #648]	; (800453c <usb_lld_start+0x294>)
 80042b2:	4298      	cmp	r0, r3
void usb_lld_start(USBDriver *usbp) {
 80042b4:	b570      	push	{r4, r5, r6, lr}
 80042b6:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
 80042b8:	6d45      	ldr	r5, [r0, #84]	; 0x54
    if (&USBD1 == usbp) {
 80042ba:	f000 8120 	beq.w	80044fe <usb_lld_start+0x256>
  stm32_otg_t *otgp = usbp->otg;
 80042be:	462c      	mov	r4, r5
    otgp->PCGCCTL = 0;
 80042c0:	2100      	movs	r1, #0
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80042c2:	22c0      	movs	r2, #192	; 0xc0
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80042c4:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 80042c8:	f8c5 1e00 	str.w	r1, [r5, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80042cc:	602a      	str	r2, [r5, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80042ce:	63ab      	str	r3, [r5, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dafc      	bge.n	80042d0 <usb_lld_start+0x28>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80042d6:	2301      	movs	r3, #1
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	200c      	movs	r0, #12
 80042dc:	f001 fc8c 	bl	8005bf8 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	07db      	lsls	r3, r3, #31
 80042e4:	d4fc      	bmi.n	80042e0 <usb_lld_start+0x38>
 80042e6:	2012      	movs	r0, #18
 80042e8:	f001 fc86 	bl	8005bf8 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	dafc      	bge.n	80042ec <usb_lld_start+0x44>
    otg_disable_ep(usbp);
 80042f2:	e9d6 3215 	ldrd	r3, r2, [r6, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80042f6:	6894      	ldr	r4, [r2, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80042f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->GAHBCFG = 0;
 80042fc:	2200      	movs	r2, #0
 80042fe:	60aa      	str	r2, [r5, #8]
    otgp->ie[i].DIEPCTL = 0;
 8004300:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8004304:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004308:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 800430c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8004310:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004314:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004318:	2c00      	cmp	r4, #0
 800431a:	f000 80d5 	beq.w	80044c8 <usb_lld_start+0x220>
 800431e:	2c01      	cmp	r4, #1
    otgp->ie[i].DIEPCTL = 0;
 8004320:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 8004324:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004328:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 800432c:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 8004330:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004334:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004338:	f240 80c6 	bls.w	80044c8 <usb_lld_start+0x220>
 800433c:	2c02      	cmp	r4, #2
    otgp->ie[i].DIEPCTL = 0;
 800433e:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 8004342:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004346:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 800434a:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 800434e:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004352:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004356:	f000 80b7 	beq.w	80044c8 <usb_lld_start+0x220>
 800435a:	2c03      	cmp	r4, #3
    otgp->ie[i].DIEPCTL = 0;
 800435c:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 8004360:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004364:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 8004368:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 800436c:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004370:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004374:	f000 80a8 	beq.w	80044c8 <usb_lld_start+0x220>
 8004378:	2c04      	cmp	r4, #4
    otgp->ie[i].DIEPCTL = 0;
 800437a:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 800437e:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004382:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 8004386:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 800438a:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800438e:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004392:	f000 8099 	beq.w	80044c8 <usb_lld_start+0x220>
 8004396:	2c05      	cmp	r4, #5
    otgp->ie[i].DIEPCTL = 0;
 8004398:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 800439c:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80043a0:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 80043a4:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 80043a8:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80043ac:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80043b0:	f000 808a 	beq.w	80044c8 <usb_lld_start+0x220>
 80043b4:	2c06      	cmp	r4, #6
    otgp->ie[i].DIEPCTL = 0;
 80043b6:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 80043ba:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80043be:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 80043c2:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 80043c6:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80043ca:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80043ce:	d07b      	beq.n	80044c8 <usb_lld_start+0x220>
 80043d0:	2c07      	cmp	r4, #7
    otgp->ie[i].DIEPCTL = 0;
 80043d2:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 80043d6:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80043da:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 80043de:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 80043e2:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80043e6:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80043ea:	d06d      	beq.n	80044c8 <usb_lld_start+0x220>
 80043ec:	2c08      	cmp	r4, #8
    otgp->ie[i].DIEPCTL = 0;
 80043ee:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 80043f2:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80043f6:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 80043fa:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 80043fe:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004402:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004406:	d05f      	beq.n	80044c8 <usb_lld_start+0x220>
 8004408:	2c09      	cmp	r4, #9
    otgp->ie[i].DIEPCTL = 0;
 800440a:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 800440e:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004412:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 8004416:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 800441a:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800441e:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004422:	d051      	beq.n	80044c8 <usb_lld_start+0x220>
 8004424:	2c0a      	cmp	r4, #10
    otgp->ie[i].DIEPCTL = 0;
 8004426:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 800442a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800442e:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 8004432:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 8004436:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800443a:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800443e:	d043      	beq.n	80044c8 <usb_lld_start+0x220>
 8004440:	2c0b      	cmp	r4, #11
    otgp->ie[i].DIEPCTL = 0;
 8004442:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 8004446:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800444a:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 800444e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 8004452:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004456:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800445a:	d035      	beq.n	80044c8 <usb_lld_start+0x220>
 800445c:	2c0c      	cmp	r4, #12
    otgp->ie[i].DIEPCTL = 0;
 800445e:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 8004462:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004466:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 800446a:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 800446e:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004472:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004476:	d027      	beq.n	80044c8 <usb_lld_start+0x220>
 8004478:	2c0d      	cmp	r4, #13
    otgp->ie[i].DIEPCTL = 0;
 800447a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 800447e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004482:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 8004486:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 800448a:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800448e:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004492:	d019      	beq.n	80044c8 <usb_lld_start+0x220>
 8004494:	2c0e      	cmp	r4, #14
    otgp->ie[i].DIEPCTL = 0;
 8004496:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 800449a:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800449e:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 80044a2:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 80044a6:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80044aa:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80044ae:	d00b      	beq.n	80044c8 <usb_lld_start+0x220>
    otgp->ie[i].DIEPCTL = 0;
 80044b0:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 80044b4:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80044b8:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 80044bc:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 80044c0:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80044c4:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
    if (usbp->config->sof_cb == NULL)
 80044c8:	6872      	ldr	r2, [r6, #4]
 80044ca:	68d1      	ldr	r1, [r2, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80044cc:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    otgp->DIEPMSK  = 0;
 80044d0:	2200      	movs	r2, #0
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80044d2:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 80044d6:	f8c5 2810 	str.w	r2, [r5, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 80044da:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 80044de:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 80044e2:	b149      	cbz	r1, 80044f8 <usb_lld_start+0x250>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <usb_lld_start+0x298>)
 80044e6:	61ab      	str	r3, [r5, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ec:	616b      	str	r3, [r5, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 80044ee:	68ab      	ldr	r3, [r5, #8]
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	60ab      	str	r3, [r5, #8]
}
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <usb_lld_start+0x29c>)
 80044fa:	61ab      	str	r3, [r5, #24]
 80044fc:	e7f4      	b.n	80044e8 <usb_lld_start+0x240>
      rccEnableOTG_FS(true);
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <usb_lld_start+0x2a0>)
 8004500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004506:	635a      	str	r2, [r3, #52]	; 0x34
 8004508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800450a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
 8004510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004518:	615a      	str	r2, [r3, #20]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004520:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004522:	210e      	movs	r1, #14
 8004524:	2043      	movs	r0, #67	; 0x43
      rccResetOTG_FS();
 8004526:	695b      	ldr	r3, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004528:	f7fd feb0 	bl	800228c <nvicEnableVector>
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800452c:	4a07      	ldr	r2, [pc, #28]	; (800454c <usb_lld_start+0x2a4>)
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <usb_lld_start+0x2a8>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004530:	60ea      	str	r2, [r5, #12]
 8004532:	6d74      	ldr	r4, [r6, #84]	; 0x54
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004534:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 8004538:	e6c2      	b.n	80042c0 <usb_lld_start+0x18>
 800453a:	bf00      	nop
 800453c:	20000a18 	.word	0x20000a18
 8004540:	c0303c08 	.word	0xc0303c08
 8004544:	c0303c00 	.word	0xc0303c00
 8004548:	40023800 	.word	0x40023800
 800454c:	40001440 	.word	0x40001440
 8004550:	02200003 	.word	0x02200003

08004554 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 8004554:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004556:	6d44      	ldr	r4, [r0, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004558:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 800455a:	4606      	mov	r6, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800455c:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800455e:	6925      	ldr	r5, [r4, #16]
 8004560:	f015 0520 	ands.w	r5, r5, #32
 8004564:	d1fb      	bne.n	800455e <usb_lld_reset+0xa>
 8004566:	2012      	movs	r0, #18
 8004568:	f001 fb46 	bl	8005bf8 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800456c:	6db0      	ldr	r0, [r6, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 800456e:	f8c4 5834 	str.w	r5, [r4, #2100]	; 0x834
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004572:	6881      	ldr	r1, [r0, #8]
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800457c:	f04f 1501 	mov.w	r5, #65537	; 0x10001
 8004580:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004584:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004588:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800458c:	f8c4 3908 	str.w	r3, [r4, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004590:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004594:	2900      	cmp	r1, #0
 8004596:	f000 8095 	beq.w	80046c4 <usb_lld_reset+0x170>
 800459a:	2901      	cmp	r1, #1
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800459c:	f8c4 2920 	str.w	r2, [r4, #2336]	; 0x920
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80045a0:	f8c4 2b20 	str.w	r2, [r4, #2848]	; 0xb20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045a4:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80045a8:	f8c4 3b28 	str.w	r3, [r4, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045ac:	f240 808a 	bls.w	80046c4 <usb_lld_reset+0x170>
 80045b0:	2902      	cmp	r1, #2
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80045b2:	f8c4 2940 	str.w	r2, [r4, #2368]	; 0x940
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80045b6:	f8c4 2b40 	str.w	r2, [r4, #2880]	; 0xb40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045ba:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80045be:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045c2:	d07f      	beq.n	80046c4 <usb_lld_reset+0x170>
 80045c4:	2903      	cmp	r1, #3
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80045c6:	f8c4 2960 	str.w	r2, [r4, #2400]	; 0x960
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80045ca:	f8c4 2b60 	str.w	r2, [r4, #2912]	; 0xb60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045ce:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80045d2:	f8c4 3b68 	str.w	r3, [r4, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045d6:	d075      	beq.n	80046c4 <usb_lld_reset+0x170>
 80045d8:	2904      	cmp	r1, #4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80045da:	f8c4 2980 	str.w	r2, [r4, #2432]	; 0x980
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80045de:	f8c4 2b80 	str.w	r2, [r4, #2944]	; 0xb80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045e2:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80045e6:	f8c4 3b88 	str.w	r3, [r4, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045ea:	d06b      	beq.n	80046c4 <usb_lld_reset+0x170>
 80045ec:	2905      	cmp	r1, #5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80045ee:	f8c4 29a0 	str.w	r2, [r4, #2464]	; 0x9a0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80045f2:	f8c4 2ba0 	str.w	r2, [r4, #2976]	; 0xba0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045f6:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80045fa:	f8c4 3ba8 	str.w	r3, [r4, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045fe:	d061      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004600:	2906      	cmp	r1, #6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004602:	f8c4 29c0 	str.w	r2, [r4, #2496]	; 0x9c0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004606:	f8c4 2bc0 	str.w	r2, [r4, #3008]	; 0xbc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800460a:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800460e:	f8c4 3bc8 	str.w	r3, [r4, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004612:	d057      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004614:	2907      	cmp	r1, #7
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004616:	f8c4 29e0 	str.w	r2, [r4, #2528]	; 0x9e0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800461a:	f8c4 2be0 	str.w	r2, [r4, #3040]	; 0xbe0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800461e:	f8c4 39e8 	str.w	r3, [r4, #2536]	; 0x9e8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004622:	f8c4 3be8 	str.w	r3, [r4, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004626:	d04d      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004628:	2908      	cmp	r1, #8
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800462a:	f8c4 2a00 	str.w	r2, [r4, #2560]	; 0xa00
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800462e:	f8c4 2c00 	str.w	r2, [r4, #3072]	; 0xc00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004632:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004636:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800463a:	d043      	beq.n	80046c4 <usb_lld_reset+0x170>
 800463c:	2909      	cmp	r1, #9
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800463e:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004642:	f8c4 2c20 	str.w	r2, [r4, #3104]	; 0xc20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004646:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800464a:	f8c4 3c28 	str.w	r3, [r4, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800464e:	d039      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004650:	290a      	cmp	r1, #10
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004652:	f8c4 2a40 	str.w	r2, [r4, #2624]	; 0xa40
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004656:	f8c4 2c40 	str.w	r2, [r4, #3136]	; 0xc40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800465a:	f8c4 3a48 	str.w	r3, [r4, #2632]	; 0xa48
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800465e:	f8c4 3c48 	str.w	r3, [r4, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004662:	d02f      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004664:	290b      	cmp	r1, #11
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8004666:	f8c4 2a60 	str.w	r2, [r4, #2656]	; 0xa60
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800466a:	f8c4 2c60 	str.w	r2, [r4, #3168]	; 0xc60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800466e:	f8c4 3a68 	str.w	r3, [r4, #2664]	; 0xa68
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004672:	f8c4 3c68 	str.w	r3, [r4, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004676:	d025      	beq.n	80046c4 <usb_lld_reset+0x170>
 8004678:	290c      	cmp	r1, #12
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800467a:	f8c4 2a80 	str.w	r2, [r4, #2688]	; 0xa80
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800467e:	f8c4 2c80 	str.w	r2, [r4, #3200]	; 0xc80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004682:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004686:	f8c4 3c88 	str.w	r3, [r4, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800468a:	d01b      	beq.n	80046c4 <usb_lld_reset+0x170>
 800468c:	290d      	cmp	r1, #13
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800468e:	f8c4 2aa0 	str.w	r2, [r4, #2720]	; 0xaa0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004692:	f8c4 2ca0 	str.w	r2, [r4, #3232]	; 0xca0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004696:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800469a:	f8c4 3ca8 	str.w	r3, [r4, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800469e:	d011      	beq.n	80046c4 <usb_lld_reset+0x170>
 80046a0:	290e      	cmp	r1, #14
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80046a2:	f8c4 2ac0 	str.w	r2, [r4, #2752]	; 0xac0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80046a6:	f8c4 2cc0 	str.w	r2, [r4, #3264]	; 0xcc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80046aa:	f8c4 3ac8 	str.w	r3, [r4, #2760]	; 0xac8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80046ae:	f8c4 3cc8 	str.w	r3, [r4, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80046b2:	d007      	beq.n	80046c4 <usb_lld_reset+0x170>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80046b4:	f8c4 2ae0 	str.w	r2, [r4, #2784]	; 0xae0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80046b8:	f8c4 2ce0 	str.w	r2, [r4, #3296]	; 0xce0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80046bc:	f8c4 3ae8 	str.w	r3, [r4, #2792]	; 0xae8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80046c0:	f8c4 3ce8 	str.w	r3, [r4, #3304]	; 0xce8
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80046c4:	6803      	ldr	r3, [r0, #0]
 80046c6:	65f3      	str	r3, [r6, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80046c8:	6803      	ldr	r3, [r0, #0]
  otg_rxfifo_flush(usbp);
 80046ca:	6d72      	ldr	r2, [r6, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80046cc:	6263      	str	r3, [r4, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80046ce:	2310      	movs	r3, #16
 80046d0:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 80046d2:	6915      	ldr	r5, [r2, #16]
 80046d4:	f015 0510 	ands.w	r5, r5, #16
 80046d8:	d1fb      	bne.n	80046d2 <usb_lld_reset+0x17e>
 80046da:	2012      	movs	r0, #18
 80046dc:	f001 fa8c 	bl	8005bf8 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80046e0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 80046e4:	4a11      	ldr	r2, [pc, #68]	; (800472c <usb_lld_reset+0x1d8>)
  usbp->epc[0] = &ep0config;
 80046e6:	4912      	ldr	r1, [pc, #72]	; (8004730 <usb_lld_reset+0x1dc>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80046e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046ec:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 80046f0:	69a3      	ldr	r3, [r4, #24]
 80046f2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	61a3      	str	r3, [r4, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 80046fc:	2309      	movs	r3, #9
 80046fe:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8004702:	f8c4 3814 	str.w	r3, [r4, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8004706:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  usbp->epc[0] = &ep0config;
 800470a:	60f1      	str	r1, [r6, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 800470c:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8004710:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8004714:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8004718:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  next = usbp->pmnext;
 800471c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  usbp->pmnext += size;
 800471e:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 8004726:	65f2      	str	r2, [r6, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8004728:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	10008040 	.word	0x10008040
 8004730:	08008530 	.word	0x08008530

08004734 <usb_lld_set_address>:
  stm32_otg_t *otgp = usbp->otg;
 8004734:	6d42      	ldr	r2, [r0, #84]	; 0x54
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8004736:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800473a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800473e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004742:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004746:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 800474a:	4770      	bx	lr

0800474c <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 800474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004750:	fa0f f881 	sxth.w	r8, r1
 8004754:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 8004758:	460d      	mov	r5, r1
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f002 0203 	and.w	r2, r2, #3
 8004762:	2a02      	cmp	r2, #2
 8004764:	f000 8097 	beq.w	8004896 <usb_lld_init_endpoint+0x14a>
 8004768:	2a03      	cmp	r2, #3
 800476a:	f000 8091 	beq.w	8004890 <usb_lld_init_endpoint+0x144>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 800476e:	4c4b      	ldr	r4, [pc, #300]	; (800489c <usb_lld_init_endpoint+0x150>)
 8004770:	494b      	ldr	r1, [pc, #300]	; (80048a0 <usb_lld_init_endpoint+0x154>)
 8004772:	2a01      	cmp	r2, #1
 8004774:	bf0c      	ite	eq
 8004776:	46a1      	moveq	r9, r4
 8004778:	4689      	movne	r9, r1
  stm32_otg_t *otgp = usbp->otg;
 800477a:	6d44      	ldr	r4, [r0, #84]	; 0x54
  if (usbp->epc[ep]->out_state != NULL) {
 800477c:	699e      	ldr	r6, [r3, #24]
  otgp->oe[ep].DOEPTSIZ = 0;
 800477e:	0169      	lsls	r1, r5, #5
 8004780:	1862      	adds	r2, r4, r1
 8004782:	f04f 0c00 	mov.w	ip, #0
 8004786:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 800478a:	f105 0210 	add.w	r2, r5, #16
 800478e:	f04f 0c01 	mov.w	ip, #1
 8004792:	fa0c f202 	lsl.w	r2, ip, r2
  if (usbp->epc[ep]->out_state != NULL) {
 8004796:	2e00      	cmp	r6, #0
 8004798:	d04b      	beq.n	8004832 <usb_lld_init_endpoint+0xe6>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800479a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 800479e:	f105 0658 	add.w	r6, r5, #88	; 0x58
 80047a2:	0176      	lsls	r6, r6, #5
 80047a4:	ea4c 0c09 	orr.w	ip, ip, r9
 80047a8:	f844 c006 	str.w	ip, [r4, r6]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 80047ac:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 80047b0:	4332      	orrs	r2, r6
 80047b2:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 80047b6:	1866      	adds	r6, r4, r1
  if (usbp->epc[ep]->in_state != NULL) {
 80047b8:	f8d3 c014 	ldr.w	ip, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 80047bc:	2200      	movs	r2, #0
 80047be:	01a9      	lsls	r1, r5, #6
 80047c0:	f8c6 2910 	str.w	r2, [r6, #2320]	; 0x910
 80047c4:	f041 0120 	orr.w	r1, r1, #32
 80047c8:	1e6a      	subs	r2, r5, #1
  if (usbp->epc[ep]->in_state != NULL) {
 80047ca:	f1bc 0f00 	cmp.w	ip, #0
 80047ce:	d03f      	beq.n	8004850 <usb_lld_init_endpoint+0x104>
    if (usbp->epc[ep]->in_multiplier > 1)
 80047d0:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80047d4:	8a1e      	ldrh	r6, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 80047d6:	f1bc 0f01 	cmp.w	ip, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80047da:	ea4f 0396 	mov.w	r3, r6, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80047de:	f102 0240 	add.w	r2, r2, #64	; 0x40
  next = usbp->pmnext;
 80047e2:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 80047e4:	bf88      	it	hi
 80047e6:	fb0c f303 	mulhi.w	r3, ip, r3
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80047ea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  usbp->pmnext += size;
 80047ee:	eb03 0c06 	add.w	ip, r3, r6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80047f2:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  usbp->pmnext += size;
 80047f6:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80047fa:	6053      	str	r3, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80047fc:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	069a      	lsls	r2, r3, #26
 8004802:	d4fc      	bmi.n	80047fe <usb_lld_init_endpoint+0xb2>
 8004804:	2012      	movs	r0, #18
 8004806:	f001 f9f7 	bl	8005bf8 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 800480e:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8004812:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8004816:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8004818:	ea42 0209 	orr.w	r2, r2, r9
    otgp->ie[ep].DIEPCTL = ctl |
 800481c:	50e2      	str	r2, [r4, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 800481e:	2101      	movs	r1, #1
 8004820:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8004824:	fa01 f505 	lsl.w	r5, r1, r5
 8004828:	431d      	orrs	r5, r3
 800482a:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 800482e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004832:	eb04 1c48 	add.w	ip, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8004836:	f8dc 6b00 	ldr.w	r6, [ip, #2816]	; 0xb00
 800483a:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
 800483e:	f8cc 6b00 	str.w	r6, [ip, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8004842:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8004846:	ea26 0202 	bic.w	r2, r6, r2
 800484a:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
 800484e:	e7b2      	b.n	80047b6 <usb_lld_init_endpoint+0x6a>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8004850:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8004854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004858:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <usb_lld_init_endpoint+0x158>)
 800485a:	605a      	str	r2, [r3, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800485c:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	069b      	lsls	r3, r3, #26
 8004862:	d4fc      	bmi.n	800485e <usb_lld_init_endpoint+0x112>
 8004864:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8004868:	2012      	movs	r0, #18
 800486a:	f001 f9c5 	bl	8005bf8 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800486e:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8004872:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004876:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 800487a:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f505 	lsl.w	r5, r1, r5
 8004884:	ea23 0505 	bic.w	r5, r3, r5
 8004888:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 800488c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8004890:	f8df 9014 	ldr.w	r9, [pc, #20]	; 80048a8 <usb_lld_init_endpoint+0x15c>
    break;
 8004894:	e771      	b.n	800477a <usb_lld_init_endpoint+0x2e>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8004896:	f8df 9014 	ldr.w	r9, [pc, #20]	; 80048ac <usb_lld_init_endpoint+0x160>
    break;
 800489a:	e76e      	b.n	800477a <usb_lld_init_endpoint+0x2e>
 800489c:	10048000 	.word	0x10048000
 80048a0:	10008000 	.word	0x10008000
 80048a4:	02000400 	.word	0x02000400
 80048a8:	100c8000 	.word	0x100c8000
 80048ac:	10088000 	.word	0x10088000

080048b0 <usb_lld_disable_endpoints>:
  otg_disable_ep(usbp);
 80048b0:	e9d0 3115 	ldrd	r3, r1, [r0, #84]	; 0x54
void usb_lld_disable_endpoints(USBDriver *usbp) {
 80048b4:	b410      	push	{r4}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80048b6:	680c      	ldr	r4, [r1, #0]
 80048b8:	65c4      	str	r4, [r0, #92]	; 0x5c
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80048ba:	6888      	ldr	r0, [r1, #8]
    otgp->ie[i].DIEPCTL = 0;
 80048bc:	2200      	movs	r2, #0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80048be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->ie[i].DIEPCTL = 0;
 80048c2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 80048c6:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80048ca:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 80048ce:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 80048d2:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80048d6:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80048da:	2800      	cmp	r0, #0
 80048dc:	f000 80d5 	beq.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 80048e0:	2801      	cmp	r0, #1
    otgp->ie[i].DIEPCTL = 0;
 80048e2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 80048e6:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80048ea:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 80048ee:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 80048f2:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80048f6:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80048fa:	f240 80c6 	bls.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 80048fe:	2802      	cmp	r0, #2
    otgp->ie[i].DIEPCTL = 0;
 8004900:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 8004904:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004908:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 800490c:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 8004910:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004914:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004918:	f000 80b7 	beq.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 800491c:	2803      	cmp	r0, #3
    otgp->ie[i].DIEPCTL = 0;
 800491e:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 8004922:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004926:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 800492a:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 800492e:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004932:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004936:	f000 80a8 	beq.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 800493a:	2804      	cmp	r0, #4
    otgp->ie[i].DIEPCTL = 0;
 800493c:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 8004940:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004944:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 8004948:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 800494c:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004950:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004954:	f000 8099 	beq.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004958:	2805      	cmp	r0, #5
    otgp->ie[i].DIEPCTL = 0;
 800495a:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 800495e:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004962:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 8004966:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 800496a:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800496e:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004972:	f000 808a 	beq.w	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004976:	2806      	cmp	r0, #6
    otgp->ie[i].DIEPCTL = 0;
 8004978:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 800497c:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004980:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 8004984:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 8004988:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800498c:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004990:	d07b      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004992:	2807      	cmp	r0, #7
    otgp->ie[i].DIEPCTL = 0;
 8004994:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 8004998:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800499c:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 80049a0:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 80049a4:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80049a8:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80049ac:	d06d      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 80049ae:	2808      	cmp	r0, #8
    otgp->ie[i].DIEPCTL = 0;
 80049b0:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 80049b4:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80049b8:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 80049bc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 80049c0:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80049c4:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80049c8:	d05f      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 80049ca:	2809      	cmp	r0, #9
    otgp->ie[i].DIEPCTL = 0;
 80049cc:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 80049d0:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80049d4:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 80049d8:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 80049dc:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80049e0:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80049e4:	d051      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 80049e6:	280a      	cmp	r0, #10
    otgp->ie[i].DIEPCTL = 0;
 80049e8:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 80049ec:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80049f0:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 80049f4:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 80049f8:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80049fc:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004a00:	d043      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004a02:	280b      	cmp	r0, #11
    otgp->ie[i].DIEPCTL = 0;
 8004a04:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 8004a08:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004a0c:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 8004a10:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 8004a14:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004a18:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004a1c:	d035      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004a1e:	280c      	cmp	r0, #12
    otgp->ie[i].DIEPCTL = 0;
 8004a20:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 8004a24:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004a28:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 8004a2c:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 8004a30:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004a34:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004a38:	d027      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004a3a:	280d      	cmp	r0, #13
    otgp->ie[i].DIEPCTL = 0;
 8004a3c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 8004a40:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004a44:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 8004a48:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 8004a4c:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004a50:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004a54:	d019      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
 8004a56:	280e      	cmp	r0, #14
    otgp->ie[i].DIEPCTL = 0;
 8004a58:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 8004a5c:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004a60:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 8004a64:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 8004a68:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004a6c:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004a70:	d00b      	beq.n	8004a8a <usb_lld_disable_endpoints+0x1da>
    otgp->ie[i].DIEPCTL = 0;
 8004a72:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 8004a76:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004a7a:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 8004a7e:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 8004a82:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004a86:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004a8a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004a8e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8004a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <usb_lld_get_status_out>:
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8004a98:	3158      	adds	r1, #88	; 0x58
 8004a9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004a9c:	0149      	lsls	r1, r1, #5
 8004a9e:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8004aa0:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004aa4:	d004      	beq.n	8004ab0 <usb_lld_get_status_out+0x18>
  if (ctl & DOEPCTL_STALL)
 8004aa6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8004aaa:	bf14      	ite	ne
 8004aac:	2001      	movne	r0, #1
 8004aae:	2002      	moveq	r0, #2
}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop

08004ab4 <usb_lld_get_status_in>:
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004ab4:	3148      	adds	r1, #72	; 0x48
 8004ab6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004ab8:	0149      	lsls	r1, r1, #5
 8004aba:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8004abc:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004ac0:	d004      	beq.n	8004acc <usb_lld_get_status_in+0x18>
  if (ctl & DIEPCTL_STALL)
 8004ac2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8004ac6:	bf14      	ite	ne
 8004ac8:	2001      	movne	r0, #1
 8004aca:	2002      	moveq	r0, #2
}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop

08004ad0 <usb_lld_read_setup>:
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004ad0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004ad4:	68cb      	ldr	r3, [r1, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	6053      	str	r3, [r2, #4]
 8004ade:	6011      	str	r1, [r2, #0]
}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004ae4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8004ae8:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004aea:	68dd      	ldr	r5, [r3, #12]
 8004aec:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 8004aee:	681c      	ldr	r4, [r3, #0]
 8004af0:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8004af2:	b919      	cbnz	r1, 8004afc <usb_lld_start_out+0x18>
 8004af4:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8004af6:	bf84      	itt	hi
 8004af8:	2440      	movhi	r4, #64	; 0x40
 8004afa:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004afc:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004b00:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	4422      	add	r2, r4
 8004b06:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	3303      	adds	r3, #3
 8004b10:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004b14:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8004b18:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004b1c:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004b20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004b24:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004b26:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004b2a:	d00a      	beq.n	8004b42 <usb_lld_start_out+0x5e>
 8004b2c:	b209      	sxth	r1, r1
 8004b2e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8004b32:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8004b34:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3c:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004b40:	4770      	bx	lr
 8004b42:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004b44:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004b48:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8004b4c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8004b50:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8004b54:	bf14      	ite	ne
 8004b56:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8004b5a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004b5e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8004b62:	e7e4      	b.n	8004b2e <usb_lld_start_out+0x4a>

08004b64 <usb_lld_start_in>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004b64:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004b68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004b6a:	68d8      	ldr	r0, [r3, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8004b6c:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004b6e:	6944      	ldr	r4, [r0, #20]
  isp->totsize = isp->txsize;
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	60e3      	str	r3, [r4, #12]
  if (isp->txsize == 0) {
 8004b74:	b9eb      	cbnz	r3, 8004bb2 <usb_lld_start_in+0x4e>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8004b76:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8004b7a:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8004b7e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004b82:	6803      	ldr	r3, [r0, #0]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d025      	beq.n	8004bd8 <usb_lld_start_in+0x74>
 8004b8c:	b208      	sxth	r0, r1
 8004b8e:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004b92:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004b94:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8004b98:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004b9c:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004ba0:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8004ba4:	fa03 f101 	lsl.w	r1, r3, r1
 8004ba8:	4301      	orrs	r1, r0
 8004baa:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8004bae:	bcf0      	pop	{r4, r5, r6, r7}
 8004bb0:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8004bb2:	b311      	cbz	r1, 8004bfa <usb_lld_start_in+0x96>
 8004bb4:	f043 5600 	orr.w	r6, r3, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004bb8:	8a07      	ldrh	r7, [r0, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8004bba:	eb02 1541 	add.w	r5, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004bbe:	1e7c      	subs	r4, r7, #1
 8004bc0:	4423      	add	r3, r4
 8004bc2:	fbb3 f3f7 	udiv	r3, r3, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8004bc6:	ea46 43c3 	orr.w	r3, r6, r3, lsl #19
 8004bca:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004bce:	6803      	ldr	r3, [r0, #0]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d1d9      	bne.n	8004b8c <usb_lld_start_in+0x28>
 8004bd8:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004bda:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8004bde:	eb02 1440 	add.w	r4, r2, r0, lsl #5
 8004be2:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8004be6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8004bea:	bf14      	ite	ne
 8004bec:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8004bf0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8004bf8:	e7c9      	b.n	8004b8e <usb_lld_start_in+0x2a>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d9da      	bls.n	8004bb4 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	4e01      	ldr	r6, [pc, #4]	; (8004c08 <usb_lld_start_in+0xa4>)
 8004c02:	6023      	str	r3, [r4, #0]
 8004c04:	e7d8      	b.n	8004bb8 <usb_lld_start_in+0x54>
 8004c06:	bf00      	nop
 8004c08:	20000040 	.word	0x20000040

08004c0c <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8004c0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004c0e:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004c12:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c1a:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004c1e:	4770      	bx	lr

08004c20 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8004c20:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004c22:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8004c26:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c2e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8004c32:	4770      	bx	lr

08004c34 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8004c34:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004c36:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004c3a:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c42:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004c46:	4770      	bx	lr

08004c48 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004c48:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004c4a:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004c4e:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c56:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8004c5a:	4770      	bx	lr

08004c5c <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004c5c:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460d      	mov	r5, r1
 8004c64:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004c66:	d149      	bne.n	8004cfc <spi_lld_serve_rx_interrupt+0xa0>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8004c68:	6861      	ldr	r1, [r4, #4]
 8004c6a:	780b      	ldrb	r3, [r1, #0]
 8004c6c:	b17b      	cbz	r3, 8004c8e <spi_lld_serve_rx_interrupt+0x32>
 8004c6e:	f005 0620 	and.w	r6, r5, #32
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8004c72:	06ed      	lsls	r5, r5, #27
 8004c74:	d43c      	bmi.n	8004cf0 <spi_lld_serve_rx_interrupt+0x94>
      /* Half buffer interrupt.*/
      _spi_isr_half_code(spip);
    }
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8004c76:	b14e      	cbz	r6, 8004c8c <spi_lld_serve_rx_interrupt+0x30>
      /* End buffer interrupt.*/
      _spi_isr_full_code(spip);
 8004c78:	6863      	ldr	r3, [r4, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	b133      	cbz	r3, 8004c8c <spi_lld_serve_rx_interrupt+0x30>
 8004c7e:	2204      	movs	r2, #4
 8004c80:	7022      	strb	r2, [r4, #0]
 8004c82:	4620      	mov	r0, r4
 8004c84:	4798      	blx	r3
 8004c86:	7823      	ldrb	r3, [r4, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d03b      	beq.n	8004d04 <spi_lld_serve_rx_interrupt+0xa8>

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
  }
}
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
    dmaStreamDisable(spip->dmatx);
 8004c8e:	6965      	ldr	r5, [r4, #20]
 8004c90:	682a      	ldr	r2, [r5, #0]
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	f023 031f 	bic.w	r3, r3, #31
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	07d8      	lsls	r0, r3, #31
 8004c9e:	d4fc      	bmi.n	8004c9a <spi_lld_serve_rx_interrupt+0x3e>
 8004ca0:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 8004ca2:	6920      	ldr	r0, [r4, #16]
    dmaStreamDisable(spip->dmatx);
 8004ca4:	686d      	ldr	r5, [r5, #4]
 8004ca6:	233d      	movs	r3, #61	; 0x3d
 8004ca8:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 8004caa:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8004cac:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	f023 031f 	bic.w	r3, r3, #31
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	07db      	lsls	r3, r3, #31
 8004cba:	d4fc      	bmi.n	8004cb6 <spi_lld_serve_rx_interrupt+0x5a>
 8004cbc:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8004cbe:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8004cc0:	6841      	ldr	r1, [r0, #4]
 8004cc2:	233d      	movs	r3, #61	; 0x3d
 8004cc4:	40ab      	lsls	r3, r5
 8004cc6:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 8004cc8:	b1fa      	cbz	r2, 8004d0a <spi_lld_serve_rx_interrupt+0xae>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	7023      	strb	r3, [r4, #0]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4790      	blx	r2
 8004cd2:	7823      	ldrb	r3, [r4, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d018      	beq.n	8004d0a <spi_lld_serve_rx_interrupt+0xae>
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f104 0008 	add.w	r0, r4, #8
 8004ce4:	f001 fa1a 	bl	800611c <chThdResumeI>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
      _spi_isr_half_code(spip);
 8004cf0:	684b      	ldr	r3, [r1, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ca      	beq.n	8004c8c <spi_lld_serve_rx_interrupt+0x30>
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4798      	blx	r3
 8004cfa:	e7bc      	b.n	8004c76 <spi_lld_serve_rx_interrupt+0x1a>
  chSysHalt(reason);
 8004cfc:	4804      	ldr	r0, [pc, #16]	; (8004d10 <spi_lld_serve_rx_interrupt+0xb4>)
 8004cfe:	f000 ff35 	bl	8005b6c <chSysHalt>
 8004d02:	e7b1      	b.n	8004c68 <spi_lld_serve_rx_interrupt+0xc>
      _spi_isr_full_code(spip);
 8004d04:	2303      	movs	r3, #3
 8004d06:	7023      	strb	r3, [r4, #0]
}
 8004d08:	bd70      	pop	{r4, r5, r6, pc}
    _spi_isr_code(spip);
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	7023      	strb	r3, [r4, #0]
 8004d0e:	e7e3      	b.n	8004cd8 <spi_lld_serve_rx_interrupt+0x7c>
 8004d10:	08008524 	.word	0x08008524

08004d14 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004d14:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4605      	mov	r5, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004d1c:	d118      	bne.n	8004d50 <spi_lld_serve_tx_interrupt+0x3c>
#else
  (void)spip;
  (void)flags;
#endif
  #if !SPID1_USE_RECEIVE
  if (spip == &SPID1)
 8004d1e:	4c10      	ldr	r4, [pc, #64]	; (8004d60 <spi_lld_serve_tx_interrupt+0x4c>)
 8004d20:	42a5      	cmp	r5, r4
 8004d22:	d000      	beq.n	8004d26 <spi_lld_serve_tx_interrupt+0x12>
    _spi_isr_code(spip);
  #endif
}
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b1ab      	cbz	r3, 8004d58 <spi_lld_serve_tx_interrupt+0x44>
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	7022      	strb	r2, [r4, #0]
 8004d30:	4620      	mov	r0, r4
 8004d32:	4798      	blx	r3
 8004d34:	7823      	ldrb	r3, [r4, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00e      	beq.n	8004d58 <spi_lld_serve_tx_interrupt+0x44>
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8004d40:	2100      	movs	r1, #0
 8004d42:	4808      	ldr	r0, [pc, #32]	; (8004d64 <spi_lld_serve_tx_interrupt+0x50>)
 8004d44:	f001 f9ea 	bl	800611c <chThdResumeI>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f383 8811 	msr	BASEPRI, r3
}
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8004d50:	4805      	ldr	r0, [pc, #20]	; (8004d68 <spi_lld_serve_tx_interrupt+0x54>)
 8004d52:	f000 ff0b 	bl	8005b6c <chSysHalt>
 8004d56:	e7e2      	b.n	8004d1e <spi_lld_serve_tx_interrupt+0xa>
    _spi_isr_code(spip);
 8004d58:	2302      	movs	r3, #2
 8004d5a:	7023      	strb	r3, [r4, #0]
 8004d5c:	e7ed      	b.n	8004d3a <spi_lld_serve_tx_interrupt+0x26>
 8004d5e:	bf00      	nop
 8004d60:	20000a90 	.word	0x20000a90
 8004d64:	20000a98 	.word	0x20000a98
 8004d68:	08008524 	.word	0x08008524

08004d6c <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004d6e:	4f13      	ldr	r7, [pc, #76]	; (8004dbc <spi_lld_init+0x50>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI4
  spiObjectInit(&SPID4);
 8004d70:	4e13      	ldr	r6, [pc, #76]	; (8004dc0 <spi_lld_init+0x54>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI5
  spiObjectInit(&SPID5);
 8004d72:	4c14      	ldr	r4, [pc, #80]	; (8004dc4 <spi_lld_init+0x58>)
  spiObjectInit(&SPID1);
 8004d74:	4638      	mov	r0, r7
 8004d76:	f7fc ff5b 	bl	8001c30 <spiObjectInit>
  SPID1.spi       = SPI1;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <spi_lld_init+0x5c>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <spi_lld_init+0x60>)
  SPID1.spi       = SPI1;
 8004d7e:	60fb      	str	r3, [r7, #12]
  SPID1.dmarx     = NULL;
 8004d80:	2500      	movs	r5, #0
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <spi_lld_init+0x64>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004d84:	61ba      	str	r2, [r7, #24]
  spiObjectInit(&SPID4);
 8004d86:	4630      	mov	r0, r6
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004d88:	61fb      	str	r3, [r7, #28]
  SPID1.dmatx     = NULL;
 8004d8a:	e9c7 5504 	strd	r5, r5, [r7, #16]
  spiObjectInit(&SPID4);
 8004d8e:	f7fc ff4f 	bl	8001c30 <spiObjectInit>
  SPID4.rxdmamode = STM32_DMA_CR_CHSEL(SPI4_RX_DMA_CHANNEL) |
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <spi_lld_init+0x68>)
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <spi_lld_init+0x6c>)
  SPID4.spi       = SPI4;
 8004d96:	4911      	ldr	r1, [pc, #68]	; (8004ddc <spi_lld_init+0x70>)
 8004d98:	60f1      	str	r1, [r6, #12]
  spiObjectInit(&SPID5);
 8004d9a:	4620      	mov	r0, r4
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004d9c:	e9c6 2306 	strd	r2, r3, [r6, #24]
  SPID4.dmatx     = NULL;
 8004da0:	e9c6 5504 	strd	r5, r5, [r6, #16]
  spiObjectInit(&SPID5);
 8004da4:	f7fc ff44 	bl	8001c30 <spiObjectInit>
  SPID5.spi       = SPI5;
  SPID5.dmarx     = NULL;
  SPID5.dmatx     = NULL;
  SPID5.rxdmamode = STM32_DMA_CR_CHSEL(SPI5_RX_DMA_CHANNEL) |
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <spi_lld_init+0x74>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI5_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <spi_lld_init+0x78>)
  SPID5.spi       = SPI5;
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <spi_lld_init+0x7c>)
 8004dae:	60e1      	str	r1, [r4, #12]
  SPID5.dmatx     = NULL;
 8004db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 8004db4:	e9c4 2306 	strd	r2, r3, [r4, #24]
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000a90 	.word	0x20000a90
 8004dc0:	20000ab0 	.word	0x20000ab0
 8004dc4:	20000ad0 	.word	0x20000ad0
 8004dc8:	40013000 	.word	0x40013000
 8004dcc:	06010016 	.word	0x06010016
 8004dd0:	06010056 	.word	0x06010056
 8004dd4:	08010016 	.word	0x08010016
 8004dd8:	0a010046 	.word	0x0a010046
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	04010016 	.word	0x04010016
 8004de4:	0e010046 	.word	0x0e010046
 8004de8:	40015000 	.word	0x40015000

08004dec <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004dee:	7803      	ldrb	r3, [r0, #0]
 8004df0:	2b01      	cmp	r3, #1
void spi_lld_start(SPIDriver *spip) {
 8004df2:	4604      	mov	r4, r0
  if (spip->state == SPI_STOP) {
 8004df4:	d032      	beq.n	8004e5c <spi_lld_start+0x70>
 8004df6:	68c3      	ldr	r3, [r0, #12]
 8004df8:	4d45      	ldr	r5, [pc, #276]	; (8004f10 <spi_lld_start+0x124>)
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004dfa:	6866      	ldr	r6, [r4, #4]
 8004dfc:	69a2      	ldr	r2, [r4, #24]
 8004dfe:	89b0      	ldrh	r0, [r6, #12]
 8004e00:	69e1      	ldr	r1, [r4, #28]
 8004e02:	0507      	lsls	r7, r0, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8004e04:	7837      	ldrb	r7, [r6, #0]
 8004e06:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8004e0a:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004e0e:	bf44      	itt	mi
 8004e10:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004e14:	f441 5120 	orrmi.w	r1, r1, #10240	; 0x2800
  if (spip->config->circular) {
 8004e18:	b1df      	cbz	r7, 8004e52 <spi_lld_start+0x66>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004e1a:	f442 7284 	orr.w	r2, r2, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004e1e:	f441 7184 	orr.w	r1, r1, #264	; 0x108

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004e22:	89f6      	ldrh	r6, [r6, #14]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004e24:	681f      	ldr	r7, [r3, #0]
 8004e26:	61e1      	str	r1, [r4, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004e28:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004e2c:	f046 0107 	orr.w	r1, r6, #7
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004e30:	f027 0740 	bic.w	r7, r7, #64	; 0x40
                    SPI_CR2_TXDMAEN;

#if !SPID1_USE_RECEIVE
  if (spip != &SPID1)
 8004e34:	42ac      	cmp	r4, r5
 8004e36:	61a2      	str	r2, [r4, #24]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004e38:	601f      	str	r7, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004e3a:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004e3c:	6059      	str	r1, [r3, #4]
  if (spip != &SPID1)
 8004e3e:	d003      	beq.n	8004e48 <spi_lld_start+0x5c>
#endif
    spip->spi->CR2 |= SPI_CR2_RXDMAEN;
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
}
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004e52:	f422 7284 	bic.w	r2, r2, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004e56:	f421 7184 	bic.w	r1, r1, #264	; 0x108
 8004e5a:	e7e2      	b.n	8004e22 <spi_lld_start+0x36>
    if (&SPID1 == spip) {
 8004e5c:	4d2c      	ldr	r5, [pc, #176]	; (8004f10 <spi_lld_start+0x124>)
 8004e5e:	42a8      	cmp	r0, r5
 8004e60:	d041      	beq.n	8004ee6 <spi_lld_start+0xfa>
    if (&SPID4 == spip) {
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <spi_lld_start+0x128>)
 8004e64:	4298      	cmp	r0, r3
 8004e66:	d025      	beq.n	8004eb4 <spi_lld_start+0xc8>
    if (&SPID5 == spip) {
 8004e68:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <spi_lld_start+0x12c>)
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	d009      	beq.n	8004e82 <spi_lld_start+0x96>
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004e6e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8004e72:	6811      	ldr	r1, [r2, #0]
 8004e74:	f103 020c 	add.w	r2, r3, #12
 8004e78:	608a      	str	r2, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004e7a:	6961      	ldr	r1, [r4, #20]
 8004e7c:	6809      	ldr	r1, [r1, #0]
 8004e7e:	608a      	str	r2, [r1, #8]
 8004e80:	e7bb      	b.n	8004dfa <spi_lld_start+0xe>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 8004e82:	4623      	mov	r3, r4
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <spi_lld_start+0x130>)
 8004e86:	210a      	movs	r1, #10
 8004e88:	200b      	movs	r0, #11
 8004e8a:	f7fe f8f1 	bl	8003070 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004e8e:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 8004e90:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <spi_lld_start+0x134>)
 8004e94:	210a      	movs	r1, #10
 8004e96:	200e      	movs	r0, #14
 8004e98:	f7fe f8ea 	bl	8003070 <dmaStreamAllocI>
      rccEnableSPI5(true);
 8004e9c:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004e9e:	6160      	str	r0, [r4, #20]
      rccEnableSPI5(true);
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ea8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004eaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004eae:	665a      	str	r2, [r3, #100]	; 0x64
 8004eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb2:	e7dc      	b.n	8004e6e <spi_lld_start+0x82>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <spi_lld_start+0x130>)
 8004eb8:	210a      	movs	r1, #10
 8004eba:	2008      	movs	r0, #8
 8004ebc:	f7fe f8d8 	bl	8003070 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004ec0:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004ec2:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <spi_lld_start+0x134>)
 8004ec6:	210a      	movs	r1, #10
 8004ec8:	200c      	movs	r0, #12
 8004eca:	f7fe f8d1 	bl	8003070 <dmaStreamAllocI>
      rccEnableSPI4(true);
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004ed0:	6160      	str	r0, [r4, #20]
      rccEnableSPI4(true);
 8004ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8004eda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ee0:	665a      	str	r2, [r3, #100]	; 0x64
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	e7c3      	b.n	8004e6e <spi_lld_start+0x82>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <spi_lld_start+0x134>)
 8004eea:	210a      	movs	r1, #10
 8004eec:	200d      	movs	r0, #13
 8004eee:	f7fe f8bf 	bl	8003070 <dmaStreamAllocI>
      rccEnableSPI1(true);
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <spi_lld_start+0x138>)
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	6c51      	ldr	r1, [r2, #68]	; 0x44
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 8004ef8:	6160      	str	r0, [r4, #20]
      rccEnableSPI1(true);
 8004efa:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004efe:	6451      	str	r1, [r2, #68]	; 0x44
 8004f00:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004f02:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004f06:	6651      	str	r1, [r2, #100]	; 0x64
 8004f08:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004f0a:	f103 020c 	add.w	r2, r3, #12
 8004f0e:	e7b4      	b.n	8004e7a <spi_lld_start+0x8e>
 8004f10:	20000a90 	.word	0x20000a90
 8004f14:	20000ab0 	.word	0x20000ab0
 8004f18:	20000ad0 	.word	0x20000ad0
 8004f1c:	08004c5d 	.word	0x08004c5d
 8004f20:	08004d15 	.word	0x08004d15
 8004f24:	40023800 	.word	0x40023800

08004f28 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8004f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	0792      	lsls	r2, r2, #30
 8004f30:	d401      	bmi.n	8004f36 <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8004f32:	f001 bb53 	b.w	80065dc <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8004f36:	b510      	push	{r4, lr}
    STM32_ST_TIM->SR = 0U;
 8004f38:	2400      	movs	r4, #0
 8004f3a:	611c      	str	r4, [r3, #16]
 8004f3c:	2320      	movs	r3, #32
 8004f3e:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 8004f42:	f000 fe19 	bl	8005b78 <chSysTimerHandlerI>
 8004f46:	f384 8811 	msr	BASEPRI, r4
}
 8004f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004f4e:	f001 bb45 	b.w	80065dc <_port_irq_epilogue>
 8004f52:	bf00      	nop

08004f54 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <st_lld_init+0x4c>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004f56:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <st_lld_init+0x50>)
  ST_ENABLE_CLOCK();
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
void st_lld_init(void) {
 8004f5e:	b470      	push	{r4, r5, r6}
  ST_ENABLE_CLOCK();
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
 8004f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8004f6c:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8004f72:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004f74:	2401      	movs	r4, #1
  ST_ENABLE_STOP();
 8004f76:	f041 0101 	orr.w	r1, r1, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004f7a:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004f7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
 8004f82:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004f84:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8004f86:	2108      	movs	r1, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004f88:	62dd      	str	r5, [r3, #44]	; 0x2c
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8004f8a:	201c      	movs	r0, #28
  STM32_ST_TIM->CCMR1  = 0;
 8004f8c:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004f8e:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004f90:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004f92:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004f94:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8004f96:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8004f98:	bc70      	pop	{r4, r5, r6}
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8004f9a:	f7fd b977 	b.w	800228c <nvicEnableVector>
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	e0042000 	.word	0xe0042000

08004fa8 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004faa:	4d17      	ldr	r5, [pc, #92]	; (8005008 <VectorA4+0x60>)
 8004fac:	69ab      	ldr	r3, [r5, #24]
 8004fae:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4014      	ands	r4, r2
 8004fb4:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8004fb6:	43d2      	mvns	r2, r2
 8004fb8:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004fba:	07a3      	lsls	r3, r4, #30
 8004fbc:	d504      	bpl.n	8004fc8 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8004fbe:	686b      	ldr	r3, [r5, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004fc2:	b10b      	cbz	r3, 8004fc8 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004fc8:	0760      	lsls	r0, r4, #29
 8004fca:	d504      	bpl.n	8004fd6 <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8004fcc:	686b      	ldr	r3, [r5, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004fd0:	b10b      	cbz	r3, 8004fd6 <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 8004fd2:	480d      	ldr	r0, [pc, #52]	; (8005008 <VectorA4+0x60>)
 8004fd4:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004fd6:	0721      	lsls	r1, r4, #28
 8004fd8:	d504      	bpl.n	8004fe4 <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8004fda:	686b      	ldr	r3, [r5, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004fde:	b10b      	cbz	r3, 8004fe4 <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8004fe0:	4809      	ldr	r0, [pc, #36]	; (8005008 <VectorA4+0x60>)
 8004fe2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004fe4:	06e2      	lsls	r2, r4, #27
 8004fe6:	d504      	bpl.n	8004ff2 <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8004fe8:	686b      	ldr	r3, [r5, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004fec:	b10b      	cbz	r3, 8004ff2 <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8004fee:	4806      	ldr	r0, [pc, #24]	; (8005008 <VectorA4+0x60>)
 8004ff0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004ff2:	07e3      	lsls	r3, r4, #31
 8004ff4:	d504      	bpl.n	8005000 <VectorA4+0x58>
 8004ff6:	686b      	ldr	r3, [r5, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	b10b      	cbz	r3, 8005000 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8004ffc:	4802      	ldr	r0, [pc, #8]	; (8005008 <VectorA4+0x60>)
 8004ffe:	4798      	blx	r3
}
 8005000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8005004:	f001 baea 	b.w	80065dc <_port_irq_epilogue>
 8005008:	20000af0 	.word	0x20000af0

0800500c <VectorAC>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d17      	ldr	r5, [pc, #92]	; (800506c <VectorAC+0x60>)
 8005010:	69ab      	ldr	r3, [r5, #24]
 8005012:	691c      	ldr	r4, [r3, #16]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	4014      	ands	r4, r2
 8005018:	b2e2      	uxtb	r2, r4
 800501a:	43d2      	mvns	r2, r2
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	07a3      	lsls	r3, r4, #30
 8005020:	d504      	bpl.n	800502c <VectorAC+0x20>
 8005022:	686b      	ldr	r3, [r5, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	b10b      	cbz	r3, 800502c <VectorAC+0x20>
 8005028:	4628      	mov	r0, r5
 800502a:	4798      	blx	r3
 800502c:	0760      	lsls	r0, r4, #29
 800502e:	d504      	bpl.n	800503a <VectorAC+0x2e>
 8005030:	686b      	ldr	r3, [r5, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	b10b      	cbz	r3, 800503a <VectorAC+0x2e>
 8005036:	480d      	ldr	r0, [pc, #52]	; (800506c <VectorAC+0x60>)
 8005038:	4798      	blx	r3
 800503a:	0721      	lsls	r1, r4, #28
 800503c:	d504      	bpl.n	8005048 <VectorAC+0x3c>
 800503e:	686b      	ldr	r3, [r5, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	b10b      	cbz	r3, 8005048 <VectorAC+0x3c>
 8005044:	4809      	ldr	r0, [pc, #36]	; (800506c <VectorAC+0x60>)
 8005046:	4798      	blx	r3
 8005048:	06e2      	lsls	r2, r4, #27
 800504a:	d504      	bpl.n	8005056 <VectorAC+0x4a>
 800504c:	686b      	ldr	r3, [r5, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	b10b      	cbz	r3, 8005056 <VectorAC+0x4a>
 8005052:	4806      	ldr	r0, [pc, #24]	; (800506c <VectorAC+0x60>)
 8005054:	4798      	blx	r3
 8005056:	07e3      	lsls	r3, r4, #31
 8005058:	d504      	bpl.n	8005064 <VectorAC+0x58>
 800505a:	686b      	ldr	r3, [r5, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	b10b      	cbz	r3, 8005064 <VectorAC+0x58>
 8005060:	4802      	ldr	r0, [pc, #8]	; (800506c <VectorAC+0x60>)
 8005062:	4798      	blx	r3
 8005064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005068:	f001 bab8 	b.w	80065dc <_port_irq_epilogue>
 800506c:	20000af0 	.word	0x20000af0

08005070 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8005070:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 8005072:	4d17      	ldr	r5, [pc, #92]	; (80050d0 <VectorB4+0x60>)
 8005074:	69ab      	ldr	r3, [r5, #24]
 8005076:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	4014      	ands	r4, r2
 800507c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800507e:	43d2      	mvns	r2, r2
 8005080:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8005082:	07a3      	lsls	r3, r4, #30
 8005084:	d504      	bpl.n	8005090 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8005086:	686b      	ldr	r3, [r5, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800508a:	b10b      	cbz	r3, 8005090 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800508c:	4628      	mov	r0, r5
 800508e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8005090:	0760      	lsls	r0, r4, #29
 8005092:	d504      	bpl.n	800509e <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8005094:	686b      	ldr	r3, [r5, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8005098:	b10b      	cbz	r3, 800509e <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800509a:	480d      	ldr	r0, [pc, #52]	; (80050d0 <VectorB4+0x60>)
 800509c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800509e:	0721      	lsls	r1, r4, #28
 80050a0:	d504      	bpl.n	80050ac <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80050a2:	686b      	ldr	r3, [r5, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80050a6:	b10b      	cbz	r3, 80050ac <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <VectorB4+0x60>)
 80050aa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80050ac:	06e2      	lsls	r2, r4, #27
 80050ae:	d504      	bpl.n	80050ba <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80050b0:	686b      	ldr	r3, [r5, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80050b4:	b10b      	cbz	r3, 80050ba <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80050b6:	4806      	ldr	r0, [pc, #24]	; (80050d0 <VectorB4+0x60>)
 80050b8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80050ba:	07e3      	lsls	r3, r4, #31
 80050bc:	d504      	bpl.n	80050c8 <VectorB4+0x58>
 80050be:	686b      	ldr	r3, [r5, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	b10b      	cbz	r3, 80050c8 <VectorB4+0x58>
    pwmp->config->callback(pwmp);
 80050c4:	4802      	ldr	r0, [pc, #8]	; (80050d0 <VectorB4+0x60>)
 80050c6:	4798      	blx	r3
}
 80050c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80050cc:	f001 ba86 	b.w	80065dc <_port_irq_epilogue>
 80050d0:	20000b28 	.word	0x20000b28

080050d4 <VectorEC>:
OSAL_IRQ_HANDLER(STM32_TIM12_HANDLER) {
 80050d4:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 80050d6:	4d17      	ldr	r5, [pc, #92]	; (8005134 <VectorEC+0x60>)
 80050d8:	69ab      	ldr	r3, [r5, #24]
 80050da:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	4014      	ands	r4, r2
 80050e0:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80050e2:	43d2      	mvns	r2, r2
 80050e4:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80050e6:	07a3      	lsls	r3, r4, #30
 80050e8:	d504      	bpl.n	80050f4 <VectorEC+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80050ea:	686b      	ldr	r3, [r5, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80050ee:	b10b      	cbz	r3, 80050f4 <VectorEC+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80050f0:	4628      	mov	r0, r5
 80050f2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80050f4:	0760      	lsls	r0, r4, #29
 80050f6:	d504      	bpl.n	8005102 <VectorEC+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80050f8:	686b      	ldr	r3, [r5, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80050fc:	b10b      	cbz	r3, 8005102 <VectorEC+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80050fe:	480d      	ldr	r0, [pc, #52]	; (8005134 <VectorEC+0x60>)
 8005100:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8005102:	0721      	lsls	r1, r4, #28
 8005104:	d504      	bpl.n	8005110 <VectorEC+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8005106:	686b      	ldr	r3, [r5, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800510a:	b10b      	cbz	r3, 8005110 <VectorEC+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 800510c:	4809      	ldr	r0, [pc, #36]	; (8005134 <VectorEC+0x60>)
 800510e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8005110:	06e2      	lsls	r2, r4, #27
 8005112:	d504      	bpl.n	800511e <VectorEC+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8005114:	686b      	ldr	r3, [r5, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8005118:	b10b      	cbz	r3, 800511e <VectorEC+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 800511a:	4806      	ldr	r0, [pc, #24]	; (8005134 <VectorEC+0x60>)
 800511c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800511e:	07e3      	lsls	r3, r4, #31
 8005120:	d504      	bpl.n	800512c <VectorEC+0x58>
 8005122:	686b      	ldr	r3, [r5, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	b10b      	cbz	r3, 800512c <VectorEC+0x58>
    pwmp->config->callback(pwmp);
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <VectorEC+0x60>)
 800512a:	4798      	blx	r3
}
 800512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8005130:	f001 ba54 	b.w	80065dc <_port_irq_epilogue>
 8005134:	20000b0c 	.word	0x20000b0c

08005138 <pwm_lld_init>:
void pwm_lld_init(void) {
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pwmObjectInit(&PWMD1);
 800513a:	4e0c      	ldr	r6, [pc, #48]	; (800516c <pwm_lld_init+0x34>)
  pwmObjectInit(&PWMD3);
 800513c:	4d0c      	ldr	r5, [pc, #48]	; (8005170 <pwm_lld_init+0x38>)
  pwmObjectInit(&PWMD12);
 800513e:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <pwm_lld_init+0x3c>)
  pwmObjectInit(&PWMD1);
 8005140:	4630      	mov	r0, r6
 8005142:	f7fc fb1d 	bl	8001780 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8005146:	2704      	movs	r7, #4
  PWMD1.tim = STM32_TIM1;
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <pwm_lld_init+0x40>)
 800514a:	61b3      	str	r3, [r6, #24]
  pwmObjectInit(&PWMD3);
 800514c:	4628      	mov	r0, r5
  PWMD1.channels = STM32_TIM1_CHANNELS;
 800514e:	7437      	strb	r7, [r6, #16]
  pwmObjectInit(&PWMD3);
 8005150:	f7fc fb16 	bl	8001780 <pwmObjectInit>
  PWMD3.tim = STM32_TIM3;
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <pwm_lld_init+0x44>)
 8005156:	61ab      	str	r3, [r5, #24]
  pwmObjectInit(&PWMD12);
 8005158:	4620      	mov	r0, r4
  PWMD3.channels = STM32_TIM3_CHANNELS;
 800515a:	742f      	strb	r7, [r5, #16]
  pwmObjectInit(&PWMD12);
 800515c:	f7fc fb10 	bl	8001780 <pwmObjectInit>
  PWMD12.channels = STM32_TIM12_CHANNELS;
 8005160:	2202      	movs	r2, #2
  PWMD12.tim = STM32_TIM12;
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <pwm_lld_init+0x48>)
  PWMD12.channels = STM32_TIM12_CHANNELS;
 8005164:	7422      	strb	r2, [r4, #16]
  PWMD12.tim = STM32_TIM12;
 8005166:	61a3      	str	r3, [r4, #24]
}
 8005168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516a:	bf00      	nop
 800516c:	20000af0 	.word	0x20000af0
 8005170:	20000b28 	.word	0x20000b28
 8005174:	20000b0c 	.word	0x20000b0c
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40001800 	.word	0x40001800

08005184 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8005184:	4a02      	ldr	r2, [pc, #8]	; (8005190 <notify7+0xc>)
 8005186:	68d3      	ldr	r3, [r2, #12]
 8005188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800518c:	60d3      	str	r3, [r2, #12]
}
 800518e:	4770      	bx	lr
 8005190:	40007800 	.word	0x40007800

08005194 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 8005194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8005198:	4e57      	ldr	r6, [pc, #348]	; (80052f8 <Vector188+0x164>)
 800519a:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800519c:	f8d5 900c 	ldr.w	r9, [r5, #12]
  uint16_t sr = u->SR;
 80051a0:	682b      	ldr	r3, [r5, #0]
  if (sr & USART_SR_LBD) {
 80051a2:	05d8      	lsls	r0, r3, #23
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 80051a4:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 80051a6:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80051a8:	d473      	bmi.n	8005292 <Vector188+0xfe>
 80051aa:	2320      	movs	r3, #32
 80051ac:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80051b0:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80051b4:	d00b      	beq.n	80051ce <Vector188+0x3a>
  chEvtBroadcastFlagsI(esp, flags);
 80051b6:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8005300 <Vector188+0x16c>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80051ba:	0723      	lsls	r3, r4, #28
 80051bc:	d130      	bne.n	8005220 <Vector188+0x8c>
    if (sr & USART_SR_RXNE)
 80051be:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80051c0:	686b      	ldr	r3, [r5, #4]
    if (sr & USART_SR_RXNE)
 80051c2:	d420      	bmi.n	8005206 <Vector188+0x72>
    sr = u->SR;
 80051c4:	682c      	ldr	r4, [r5, #0]
 80051c6:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80051c8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80051cc:	d1f5      	bne.n	80051ba <Vector188+0x26>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80051d4:	f019 0f80 	tst.w	r9, #128	; 0x80
 80051d8:	d001      	beq.n	80051de <Vector188+0x4a>
 80051da:	0622      	lsls	r2, r4, #24
 80051dc:	d468      	bmi.n	80052b0 <Vector188+0x11c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80051de:	f019 0f40 	tst.w	r9, #64	; 0x40
 80051e2:	d00b      	beq.n	80051fc <Vector188+0x68>
 80051e4:	0663      	lsls	r3, r4, #25
 80051e6:	d509      	bpl.n	80051fc <Vector188+0x68>
 80051e8:	2320      	movs	r3, #32
 80051ea:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80051ee:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d069      	beq.n	80052ca <Vector188+0x136>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
 80051fc:	b003      	add	sp, #12
 80051fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005202:	f001 b9eb 	b.w	80065dc <_port_irq_epilogue>
    b = (uint8_t)u->DR & sdp->rxmask;
 8005206:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
      sdIncomingDataI(sdp, b);
 800520a:	483b      	ldr	r0, [pc, #236]	; (80052f8 <Vector188+0x164>)
 800520c:	4019      	ands	r1, r3
 800520e:	f7fc fb0b 	bl	8001828 <sdIncomingDataI>
    sr = u->SR;
 8005212:	682c      	ldr	r4, [r5, #0]
 8005214:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005216:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800521a:	d0d8      	beq.n	80051ce <Vector188+0x3a>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800521c:	0723      	lsls	r3, r4, #28
 800521e:	d0ce      	beq.n	80051be <Vector188+0x2a>
  if (sr & USART_SR_ORE)
 8005220:	f004 0308 	and.w	r3, r4, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf14      	ite	ne
 8005228:	21a0      	movne	r1, #160	; 0xa0
 800522a:	2120      	moveq	r1, #32
 800522c:	9101      	str	r1, [sp, #4]
 800522e:	bf15      	itete	ne
 8005230:	f44f 73c0 	movne.w	r3, #384	; 0x180
 8005234:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005238:	f44f 77e0 	movne.w	r7, #448	; 0x1c0
 800523c:	f44f 77a0 	moveq.w	r7, #320	; 0x140
 8005240:	bf15      	itete	ne
 8005242:	22c0      	movne	r2, #192	; 0xc0
 8005244:	2240      	moveq	r2, #64	; 0x40
 8005246:	f44f 7bd0 	movne.w	fp, #416	; 0x1a0
 800524a:	f44f 7b90 	moveq.w	fp, #288	; 0x120
 800524e:	bf15      	itete	ne
 8005250:	f44f 7af0 	movne.w	sl, #480	; 0x1e0
 8005254:	f44f 7ab0 	moveq.w	sl, #352	; 0x160
 8005258:	f04f 0ee0 	movne.w	lr, #224	; 0xe0
 800525c:	f04f 0e60 	moveq.w	lr, #96	; 0x60
 8005260:	bf14      	ite	ne
 8005262:	2180      	movne	r1, #128	; 0x80
 8005264:	2100      	moveq	r1, #0
  if (sr & USART_SR_PE)
 8005266:	f014 0f01 	tst.w	r4, #1
  if (sr & USART_SR_FE)
 800526a:	f004 0c02 	and.w	ip, r4, #2
 800526e:	4640      	mov	r0, r8
  if (sr & USART_SR_PE)
 8005270:	d003      	beq.n	800527a <Vector188+0xe6>
    sts |= SD_PARITY_ERROR;
 8005272:	9901      	ldr	r1, [sp, #4]
  if (sr & USART_SR_PE)
 8005274:	465b      	mov	r3, fp
 8005276:	4657      	mov	r7, sl
 8005278:	4672      	mov	r2, lr
  if (sr & USART_SR_FE)
 800527a:	f1bc 0f00 	cmp.w	ip, #0
 800527e:	bf1c      	itt	ne
 8005280:	463b      	movne	r3, r7
 8005282:	4611      	movne	r1, r2
    sts |= SD_NOISE_ERROR;
 8005284:	f014 0f04 	tst.w	r4, #4
 8005288:	bf18      	it	ne
 800528a:	4619      	movne	r1, r3
 800528c:	f001 f87c 	bl	8006388 <chEvtBroadcastFlagsI>
 8005290:	e795      	b.n	80051be <Vector188+0x2a>
 8005292:	2320      	movs	r3, #32
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800529c:	1d30      	adds	r0, r6, #4
 800529e:	f001 f873 	bl	8006388 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80052a2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	e77c      	b.n	80051aa <Vector188+0x16>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 80052b6:	4811      	ldr	r0, [pc, #68]	; (80052fc <Vector188+0x168>)
 80052b8:	f7fc f984 	bl	80015c4 <oqGetI>
    if (b < MSG_OK) {
 80052bc:	2800      	cmp	r0, #0
 80052be:	db11      	blt.n	80052e4 <Vector188+0x150>
      u->DR = b;
 80052c0:	6068      	str	r0, [r5, #4]
 80052c2:	2300      	movs	r3, #0
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	e789      	b.n	80051de <Vector188+0x4a>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80052ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d092      	beq.n	80051f6 <Vector188+0x62>
 80052d0:	2110      	movs	r1, #16
 80052d2:	480b      	ldr	r0, [pc, #44]	; (8005300 <Vector188+0x16c>)
 80052d4:	f001 f858 	bl	8006388 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80052d8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80052dc:	ea09 0303 	and.w	r3, r9, r3
 80052e0:	60eb      	str	r3, [r5, #12]
 80052e2:	e788      	b.n	80051f6 <Vector188+0x62>
 80052e4:	2108      	movs	r1, #8
 80052e6:	4806      	ldr	r0, [pc, #24]	; (8005300 <Vector188+0x16c>)
 80052e8:	f001 f84e 	bl	8006388 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80052ec:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80052f0:	ea09 0303 	and.w	r3, r9, r3
 80052f4:	60eb      	str	r3, [r5, #12]
 80052f6:	e7e4      	b.n	80052c2 <Vector188+0x12e>
 80052f8:	20000b44 	.word	0x20000b44
 80052fc:	20000b74 	.word	0x20000b74
 8005300:	20000b48 	.word	0x20000b48

08005304 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8005304:	b510      	push	{r4, lr}
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
#endif

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7, NULL, notify7);
 8005306:	4c04      	ldr	r4, [pc, #16]	; (8005318 <sd_lld_init+0x14>)
 8005308:	4a04      	ldr	r2, [pc, #16]	; (800531c <sd_lld_init+0x18>)
 800530a:	4620      	mov	r0, r4
 800530c:	2100      	movs	r1, #0
 800530e:	f7fc fa6b 	bl	80017e8 <sdObjectInit>
  SD7.usart = UART7;
 8005312:	4b03      	ldr	r3, [pc, #12]	; (8005320 <sd_lld_init+0x1c>)
 8005314:	6763      	str	r3, [r4, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8005316:	bd10      	pop	{r4, pc}
 8005318:	20000b44 	.word	0x20000b44
 800531c:	08005185 	.word	0x08005185
 8005320:	40007800 	.word	0x40007800

08005324 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005324:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800532c:	d129      	bne.n	8005382 <uart_lld_serve_tx_end_irq+0x5e>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	680a      	ldr	r2, [r1, #0]
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	f023 031f 	bic.w	r3, r3, #31
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	07db      	lsls	r3, r3, #31
 800533e:	d4fc      	bmi.n	800533a <uart_lld_serve_tx_end_irq+0x16>

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8005340:	6863      	ldr	r3, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 8005342:	7a4d      	ldrb	r5, [r1, #9]
 8005344:	6848      	ldr	r0, [r1, #4]
  _uart_tx1_isr_code(uartp);
 8005346:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 8005348:	233d      	movs	r3, #61	; 0x3d
 800534a:	40ab      	lsls	r3, r5
  _uart_tx1_isr_code(uartp);
 800534c:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 800534e:	6003      	str	r3, [r0, #0]
  _uart_tx1_isr_code(uartp);
 8005350:	7061      	strb	r1, [r4, #1]
 8005352:	b19a      	cbz	r2, 800537c <uart_lld_serve_tx_end_irq+0x58>
 8005354:	4620      	mov	r0, r4
 8005356:	4790      	blx	r2
 8005358:	7863      	ldrb	r3, [r4, #1]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d00e      	beq.n	800537c <uart_lld_serve_tx_end_irq+0x58>
 800535e:	7a23      	ldrb	r3, [r4, #8]
 8005360:	b903      	cbnz	r3, 8005364 <uart_lld_serve_tx_end_irq+0x40>
}
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	2320      	movs	r3, #32
 8005366:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800536a:	2100      	movs	r1, #0
 800536c:	f104 0010 	add.w	r0, r4, #16
 8005370:	f000 fed4 	bl	800611c <chThdResumeI>
 8005374:	2300      	movs	r3, #0
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	bd38      	pop	{r3, r4, r5, pc}
  _uart_tx1_isr_code(uartp);
 800537c:	2300      	movs	r3, #0
 800537e:	7063      	strb	r3, [r4, #1]
 8005380:	e7ed      	b.n	800535e <uart_lld_serve_tx_end_irq+0x3a>
  chSysHalt(reason);
 8005382:	4802      	ldr	r0, [pc, #8]	; (800538c <uart_lld_serve_tx_end_irq+0x68>)
 8005384:	f000 fbf2 	bl	8005b6c <chSysHalt>
 8005388:	e7d1      	b.n	800532e <uart_lld_serve_tx_end_irq+0xa>
 800538a:	bf00      	nop
 800538c:	08008524 	.word	0x08008524

08005390 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005390:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800539a:	d12d      	bne.n	80053f8 <uart_lld_serve_rx_end_irq+0x68>
  if (uartp->rxstate == UART_RX_IDLE) {
 800539c:	78a3      	ldrb	r3, [r4, #2]
 800539e:	6861      	ldr	r1, [r4, #4]
 80053a0:	b933      	cbnz	r3, 80053b0 <uart_lld_serve_rx_end_irq+0x20>
    _uart_rx_idle_code(uartp);
 80053a2:	68cb      	ldr	r3, [r1, #12]
 80053a4:	b333      	cbz	r3, 80053f4 <uart_lld_serve_rx_end_irq+0x64>
 80053a6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80053a8:	4620      	mov	r0, r4
}
 80053aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _uart_rx_idle_code(uartp);
 80053ae:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 80053b0:	69e0      	ldr	r0, [r4, #28]
 80053b2:	6802      	ldr	r2, [r0, #0]
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	f023 031f 	bic.w	r3, r3, #31
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	07db      	lsls	r3, r3, #31
 80053c0:	d4fc      	bmi.n	80053bc <uart_lld_serve_rx_end_irq+0x2c>
 80053c2:	7a47      	ldrb	r7, [r0, #9]
 80053c4:	6846      	ldr	r6, [r0, #4]
    _uart_rx_complete_isr_code(uartp);
 80053c6:	688d      	ldr	r5, [r1, #8]
    dmaStreamDisable(uartp->dmarx);
 80053c8:	233d      	movs	r3, #61	; 0x3d
 80053ca:	40bb      	lsls	r3, r7
    _uart_rx_complete_isr_code(uartp);
 80053cc:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 80053ce:	6033      	str	r3, [r6, #0]
    _uart_rx_complete_isr_code(uartp);
 80053d0:	70a0      	strb	r0, [r4, #2]
 80053d2:	b1c5      	cbz	r5, 8005406 <uart_lld_serve_rx_end_irq+0x76>
 80053d4:	4620      	mov	r0, r4
 80053d6:	47a8      	blx	r5
 80053d8:	78a3      	ldrb	r3, [r4, #2]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d010      	beq.n	8005400 <uart_lld_serve_rx_end_irq+0x70>
 80053de:	2320      	movs	r3, #32
 80053e0:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80053e4:	2100      	movs	r1, #0
 80053e6:	f104 000c 	add.w	r0, r4, #12
 80053ea:	f000 fe97 	bl	800611c <chThdResumeI>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f383 8811 	msr	BASEPRI, r3
}
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chSysHalt(reason);
 80053f8:	480d      	ldr	r0, [pc, #52]	; (8005430 <uart_lld_serve_rx_end_irq+0xa0>)
 80053fa:	f000 fbb7 	bl	8005b6c <chSysHalt>
 80053fe:	e7cd      	b.n	800539c <uart_lld_serve_rx_end_irq+0xc>
 8005400:	69e3      	ldr	r3, [r4, #28]
 8005402:	6861      	ldr	r1, [r4, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
  if (uartp->config->rxchar_cb == NULL)
 8005406:	68cb      	ldr	r3, [r1, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8005408:	69a1      	ldr	r1, [r4, #24]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	f44f 7388 	movne.w	r3, #272	; 0x110
 8005412:	f44f 7380 	moveq.w	r3, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8005416:	430b      	orrs	r3, r1
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8005418:	2001      	movs	r0, #1
    _uart_rx_complete_isr_code(uartp);
 800541a:	2500      	movs	r5, #0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800541c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    _uart_rx_complete_isr_code(uartp);
 8005420:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8005422:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8005424:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8005426:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8005428:	6813      	ldr	r3, [r2, #0]
 800542a:	4303      	orrs	r3, r0
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e7d6      	b.n	80053de <uart_lld_serve_rx_end_irq+0x4e>
 8005430:	08008524 	.word	0x08008524

08005434 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8005438:	4e52      	ldr	r6, [pc, #328]	; (8005584 <VectorD4+0x150>)
 800543a:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 800543c:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800543e:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005440:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8005442:	f240 131f 	movw	r3, #287	; 0x11f
 8005446:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8005448:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800544a:	d076      	beq.n	800553a <VectorD4+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800544c:	6873      	ldr	r3, [r6, #4]
 800544e:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8005452:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8005456:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8005458:	f1b8 0f00 	cmp.w	r8, #0
 800545c:	d062      	beq.n	8005524 <VectorD4+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 800545e:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8005460:	f003 0208 	and.w	r2, r3, #8
 8005464:	2a00      	cmp	r2, #0
 8005466:	bf14      	ite	ne
 8005468:	2254      	movne	r2, #84	; 0x54
 800546a:	2244      	moveq	r2, #68	; 0x44
 800546c:	9200      	str	r2, [sp, #0]
 800546e:	bf14      	ite	ne
 8005470:	2274      	movne	r2, #116	; 0x74
 8005472:	2264      	moveq	r2, #100	; 0x64
 8005474:	9207      	str	r2, [sp, #28]
 8005476:	bf14      	ite	ne
 8005478:	2234      	movne	r2, #52	; 0x34
 800547a:	2224      	moveq	r2, #36	; 0x24
 800547c:	9203      	str	r2, [sp, #12]
 800547e:	bf14      	ite	ne
 8005480:	225c      	movne	r2, #92	; 0x5c
 8005482:	224c      	moveq	r2, #76	; 0x4c
 8005484:	9201      	str	r2, [sp, #4]
 8005486:	bf14      	ite	ne
 8005488:	227c      	movne	r2, #124	; 0x7c
 800548a:	226c      	moveq	r2, #108	; 0x6c
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	bf14      	ite	ne
 8005490:	223c      	movne	r2, #60	; 0x3c
 8005492:	222c      	moveq	r2, #44	; 0x2c
 8005494:	9206      	str	r2, [sp, #24]
 8005496:	bf14      	ite	ne
 8005498:	221c      	movne	r2, #28
 800549a:	220c      	moveq	r2, #12
 800549c:	9204      	str	r2, [sp, #16]
 800549e:	bf14      	ite	ne
 80054a0:	2214      	movne	r2, #20
 80054a2:	2204      	moveq	r2, #4
 80054a4:	9205      	str	r2, [sp, #20]
 80054a6:	bf15      	itete	ne
 80054a8:	2150      	movne	r1, #80	; 0x50
 80054aa:	2140      	moveq	r1, #64	; 0x40
 80054ac:	f04f 0c70 	movne.w	ip, #112	; 0x70
 80054b0:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 80054b4:	bf15      	itete	ne
 80054b6:	2030      	movne	r0, #48	; 0x30
 80054b8:	2020      	moveq	r0, #32
 80054ba:	f04f 0b58 	movne.w	fp, #88	; 0x58
 80054be:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 80054c2:	bf15      	itete	ne
 80054c4:	f04f 0a78 	movne.w	sl, #120	; 0x78
 80054c8:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 80054cc:	f04f 0938 	movne.w	r9, #56	; 0x38
 80054d0:	f04f 0928 	moveq.w	r9, #40	; 0x28
 80054d4:	bf15      	itete	ne
 80054d6:	f04f 0e18 	movne.w	lr, #24
 80054da:	f04f 0e08 	moveq.w	lr, #8
 80054de:	2210      	movne	r2, #16
 80054e0:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 80054e2:	f013 0f01 	tst.w	r3, #1
 80054e6:	d009      	beq.n	80054fc <VectorD4+0xc8>
 80054e8:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 80054ec:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 80054f0:	9900      	ldr	r1, [sp, #0]
 80054f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80054f6:	9803      	ldr	r0, [sp, #12]
 80054f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 80054fc:	f013 0f02 	tst.w	r3, #2
 8005500:	d003      	beq.n	800550a <VectorD4+0xd6>
 8005502:	4659      	mov	r1, fp
 8005504:	46d4      	mov	ip, sl
 8005506:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8005508:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 800550a:	f003 0e04 	and.w	lr, r3, #4
 800550e:	f1be 0f00 	cmp.w	lr, #0
 8005512:	bf1c      	itt	ne
 8005514:	4602      	movne	r2, r0
 8005516:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8005518:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800551c:	bf08      	it	eq
 800551e:	4611      	moveq	r1, r2
 8005520:	4818      	ldr	r0, [pc, #96]	; (8005584 <VectorD4+0x150>)
 8005522:	47c0      	blx	r8
 8005524:	2320      	movs	r3, #32
 8005526:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800552a:	f06f 0101 	mvn.w	r1, #1
 800552e:	4816      	ldr	r0, [pc, #88]	; (8005588 <VectorD4+0x154>)
 8005530:	f000 fdf4 	bl	800611c <chThdResumeI>
 8005534:	2300      	movs	r3, #0
 8005536:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 800553a:	066a      	lsls	r2, r5, #25
 800553c:	d50e      	bpl.n	800555c <VectorD4+0x128>
 800553e:	067b      	lsls	r3, r7, #25
 8005540:	d50c      	bpl.n	800555c <VectorD4+0x128>
    _uart_tx2_isr_code(uartp);
 8005542:	6873      	ldr	r3, [r6, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8005546:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 800554a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800554e:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8005550:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8005552:	b10b      	cbz	r3, 8005558 <VectorD4+0x124>
 8005554:	480b      	ldr	r0, [pc, #44]	; (8005584 <VectorD4+0x150>)
 8005556:	4798      	blx	r3
 8005558:	7a34      	ldrb	r4, [r6, #8]
 800555a:	b124      	cbz	r4, 8005566 <VectorD4+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
}
 800555c:	b009      	add	sp, #36	; 0x24
 800555e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005562:	f001 b83b 	b.w	80065dc <_port_irq_epilogue>
 8005566:	2320      	movs	r3, #32
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	4807      	ldr	r0, [pc, #28]	; (800558c <VectorD4+0x158>)
 800556e:	4621      	mov	r1, r4
 8005570:	f000 fdd4 	bl	800611c <chThdResumeI>
 8005574:	f384 8811 	msr	BASEPRI, r4
}
 8005578:	b009      	add	sp, #36	; 0x24
 800557a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800557e:	f001 b82d 	b.w	80065dc <_port_irq_epilogue>
 8005582:	bf00      	nop
 8005584:	20000bc0 	.word	0x20000bc0
 8005588:	20000bcc 	.word	0x20000bcc
 800558c:	20000bd0 	.word	0x20000bd0

08005590 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8005594:	4e52      	ldr	r6, [pc, #328]	; (80056e0 <Vector15C+0x150>)
 8005596:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8005598:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800559a:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800559c:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800559e:	f240 131f 	movw	r3, #287	; 0x11f
 80055a2:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80055a4:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80055a6:	d076      	beq.n	8005696 <Vector15C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80055a8:	6873      	ldr	r3, [r6, #4]
 80055aa:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 80055ae:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80055b2:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80055b4:	f1b8 0f00 	cmp.w	r8, #0
 80055b8:	d062      	beq.n	8005680 <Vector15C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 80055ba:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 80055bc:	f003 0208 	and.w	r2, r3, #8
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2254      	movne	r2, #84	; 0x54
 80055c6:	2244      	moveq	r2, #68	; 0x44
 80055c8:	9200      	str	r2, [sp, #0]
 80055ca:	bf14      	ite	ne
 80055cc:	2274      	movne	r2, #116	; 0x74
 80055ce:	2264      	moveq	r2, #100	; 0x64
 80055d0:	9207      	str	r2, [sp, #28]
 80055d2:	bf14      	ite	ne
 80055d4:	2234      	movne	r2, #52	; 0x34
 80055d6:	2224      	moveq	r2, #36	; 0x24
 80055d8:	9203      	str	r2, [sp, #12]
 80055da:	bf14      	ite	ne
 80055dc:	225c      	movne	r2, #92	; 0x5c
 80055de:	224c      	moveq	r2, #76	; 0x4c
 80055e0:	9201      	str	r2, [sp, #4]
 80055e2:	bf14      	ite	ne
 80055e4:	227c      	movne	r2, #124	; 0x7c
 80055e6:	226c      	moveq	r2, #108	; 0x6c
 80055e8:	9202      	str	r2, [sp, #8]
 80055ea:	bf14      	ite	ne
 80055ec:	223c      	movne	r2, #60	; 0x3c
 80055ee:	222c      	moveq	r2, #44	; 0x2c
 80055f0:	9206      	str	r2, [sp, #24]
 80055f2:	bf14      	ite	ne
 80055f4:	221c      	movne	r2, #28
 80055f6:	220c      	moveq	r2, #12
 80055f8:	9204      	str	r2, [sp, #16]
 80055fa:	bf14      	ite	ne
 80055fc:	2214      	movne	r2, #20
 80055fe:	2204      	moveq	r2, #4
 8005600:	9205      	str	r2, [sp, #20]
 8005602:	bf15      	itete	ne
 8005604:	2150      	movne	r1, #80	; 0x50
 8005606:	2140      	moveq	r1, #64	; 0x40
 8005608:	f04f 0c70 	movne.w	ip, #112	; 0x70
 800560c:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8005610:	bf15      	itete	ne
 8005612:	2030      	movne	r0, #48	; 0x30
 8005614:	2020      	moveq	r0, #32
 8005616:	f04f 0b58 	movne.w	fp, #88	; 0x58
 800561a:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 800561e:	bf15      	itete	ne
 8005620:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8005624:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8005628:	f04f 0938 	movne.w	r9, #56	; 0x38
 800562c:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8005630:	bf15      	itete	ne
 8005632:	f04f 0e18 	movne.w	lr, #24
 8005636:	f04f 0e08 	moveq.w	lr, #8
 800563a:	2210      	movne	r2, #16
 800563c:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 800563e:	f013 0f01 	tst.w	r3, #1
 8005642:	d009      	beq.n	8005658 <Vector15C+0xc8>
 8005644:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8005648:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 800564c:	9900      	ldr	r1, [sp, #0]
 800564e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005652:	9803      	ldr	r0, [sp, #12]
 8005654:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8005658:	f013 0f02 	tst.w	r3, #2
 800565c:	d003      	beq.n	8005666 <Vector15C+0xd6>
 800565e:	4659      	mov	r1, fp
 8005660:	46d4      	mov	ip, sl
 8005662:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8005664:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8005666:	f003 0e04 	and.w	lr, r3, #4
 800566a:	f1be 0f00 	cmp.w	lr, #0
 800566e:	bf1c      	itt	ne
 8005670:	4602      	movne	r2, r0
 8005672:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8005674:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8005678:	bf08      	it	eq
 800567a:	4611      	moveq	r1, r2
 800567c:	4818      	ldr	r0, [pc, #96]	; (80056e0 <Vector15C+0x150>)
 800567e:	47c0      	blx	r8
 8005680:	2320      	movs	r3, #32
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f06f 0101 	mvn.w	r1, #1
 800568a:	4816      	ldr	r0, [pc, #88]	; (80056e4 <Vector15C+0x154>)
 800568c:	f000 fd46 	bl	800611c <chThdResumeI>
 8005690:	2300      	movs	r3, #0
 8005692:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8005696:	066a      	lsls	r2, r5, #25
 8005698:	d50e      	bpl.n	80056b8 <Vector15C+0x128>
 800569a:	067b      	lsls	r3, r7, #25
 800569c:	d50c      	bpl.n	80056b8 <Vector15C+0x128>
    _uart_tx2_isr_code(uartp);
 800569e:	6873      	ldr	r3, [r6, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80056a2:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 80056a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056aa:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80056ac:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 80056ae:	b10b      	cbz	r3, 80056b4 <Vector15C+0x124>
 80056b0:	480b      	ldr	r0, [pc, #44]	; (80056e0 <Vector15C+0x150>)
 80056b2:	4798      	blx	r3
 80056b4:	7a34      	ldrb	r4, [r6, #8]
 80056b6:	b124      	cbz	r4, 80056c2 <Vector15C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
}
 80056b8:	b009      	add	sp, #36	; 0x24
 80056ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80056be:	f000 bf8d 	b.w	80065dc <_port_irq_epilogue>
 80056c2:	2320      	movs	r3, #32
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	4807      	ldr	r0, [pc, #28]	; (80056e8 <Vector15C+0x158>)
 80056ca:	4621      	mov	r1, r4
 80056cc:	f000 fd26 	bl	800611c <chThdResumeI>
 80056d0:	f384 8811 	msr	BASEPRI, r4
}
 80056d4:	b009      	add	sp, #36	; 0x24
 80056d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80056da:	f000 bf7f 	b.w	80065dc <_port_irq_epilogue>
 80056de:	bf00      	nop
 80056e0:	20000be8 	.word	0x20000be8
 80056e4:	20000bf4 	.word	0x20000bf4
 80056e8:	20000bf8 	.word	0x20000bf8

080056ec <Vector18C>:
/**
 * @brief   UART8 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 80056f0:	4e52      	ldr	r6, [pc, #328]	; (800583c <Vector18C+0x150>)
 80056f2:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 80056f4:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 80056f6:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80056f8:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80056fa:	f240 131f 	movw	r3, #287	; 0x11f
 80056fe:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 8005700:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8005702:	d076      	beq.n	80057f2 <Vector18C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8005704:	6873      	ldr	r3, [r6, #4]
 8005706:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 800570a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800570e:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8005710:	f1b8 0f00 	cmp.w	r8, #0
 8005714:	d062      	beq.n	80057dc <Vector18C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 8005716:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8005718:	f003 0208 	and.w	r2, r3, #8
 800571c:	2a00      	cmp	r2, #0
 800571e:	bf14      	ite	ne
 8005720:	2254      	movne	r2, #84	; 0x54
 8005722:	2244      	moveq	r2, #68	; 0x44
 8005724:	9200      	str	r2, [sp, #0]
 8005726:	bf14      	ite	ne
 8005728:	2274      	movne	r2, #116	; 0x74
 800572a:	2264      	moveq	r2, #100	; 0x64
 800572c:	9207      	str	r2, [sp, #28]
 800572e:	bf14      	ite	ne
 8005730:	2234      	movne	r2, #52	; 0x34
 8005732:	2224      	moveq	r2, #36	; 0x24
 8005734:	9203      	str	r2, [sp, #12]
 8005736:	bf14      	ite	ne
 8005738:	225c      	movne	r2, #92	; 0x5c
 800573a:	224c      	moveq	r2, #76	; 0x4c
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	bf14      	ite	ne
 8005740:	227c      	movne	r2, #124	; 0x7c
 8005742:	226c      	moveq	r2, #108	; 0x6c
 8005744:	9202      	str	r2, [sp, #8]
 8005746:	bf14      	ite	ne
 8005748:	223c      	movne	r2, #60	; 0x3c
 800574a:	222c      	moveq	r2, #44	; 0x2c
 800574c:	9206      	str	r2, [sp, #24]
 800574e:	bf14      	ite	ne
 8005750:	221c      	movne	r2, #28
 8005752:	220c      	moveq	r2, #12
 8005754:	9204      	str	r2, [sp, #16]
 8005756:	bf14      	ite	ne
 8005758:	2214      	movne	r2, #20
 800575a:	2204      	moveq	r2, #4
 800575c:	9205      	str	r2, [sp, #20]
 800575e:	bf15      	itete	ne
 8005760:	2150      	movne	r1, #80	; 0x50
 8005762:	2140      	moveq	r1, #64	; 0x40
 8005764:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8005768:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 800576c:	bf15      	itete	ne
 800576e:	2030      	movne	r0, #48	; 0x30
 8005770:	2020      	moveq	r0, #32
 8005772:	f04f 0b58 	movne.w	fp, #88	; 0x58
 8005776:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 800577a:	bf15      	itete	ne
 800577c:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8005780:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8005784:	f04f 0938 	movne.w	r9, #56	; 0x38
 8005788:	f04f 0928 	moveq.w	r9, #40	; 0x28
 800578c:	bf15      	itete	ne
 800578e:	f04f 0e18 	movne.w	lr, #24
 8005792:	f04f 0e08 	moveq.w	lr, #8
 8005796:	2210      	movne	r2, #16
 8005798:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 800579a:	f013 0f01 	tst.w	r3, #1
 800579e:	d009      	beq.n	80057b4 <Vector18C+0xc8>
 80057a0:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 80057a4:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 80057a8:	9900      	ldr	r1, [sp, #0]
 80057aa:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057ae:	9803      	ldr	r0, [sp, #12]
 80057b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 80057b4:	f013 0f02 	tst.w	r3, #2
 80057b8:	d003      	beq.n	80057c2 <Vector18C+0xd6>
 80057ba:	4659      	mov	r1, fp
 80057bc:	46d4      	mov	ip, sl
 80057be:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 80057c0:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 80057c2:	f003 0e04 	and.w	lr, r3, #4
 80057c6:	f1be 0f00 	cmp.w	lr, #0
 80057ca:	bf1c      	itt	ne
 80057cc:	4602      	movne	r2, r0
 80057ce:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 80057d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80057d4:	bf08      	it	eq
 80057d6:	4611      	moveq	r1, r2
 80057d8:	4818      	ldr	r0, [pc, #96]	; (800583c <Vector18C+0x150>)
 80057da:	47c0      	blx	r8
 80057dc:	2320      	movs	r3, #32
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f06f 0101 	mvn.w	r1, #1
 80057e6:	4816      	ldr	r0, [pc, #88]	; (8005840 <Vector18C+0x154>)
 80057e8:	f000 fc98 	bl	800611c <chThdResumeI>
 80057ec:	2300      	movs	r3, #0
 80057ee:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80057f2:	066a      	lsls	r2, r5, #25
 80057f4:	d50e      	bpl.n	8005814 <Vector18C+0x128>
 80057f6:	067b      	lsls	r3, r7, #25
 80057f8:	d50c      	bpl.n	8005814 <Vector18C+0x128>
    _uart_tx2_isr_code(uartp);
 80057fa:	6873      	ldr	r3, [r6, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80057fe:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8005802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005806:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8005808:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 800580a:	b10b      	cbz	r3, 8005810 <Vector18C+0x124>
 800580c:	480b      	ldr	r0, [pc, #44]	; (800583c <Vector18C+0x150>)
 800580e:	4798      	blx	r3
 8005810:	7a34      	ldrb	r4, [r6, #8]
 8005812:	b124      	cbz	r4, 800581e <Vector18C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD8);

  OSAL_IRQ_EPILOGUE();
}
 8005814:	b009      	add	sp, #36	; 0x24
 8005816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800581a:	f000 bedf 	b.w	80065dc <_port_irq_epilogue>
 800581e:	2320      	movs	r3, #32
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	4807      	ldr	r0, [pc, #28]	; (8005844 <Vector18C+0x158>)
 8005826:	4621      	mov	r1, r4
 8005828:	f000 fc78 	bl	800611c <chThdResumeI>
 800582c:	f384 8811 	msr	BASEPRI, r4
}
 8005830:	b009      	add	sp, #36	; 0x24
 8005832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005836:	f000 bed1 	b.w	80065dc <_port_irq_epilogue>
 800583a:	bf00      	nop
 800583c:	20000c10 	.word	0x20000c10
 8005840:	20000c1c 	.word	0x20000c1c
 8005844:	20000c20 	.word	0x20000c20

08005848 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 800584c:	4e0f      	ldr	r6, [pc, #60]	; (800588c <uart_lld_init+0x44>)
  UARTD5.dmarx   = NULL;
  UARTD5.dmatx   = NULL;
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 800584e:	4f10      	ldr	r7, [pc, #64]	; (8005890 <uart_lld_init+0x48>)
  UARTD7.dmarx   = NULL;
  UARTD7.dmatx   = NULL;
#endif

#if STM32_UART_USE_UART8
  uartObjectInit(&UARTD8);
 8005850:	4d10      	ldr	r5, [pc, #64]	; (8005894 <uart_lld_init+0x4c>)
  uartObjectInit(&UARTD1);
 8005852:	4630      	mov	r0, r6
 8005854:	f7fc fa02 	bl	8001c5c <uartObjectInit>
  UARTD1.dmarx   = NULL;
 8005858:	2400      	movs	r4, #0
  UARTD1.usart   = USART1;
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <uart_lld_init+0x50>)
 800585c:	6173      	str	r3, [r6, #20]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800585e:	f04f 0806 	mov.w	r8, #6
  uartObjectInit(&UARTD6);
 8005862:	4638      	mov	r0, r7
  UARTD1.dmarx   = NULL;
 8005864:	e9c6 8406 	strd	r8, r4, [r6, #24]
  UARTD1.dmatx   = NULL;
 8005868:	6234      	str	r4, [r6, #32]
  uartObjectInit(&UARTD6);
 800586a:	f7fc f9f7 	bl	8001c5c <uartObjectInit>
  UARTD6.usart   = USART6;
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <uart_lld_init+0x54>)
 8005870:	617b      	str	r3, [r7, #20]
  uartObjectInit(&UARTD8);
 8005872:	4628      	mov	r0, r5
  UARTD6.dmarx   = NULL;
 8005874:	61fc      	str	r4, [r7, #28]
  UARTD6.dmatx   = NULL;
 8005876:	623c      	str	r4, [r7, #32]
  uartObjectInit(&UARTD8);
 8005878:	f7fc f9f0 	bl	8001c5c <uartObjectInit>
  UARTD8.usart   = UART8;
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <uart_lld_init+0x58>)
  UARTD8.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD8.dmarx   = NULL;
  UARTD8.dmatx   = NULL;
 800587e:	622c      	str	r4, [r5, #32]
  UARTD8.dmarx   = NULL;
 8005880:	e9c5 8406 	strd	r8, r4, [r5, #24]
  UARTD8.usart   = UART8;
 8005884:	616b      	str	r3, [r5, #20]
#endif
}
 8005886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800588a:	bf00      	nop
 800588c:	20000bc0 	.word	0x20000bc0
 8005890:	20000be8 	.word	0x20000be8
 8005894:	20000c10 	.word	0x20000c10
 8005898:	40011000 	.word	0x40011000
 800589c:	40011400 	.word	0x40011400
 80058a0:	40007c00 	.word	0x40007c00

080058a4 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 80058a6:	7803      	ldrb	r3, [r0, #0]
 80058a8:	2b01      	cmp	r3, #1
void uart_lld_start(UARTDriver *uartp) {
 80058aa:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 80058ac:	d071      	beq.n	8005992 <uart_lld_start+0xee>
 80058ae:	e9d0 c707 	ldrd	ip, r7, [r0, #28]
 80058b2:	6846      	ldr	r6, [r0, #4]
 80058b4:	f8dc 2000 	ldr.w	r2, [ip]
 80058b8:	8b35      	ldrh	r5, [r6, #24]
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	6961      	ldr	r1, [r4, #20]
  dmaStreamDisable(uartp->dmarx);
 80058be:	6813      	ldr	r3, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 80058c0:	f04f 0e00 	mov.w	lr, #0
  dmaStreamDisable(uartp->dmarx);
 80058c4:	f023 031f 	bic.w	r3, r3, #31
  uartp->rxstate = UART_RX_IDLE;
 80058c8:	f884 e002 	strb.w	lr, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 80058cc:	f884 e001 	strb.w	lr, [r4, #1]
  dmaStreamDisable(uartp->dmarx);
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	07db      	lsls	r3, r3, #31
 80058d6:	d4fc      	bmi.n	80058d2 <uart_lld_start+0x2e>
 80058d8:	f89c e009 	ldrb.w	lr, [ip, #9]
 80058dc:	f8dc c004 	ldr.w	ip, [ip, #4]
 80058e0:	233d      	movs	r3, #61	; 0x3d
 80058e2:	fa03 f30e 	lsl.w	r3, r3, lr
 80058e6:	f8cc 3000 	str.w	r3, [ip]
  dmaStreamDisable(uartp->dmatx);
 80058ea:	6803      	ldr	r3, [r0, #0]
 80058ec:	f023 031f 	bic.w	r3, r3, #31
 80058f0:	6003      	str	r3, [r0, #0]
 80058f2:	6803      	ldr	r3, [r0, #0]
 80058f4:	f013 0301 	ands.w	r3, r3, #1
 80058f8:	d1fb      	bne.n	80058f2 <uart_lld_start+0x4e>
 80058fa:	f897 e009 	ldrb.w	lr, [r7, #9]
 80058fe:	f8d7 c004 	ldr.w	ip, [r7, #4]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8005902:	4f66      	ldr	r7, [pc, #408]	; (8005a9c <uart_lld_start+0x1f8>)
  dmaStreamDisable(uartp->dmatx);
 8005904:	203d      	movs	r0, #61	; 0x3d
 8005906:	fa00 f00e 	lsl.w	r0, r0, lr
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 800590a:	42b9      	cmp	r1, r7
  dmaStreamDisable(uartp->dmatx);
 800590c:	f8cc 0000 	str.w	r0, [ip]
  uartp->usart->CR1 = 0;
 8005910:	60cb      	str	r3, [r1, #12]
  uartp->usart->CR2 = 0;
 8005912:	610b      	str	r3, [r1, #16]
  uartp->usart->CR3 = 0;
 8005914:	614b      	str	r3, [r1, #20]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8005916:	d02f      	beq.n	8005978 <uart_lld_start+0xd4>
 8005918:	4861      	ldr	r0, [pc, #388]	; (8005aa0 <uart_lld_start+0x1fc>)
 800591a:	6973      	ldr	r3, [r6, #20]
 800591c:	4281      	cmp	r1, r0
 800591e:	d02c      	beq.n	800597a <uart_lld_start+0xd6>
    fck = STM32_PCLK1 / uartp->config->speed;
 8005920:	4860      	ldr	r0, [pc, #384]	; (8005aa4 <uart_lld_start+0x200>)
 8005922:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8005926:	0428      	lsls	r0, r5, #16
 8005928:	d42c      	bmi.n	8005984 <uart_lld_start+0xe0>
  if (uartp->config->rxchar_cb == NULL)
 800592a:	68f0      	ldr	r0, [r6, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800592c:	8b77      	ldrh	r7, [r6, #26]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800592e:	f8d4 c018 	ldr.w	ip, [r4, #24]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8005932:	8bb6      	ldrh	r6, [r6, #28]
  u->BRR = fck;
 8005934:	608b      	str	r3, [r1, #8]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8005936:	2800      	cmp	r0, #0
  u->SR = 0;
 8005938:	f04f 0000 	mov.w	r0, #0
  (void)u->SR;  /* SR reset step 1.*/
 800593c:	680b      	ldr	r3, [r1, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800593e:	684b      	ldr	r3, [r1, #4]
  u->SR = 0;
 8005940:	6008      	str	r0, [r1, #0]
  u->CR1 = uartp->config->cr1 | cr1;
 8005942:	f445 5304 	orr.w	r3, r5, #8448	; 0x2100
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8005946:	bf14      	ite	ne
 8005948:	f44f 7088 	movne.w	r0, #272	; 0x110
 800594c:	f44f 7080 	moveq.w	r0, #256	; 0x100
  u->CR1 = uartp->config->cr1 | cr1;
 8005950:	f043 030c 	orr.w	r3, r3, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8005954:	f046 05c1 	orr.w	r5, r6, #193	; 0xc1
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8005958:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800595c:	2601      	movs	r6, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800595e:	3424      	adds	r4, #36	; 0x24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8005960:	ea40 000c 	orr.w	r0, r0, ip
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8005964:	610f      	str	r7, [r1, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8005966:	614d      	str	r5, [r1, #20]
  u->CR1 = uartp->config->cr1 | cr1;
 8005968:	60cb      	str	r3, [r1, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800596a:	60d4      	str	r4, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800596c:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800596e:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	4333      	orrs	r3, r6
 8005974:	6013      	str	r3, [r2, #0]
  usart_start(uartp);
}
 8005976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005978:	6973      	ldr	r3, [r6, #20]
    fck = STM32_PCLK2 / uartp->config->speed;
 800597a:	484b      	ldr	r0, [pc, #300]	; (8005aa8 <uart_lld_start+0x204>)
 800597c:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8005980:	0428      	lsls	r0, r5, #16
 8005982:	d5d2      	bpl.n	800592a <uart_lld_start+0x86>
    fck = ((fck & ~7) * 2) | (fck & 7);
 8005984:	f023 0007 	bic.w	r0, r3, #7
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8005990:	e7cb      	b.n	800592a <uart_lld_start+0x86>
    if (&UARTD1 == uartp) {
 8005992:	4b46      	ldr	r3, [pc, #280]	; (8005aac <uart_lld_start+0x208>)
 8005994:	4298      	cmp	r0, r3
 8005996:	d060      	beq.n	8005a5a <uart_lld_start+0x1b6>
    if (&UARTD6 == uartp) {
 8005998:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <uart_lld_start+0x20c>)
 800599a:	4298      	cmp	r0, r3
 800599c:	d03c      	beq.n	8005a18 <uart_lld_start+0x174>
    if (&UARTD8 == uartp) {
 800599e:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <uart_lld_start+0x210>)
 80059a0:	4298      	cmp	r0, r3
 80059a2:	d018      	beq.n	80059d6 <uart_lld_start+0x132>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 80059a4:	6866      	ldr	r6, [r4, #4]
 80059a6:	8b35      	ldrh	r5, [r6, #24]
 80059a8:	f405 53a0 	and.w	r3, r5, #5120	; 0x1400
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d103      	bne.n	80059ba <uart_lld_start+0x116>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80059b2:	69a3      	ldr	r3, [r4, #24]
 80059b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80059b8:	61a3      	str	r3, [r4, #24]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80059ba:	e9d4 c707 	ldrd	ip, r7, [r4, #28]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80059be:	6961      	ldr	r1, [r4, #20]
 80059c0:	f8dc 2000 	ldr.w	r2, [ip]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80059c4:	6838      	ldr	r0, [r7, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80059c6:	1d0b      	adds	r3, r1, #4
    uartp->rxbuf = 0;
 80059c8:	f04f 0e00 	mov.w	lr, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80059cc:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80059ce:	6083      	str	r3, [r0, #8]
    uartp->rxbuf = 0;
 80059d0:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80059d4:	e773      	b.n	80058be <uart_lld_start+0x1a>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 80059d6:	4603      	mov	r3, r0
 80059d8:	4a37      	ldr	r2, [pc, #220]	; (8005ab8 <uart_lld_start+0x214>)
 80059da:	210c      	movs	r1, #12
 80059dc:	2006      	movs	r0, #6
 80059de:	f7fd fb47 	bl	8003070 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 80059e2:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 80059e4:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 80059e6:	4a35      	ldr	r2, [pc, #212]	; (8005abc <uart_lld_start+0x218>)
 80059e8:	210c      	movs	r1, #12
 80059ea:	2000      	movs	r0, #0
 80059ec:	f7fd fb40 	bl	8003070 <dmaStreamAllocI>
      rccEnableUART8(true);
 80059f0:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 80059f2:	6220      	str	r0, [r4, #32]
      rccEnableUART8(true);
 80059f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40
 80059fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 8005a04:	210c      	movs	r1, #12
 8005a06:	2053      	movs	r0, #83	; 0x53
      rccEnableUART8(true);
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 8005a0a:	f7fc fc3f 	bl	800228c <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(UART8_RX_DMA_CHANNEL) |
 8005a0e:	69a3      	ldr	r3, [r4, #24]
 8005a10:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8005a14:	61a3      	str	r3, [r4, #24]
 8005a16:	e7c5      	b.n	80059a4 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <uart_lld_start+0x214>)
 8005a1c:	210c      	movs	r1, #12
 8005a1e:	2009      	movs	r0, #9
 8005a20:	f7fd fb26 	bl	8003070 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8005a24:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 8005a26:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8005a28:	4a24      	ldr	r2, [pc, #144]	; (8005abc <uart_lld_start+0x218>)
 8005a2a:	210c      	movs	r1, #12
 8005a2c:	200f      	movs	r0, #15
 8005a2e:	f7fd fb1f 	bl	8003070 <dmaStreamAllocI>
      rccEnableUSART6(true);
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8005a34:	6220      	str	r0, [r4, #32]
      rccEnableUSART6(true);
 8005a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a38:	f042 0220 	orr.w	r2, r2, #32
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8005a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8005a46:	210c      	movs	r1, #12
 8005a48:	2047      	movs	r0, #71	; 0x47
      rccEnableUSART6(true);
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8005a4c:	f7fc fc1e 	bl	800228c <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 8005a50:	69a3      	ldr	r3, [r4, #24]
 8005a52:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8005a56:	61a3      	str	r3, [r4, #24]
 8005a58:	e7a4      	b.n	80059a4 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <uart_lld_start+0x214>)
 8005a5e:	210c      	movs	r1, #12
 8005a60:	200a      	movs	r0, #10
 8005a62:	f7fd fb05 	bl	8003070 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8005a66:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8005a68:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8005a6a:	4a14      	ldr	r2, [pc, #80]	; (8005abc <uart_lld_start+0x218>)
 8005a6c:	210c      	movs	r1, #12
 8005a6e:	200f      	movs	r0, #15
 8005a70:	f7fd fafe 	bl	8003070 <dmaStreamAllocI>
      rccEnableUSART1(true);
 8005a74:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8005a76:	6220      	str	r0, [r4, #32]
      rccEnableUSART1(true);
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	f042 0210 	orr.w	r2, r2, #16
 8005a7e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a82:	f042 0210 	orr.w	r2, r2, #16
 8005a86:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8005a88:	210c      	movs	r1, #12
 8005a8a:	2025      	movs	r0, #37	; 0x25
      rccEnableUSART1(true);
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8005a8e:	f7fc fbfd 	bl	800228c <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 8005a92:	69a3      	ldr	r3, [r4, #24]
 8005a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a98:	61a3      	str	r3, [r4, #24]
 8005a9a:	e783      	b.n	80059a4 <uart_lld_start+0x100>
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	0280de80 	.word	0x0280de80
 8005aa8:	0501bd00 	.word	0x0501bd00
 8005aac:	20000bc0 	.word	0x20000bc0
 8005ab0:	20000be8 	.word	0x20000be8
 8005ab4:	20000c10 	.word	0x20000c10
 8005ab8:	08005391 	.word	0x08005391
 8005abc:	08005325 	.word	0x08005325
 8005ac0:	40023800 	.word	0x40023800

08005ac4 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8005ac4:	e7fe      	b.n	8005ac4 <_idle_thread>
 8005ac6:	bf00      	nop

08005ac8 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  static volatile bool started = false;
  if(started)
 8005aca:	4c20      	ldr	r4, [pc, #128]	; (8005b4c <chSysInit+0x84>)
 8005acc:	7823      	ldrb	r3, [r4, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <chSysInit+0xa>
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
  }
#endif
  started = true;
}
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  _scheduler_init();
 8005ad6:	f000 f95b 	bl	8005d90 <_scheduler_init>
  _vt_init();
 8005ada:	f000 f897 	bl	8005c0c <_vt_init>
  _tm_init();
 8005ade:	f000 fb85 	bl	80061ec <_tm_init>
  _core_init();
 8005ae2:	f000 fc9d 	bl	8006420 <_core_init>
  _heap_init();
 8005ae6:	f000 fce3 	bl	80064b0 <_heap_init>
  _factory_init();
 8005aea:	f000 fd3b 	bl	8006564 <_factory_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	4917      	ldr	r1, [pc, #92]	; (8005b50 <chSysInit+0x88>)
 8005af2:	4818      	ldr	r0, [pc, #96]	; (8005b54 <chSysInit+0x8c>)
 8005af4:	f000 fa36 	bl	8005f64 <_thread_init>
  currp->state = CH_STATE_CURRENT;
 8005af8:	2601      	movs	r6, #1
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005afa:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <chSysInit+0x90>)
 8005afc:	f880 6020 	strb.w	r6, [r0, #32]
 8005b00:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005b02:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <chSysInit+0x94>)
  currp->wabase = NULL;
 8005b04:	61c5      	str	r5, [r0, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b06:	f64f 07ff 	movw	r7, #63743	; 0xf8ff
 8005b0a:	4039      	ands	r1, r7

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005b0c:	f107 4760 	add.w	r7, r7, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8005b10:	430a      	orrs	r2, r1
 8005b12:	f6a7 370f 	subw	r7, r7, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	68fa      	ldr	r2, [r7, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005b1a:	4911      	ldr	r1, [pc, #68]	; (8005b60 <chSysInit+0x98>)
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005b1c:	f8df c048 	ldr.w	ip, [pc, #72]	; 8005b68 <chSysInit+0xa0>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005b20:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005b24:	60fa      	str	r2, [r7, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005b26:	680a      	ldr	r2, [r1, #0]
 8005b28:	f8cc 0018 	str.w	r0, [ip, #24]
 8005b2c:	4332      	orrs	r2, r6
 8005b2e:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b30:	2010      	movs	r0, #16
 8005b32:	2220      	movs	r2, #32
 8005b34:	77d8      	strb	r0, [r3, #31]
 8005b36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005b3a:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8005b3e:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 8005b40:	4808      	ldr	r0, [pc, #32]	; (8005b64 <chSysInit+0x9c>)
 8005b42:	f000 fa2d 	bl	8005fa0 <chThdCreate>
  started = true;
 8005b46:	7026      	strb	r6, [r4, #0]
}
 8005b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000d98 	.word	0x20000d98
 8005b50:	08008588 	.word	0x08008588
 8005b54:	20000dcc 	.word	0x20000dcc
 8005b58:	e000ed00 	.word	0xe000ed00
 8005b5c:	05fa0300 	.word	0x05fa0300
 8005b60:	e0001000 	.word	0xe0001000
 8005b64:	08008560 	.word	0x08008560
 8005b68:	20000d9c 	.word	0x20000d9c

08005b6c <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005b6c:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8005b6e:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <chSysHalt+0x8>)
 8005b70:	62d8      	str	r0, [r3, #44]	; 0x2c
 8005b72:	e7fe      	b.n	8005b72 <chSysHalt+0x6>
 8005b74:	20000d9c 	.word	0x20000d9c

08005b78 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8005b7c:	4d1d      	ldr	r5, [pc, #116]	; (8005bf4 <chSysTimerHandlerI+0x7c>)
 8005b7e:	46aa      	mov	sl, r5
 8005b80:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8005b84:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 8005b88:	68a3      	ldr	r3, [r4, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005b8a:	2720      	movs	r7, #32
 8005b8c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005b90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8005b92:	eba0 0902 	sub.w	r9, r0, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8005b96:	4599      	cmp	r9, r3
 8005b98:	d31c      	bcc.n	8005bd4 <chSysTimerHandlerI+0x5c>
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	e00a      	b.n	8005bb4 <chSysTimerHandlerI+0x3c>
 8005b9e:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8005ba2:	6920      	ldr	r0, [r4, #16]
 8005ba4:	47d8      	blx	fp
 8005ba6:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8005baa:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8005bac:	68a3      	ldr	r3, [r4, #8]
 8005bae:	4599      	cmp	r9, r3
 8005bb0:	d3ec      	bcc.n	8005b8c <chSysTimerHandlerI+0x14>
 8005bb2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005bb4:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8005bb6:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8005bba:	441a      	add	r2, r3
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005bbc:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8005bbe:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8005bc0:	eba9 0903 	sub.w	r9, r9, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005bc4:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8005bc8:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 8005bca:	60e6      	str	r6, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005bcc:	d1e7      	bne.n	8005b9e <chSysTimerHandlerI+0x26>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8005bce:	f7fb f9e7 	bl	8000fa0 <stStopAlarm>
 8005bd2:	e7e4      	b.n	8005b9e <chSysTimerHandlerI+0x26>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005bd4:	4554      	cmp	r4, sl
 8005bd6:	d00b      	beq.n	8005bf0 <chSysTimerHandlerI+0x78>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8005bd8:	eba3 0309 	sub.w	r3, r3, r9
  ch.vtlist.lasttime += nowdelta;
 8005bdc:	62a8      	str	r0, [r5, #40]	; 0x28
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	bf2c      	ite	cs
 8005be2:	18c0      	addcs	r0, r0, r3
 8005be4:	3002      	addcc	r0, #2
  ch.vtlist.next->delta -= nowdelta;
 8005be6:	60a3      	str	r3, [r4, #8]
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8005be8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	f7fb b9de 	b.w	8000fac <stSetAlarm>
 8005bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	20000d9c 	.word	0x20000d9c

08005bf8 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005bf8:	4a03      	ldr	r2, [pc, #12]	; (8005c08 <chSysPolledDelayX+0x10>)
 8005bfa:	6851      	ldr	r1, [r2, #4]
 8005bfc:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 8005bfe:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8005c00:	4298      	cmp	r0, r3
 8005c02:	d8fb      	bhi.n	8005bfc <chSysPolledDelayX+0x4>
  }
}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e0001000 	.word	0xe0001000

08005c0c <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <_vt_init+0x18>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8005c12:	2100      	movs	r1, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005c14:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.lasttime = (systime_t)0;
 8005c18:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8005c1c:	e9c3 2207 	strd	r2, r2, [r3, #28]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000d9c 	.word	0x20000d9c

08005c28 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005c2a:	4f1f      	ldr	r7, [pc, #124]	; (8005ca8 <chVTDoSetI+0x80>)
 8005c2c:	46bc      	mov	ip, r7
 8005c2e:	2902      	cmp	r1, #2
 8005c30:	f85c 5f1c 	ldr.w	r5, [ip, #28]!
  vtp->par = par;
 8005c34:	6103      	str	r3, [r0, #16]
 8005c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c3a:	bf38      	it	cc
 8005c3c:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005c3e:	4565      	cmp	r5, ip
                vtfunc_t vtfunc, void *par) {
 8005c40:	4606      	mov	r6, r0
  vtp->func = vtfunc;
 8005c42:	60c2      	str	r2, [r0, #12]
 8005c44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005c46:	d01e      	beq.n	8005c86 <chVTDoSetI+0x5e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8005c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4a:	68ab      	ldr	r3, [r5, #8]
 8005c4c:	1a24      	subs	r4, r4, r0
 8005c4e:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8005c50:	d215      	bcs.n	8005c7e <chVTDoSetI+0x56>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d322      	bcc.n	8005c9c <chVTDoSetI+0x74>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	d204      	bcs.n	8005c64 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8005c5a:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8005c5c:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 8005c5e:	68ab      	ldr	r3, [r5, #8]
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d3fa      	bcc.n	8005c5a <chVTDoSetI+0x32>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8005c64:	686b      	ldr	r3, [r5, #4]
 8005c66:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 8005c6a:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 8005c6c:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 8005c6e:	60b4      	str	r4, [r6, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8005c70:	68ab      	ldr	r3, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8005c76:	1b1c      	subs	r4, r3, r4
 8005c78:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8005c7a:	627a      	str	r2, [r7, #36]	; 0x24
}
 8005c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 8005c7e:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8005c80:	1ae4      	subs	r4, r4, r3
 8005c82:	68ab      	ldr	r3, [r5, #8]
 8005c84:	e7e7      	b.n	8005c56 <chVTDoSetI+0x2e>
      ch.vtlist.prev = vtp;
 8005c86:	e9c7 0007 	strd	r0, r0, [r7, #28]
      ch.vtlist.lasttime = now;
 8005c8a:	62bc      	str	r4, [r7, #40]	; 0x28
  stStartAlarm(time);
 8005c8c:	1860      	adds	r0, r4, r1
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8005c8e:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 8005c92:	60b1      	str	r1, [r6, #8]
}
 8005c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c98:	f7fb b97a 	b.w	8000f90 <stStartAlarm>
  stSetAlarm(time);
 8005c9c:	4420      	add	r0, r4
 8005c9e:	f7fb f985 	bl	8000fac <stSetAlarm>
 8005ca2:	68ab      	ldr	r3, [r5, #8]
 8005ca4:	e7d7      	b.n	8005c56 <chVTDoSetI+0x2e>
 8005ca6:	bf00      	nop
 8005ca8:	20000d9c 	.word	0x20000d9c

08005cac <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <chVTDoResetI+0x70>)
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8005cb2:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8005cb4:	d010      	beq.n	8005cd8 <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8005cb6:	e9d0 2100 	ldrd	r2, r1, [r0]
 8005cba:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8005cbc:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8005cbe:	331c      	adds	r3, #28
    vtp->func = NULL;
 8005cc0:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8005cc2:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8005cc4:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8005cc6:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8005cc8:	d003      	beq.n	8005cd2 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 8005cca:	6881      	ldr	r1, [r0, #8]
 8005ccc:	6893      	ldr	r3, [r2, #8]
 8005cce:	440b      	add	r3, r1
 8005cd0:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd6:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8005cd8:	4618      	mov	r0, r3
 8005cda:	6811      	ldr	r1, [r2, #0]
 8005cdc:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8005ce0:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005ce2:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8005ce4:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8005ce6:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005ce8:	d013      	beq.n	8005d12 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 8005cea:	6894      	ldr	r4, [r2, #8]
 8005cec:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8005cee:	6a98      	ldr	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8005cf0:	4414      	add	r4, r2
 8005cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cf6:	608c      	str	r4, [r1, #8]
 8005cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cfa:	1a12      	subs	r2, r2, r0
  if (nowdelta >= ch.vtlist.next->delta) {
 8005cfc:	4294      	cmp	r4, r2
 8005cfe:	d9e8      	bls.n	8005cd2 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8005d00:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8005d02:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8005d04:	bf98      	it	ls
 8005d06:	1c94      	addls	r4, r2, #2
 8005d08:	4420      	add	r0, r4
}
 8005d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d0e:	f7fb b94d 	b.w	8000fac <stSetAlarm>
 8005d12:	f85d 4b04 	ldr.w	r4, [sp], #4
  stStopAlarm();
 8005d16:	f7fb b943 	b.w	8000fa0 <stStopAlarm>
 8005d1a:	bf00      	nop
 8005d1c:	20000d9c 	.word	0x20000d9c

08005d20 <wakeup>:
 8005d20:	2320      	movs	r3, #32
 8005d22:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8005d26:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005d2a:	2b07      	cmp	r3, #7
 8005d2c:	d80e      	bhi.n	8005d4c <wakeup+0x2c>
 8005d2e:	e8df f003 	tbb	[pc, r3]
 8005d32:	0d29      	.short	0x0d29
 8005d34:	0408250d 	.word	0x0408250d
 8005d38:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8005d3a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8005d3c:	6893      	ldr	r3, [r2, #8]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8005d42:	e9d0 2300 	ldrd	r2, r3, [r0]
 8005d46:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8005d48:	6802      	ldr	r2, [r0, #0]
 8005d4a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8005d4c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8005d4e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8005d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8005d54:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8005d58:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8005d5a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8005d5e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	428a      	cmp	r2, r1
 8005d64:	d2fb      	bcs.n	8005d5e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8005d6e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8005d70:	6058      	str	r0, [r3, #4]
 8005d72:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7a:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8005d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    break;
 8005d82:	e7e3      	b.n	8005d4c <wakeup+0x2c>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	4770      	bx	lr
 8005d8c:	20000d9c 	.word	0x20000d9c

08005d90 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <_scheduler_init+0x10>)
  ch.rlist.prio = NOPRIO;
 8005d92:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8005d94:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8005d98:	e9c3 3304 	strd	r3, r3, [r3, #16]
  ch.rlist.prio = NOPRIO;
 8005d9c:	609a      	str	r2, [r3, #8]
}
 8005d9e:	4770      	bx	lr
 8005da0:	20000d9c 	.word	0x20000d9c

08005da4 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8005da4:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8005da6:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8005daa:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8005dac:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8005db0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	4282      	cmp	r2, r0
 8005db6:	d2fb      	bcs.n	8005db0 <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8005db8:	685a      	ldr	r2, [r3, #4]
}
 8005dba:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8005dbc:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8005dc0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8005dc2:	6059      	str	r1, [r3, #4]
}
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000d9c 	.word	0x20000d9c

08005dcc <chSchGoSleepS>:
  thread_t *otp = currp;
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <chSchGoSleepS+0x24>)
 8005dce:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8005dd0:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8005dd2:	b410      	push	{r4}
  otp->state = newstate;
 8005dd4:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8005dd8:	6810      	ldr	r0, [r2, #0]
 8005dda:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8005ddc:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005dde:	6043      	str	r3, [r0, #4]
 8005de0:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8005de4:	4610      	mov	r0, r2
}
 8005de6:	f85d 4b04 	ldr.w	r4, [sp], #4
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005dea:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8005dec:	f7fa ba90 	b.w	8000310 <_port_switch>
 8005df0:	20000d9c 	.word	0x20000d9c

08005df4 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8005df4:	b530      	push	{r4, r5, lr}
 8005df6:	4c19      	ldr	r4, [pc, #100]	; (8005e5c <chSchGoSleepTimeoutS+0x68>)

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8005df8:	1c4a      	adds	r2, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	69a3      	ldr	r3, [r4, #24]
  if (TIME_INFINITE != timeout) {
 8005e00:	d01a      	beq.n	8005e38 <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8005e02:	a801      	add	r0, sp, #4
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <chSchGoSleepTimeoutS+0x6c>)
 8005e06:	f7ff ff0f 	bl	8005c28 <chVTDoSetI>
  thread_t *otp = currp;
 8005e0a:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8005e0c:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 8005e0e:	f881 5020 	strb.w	r5, [r1, #32]
  tqp->next             = tp->queue.next;
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8005e16:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005e18:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8005e1a:	4618      	mov	r0, r3
  currp->state = CH_STATE_CURRENT;
 8005e1c:	f883 5020 	strb.w	r5, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005e20:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 8005e22:	f7fa fa75 	bl	8000310 <_port_switch>
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt)) {
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	b113      	cbz	r3, 8005e30 <chSchGoSleepTimeoutS+0x3c>
      chVTDoResetI(&vt);
 8005e2a:	a801      	add	r0, sp, #4
 8005e2c:	f7ff ff3e 	bl	8005cac <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8005e30:	69a3      	ldr	r3, [r4, #24]
}
 8005e32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e34:	b007      	add	sp, #28
 8005e36:	bd30      	pop	{r4, r5, pc}
  thread_t *tp = tqp->next;
 8005e38:	6822      	ldr	r2, [r4, #0]
  otp->state = newstate;
 8005e3a:	f883 0020 	strb.w	r0, [r3, #32]
  tqp->next             = tp->queue.next;
 8005e3e:	6810      	ldr	r0, [r2, #0]
 8005e40:	6020      	str	r0, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8005e42:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005e44:	6044      	str	r4, [r0, #4]
  chSysSwitch(currp, otp);
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
  currp->state = CH_STATE_CURRENT;
 8005e4a:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005e4e:	61a2      	str	r2, [r4, #24]
  chSysSwitch(currp, otp);
 8005e50:	f7fa fa5e 	bl	8000310 <_port_switch>
  return currp->u.rdymsg;
 8005e54:	69a3      	ldr	r3, [r4, #24]
}
 8005e56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e58:	b007      	add	sp, #28
 8005e5a:	bd30      	pop	{r4, r5, pc}
 8005e5c:	20000d9c 	.word	0x20000d9c
 8005e60:	08005d21 	.word	0x08005d21

08005e64 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8005e64:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005e66:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8005e68:	699e      	ldr	r6, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8005e6a:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005e6c:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8005e6e:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 8005e70:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8005e72:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 8005e74:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 8005e78:	d80c      	bhi.n	8005e94 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 8005e7a:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8005e7e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	4295      	cmp	r5, r2
 8005e84:	d9fb      	bls.n	8005e7e <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005e8c:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005e8e:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8005e90:	bc70      	pop	{r4, r5, r6}
 8005e92:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8005e94:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8005e98:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8005e9a:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8005e9c:	6891      	ldr	r1, [r2, #8]
 8005e9e:	4288      	cmp	r0, r1
 8005ea0:	d9fb      	bls.n	8005e9a <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8005ea2:	6851      	ldr	r1, [r2, #4]
 8005ea4:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8005ea6:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8005ea8:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 8005eaa:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8005eac:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8005eae:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4620      	mov	r0, r4
    currp = ntp;
 8005eb6:	619c      	str	r4, [r3, #24]
}
 8005eb8:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8005eba:	f7fa ba29 	b.w	8000310 <_port_switch>
 8005ebe:	bf00      	nop
 8005ec0:	20000d9c 	.word	0x20000d9c

08005ec4 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8005ec4:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <chSchRescheduleS+0x44>)
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8005ec6:	b430      	push	{r4, r5}
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005ecc:	6882      	ldr	r2, [r0, #8]
 8005ece:	68a1      	ldr	r1, [r4, #8]
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	d801      	bhi.n	8005ed8 <chSchRescheduleS+0x14>
    chSchDoRescheduleAhead();
  }
}
 8005ed4:	bc30      	pop	{r4, r5}
 8005ed6:	4770      	bx	lr
  tqp->next             = tp->queue.next;
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005edc:	6053      	str	r3, [r2, #4]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8005ede:	2501      	movs	r5, #1
  tp->state = CH_STATE_READY;
 8005ee0:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 8005ee2:	f880 5020 	strb.w	r5, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005ee6:	6198      	str	r0, [r3, #24]
  tp->state = CH_STATE_READY;
 8005ee8:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8005eec:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	4291      	cmp	r1, r2
 8005ef2:	d3fb      	bcc.n	8005eec <chSchRescheduleS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8005ef4:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8005ef6:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8005ef8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005efc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005efe:	605c      	str	r4, [r3, #4]
}
 8005f00:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8005f02:	f7fa ba05 	b.w	8000310 <_port_switch>
 8005f06:	bf00      	nop
 8005f08:	20000d9c 	.word	0x20000d9c

08005f0c <chSchIsPreemptionRequired>:
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <chSchIsPreemptionRequired+0x14>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->prio;
 8005f10:	699b      	ldr	r3, [r3, #24]
  return p1 > p2;
 8005f12:	6890      	ldr	r0, [r2, #8]
 8005f14:	689b      	ldr	r3, [r3, #8]
}
 8005f16:	4298      	cmp	r0, r3
 8005f18:	bf94      	ite	ls
 8005f1a:	2000      	movls	r0, #0
 8005f1c:	2001      	movhi	r0, #1
 8005f1e:	4770      	bx	lr
 8005f20:	20000d9c 	.word	0x20000d9c

08005f24 <chSchDoReschedule>:
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <chSchDoReschedule+0x3c>)
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	6802      	ldr	r2, [r0, #0]
 8005f2a:	b410      	push	{r4}
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	699c      	ldr	r4, [r3, #24]
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	6053      	str	r3, [r2, #4]
 8005f34:	f880 1020 	strb.w	r1, [r0, #32]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	68a1      	ldr	r1, [r4, #8]
 8005f3c:	f884 2020 	strb.w	r2, [r4, #32]
 8005f40:	6198      	str	r0, [r3, #24]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d3fb      	bcc.n	8005f42 <chSchDoReschedule+0x1e>
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	e9c4 3200 	strd	r3, r2, [r4]
 8005f52:	6014      	str	r4, [r2, #0]
 8005f54:	605c      	str	r4, [r3, #4]
 8005f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f5a:	f7fa b9d9 	b.w	8000310 <_port_switch>
 8005f5e:	bf00      	nop
 8005f60:	20000d9c 	.word	0x20000d9c

08005f64 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8005f64:	b470      	push	{r4, r5, r6}
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005f66:	4c0d      	ldr	r4, [pc, #52]	; (8005f9c <_thread_init+0x38>)
  tp->realprio  = prio;
 8005f68:	63c2      	str	r2, [r0, #60]	; 0x3c
  REG_INSERT(tp);
 8005f6a:	6965      	ldr	r5, [r4, #20]
  tp->prio      = prio;
 8005f6c:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 8005f6e:	2602      	movs	r6, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005f70:	2201      	movs	r2, #1
  tp->name      = name;
 8005f72:	6181      	str	r1, [r0, #24]
  tp->state     = CH_STATE_WTSTART;
 8005f74:	8406      	strh	r6, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005f76:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8005f7a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8005f7e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  tp->mtxlist   = NULL;
 8005f82:	2100      	movs	r1, #0
  REG_INSERT(tp);
 8005f84:	6145      	str	r5, [r0, #20]
 8005f86:	6104      	str	r4, [r0, #16]
  tp->epending  = (eventmask_t)0;
 8005f88:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
  REG_INSERT(tp);
 8005f8c:	6128      	str	r0, [r5, #16]
 8005f8e:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8005f90:	e9c0 620a 	strd	r6, r2, [r0, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8005f94:	6302      	str	r2, [r0, #48]	; 0x30
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 8005f96:	bc70      	pop	{r4, r5, r6}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000d9c 	.word	0x20000d9c

08005fa0 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	2320      	movs	r3, #32
 8005fa4:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8005fa8:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8005faa:	6844      	ldr	r4, [r0, #4]
  return _thread_init(tp, tdp->name, tdp->prio);
 8005fac:	6806      	ldr	r6, [r0, #0]
  REG_INSERT(tp);
 8005fae:	4a1b      	ldr	r2, [pc, #108]	; (800601c <chThdCreate+0x7c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005fb0:	e9d0 5104 	ldrd	r5, r1, [r0, #16]
  return _thread_init(tp, tdp->name, tdp->prio);
 8005fb4:	68c0      	ldr	r0, [r0, #12]
  tp->wabase = tdp->wbase;
 8005fb6:	f843 4c2c 	str.w	r4, [r3, #-44]
  tp->state     = CH_STATE_WTSTART;
 8005fba:	2402      	movs	r4, #2
 8005fbc:	f803 4c28 	strb.w	r4, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8005fc0:	2401      	movs	r4, #1
 8005fc2:	f803 4c26 	strb.w	r4, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005fc6:	2400      	movs	r4, #0
 8005fc8:	f803 4c27 	strb.w	r4, [r3, #-39]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005fcc:	e943 511b 	strd	r5, r1, [r3, #-108]	; 0x6c
  REG_INSERT(tp);
 8005fd0:	6951      	ldr	r1, [r2, #20]
  tp->prio      = prio;
 8005fd2:	f843 0c40 	str.w	r0, [r3, #-64]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005fd6:	f1a3 05ac 	sub.w	r5, r3, #172	; 0xac
  tp->realprio  = prio;
 8005fda:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005fde:	f843 5c3c 	str.w	r5, [r3, #-60]
 8005fe2:	480f      	ldr	r0, [pc, #60]	; (8006020 <chThdCreate+0x80>)
 8005fe4:	f843 0c4c 	str.w	r0, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8005fe8:	f1a3 0548 	sub.w	r5, r3, #72	; 0x48
  REG_INSERT(tp);
 8005fec:	e943 210e 	strd	r2, r1, [r3, #-56]	; 0x38
  tp->name      = name;
 8005ff0:	f843 6c30 	str.w	r6, [r3, #-48]
  list_init(&tp->waiting);
 8005ff4:	f1a3 0020 	sub.w	r0, r3, #32
  tp->epending  = (eventmask_t)0;
 8005ff8:	e943 4405 	strd	r4, r4, [r3, #-20]
  REG_INSERT(tp);
 8005ffc:	610d      	str	r5, [r1, #16]
  queue_init(&tp->msgqueue);
 8005ffe:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 8006002:	6155      	str	r5, [r2, #20]
  tlp->next = (thread_t *)tlp;
 8006004:	f843 0c20 	str.w	r0, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8006008:	e943 1107 	strd	r1, r1, [r3, #-28]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 800600c:	4628      	mov	r0, r5
 800600e:	4621      	mov	r1, r4
 8006010:	f7ff ff28 	bl	8005e64 <chSchWakeupS>
 8006014:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
 8006018:	4628      	mov	r0, r5
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	20000d9c 	.word	0x20000d9c
 8006020:	08000329 	.word	0x08000329

08006024 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	9d06      	ldr	r5, [sp, #24]
 8006028:	2420      	movs	r4, #32
 800602a:	f384 8811 	msr	BASEPRI, r4
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 800602e:	3948      	subs	r1, #72	; 0x48
 8006030:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 8006032:	4e16      	ldr	r6, [pc, #88]	; (800608c <chThdCreateStatic+0x68>)
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8006034:	61e0      	str	r0, [r4, #28]
  REG_INSERT(tp);
 8006036:	6971      	ldr	r1, [r6, #20]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006038:	f844 3c24 	str.w	r3, [r4, #-36]
 800603c:	f844 5c20 	str.w	r5, [r4, #-32]
 8006040:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
  tp->state     = CH_STATE_WTSTART;
 8006044:	2502      	movs	r5, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8006046:	2301      	movs	r3, #1
  tp->prio      = prio;
 8006048:	60a2      	str	r2, [r4, #8]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800604a:	60e0      	str	r0, [r4, #12]
  tp->realprio  = prio;
 800604c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 800604e:	8425      	strh	r5, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8006050:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 8006054:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8006058:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 800605c:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800605e:	4f0c      	ldr	r7, [pc, #48]	; (8006090 <chThdCreateStatic+0x6c>)
  tp->name      = name;
 8006060:	480c      	ldr	r0, [pc, #48]	; (8006094 <chThdCreateStatic+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006062:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 8006066:	e9c4 6104 	strd	r6, r1, [r4, #16]
  tp->name      = name;
 800606a:	61a0      	str	r0, [r4, #24]
  tp->epending  = (eventmask_t)0;
 800606c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8006070:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8006072:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 8006074:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8006078:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 800607a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800607c:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800607e:	f7ff fef1 	bl	8005e64 <chSchWakeupS>
 8006082:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8006086:	4620      	mov	r0, r4
 8006088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608a:	bf00      	nop
 800608c:	20000d9c 	.word	0x20000d9c
 8006090:	08000329 	.word	0x08000329
 8006094:	08008580 	.word	0x08008580

08006098 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	2220      	movs	r2, #32
 800609c:	4603      	mov	r3, r0
 800609e:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <chThdExit+0x4c>)
 80060a4:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80060a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 80060a8:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 80060aa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80060ae:	42a8      	cmp	r0, r5
 80060b0:	d006      	beq.n	80060c0 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 80060b2:	6803      	ldr	r3, [r0, #0]
 80060b4:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80060b6:	f7ff fe75 	bl	8005da4 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80060ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80060bc:	42a8      	cmp	r0, r5
 80060be:	d1f8      	bne.n	80060b2 <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 80060c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80060c4:	b943      	cbnz	r3, 80060d8 <chThdExit+0x40>
 80060c6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d104      	bne.n	80060d8 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 80060ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80060d2:	611a      	str	r2, [r3, #16]
 80060d4:	6922      	ldr	r2, [r4, #16]
 80060d6:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80060d8:	200f      	movs	r0, #15
}
 80060da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80060de:	f7ff be75 	b.w	8005dcc <chSchGoSleepS>
 80060e2:	bf00      	nop
 80060e4:	20000d9c 	.word	0x20000d9c

080060e8 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80060e8:	b508      	push	{r3, lr}
 80060ea:	4601      	mov	r1, r0
 80060ec:	2320      	movs	r3, #32
 80060ee:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80060f2:	2008      	movs	r0, #8
 80060f4:	f7ff fe7e 	bl	8005df4 <chSchGoSleepTimeoutS>
 80060f8:	2300      	movs	r3, #0
 80060fa:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 80060fe:	bd08      	pop	{r3, pc}

08006100 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8006102:	4602      	mov	r2, r0
 8006104:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 8006106:	b121      	cbz	r1, 8006112 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8006108:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800610a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800610e:	f7ff be71 	b.w	8005df4 <chSchGoSleepTimeoutS>
}
 8006112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006116:	4770      	bx	lr
 8006118:	20000d9c 	.word	0x20000d9c

0800611c <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800611c:	6803      	ldr	r3, [r0, #0]
 800611e:	b12b      	cbz	r3, 800612c <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8006120:	2200      	movs	r2, #0
 8006122:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8006124:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8006126:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006128:	f7ff be3c 	b.w	8005da4 <chSchReadyI>
  }
}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8006130:	b169      	cbz	r1, 800614e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8006134:	b410      	push	{r4}
 8006136:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8006138:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800613a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800613c:	2004      	movs	r0, #4
 800613e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8006142:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8006144:	6053      	str	r3, [r2, #4]
}
 8006146:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800614a:	f7ff be53 	b.w	8005df4 <chSchGoSleepTimeoutS>
}
 800614e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006152:	4770      	bx	lr
 8006154:	20000d9c 	.word	0x20000d9c

08006158 <chThdDequeueNextI>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006158:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800615a:	4290      	cmp	r0, r2
 800615c:	d00a      	beq.n	8006174 <chThdDequeueNextI+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800615e:	b410      	push	{r4}
  tqp->next             = tp->queue.next;
 8006160:	6814      	ldr	r4, [r2, #0]
 8006162:	6004      	str	r4, [r0, #0]
 8006164:	4603      	mov	r3, r0
  tqp->next->queue.prev = (thread_t *)tqp;
 8006166:	6063      	str	r3, [r4, #4]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
 8006168:	4610      	mov	r0, r2
  tp->u.rdymsg = msg;
 800616a:	6251      	str	r1, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800616c:	f85d 4b04 	ldr.w	r4, [sp], #4
  (void) chSchReadyI(tp);
 8006170:	f7ff be18 	b.w	8005da4 <chSchReadyI>
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8006178:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 800617a:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800617c:	4298      	cmp	r0, r3
 800617e:	d00b      	beq.n	8006198 <chThdDequeueAllI+0x20>
 8006180:	4604      	mov	r4, r0
 8006182:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 800618a:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 800618c:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800618e:	f7ff fe09 	bl	8005da4 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	429c      	cmp	r4, r3
 8006196:	d1f5      	bne.n	8006184 <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	bf00      	nop

0800619c <chTMStartMeasurementX>:
 800619c:	4b01      	ldr	r3, [pc, #4]	; (80061a4 <chTMStartMeasurementX+0x8>)
 800619e:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80061a0:	6083      	str	r3, [r0, #8]
}
 80061a2:	4770      	bx	lr
 80061a4:	e0001000 	.word	0xe0001000

080061a8 <chTMStopMeasurementX>:
 80061a8:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80061aa:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <chTMStopMeasurementX+0x40>)
 80061ac:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80061ae:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80061b0:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80061b2:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80061b4:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 80061b6:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80061b8:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 80061ba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80061be:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80061c0:	18e6      	adds	r6, r4, r3
 80061c2:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 80061c6:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80061c8:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80061ca:	bf88      	it	hi
 80061cc:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80061ce:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80061d0:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80061d2:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80061d6:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80061da:	bf38      	it	cc
 80061dc:	6003      	strcc	r3, [r0, #0]
}
 80061de:	bcf0      	pop	{r4, r5, r6, r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e0001000 	.word	0xe0001000
 80061e8:	20000d9c 	.word	0x20000d9c

080061ec <_tm_init>:
void _tm_init(void) {
 80061ec:	b510      	push	{r4, lr}
  ch.tm.offset = (rtcnt_t)0;
 80061ee:	4c0c      	ldr	r4, [pc, #48]	; (8006220 <_tm_init+0x34>)
void _tm_init(void) {
 80061f0:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 80061f2:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 80061f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
 80061f8:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 80061fa:	4668      	mov	r0, sp
  ch.tm.offset = (rtcnt_t)0;
 80061fc:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->last       = (rtcnt_t)0;
 80061fe:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8006202:	9303      	str	r3, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 8006204:	2300      	movs	r3, #0
 8006206:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 800620a:	9100      	str	r1, [sp, #0]
  chTMStartMeasurementX(&tm);
 800620c:	f7ff ffc6 	bl	800619c <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8006210:	4668      	mov	r0, sp
 8006212:	f7ff ffc9 	bl	80061a8 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8006216:	9b02      	ldr	r3, [sp, #8]
 8006218:	6763      	str	r3, [r4, #116]	; 0x74
}
 800621a:	b006      	add	sp, #24
 800621c:	bd10      	pop	{r4, pc}
 800621e:	bf00      	nop
 8006220:	20000d9c 	.word	0x20000d9c

08006224 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8006224:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 8006226:	e9c0 0000 	strd	r0, r0, [r0]
 800622a:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	2320      	movs	r3, #32
 8006234:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8006238:	4a39      	ldr	r2, [pc, #228]	; (8006320 <chMtxLock+0xf0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 800623a:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 800623c:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 800623e:	2b00      	cmp	r3, #0
 8006240:	d042      	beq.n	80062c8 <chMtxLock+0x98>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8006242:	68a9      	ldr	r1, [r5, #8]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	4291      	cmp	r1, r2
 8006248:	4604      	mov	r4, r0
 800624a:	d907      	bls.n	800625c <chMtxLock+0x2c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 800624c:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 8006250:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 8006252:	2a06      	cmp	r2, #6
 8006254:	d040      	beq.n	80062d8 <chMtxLock+0xa8>
 8006256:	2a07      	cmp	r2, #7
 8006258:	d017      	beq.n	800628a <chMtxLock+0x5a>
 800625a:	b352      	cbz	r2, 80062b2 <chMtxLock+0x82>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 800625c:	4626      	mov	r6, r4
 800625e:	4623      	mov	r3, r4
 8006260:	e003      	b.n	800626a <chMtxLock+0x3a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8006262:	6899      	ldr	r1, [r3, #8]
 8006264:	68aa      	ldr	r2, [r5, #8]
 8006266:	4291      	cmp	r1, r2
 8006268:	d32c      	bcc.n	80062c4 <chMtxLock+0x94>
    cp = cp->queue.next;
 800626a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800626c:	429c      	cmp	r4, r3
 800626e:	d1f8      	bne.n	8006262 <chMtxLock+0x32>
  tp->queue.prev             = cp->queue.prev;
 8006270:	6873      	ldr	r3, [r6, #4]
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8006272:	2006      	movs	r0, #6
 8006274:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8006278:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 800627a:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 800627c:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800627e:	f7ff fda5 	bl	8005dcc <chSchGoSleepS>
 8006282:	2300      	movs	r3, #0
 8006284:	f383 8811 	msr	BASEPRI, r3
}
 8006288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 800628a:	e9d3 0200 	ldrd	r0, r2, [r3]
 800628e:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8006290:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	6042      	str	r2, [r0, #4]
 8006296:	4632      	mov	r2, r6
 8006298:	e002      	b.n	80062a0 <chMtxLock+0x70>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800629a:	6890      	ldr	r0, [r2, #8]
 800629c:	4288      	cmp	r0, r1
 800629e:	d335      	bcc.n	800630c <chMtxLock+0xdc>
    cp = cp->queue.next;
 80062a0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80062a2:	4296      	cmp	r6, r2
 80062a4:	d1f9      	bne.n	800629a <chMtxLock+0x6a>
  tp->queue.prev             = cp->queue.prev;
 80062a6:	6872      	ldr	r2, [r6, #4]
 80062a8:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80062ac:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80062ae:	6073      	str	r3, [r6, #4]
 80062b0:	e7d4      	b.n	800625c <chMtxLock+0x2c>
  tp->queue.prev->queue.next = tp->queue.next;
 80062b2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80062b6:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80062b8:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 80062ba:	4618      	mov	r0, r3
 80062bc:	604a      	str	r2, [r1, #4]
 80062be:	f7ff fd71 	bl	8005da4 <chSchReadyI>
 80062c2:	e7cb      	b.n	800625c <chMtxLock+0x2c>
    cp = cp->queue.next;
 80062c4:	461e      	mov	r6, r3
 80062c6:	e7d3      	b.n	8006270 <chMtxLock+0x40>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 80062c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80062ca:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 80062ce:	63a8      	str	r0, [r5, #56]	; 0x38
 80062d0:	2300      	movs	r3, #0
 80062d2:	f383 8811 	msr	BASEPRI, r3
}
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80062d8:	e9d3 0200 	ldrd	r0, r2, [r3]
 80062dc:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80062de:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	4637      	mov	r7, r6
 80062e4:	6042      	str	r2, [r0, #4]
 80062e6:	4632      	mov	r2, r6
 80062e8:	e002      	b.n	80062f0 <chMtxLock+0xc0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80062ea:	6890      	ldr	r0, [r2, #8]
 80062ec:	4288      	cmp	r0, r1
 80062ee:	d314      	bcc.n	800631a <chMtxLock+0xea>
    cp = cp->queue.next;
 80062f0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80062f2:	4296      	cmp	r6, r2
 80062f4:	d1f9      	bne.n	80062ea <chMtxLock+0xba>
  tp->queue.prev             = cp->queue.prev;
 80062f6:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 80062f8:	68a9      	ldr	r1, [r5, #8]
 80062fa:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80062fe:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8006300:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 8006302:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	4291      	cmp	r1, r2
 8006308:	d8a0      	bhi.n	800624c <chMtxLock+0x1c>
 800630a:	e7a7      	b.n	800625c <chMtxLock+0x2c>
    cp = cp->queue.next;
 800630c:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 800630e:	6872      	ldr	r2, [r6, #4]
 8006310:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8006314:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8006316:	6073      	str	r3, [r6, #4]
 8006318:	e7a0      	b.n	800625c <chMtxLock+0x2c>
    cp = cp->queue.next;
 800631a:	4617      	mov	r7, r2
 800631c:	e7eb      	b.n	80062f6 <chMtxLock+0xc6>
 800631e:	bf00      	nop
 8006320:	20000d9c 	.word	0x20000d9c

08006324 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8006326:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8006328:	699d      	ldr	r5, [r3, #24]
 800632a:	2320      	movs	r3, #32
 800632c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006330:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8006332:	68c3      	ldr	r3, [r0, #12]
 8006334:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006336:	4284      	cmp	r4, r0
 8006338:	d01d      	beq.n	8006376 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 800633a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800633c:	b14b      	cbz	r3, 8006352 <chMtxUnlock+0x2e>
 800633e:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <chMtxUnlock+0x28>
 8006344:	6892      	ldr	r2, [r2, #8]
 8006346:	4291      	cmp	r1, r2
 8006348:	bf38      	it	cc
 800634a:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800634c:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f5      	bne.n	800633e <chMtxUnlock+0x1a>
 8006352:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8006354:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8006356:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 8006358:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800635a:	4620      	mov	r0, r4
 800635c:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800635e:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 8006360:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 8006364:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8006366:	f7ff fd1d 	bl	8005da4 <chSchReadyI>
      chSchRescheduleS();
 800636a:	f7ff fdab 	bl	8005ec4 <chSchRescheduleS>
 800636e:	2300      	movs	r3, #0
 8006370:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8006374:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	60a3      	str	r3, [r4, #8]
 800637a:	2300      	movs	r3, #0
 800637c:	f383 8811 	msr	BASEPRI, r3
}
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	bf00      	nop
 8006384:	20000d9c 	.word	0x20000d9c

08006388 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 800638a:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800638c:	42a0      	cmp	r0, r4
 800638e:	d021      	beq.n	80063d4 <chEvtBroadcastFlagsI+0x4c>
 8006390:	460d      	mov	r5, r1
 8006392:	4607      	mov	r7, r0
 8006394:	b341      	cbz	r1, 80063e8 <chEvtBroadcastFlagsI+0x60>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8006396:	2600      	movs	r6, #0
 8006398:	e004      	b.n	80063a4 <chEvtBroadcastFlagsI+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800639a:	2a0b      	cmp	r2, #11
 800639c:	d037      	beq.n	800640e <chEvtBroadcastFlagsI+0x86>
    elp = elp->next;
 800639e:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80063a0:	42a7      	cmp	r7, r4
 80063a2:	d017      	beq.n	80063d4 <chEvtBroadcastFlagsI+0x4c>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80063a4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    elp->flags |= flags;
 80063a8:	432b      	orrs	r3, r5
    if ((flags == (eventflags_t)0) ||
 80063aa:	4215      	tst	r5, r2
    elp->flags |= flags;
 80063ac:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80063ae:	d0f6      	beq.n	800639e <chEvtBroadcastFlagsI+0x16>
  tp->epending |= events;
 80063b0:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80063b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063b6:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80063ba:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063bc:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80063be:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063c0:	d1eb      	bne.n	800639a <chEvtBroadcastFlagsI+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80063c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063c4:	4213      	tst	r3, r2
 80063c6:	d0ea      	beq.n	800639e <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 80063c8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80063ca:	f7ff fceb 	bl	8005da4 <chSchReadyI>
    elp = elp->next;
 80063ce:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80063d0:	42a7      	cmp	r7, r4
 80063d2:	d1e7      	bne.n	80063a4 <chEvtBroadcastFlagsI+0x1c>
}
 80063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80063d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063d8:	4213      	tst	r3, r2
 80063da:	d002      	beq.n	80063e2 <chEvtBroadcastFlagsI+0x5a>
    tp->u.rdymsg = MSG_OK;
 80063dc:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80063de:	f7ff fce1 	bl	8005da4 <chSchReadyI>
    elp = elp->next;
 80063e2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80063e4:	42a7      	cmp	r7, r4
 80063e6:	d0f5      	beq.n	80063d4 <chEvtBroadcastFlagsI+0x4c>
  tp->epending |= events;
 80063e8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80063ec:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063ee:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80063f2:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063f4:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80063f6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80063f8:	d0ed      	beq.n	80063d6 <chEvtBroadcastFlagsI+0x4e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d1f1      	bne.n	80063e2 <chEvtBroadcastFlagsI+0x5a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80063fe:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006400:	ea32 0303 	bics.w	r3, r2, r3
 8006404:	d0ea      	beq.n	80063dc <chEvtBroadcastFlagsI+0x54>
    elp = elp->next;
 8006406:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8006408:	42a7      	cmp	r7, r4
 800640a:	d1ed      	bne.n	80063e8 <chEvtBroadcastFlagsI+0x60>
 800640c:	e7e2      	b.n	80063d4 <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800640e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006410:	ea32 0303 	bics.w	r3, r2, r3
 8006414:	d1c3      	bne.n	800639e <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 8006416:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006418:	f7ff fcc4 	bl	8005da4 <chSchReadyI>
 800641c:	e7d7      	b.n	80063ce <chEvtBroadcastFlagsI+0x46>
 800641e:	bf00      	nop

08006420 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <_core_init+0xc>)
 8006422:	4903      	ldr	r1, [pc, #12]	; (8006430 <_core_init+0x10>)
  ch_memcore.endmem  = __heap_end__;
 8006424:	4a03      	ldr	r2, [pc, #12]	; (8006434 <_core_init+0x14>)
 8006426:	e9c3 1200 	strd	r1, r2, [r3]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800642a:	4770      	bx	lr
 800642c:	20000e14 	.word	0x20000e14
 8006430:	200018d8 	.word	0x200018d8
 8006434:	20030000 	.word	0x20030000

08006438 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8006438:	b470      	push	{r4, r5, r6}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800643a:	4d0b      	ldr	r5, [pc, #44]	; (8006468 <chCoreAllocAlignedWithOffsetI+0x30>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800643c:	e9d5 6400 	ldrd	r6, r4, [r5]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006440:	4432      	add	r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8006442:	3801      	subs	r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006444:	3a01      	subs	r2, #1
  size = MEM_ALIGN_NEXT(size, align);
 8006446:	1843      	adds	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006448:	1850      	adds	r0, r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 800644a:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800644c:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 800644e:	4019      	ands	r1, r3
  next = p + size;
 8006450:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8006452:	428c      	cmp	r4, r1
 8006454:	d304      	bcc.n	8006460 <chCoreAllocAlignedWithOffsetI+0x28>
 8006456:	428e      	cmp	r6, r1
 8006458:	d802      	bhi.n	8006460 <chCoreAllocAlignedWithOffsetI+0x28>
    return NULL;
  }

  ch_memcore.nextmem = next;
 800645a:	6029      	str	r1, [r5, #0]

  return p;
}
 800645c:	bc70      	pop	{r4, r5, r6}
 800645e:	4770      	bx	lr
    return NULL;
 8006460:	2000      	movs	r0, #0
}
 8006462:	bc70      	pop	{r4, r5, r6}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000e14 	.word	0x20000e14

0800646c <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 800646c:	b4f0      	push	{r4, r5, r6, r7}
 800646e:	2320      	movs	r3, #32
 8006470:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006474:	4d0d      	ldr	r5, [pc, #52]	; (80064ac <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8006476:	e9d5 7400 	ldrd	r7, r4, [r5]
 800647a:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800647c:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 800647e:	1983      	adds	r3, r0, r6
 8006480:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006482:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8006484:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8006486:	4008      	ands	r0, r1
  next = p + size;
 8006488:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800648a:	42a3      	cmp	r3, r4
 800648c:	d807      	bhi.n	800649e <chCoreAllocAlignedWithOffset+0x32>
 800648e:	429f      	cmp	r7, r3
 8006490:	d805      	bhi.n	800649e <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800649a:	bcf0      	pop	{r4, r5, r6, r7}
 800649c:	4770      	bx	lr
    return NULL;
 800649e:	2000      	movs	r0, #0
 80064a0:	2300      	movs	r3, #0
 80064a2:	f383 8811 	msr	BASEPRI, r3
}
 80064a6:	bcf0      	pop	{r4, r5, r6, r7}
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000e14 	.word	0x20000e14

080064b0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <_heap_init+0x14>)
 80064b2:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <_heap_init+0x18>)
 80064b4:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 80064b6:	f103 000c 	add.w	r0, r3, #12
  H_NEXT(&default_heap.header) = NULL;
 80064ba:	2200      	movs	r2, #0
  H_PAGES(&default_heap.header) = 0;
 80064bc:	e9c3 2201 	strd	r2, r2, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 80064c0:	f7ff beb0 	b.w	8006224 <chMtxObjectInit>
 80064c4:	20000e1c 	.word	0x20000e1c
 80064c8:	0800646d 	.word	0x0800646d

080064cc <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 80064ce:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80064d2:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80064d4:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80064d6:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80064da:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80064de:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80064e0:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 80064e4:	3504      	adds	r5, #4
  H_LOCK(heapp);
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff fea2 	bl	8006230 <chMtxLock>
  qp = &heapp->header;
 80064ec:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	d001      	beq.n	80064f8 <chHeapFree+0x2c>
 80064f4:	429c      	cmp	r4, r3
 80064f6:	d902      	bls.n	80064fe <chHeapFree+0x32>
 80064f8:	b11a      	cbz	r2, 8006502 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80064fa:	4294      	cmp	r4, r2
 80064fc:	d301      	bcc.n	8006502 <chHeapFree+0x36>
void chHeapFree(void *p) {
 80064fe:	4613      	mov	r3, r2
 8006500:	e7f5      	b.n	80064ee <chHeapFree+0x22>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006502:	f856 0c04 	ldr.w	r0, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8006506:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 800650a:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800650c:	1c45      	adds	r5, r0, #1
 800650e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006512:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8006516:	4291      	cmp	r1, r2
 8006518:	d00d      	beq.n	8006536 <chHeapFree+0x6a>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	3201      	adds	r2, #1
 800651e:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006522:	42ac      	cmp	r4, r5
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006524:	bf04      	itt	eq
 8006526:	1812      	addeq	r2, r2, r0
        H_NEXT(qp) = H_NEXT(hp);
 8006528:	e9c3 1200 	strdeq	r1, r2, [r3]
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800652c:	4638      	mov	r0, r7

  return;
}
 800652e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006532:	f7ff bef7 	b.w	8006324 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006536:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800653a:	4428      	add	r0, r5
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800653c:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006540:	f846 0c04 	str.w	r0, [r6, #-4]
 8006544:	e7e9      	b.n	800651a <chHeapFree+0x4e>
 8006546:	bf00      	nop

08006548 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8006548:	b410      	push	{r4}
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800654a:	2400      	movs	r4, #0
 800654c:	6004      	str	r4, [r0, #0]
  mp->object_size = size;
  mp->align = align;
 800654e:	e9c0 1201 	strd	r1, r2, [r0, #4]
  mp->provider = provider;
 8006552:	60c3      	str	r3, [r0, #12]
}
 8006554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop

0800655c <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 800655c:	2200      	movs	r2, #0
 800655e:	f7ff bf6b 	b.w	8006438 <chCoreAllocAlignedWithOffsetI>
 8006562:	bf00      	nop

08006564 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8006564:	b570      	push	{r4, r5, r6, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8006566:	4c13      	ldr	r4, [pc, #76]	; (80065b4 <_factory_init+0x50>)
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8006568:	4d13      	ldr	r5, [pc, #76]	; (80065b8 <_factory_init+0x54>)
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff fe5a 	bl	8006224 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8006570:	f104 0610 	add.w	r6, r4, #16
 8006574:	462b      	mov	r3, r5
 8006576:	f104 0014 	add.w	r0, r4, #20
 800657a:	2204      	movs	r2, #4
 800657c:	2114      	movs	r1, #20
 800657e:	6126      	str	r6, [r4, #16]
 8006580:	f7ff ffe2 	bl	8006548 <chPoolObjectInitAligned>
 8006584:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8006588:	462b      	mov	r3, r5
 800658a:	2204      	movs	r2, #4
 800658c:	211c      	movs	r1, #28
 800658e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8006592:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006596:	e9c4 6509 	strd	r6, r5, [r4, #36]	; 0x24
 800659a:	f7ff ffd5 	bl	8006548 <chPoolObjectInitAligned>
 800659e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80065a2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80065a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065aa:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 80065ae:	6463      	str	r3, [r4, #68]	; 0x44
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	bf00      	nop
 80065b4:	20000e38 	.word	0x20000e38
 80065b8:	0800655d 	.word	0x0800655d

080065bc <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80065bc:	4a06      	ldr	r2, [pc, #24]	; (80065d8 <SVC_Handler+0x1c>)
 80065be:	6853      	ldr	r3, [r2, #4]
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80065c6:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80065ca:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80065cc:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80065d0:	2300      	movs	r3, #0
 80065d2:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80065d6:	4770      	bx	lr
 80065d8:	e000ef30 	.word	0xe000ef30

080065dc <_port_irq_epilogue>:
 80065dc:	2320      	movs	r3, #32
 80065de:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <_port_irq_epilogue+0x50>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80065ea:	d102      	bne.n	80065f2 <_port_irq_epilogue+0x16>
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	4770      	bx	lr
void _port_irq_epilogue(void) {
 80065f2:	b510      	push	{r4, lr}
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80065f4:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80065f8:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 80065fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 8006608:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 800660c:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006610:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8006614:	f7ff fc7a 	bl	8005f0c <chSchIsPreemptionRequired>
 8006618:	b118      	cbz	r0, 8006622 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <_port_irq_epilogue+0x58>)
 800661c:	f844 3c50 	str.w	r3, [r4, #-80]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8006620:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <_port_irq_epilogue+0x5c>)
 8006624:	f844 3c50 	str.w	r3, [r4, #-80]
}
 8006628:	bd10      	pop	{r4, pc}
 800662a:	bf00      	nop
 800662c:	e000ed00 	.word	0xe000ed00
 8006630:	e000ef30 	.word	0xe000ef30
 8006634:	08000339 	.word	0x08000339
 8006638:	0800033c 	.word	0x0800033c

0800663c <_fini>:
__attribute__((used))
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <DR16_initDBus>:
/**
 * @brief start the uart driver for receiving from DR16
 * @note This will configure @p DR16_UART_DRIVER appropriately
 */
void DR16_initDBus(void)
{
 8006640:	b510      	push	{r4, lr}
		100000,						 //baud rate 100k
		USART_CR1_M | USART_CR1_PCE, //parity control enable, 8+1 bits
		USART_CR2_LBDL,				 //10 bit break detection
		0};

	uartStart(&DR16_UART_DRIVER, &s_DR16_UART_Config);
 8006642:	4c05      	ldr	r4, [pc, #20]	; (8006658 <DR16_initDBus+0x18>)
 8006644:	4905      	ldr	r1, [pc, #20]	; (800665c <DR16_initDBus+0x1c>)
 8006646:	4620      	mov	r0, r4
 8006648:	f7fb fb12 	bl	8001c70 <uartStart>
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 800664c:	6a20      	ldr	r0, [r4, #32]
}
 800664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 8006652:	f7fc bd73 	b.w	800313c <dmaStreamFree>
 8006656:	bf00      	nop
 8006658:	20000bc0 	.word	0x20000bc0
 800665c:	080085a0 	.word	0x080085a0

08006660 <get_descriptor>:
                                           uint16_t lang)
{

    (void)usbp;
    (void)lang;
    switch (dtype)
 8006660:	2902      	cmp	r1, #2
 8006662:	d006      	beq.n	8006672 <get_descriptor+0x12>
 8006664:	2903      	cmp	r1, #3
 8006666:	d006      	beq.n	8006676 <get_descriptor+0x16>
 8006668:	2901      	cmp	r1, #1
        return &vcom_configuration_descriptor;
    case USB_DESCRIPTOR_STRING:
        if (dindex < 4)
            return &vcom_strings[dindex];
    }
    return NULL;
 800666a:	4806      	ldr	r0, [pc, #24]	; (8006684 <get_descriptor+0x24>)
 800666c:	bf18      	it	ne
 800666e:	2000      	movne	r0, #0
 8006670:	4770      	bx	lr
        return &vcom_configuration_descriptor;
 8006672:	4805      	ldr	r0, [pc, #20]	; (8006688 <get_descriptor+0x28>)
 8006674:	4770      	bx	lr
        if (dindex < 4)
 8006676:	2a03      	cmp	r2, #3
            return &vcom_strings[dindex];
 8006678:	bf9a      	itte	ls
 800667a:	4804      	ldrls	r0, [pc, #16]	; (800668c <get_descriptor+0x2c>)
 800667c:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
    return NULL;
 8006680:	2000      	movhi	r0, #0
}
 8006682:	4770      	bx	lr
 8006684:	0800866c 	.word	0x0800866c
 8006688:	08008620 	.word	0x08008620
 800668c:	080086f4 	.word	0x080086f4

08006690 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp)
{
 8006690:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006692:	2320      	movs	r3, #32
 8006694:	f383 8811 	msr	BASEPRI, r3

    (void)usbp;

    osalSysLockFromISR();
    sduSOFHookI(&SDU1);
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <sof_handler+0x18>)
 800669a:	f7fb fa1b 	bl	8001ad4 <sduSOFHookI>
 800669e:	2300      	movs	r3, #0
 80066a0:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
}
 80066a4:	bd08      	pop	{r3, pc}
 80066a6:	bf00      	nop
 80066a8:	20000e80 	.word	0x20000e80

080066ac <usb_event>:
{
 80066ac:	b510      	push	{r4, lr}
    switch (event)
 80066ae:	2905      	cmp	r1, #5
 80066b0:	d80d      	bhi.n	80066ce <usb_event+0x22>
 80066b2:	e8df f001 	tbb	[pc, r1]
 80066b6:	0c21      	.short	0x0c21
 80066b8:	0321210d 	.word	0x0321210d
 80066bc:	2320      	movs	r3, #32
 80066be:	f383 8811 	msr	BASEPRI, r3
        sduWakeupHookI(&SDU1);
 80066c2:	4812      	ldr	r0, [pc, #72]	; (800670c <usb_event+0x60>)
 80066c4:	f7fb f9a6 	bl	8001a14 <sduWakeupHookI>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bd10      	pop	{r4, pc}
 80066d0:	4604      	mov	r4, r0
 80066d2:	2320      	movs	r3, #32
 80066d4:	f383 8811 	msr	BASEPRI, r3
        usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80066d8:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <usb_event+0x64>)
 80066da:	2101      	movs	r1, #1
 80066dc:	f7fb faf6 	bl	8001ccc <usbInitEndpointI>
        usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80066e0:	4620      	mov	r0, r4
 80066e2:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <usb_event+0x68>)
 80066e4:	2102      	movs	r1, #2
 80066e6:	f7fb faf1 	bl	8001ccc <usbInitEndpointI>
        sduConfigureHookI(&SDU1);
 80066ea:	4808      	ldr	r0, [pc, #32]	; (800670c <usb_event+0x60>)
 80066ec:	f7fb f99e 	bl	8001a2c <sduConfigureHookI>
 80066f0:	2300      	movs	r3, #0
 80066f2:	f383 8811 	msr	BASEPRI, r3
}
 80066f6:	bd10      	pop	{r4, pc}
 80066f8:	2320      	movs	r3, #32
 80066fa:	f383 8811 	msr	BASEPRI, r3
        sduSuspendHookI(&SDU1);
 80066fe:	4803      	ldr	r0, [pc, #12]	; (800670c <usb_event+0x60>)
 8006700:	f7fb f96a 	bl	80019d8 <sduSuspendHookI>
 8006704:	2300      	movs	r3, #0
 8006706:	f383 8811 	msr	BASEPRI, r3
}
 800670a:	bd10      	pop	{r4, pc}
 800670c:	20000e80 	.word	0x20000e80
 8006710:	080085c0 	.word	0x080085c0
 8006714:	080085e4 	.word	0x080085e4

08006718 <setup_USB>:

/**
 * @brief Initializes USBD1 and serial-over-USB CDC driver SDU1
 */
void setup_USB(void)
{
 8006718:	b538      	push	{r3, r4, r5, lr}
    sduObjectInit(&SDU1);
 800671a:	4d0c      	ldr	r5, [pc, #48]	; (800674c <setup_USB+0x34>)
    sduStart(&SDU1, &serusbcfg);
    usbDisconnectBus(serusbcfg.usbp);
 800671c:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <setup_USB+0x38>)
    sduObjectInit(&SDU1);
 800671e:	4628      	mov	r0, r5
 8006720:	f7fb f914 	bl	800194c <sduObjectInit>
    sduStart(&SDU1, &serusbcfg);
 8006724:	4628      	mov	r0, r5
 8006726:	490b      	ldr	r1, [pc, #44]	; (8006754 <setup_USB+0x3c>)
 8006728:	f7fb f93c 	bl	80019a4 <sduStart>
    usbDisconnectBus(serusbcfg.usbp);
 800672c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    usbStart(serusbcfg.usbp, &usbcfg);
 800672e:	490a      	ldr	r1, [pc, #40]	; (8006758 <setup_USB+0x40>)
    usbDisconnectBus(serusbcfg.usbp);
 8006730:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006732:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006736:	6393      	str	r3, [r2, #56]	; 0x38
    usbStart(serusbcfg.usbp, &usbcfg);
 8006738:	4620      	mov	r0, r4
 800673a:	f7fb fab5 	bl	8001ca8 <usbStart>
    usbConnectBus(serusbcfg.usbp);
 800673e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006740:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006746:	6393      	str	r3, [r2, #56]	; 0x38
};
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	20000e80 	.word	0x20000e80
 8006750:	20000a18 	.word	0x20000a18
 8006754:	08008608 	.word	0x08008608
 8006758:	08008610 	.word	0x08008610

0800675c <Flash_SectorBegin>:
 * @param sector Sector to retrieve the beginning address of.
 * @return First address (inclusive) of @p sector.
 */
uint8_t *Flash_SectorBegin(flashsector_t sector)
{
    if (sector >= 24)
 800675c:	2817      	cmp	r0, #23
 800675e:	d826      	bhi.n	80067ae <Flash_SectorBegin+0x52>
 8006760:	4603      	mov	r3, r0
        return 0;
    uint8_t *address = (uint8_t *)FLASH_BASE;
    while (sector > 0)
 8006762:	b308      	cbz	r0, 80067a8 <Flash_SectorBegin+0x4c>
 8006764:	f1a0 020d 	sub.w	r2, r0, #13
{
 8006768:	b410      	push	{r4}
    uint8_t *address = (uint8_t *)FLASH_BASE;
 800676a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800676e:	e009      	b.n	8006784 <Flash_SectorBegin+0x28>
    else if (sector == 4)
 8006770:	2904      	cmp	r1, #4
    else if (sector >= 5 && sector <= 11)
 8006772:	f1a1 0405 	sub.w	r4, r1, #5
    else if (sector == 4)
 8006776:	d014      	beq.n	80067a2 <Flash_SectorBegin+0x46>
    else if (sector >= 5 && sector <= 11)
 8006778:	2c06      	cmp	r4, #6
 800677a:	d801      	bhi.n	8006780 <Flash_SectorBegin+0x24>
 800677c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8006780:	3a01      	subs	r2, #1
    while (sector > 0)
 8006782:	b15b      	cbz	r3, 800679c <Flash_SectorBegin+0x40>
    {
        --sector;
 8006784:	3b01      	subs	r3, #1
 8006786:	2a0b      	cmp	r2, #11
 8006788:	bf94      	ite	ls
 800678a:	4611      	movls	r1, r2
 800678c:	4619      	movhi	r1, r3
    if (sector <= 3)
 800678e:	2903      	cmp	r1, #3
 8006790:	d8ee      	bhi.n	8006770 <Flash_SectorBegin+0x14>
 8006792:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8006796:	3a01      	subs	r2, #1
    while (sector > 0)
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f3      	bne.n	8006784 <Flash_SectorBegin+0x28>
        address += Flash_SectorSize(sector);
    }
    return address;
}
 800679c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80067a6:	e7eb      	b.n	8006780 <Flash_SectorBegin+0x24>
    uint8_t *address = (uint8_t *)FLASH_BASE;
 80067a8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
}
 80067ac:	4770      	bx	lr
        return 0;
 80067ae:	2000      	movs	r0, #0
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <_ZL12PAT9125ELThdPv>:

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

static THD_WORKING_AREA(PAT9125ELThd_wa, 1024);
static THD_FUNCTION(PAT9125ELThd, p)
{
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 80067b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006840 <_ZL12PAT9125ELThdPv+0x8c>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80067bc:	f8d8 3018 	ldr.w	r3, [r8, #24]

  (void)p;

  while (!chThdShouldTerminateX())
 80067c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067c4:	075a      	lsls	r2, r3, #29
{
 80067c6:	b087      	sub	sp, #28
  while (!chThdShouldTerminateX())
 80067c8:	d432      	bmi.n	8006830 <_ZL12PAT9125ELThdPv+0x7c>
  {
    //PAT9125init();
    //swi2c_readByte_A8(PAT9125_I2C_ADDR,0x03,&mydata);

    palSetLine(LINE_C);
 80067ca:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006844 <_ZL12PAT9125ELThdPv+0x90>
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 80067ce:	4f1a      	ldr	r7, [pc, #104]	; (8006838 <_ZL12PAT9125ELThdPv+0x84>)
    palSetLine(LINE_C);
 80067d0:	f44f 6900 	mov.w	r9, #2048	; 0x800
    palSetLine(LINE_F);
 80067d4:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 80067d8:	4b18      	ldr	r3, [pc, #96]	; (800683c <_ZL12PAT9125ELThdPv+0x88>)
    palSetLine(LINE_C);
 80067da:	f8ab 9018 	strh.w	r9, [fp, #24]
    palSetLine(LINE_F);
 80067de:	2406      	movs	r4, #6
 80067e0:	f8a3 a018 	strh.w	sl, [r3, #24]
  on, on >> 8, off, off >> 8};
 80067e4:	2500      	movs	r5, #0
 80067e6:	26a0      	movs	r6, #160	; 0xa0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  on, on >> 8, off, off >> 8};
 80067ec:	f88d 4010 	strb.w	r4, [sp, #16]
 80067f0:	3404      	adds	r4, #4
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 80067f2:	9302      	str	r3, [sp, #8]
  on, on >> 8, off, off >> 8};
 80067f4:	f04f 0c0f 	mov.w	ip, #15
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 80067f8:	e9cd 5500 	strd	r5, r5, [sp]
 80067fc:	2305      	movs	r3, #5
 80067fe:	aa04      	add	r2, sp, #16
 8006800:	2140      	movs	r1, #64	; 0x40
 8006802:	4638      	mov	r0, r7
 8006804:	b2e4      	uxtb	r4, r4
  on, on >> 8, off, off >> 8};
 8006806:	f88d 5011 	strb.w	r5, [sp, #17]
 800680a:	f88d 5012 	strb.w	r5, [sp, #18]
 800680e:	f88d 6013 	strb.w	r6, [sp, #19]
 8006812:	f88d c014 	strb.w	ip, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8006816:	f7fa ff93 	bl	8001740 <i2cMasterTransmitTimeout>

    // Drive each PWM in a 'wave'
    // for (uint16_t i=0; i<4096; i += 8) {
    for (uint8_t pwmnum = 0; pwmnum < 16; pwmnum++)
 800681a:	2c46      	cmp	r4, #70	; 0x46
 800681c:	d1e4      	bne.n	80067e8 <_ZL12PAT9125ELThdPv+0x34>
    //   pat9125_x += iDX;
    //   pat9125_y -= iDY; //negative number, because direction switching does not work
    // }
    //else  Param_DebugHalt(&errormsg);

    chThdSleepMilliseconds(10);
 800681e:	2064      	movs	r0, #100	; 0x64
 8006820:	f7ff fc62 	bl	80060e8 <chThdSleep>
 8006824:	f8d8 3018 	ldr.w	r3, [r8, #24]
  while (!chThdShouldTerminateX())
 8006828:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800682c:	075b      	lsls	r3, r3, #29
 800682e:	d5d3      	bpl.n	80067d8 <_ZL12PAT9125ELThdPv+0x24>
  }
}
 8006830:	b007      	add	sp, #28
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	bf00      	nop
 8006838:	200009e0 	.word	0x200009e0
 800683c:	40020c00 	.word	0x40020c00
 8006840:	20000d9c 	.word	0x20000d9c
 8006844:	40021c00 	.word	0x40021c00

08006848 <_Z17swi2c_readByte_A8hhPh.constprop.3>:
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t *pbyte)
 8006848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  palClearLine(LINE_B);
 800684c:	4db4      	ldr	r5, [pc, #720]	; (8006b20 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2d8>)
  palClearLine(LINE_A);
 800684e:	4cb5      	ldr	r4, [pc, #724]	; (8006b24 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2dc>)
  palClearLine(LINE_B);
 8006850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006854:	836b      	strh	r3, [r5, #26]
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t *pbyte)
 8006856:	4607      	mov	r7, r0
  chThdSleepMicroseconds(50);
 8006858:	2001      	movs	r0, #1
uint8_t swi2c_readByte_A8(uint8_t dev_addr, uint8_t addr, uint8_t *pbyte)
 800685a:	4688      	mov	r8, r1
  chThdSleepMicroseconds(50);
 800685c:	f7ff fc44 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006860:	2001      	movs	r0, #1
 8006862:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(50);
 8006864:	f7ff fc40 	bl	80060e8 <chThdSleep>
    palSetLine(LINE_A);
 8006868:	46a1      	mov	r9, r4
      palClearLine(LINE_B);
 800686a:	46aa      	mov	sl, r5
  chThdSleepMicroseconds(50);
 800686c:	2407      	movs	r4, #7
    if (data & (1 << bit))
 800686e:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8006872:	fa4b f304 	asr.w	r3, fp, r4
    palSetLine(LINE_A);
 8006876:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006878:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 800687a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800687e:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006880:	f140 8136 	bpl.w	8006af0 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2a8>
      palSetLine(LINE_B);
 8006884:	f8aa 1018 	strh.w	r1, [sl, #24]
  chThdSleepMicroseconds(50);
 8006888:	f7ff fc2e 	bl	80060e8 <chThdSleep>
 800688c:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800688e:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(50);
 8006892:	f7ff fc29 	bl	80060e8 <chThdSleep>
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff fc26 	bl	80060e8 <chThdSleep>
 800689c:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 800689e:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(50);
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff fc20 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80068a8:	1c61      	adds	r1, r4, #1
 80068aa:	d1e2      	bne.n	8006872 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2a>
  palSetLine(LINE_B);
 80068ac:	4c9c      	ldr	r4, [pc, #624]	; (8006b20 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2d8>)
  palSetLine(LINE_A);
 80068ae:	4e9d      	ldr	r6, [pc, #628]	; (8006b24 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2dc>)
  palSetLine(LINE_B);
 80068b0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80068b4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80068b6:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 80068b8:	f8a4 b018 	strh.w	fp, [r4, #24]
  chThdSleepMicroseconds(50);
 80068bc:	f7ff fc14 	bl	80060e8 <chThdSleep>
 80068c0:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80068c2:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80068c4:	f7ff fc10 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80068c8:	4659      	mov	r1, fp
 80068ca:	4620      	mov	r0, r4
 80068cc:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80068ce:	8375      	strh	r5, [r6, #26]
  palSetLine(LINE_B);
 80068d0:	f8a4 b018 	strh.w	fp, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80068d4:	f7fc fca8 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff fc05 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80068de:	4620      	mov	r0, r4
 80068e0:	4659      	mov	r1, fp
 80068e2:	2205      	movs	r2, #5
 80068e4:	f7fc fca0 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80068e8:	46a2      	mov	sl, r4
    palSetLine(LINE_A);
 80068ea:	46b1      	mov	r9, r6
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80068ec:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80068ee:	fa47 f304 	asr.w	r3, r7, r4
    palSetLine(LINE_A);
 80068f2:	2601      	movs	r6, #1
    if (data & (1 << bit))
 80068f4:	07db      	lsls	r3, r3, #31
  chThdSleepMicroseconds(50);
 80068f6:	4630      	mov	r0, r6
    if (data & (1 << bit))
 80068f8:	f140 80e3 	bpl.w	8006ac2 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x27a>
      palSetLine(LINE_B);
 80068fc:	f8aa b018 	strh.w	fp, [sl, #24]
  chThdSleepMicroseconds(50);
 8006900:	f7ff fbf2 	bl	80060e8 <chThdSleep>
 8006904:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006906:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(50);
 800690a:	f7ff fbed 	bl	80060e8 <chThdSleep>
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff fbea 	bl	80060e8 <chThdSleep>
 8006914:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006916:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(50);
 800691a:	4630      	mov	r0, r6
 800691c:	f7ff fbe4 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006920:	1c61      	adds	r1, r4, #1
 8006922:	d1e4      	bne.n	80068ee <_Z17swi2c_readByte_A8hhPh.constprop.3+0xa6>
  palSetLine(LINE_B);
 8006924:	4d7e      	ldr	r5, [pc, #504]	; (8006b20 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2d8>)
  palSetLine(LINE_A);
 8006926:	4f7f      	ldr	r7, [pc, #508]	; (8006b24 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2dc>)
  palSetLine(LINE_B);
 8006928:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800692c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800692e:	4604      	mov	r4, r0
  palSetLine(LINE_B);
 8006930:	832e      	strh	r6, [r5, #24]
  chThdSleepMicroseconds(50);
 8006932:	f7ff fbd9 	bl	80060e8 <chThdSleep>
 8006936:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8006938:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(50);
 800693a:	f7ff fbd5 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 800693e:	837c      	strh	r4, [r7, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006940:	4631      	mov	r1, r6
 8006942:	2205      	movs	r2, #5
 8006944:	4628      	mov	r0, r5
  palSetLine(LINE_B);
 8006946:	832e      	strh	r6, [r5, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006948:	f7fc fc6e 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff fbcb 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006952:	4631      	mov	r1, r6
 8006954:	2205      	movs	r2, #5
 8006956:	4628      	mov	r0, r5
 8006958:	f7fc fc66 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800695c:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 800695e:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(50);
 8006960:	f7ff fbc2 	bl	80060e8 <chThdSleep>
 8006964:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8006966:	832e      	strh	r6, [r5, #24]
  chThdSleepMicroseconds(50);
 8006968:	f7ff fbbe 	bl	80060e8 <chThdSleep>
 800696c:	4620      	mov	r0, r4
  palClearLine(LINE_B);
 800696e:	836e      	strh	r6, [r5, #26]
  chThdSleepMicroseconds(50);
 8006970:	f7ff fbba 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006974:	837c      	strh	r4, [r7, #26]
  chThdSleepMicroseconds(50);
 8006976:	4620      	mov	r0, r4
 8006978:	f7ff fbb6 	bl	80060e8 <chThdSleep>
      palClearLine(LINE_B);
 800697c:	46a9      	mov	r9, r5
  chThdSleepMicroseconds(50);
 800697e:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006980:	f04f 0a81 	mov.w	sl, #129	; 0x81
 8006984:	fa4a f304 	asr.w	r3, sl, r4
    palSetLine(LINE_A);
 8006988:	2601      	movs	r6, #1
    if (data & (1 << bit))
 800698a:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 800698c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006990:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006992:	f140 8081 	bpl.w	8006a98 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x250>
      palSetLine(LINE_B);
 8006996:	f8a9 1018 	strh.w	r1, [r9, #24]
  chThdSleepMicroseconds(50);
 800699a:	f7ff fba5 	bl	80060e8 <chThdSleep>
 800699e:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80069a0:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80069a2:	f7ff fba1 	bl	80060e8 <chThdSleep>
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff fb9e 	bl	80060e8 <chThdSleep>
 80069ac:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80069ae:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fb99 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80069b6:	1c62      	adds	r2, r4, #1
 80069b8:	d1e4      	bne.n	8006984 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x13c>
  palSetLine(LINE_B);
 80069ba:	4e59      	ldr	r6, [pc, #356]	; (8006b20 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2d8>)
  palSetLine(LINE_A);
 80069bc:	4c59      	ldr	r4, [pc, #356]	; (8006b24 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2dc>)
  palSetLine(LINE_B);
 80069be:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80069c2:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80069c4:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 80069c6:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 80069c8:	f7ff fb8e 	bl	80060e8 <chThdSleep>
 80069cc:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80069ce:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 80069d0:	f7ff fb8a 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80069d4:	4639      	mov	r1, r7
 80069d6:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80069d8:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80069da:	4630      	mov	r0, r6
  palSetLine(LINE_B);
 80069dc:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80069de:	f7fc fc23 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80069e2:	4628      	mov	r0, r5
 80069e4:	f7ff fb80 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80069e8:	4639      	mov	r1, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	2205      	movs	r2, #5
 80069ee:	f7fc fc1b 	bl	8003228 <_pal_lld_setgroupmode>
  palSetLine(LINE_B);
 80069f2:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_INPUT);
 80069f4:	4639      	mov	r1, r7
 80069f6:	4630      	mov	r0, r6
 80069f8:	2200      	movs	r2, #0
 80069fa:	f7fc fc15 	bl	8003228 <_pal_lld_setgroupmode>
    palClearLine(LINE_A);
 80069fe:	462f      	mov	r7, r5
  palSetLineMode(LINE_B, PAL_MODE_INPUT);
 8006a00:	f04f 0a07 	mov.w	sl, #7
  uint8_t data = 0;
 8006a04:	f04f 0900 	mov.w	r9, #0
  chThdSleepMicroseconds(50);
 8006a08:	2001      	movs	r0, #1
    palClearLine(LINE_A);
 8006a0a:	8367      	strh	r7, [r4, #26]
    data |= ((palReadLine(LINE_B) == PAL_HIGH) ? 1 : 0) << bit;
 8006a0c:	4e44      	ldr	r6, [pc, #272]	; (8006b20 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2d8>)
  chThdSleepMicroseconds(50);
 8006a0e:	f7ff fb6b 	bl	80060e8 <chThdSleep>
 8006a12:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8006a14:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006a16:	f7ff fb67 	bl	80060e8 <chThdSleep>
    data |= ((palReadLine(LINE_B) == PAL_HIGH) ? 1 : 0) << bit;
 8006a1a:	6933      	ldr	r3, [r6, #16]
 8006a1c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a20:	fa03 f30a 	lsl.w	r3, r3, sl
 8006a24:	ea43 0309 	orr.w	r3, r3, r9
  chThdSleepMicroseconds(50);
 8006a28:	2001      	movs	r0, #1
    data |= ((palReadLine(LINE_B) == PAL_HIGH) ? 1 : 0) << bit;
 8006a2a:	fa5f f983 	uxtb.w	r9, r3
 8006a2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
  chThdSleepMicroseconds(50);
 8006a32:	f7ff fb59 	bl	80060e8 <chThdSleep>
    palClearLine(LINE_A);
 8006a36:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(50);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7ff fb55 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006a3e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006a42:	d1e1      	bne.n	8006a08 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x1c0>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palSetLine(LINE_B);
 8006a48:	460f      	mov	r7, r1
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006a4a:	2205      	movs	r2, #5
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7fc fbeb 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006a52:	2001      	movs	r0, #1
  palSetLine(LINE_B);
 8006a54:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8006a56:	f7ff fb47 	bl	80060e8 <chThdSleep>
 8006a5a:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006a5c:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006a5e:	f7ff fb43 	bl	80060e8 <chThdSleep>
 8006a62:	2001      	movs	r0, #1
 8006a64:	f7ff fb40 	bl	80060e8 <chThdSleep>
 8006a68:	2001      	movs	r0, #1
  palClearLine(LINE_A);
 8006a6a:	8365      	strh	r5, [r4, #26]
  chThdSleepMicroseconds(50);
 8006a6c:	f7ff fb3c 	bl	80060e8 <chThdSleep>
 8006a70:	2001      	movs	r0, #1
  palClearLine(LINE_B);
 8006a72:	8377      	strh	r7, [r6, #26]
  chThdSleepMicroseconds(50);
 8006a74:	f7ff fb38 	bl	80060e8 <chThdSleep>
 8006a78:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006a7a:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006a7c:	f7ff fb34 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 8006a80:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8006a82:	2001      	movs	r0, #1
 8006a84:	f7ff fb30 	bl	80060e8 <chThdSleep>
  if (pbyte)
 8006a88:	f1b8 0f00 	cmp.w	r8, #0
 8006a8c:	d001      	beq.n	8006a92 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x24a>
    *pbyte = byte;
 8006a8e:	f888 9000 	strb.w	r9, [r8]
}
 8006a92:	2001      	movs	r0, #1
 8006a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      palClearLine(LINE_B);
 8006a98:	f8a9 101a 	strh.w	r1, [r9, #26]
  chThdSleepMicroseconds(50);
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f7ff fb23 	bl	80060e8 <chThdSleep>
 8006aa2:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006aa4:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006aa6:	f7ff fb1f 	bl	80060e8 <chThdSleep>
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff fb1c 	bl	80060e8 <chThdSleep>
 8006ab0:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006ab2:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fb17 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006aba:	1c63      	adds	r3, r4, #1
 8006abc:	f47f af62 	bne.w	8006984 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x13c>
 8006ac0:	e77b      	b.n	80069ba <_Z17swi2c_readByte_A8hhPh.constprop.3+0x172>
  chThdSleepMicroseconds(50);
 8006ac2:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8006ac4:	f8aa b01a 	strh.w	fp, [sl, #26]
  chThdSleepMicroseconds(50);
 8006ac8:	f7ff fb0e 	bl	80060e8 <chThdSleep>
 8006acc:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006ace:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(50);
 8006ad2:	f7ff fb09 	bl	80060e8 <chThdSleep>
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff fb06 	bl	80060e8 <chThdSleep>
 8006adc:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006ade:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(50);
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff fb00 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006ae8:	1c62      	adds	r2, r4, #1
 8006aea:	f47f af00 	bne.w	80068ee <_Z17swi2c_readByte_A8hhPh.constprop.3+0xa6>
 8006aee:	e719      	b.n	8006924 <_Z17swi2c_readByte_A8hhPh.constprop.3+0xdc>
      palClearLine(LINE_B);
 8006af0:	f8aa 101a 	strh.w	r1, [sl, #26]
  chThdSleepMicroseconds(50);
 8006af4:	2001      	movs	r0, #1
 8006af6:	f7ff faf7 	bl	80060e8 <chThdSleep>
 8006afa:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006afc:	f8a9 6018 	strh.w	r6, [r9, #24]
  chThdSleepMicroseconds(50);
 8006b00:	f7ff faf2 	bl	80060e8 <chThdSleep>
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7ff faef 	bl	80060e8 <chThdSleep>
 8006b0a:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006b0c:	f8a9 601a 	strh.w	r6, [r9, #26]
  chThdSleepMicroseconds(50);
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff fae9 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006b16:	1c62      	adds	r2, r4, #1
 8006b18:	f47f aeab 	bne.w	8006872 <_Z17swi2c_readByte_A8hhPh.constprop.3+0x2a>
 8006b1c:	e6c6      	b.n	80068ac <_Z17swi2c_readByte_A8hhPh.constprop.3+0x64>
 8006b1e:	bf00      	nop
 8006b20:	40021c00 	.word	0x40021c00
 8006b24:	40022000 	.word	0x40022000

08006b28 <_Z11PAT9125initv>:
{
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  palClearLine(LINE_B);
 8006b2c:	4cce      	ldr	r4, [pc, #824]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palClearLine(LINE_A);
 8006b2e:	4fcf      	ldr	r7, [pc, #828]	; (8006e6c <_Z11PAT9125initv+0x344>)
  palClearLine(LINE_B);
 8006b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b34:	8363      	strh	r3, [r4, #26]
{
 8006b36:	b085      	sub	sp, #20
  chThdSleepMicroseconds(50);
 8006b38:	2001      	movs	r0, #1
 8006b3a:	f7ff fad5 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006b3e:	2001      	movs	r0, #1
 8006b40:	8378      	strh	r0, [r7, #26]
  chThdSleepMicroseconds(50);
 8006b42:	f7ff fad1 	bl	80060e8 <chThdSleep>
      palClearLine(LINE_B);
 8006b46:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8006b48:	f04f 0980 	mov.w	r9, #128	; 0x80
  chThdSleepMicroseconds(50);
 8006b4c:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006b4e:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8006b52:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006b54:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8006b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006b5a:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006b5c:	f140 82e9 	bpl.w	8007132 <_Z11PAT9125initv+0x60a>
      palSetLine(LINE_B);
 8006b60:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8006b64:	f7ff fac0 	bl	80060e8 <chThdSleep>
 8006b68:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006b6a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006b6c:	f7ff fabc 	bl	80060e8 <chThdSleep>
 8006b70:	4630      	mov	r0, r6
 8006b72:	f7ff fab9 	bl	80060e8 <chThdSleep>
 8006b76:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006b78:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff fab4 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006b80:	1c61      	adds	r1, r4, #1
 8006b82:	d1e4      	bne.n	8006b4e <_Z11PAT9125initv+0x26>
  palSetLine(LINE_B);
 8006b84:	4cb8      	ldr	r4, [pc, #736]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palSetLine(LINE_A);
 8006b86:	4fb9      	ldr	r7, [pc, #740]	; (8006e6c <_Z11PAT9125initv+0x344>)
  palSetLine(LINE_B);
 8006b88:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006b8c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006b8e:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 8006b90:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006b92:	f7ff faa9 	bl	80060e8 <chThdSleep>
 8006b96:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8006b98:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006b9a:	f7ff faa5 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006ba4:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8006ba6:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006ba8:	f7fc fb3e 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff fa9b 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	2205      	movs	r2, #5
 8006bb8:	f7fc fb36 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8006bbc:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8006bbe:	f04f 097f 	mov.w	r9, #127	; 0x7f
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006bc2:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006bc4:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8006bc8:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006bca:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8006bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006bd0:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006bd2:	f140 8299 	bpl.w	8007108 <_Z11PAT9125initv+0x5e0>
      palSetLine(LINE_B);
 8006bd6:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8006bda:	f7ff fa85 	bl	80060e8 <chThdSleep>
 8006bde:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006be0:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006be2:	f7ff fa81 	bl	80060e8 <chThdSleep>
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff fa7e 	bl	80060e8 <chThdSleep>
 8006bec:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006bee:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff fa79 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006bf6:	1c61      	adds	r1, r4, #1
 8006bf8:	d1e4      	bne.n	8006bc4 <_Z11PAT9125initv+0x9c>
  palSetLine(LINE_B);
 8006bfa:	4f9b      	ldr	r7, [pc, #620]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palSetLine(LINE_A);
 8006bfc:	4e9b      	ldr	r6, [pc, #620]	; (8006e6c <_Z11PAT9125initv+0x344>)
  palSetLine(LINE_B);
 8006bfe:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006c02:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006c04:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8006c06:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8006c0a:	f7ff fa6d 	bl	80060e8 <chThdSleep>
 8006c0e:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006c10:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8006c12:	f7ff fa69 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c16:	4649      	mov	r1, r9
 8006c18:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006c1a:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c1c:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 8006c1e:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c22:	f7fc fb01 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fa5e 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4638      	mov	r0, r7
 8006c30:	2205      	movs	r2, #5
 8006c32:	f7fc faf9 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8006c36:	46c8      	mov	r8, r9
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c38:	2408      	movs	r4, #8
  chThdSleepMicroseconds(50);
 8006c3a:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8006c3c:	f8a7 801a 	strh.w	r8, [r7, #26]
  chThdSleepMicroseconds(50);
 8006c40:	f7ff fa52 	bl	80060e8 <chThdSleep>
 8006c44:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8006c46:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8006c48:	f7ff fa4e 	bl	80060e8 <chThdSleep>
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	f7ff fa4b 	bl	80060e8 <chThdSleep>
    palClearLine(LINE_A);
 8006c52:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 8006c54:	2001      	movs	r0, #1
 8006c56:	f7ff fa47 	bl	80060e8 <chThdSleep>
 8006c5a:	1e63      	subs	r3, r4, #1
  for (bit = 7; bit >= 0; bit--)
 8006c5c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006c60:	d1eb      	bne.n	8006c3a <_Z11PAT9125initv+0x112>
  palSetLine(LINE_B);
 8006c62:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8006c66:	2001      	movs	r0, #1
 8006c68:	f7ff fa3e 	bl	80060e8 <chThdSleep>
 8006c6c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006c6e:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8006c70:	f7ff fa3a 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c74:	487c      	ldr	r0, [pc, #496]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palClearLine(LINE_A);
 8006c76:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c78:	2205      	movs	r2, #5
  palSetLine(LINE_B);
 8006c7a:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      palClearLine(LINE_B);
 8006c82:	4680      	mov	r8, r0
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c84:	f7fc fad0 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7ff fa2d 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006c8e:	2205      	movs	r2, #5
 8006c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c94:	4640      	mov	r0, r8
 8006c96:	f7fc fac7 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006c9a:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006c9c:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8006c9e:	f7ff fa23 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 8006ca2:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	f7ff fa1e 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_B);
 8006cac:	f8a7 901a 	strh.w	r9, [r7, #26]
  chThdSleepMicroseconds(50);
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f7ff fa19 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006cb6:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f7ff fa15 	bl	80060e8 <chThdSleep>
    palSetLine(LINE_A);
 8006cbe:	4f6b      	ldr	r7, [pc, #428]	; (8006e6c <_Z11PAT9125initv+0x344>)
  chThdSleepMicroseconds(50);
 8006cc0:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006cc2:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006cc6:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8006cca:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006ccc:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8006cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006cd2:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006cd4:	f140 8203 	bpl.w	80070de <_Z11PAT9125initv+0x5b6>
      palSetLine(LINE_B);
 8006cd8:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8006cdc:	f7ff fa04 	bl	80060e8 <chThdSleep>
 8006ce0:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006ce2:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006ce4:	f7ff fa00 	bl	80060e8 <chThdSleep>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff f9fd 	bl	80060e8 <chThdSleep>
 8006cee:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006cf0:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff f9f8 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006cf8:	1c61      	adds	r1, r4, #1
 8006cfa:	d1e4      	bne.n	8006cc6 <_Z11PAT9125initv+0x19e>
  palSetLine(LINE_B);
 8006cfc:	4c5a      	ldr	r4, [pc, #360]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palSetLine(LINE_A);
 8006cfe:	4f5b      	ldr	r7, [pc, #364]	; (8006e6c <_Z11PAT9125initv+0x344>)
  palSetLine(LINE_B);
 8006d00:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006d04:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006d06:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 8006d08:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006d0a:	f7ff f9ed 	bl	80060e8 <chThdSleep>
 8006d0e:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8006d10:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006d12:	f7ff f9e9 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d16:	4629      	mov	r1, r5
 8006d18:	4620      	mov	r0, r4
 8006d1a:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006d1c:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8006d1e:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d20:	f7fc fa82 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff f9df 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	2205      	movs	r2, #5
 8006d30:	f7fc fa7a 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8006d34:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8006d36:	f04f 0906 	mov.w	r9, #6
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d3a:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006d3c:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8006d40:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006d42:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8006d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006d48:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006d4a:	f140 81b3 	bpl.w	80070b4 <_Z11PAT9125initv+0x58c>
      palSetLine(LINE_B);
 8006d4e:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8006d52:	f7ff f9c9 	bl	80060e8 <chThdSleep>
 8006d56:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006d58:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006d5a:	f7ff f9c5 	bl	80060e8 <chThdSleep>
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f7ff f9c2 	bl	80060e8 <chThdSleep>
 8006d64:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006d66:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7ff f9bd 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006d6e:	1c61      	adds	r1, r4, #1
 8006d70:	d1e4      	bne.n	8006d3c <_Z11PAT9125initv+0x214>
  palSetLine(LINE_B);
 8006d72:	4c3d      	ldr	r4, [pc, #244]	; (8006e68 <_Z11PAT9125initv+0x340>)
  palSetLine(LINE_A);
 8006d74:	4f3d      	ldr	r7, [pc, #244]	; (8006e6c <_Z11PAT9125initv+0x344>)
  palSetLine(LINE_B);
 8006d76:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006d7a:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006d7c:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 8006d7e:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006d80:	f7ff f9b2 	bl	80060e8 <chThdSleep>
 8006d84:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8006d86:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006d88:	f7ff f9ae 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4620      	mov	r0, r4
 8006d90:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006d92:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8006d94:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006d96:	f7fc fa47 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff f9a4 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	2205      	movs	r2, #5
 8006da6:	f7fc fa3f 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8006daa:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8006dac:	f04f 0997 	mov.w	r9, #151	; 0x97
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006db0:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8006db2:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8006db6:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8006db8:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8006dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006dbe:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8006dc0:	f140 8163 	bpl.w	800708a <_Z11PAT9125initv+0x562>
      palSetLine(LINE_B);
 8006dc4:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8006dc8:	f7ff f98e 	bl	80060e8 <chThdSleep>
 8006dcc:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8006dce:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006dd0:	f7ff f98a 	bl	80060e8 <chThdSleep>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff f987 	bl	80060e8 <chThdSleep>
 8006dda:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8006ddc:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7ff f982 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006de4:	1c61      	adds	r1, r4, #1
 8006de6:	d1e4      	bne.n	8006db2 <_Z11PAT9125initv+0x28a>
  palSetLine(LINE_B);
 8006de8:	4f1f      	ldr	r7, [pc, #124]	; (8006e68 <_Z11PAT9125initv+0x340>)
 8006dea:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <_Z11PAT9125initv+0x348>)
  palSetLine(LINE_A);
 8006dec:	4c1f      	ldr	r4, [pc, #124]	; (8006e6c <_Z11PAT9125initv+0x344>)
 8006dee:	9301      	str	r3, [sp, #4]
  palSetLine(LINE_B);
 8006df0:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006df4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006df6:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8006df8:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006dfa:	f7ff f975 	bl	80060e8 <chThdSleep>
 8006dfe:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006e00:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006e02:	f7ff f971 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006e06:	4631      	mov	r1, r6
 8006e08:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006e0a:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006e0c:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 8006e0e:	833e      	strh	r6, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006e10:	f7fc fa0a 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006e14:	4628      	mov	r0, r5
 8006e16:	f7ff f967 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7fc fa02 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006e24:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006e26:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006e28:	f7ff f95e 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 8006e2c:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff f95a 	bl	80060e8 <chThdSleep>
  chThdSleepMilliseconds(1);
 8006e34:	200a      	movs	r0, #10
 8006e36:	f7ff f957 	bl	80060e8 <chThdSleep>
 8006e3a:	9a01      	ldr	r2, [sp, #4]
  palClearLine(LINE_B);
 8006e3c:	463e      	mov	r6, r7
      const uint8_t addr = pat9125_init_seq1[i++];
 8006e3e:	7817      	ldrb	r7, [r2, #0]
      if (addr == 0x0ff)
 8006e40:	2fff      	cmp	r7, #255	; 0xff
 8006e42:	f000 818d 	beq.w	8007160 <_Z11PAT9125initv+0x638>
  palClearLine(LINE_B);
 8006e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      if (!pat9125_wr_reg_verify(addr, pat9125_init_seq1[i++]))
 8006e4a:	f892 8001 	ldrb.w	r8, [r2, #1]
  palClearLine(LINE_B);
 8006e4e:	8373      	strh	r3, [r6, #26]
  chThdSleepMicroseconds(50);
 8006e50:	2001      	movs	r0, #1
 8006e52:	f7ff f949 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006e56:	2001      	movs	r0, #1
 8006e58:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(50);
 8006e5a:	f7ff f945 	bl	80060e8 <chThdSleep>
 8006e5e:	2507      	movs	r5, #7
    if (data & (1 << bit))
 8006e60:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8006e64:	e006      	b.n	8006e74 <_Z11PAT9125initv+0x34c>
 8006e66:	bf00      	nop
 8006e68:	40021c00 	.word	0x40021c00
 8006e6c:	40022000 	.word	0x40022000
 8006e70:	20000808 	.word	0x20000808
 8006e74:	fa4b f105 	asr.w	r1, fp, r5
    palSetLine(LINE_A);
 8006e78:	f04f 0a01 	mov.w	sl, #1
    if (data & (1 << bit))
 8006e7c:	07cb      	lsls	r3, r1, #31
      palSetLine(LINE_B);
 8006e7e:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006e82:	4650      	mov	r0, sl
    if (data & (1 << bit))
 8006e84:	f140 80ea 	bpl.w	800705c <_Z11PAT9125initv+0x534>
      palSetLine(LINE_B);
 8006e88:	f8a6 e018 	strh.w	lr, [r6, #24]
  chThdSleepMicroseconds(50);
 8006e8c:	f7ff f92c 	bl	80060e8 <chThdSleep>
 8006e90:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8006e92:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 8006e96:	f7ff f927 	bl	80060e8 <chThdSleep>
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f7ff f924 	bl	80060e8 <chThdSleep>
 8006ea0:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006ea2:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 8006ea6:	4650      	mov	r0, sl
 8006ea8:	f7ff f91e 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006eac:	1c69      	adds	r1, r5, #1
 8006eae:	d1e1      	bne.n	8006e74 <_Z11PAT9125initv+0x34c>
  palSetLine(LINE_B);
 8006eb0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006eb4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006eb6:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8006eb8:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006ebc:	f7ff f914 	bl	80060e8 <chThdSleep>
 8006ec0:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006ec2:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006ec4:	f7ff f910 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006ec8:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006eca:	4659      	mov	r1, fp
 8006ecc:	2205      	movs	r2, #5
 8006ece:	48a3      	ldr	r0, [pc, #652]	; (800715c <_Z11PAT9125initv+0x634>)
  palSetLine(LINE_B);
 8006ed0:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006ed4:	f7fc f9a8 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7ff f905 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006ede:	4659      	mov	r1, fp
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	489e      	ldr	r0, [pc, #632]	; (800715c <_Z11PAT9125initv+0x634>)
 8006ee4:	f7fc f9a0 	bl	8003228 <_pal_lld_setgroupmode>
 8006ee8:	2507      	movs	r5, #7
    if (data & (1 << bit))
 8006eea:	fa47 f105 	asr.w	r1, r7, r5
    palSetLine(LINE_A);
 8006eee:	f04f 0a01 	mov.w	sl, #1
    if (data & (1 << bit))
 8006ef2:	07cb      	lsls	r3, r1, #31
  chThdSleepMicroseconds(50);
 8006ef4:	4650      	mov	r0, sl
    if (data & (1 << bit))
 8006ef6:	f140 809a 	bpl.w	800702e <_Z11PAT9125initv+0x506>
      palSetLine(LINE_B);
 8006efa:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006efe:	f7ff f8f3 	bl	80060e8 <chThdSleep>
 8006f02:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8006f04:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 8006f08:	f7ff f8ee 	bl	80060e8 <chThdSleep>
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	f7ff f8eb 	bl	80060e8 <chThdSleep>
 8006f12:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006f14:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 8006f18:	4650      	mov	r0, sl
 8006f1a:	f7ff f8e5 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006f1e:	1c69      	adds	r1, r5, #1
 8006f20:	d1e3      	bne.n	8006eea <_Z11PAT9125initv+0x3c2>
  palSetLine(LINE_B);
 8006f22:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006f26:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006f28:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8006f2a:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006f2e:	f7ff f8db 	bl	80060e8 <chThdSleep>
 8006f32:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006f34:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006f36:	f7ff f8d7 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8006f3a:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	2205      	movs	r2, #5
 8006f40:	4886      	ldr	r0, [pc, #536]	; (800715c <_Z11PAT9125initv+0x634>)
  palSetLine(LINE_B);
 8006f42:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006f46:	f7fc f96f 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7ff f8cc 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006f50:	4659      	mov	r1, fp
 8006f52:	2205      	movs	r2, #5
 8006f54:	4881      	ldr	r0, [pc, #516]	; (800715c <_Z11PAT9125initv+0x634>)
 8006f56:	f7fc f967 	bl	8003228 <_pal_lld_setgroupmode>
 8006f5a:	2507      	movs	r5, #7
    if (data & (1 << bit))
 8006f5c:	fa48 f105 	asr.w	r1, r8, r5
    palSetLine(LINE_A);
 8006f60:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit))
 8006f64:	07cb      	lsls	r3, r1, #31
  chThdSleepMicroseconds(50);
 8006f66:	4648      	mov	r0, r9
    if (data & (1 << bit))
 8006f68:	d54b      	bpl.n	8007002 <_Z11PAT9125initv+0x4da>
      palSetLine(LINE_B);
 8006f6a:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006f6e:	f7ff f8bb 	bl	80060e8 <chThdSleep>
 8006f72:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8006f74:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(50);
 8006f78:	f7ff f8b6 	bl	80060e8 <chThdSleep>
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	f7ff f8b3 	bl	80060e8 <chThdSleep>
 8006f82:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8006f84:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(50);
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f7ff f8ad 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006f8e:	1c69      	adds	r1, r5, #1
 8006f90:	d1e4      	bne.n	8006f5c <_Z11PAT9125initv+0x434>
  palSetLine(LINE_B);
 8006f92:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8006f96:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8006f98:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8006f9a:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006f9e:	f7ff f8a3 	bl	80060e8 <chThdSleep>
 8006fa2:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006fa4:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006fa6:	f7ff f89f 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006faa:	4659      	mov	r1, fp
 8006fac:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8006fae:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006fb0:	486a      	ldr	r0, [pc, #424]	; (800715c <_Z11PAT9125initv+0x634>)
  palSetLine(LINE_B);
 8006fb2:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006fb6:	f7fc f937 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff f894 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8006fc0:	2205      	movs	r2, #5
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	4865      	ldr	r0, [pc, #404]	; (800715c <_Z11PAT9125initv+0x634>)
 8006fc6:	f7fc f92f 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8006fca:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8006fcc:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8006fce:	f7ff f88b 	bl	80060e8 <chThdSleep>
 8006fd2:	4628      	mov	r0, r5
  palSetLine(LINE_B);
 8006fd4:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8006fd8:	f7ff f886 	bl	80060e8 <chThdSleep>
  uint8_t data = 0;
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f801 3d01 	strb.w	r3, [r1, #-1]!
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff fc2f 	bl	8006848 <_Z17swi2c_readByte_A8hhPh.constprop.3>
 8006fea:	9a01      	ldr	r2, [sp, #4]
  return data;
 8006fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006ff0:	3202      	adds	r2, #2
      if (!pat9125_wr_reg_verify(addr, pat9125_init_seq1[i++]))
 8006ff2:	4598      	cmp	r8, r3
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	f43f af22 	beq.w	8006e3e <_Z11PAT9125initv+0x316>
        return 0;
 8006ffa:	2000      	movs	r0, #0
}
 8006ffc:	b005      	add	sp, #20
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(50);
 8007002:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8007004:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(50);
 8007008:	f7ff f86e 	bl	80060e8 <chThdSleep>
 800700c:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 800700e:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(50);
 8007012:	f7ff f869 	bl	80060e8 <chThdSleep>
 8007016:	4648      	mov	r0, r9
 8007018:	f7ff f866 	bl	80060e8 <chThdSleep>
 800701c:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 800701e:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(50);
 8007022:	4648      	mov	r0, r9
 8007024:	f7ff f860 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007028:	1c6a      	adds	r2, r5, #1
 800702a:	d197      	bne.n	8006f5c <_Z11PAT9125initv+0x434>
 800702c:	e7b1      	b.n	8006f92 <_Z11PAT9125initv+0x46a>
  chThdSleepMicroseconds(50);
 800702e:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8007030:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(50);
 8007034:	f7ff f858 	bl	80060e8 <chThdSleep>
 8007038:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 800703a:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 800703e:	f7ff f853 	bl	80060e8 <chThdSleep>
 8007042:	4650      	mov	r0, sl
 8007044:	f7ff f850 	bl	80060e8 <chThdSleep>
 8007048:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 800704a:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 800704e:	4650      	mov	r0, sl
 8007050:	f7ff f84a 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007054:	1c6a      	adds	r2, r5, #1
 8007056:	f47f af48 	bne.w	8006eea <_Z11PAT9125initv+0x3c2>
 800705a:	e762      	b.n	8006f22 <_Z11PAT9125initv+0x3fa>
      palClearLine(LINE_B);
 800705c:	f8a6 e01a 	strh.w	lr, [r6, #26]
  chThdSleepMicroseconds(50);
 8007060:	2001      	movs	r0, #1
 8007062:	f7ff f841 	bl	80060e8 <chThdSleep>
 8007066:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8007068:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 800706c:	f7ff f83c 	bl	80060e8 <chThdSleep>
 8007070:	4650      	mov	r0, sl
 8007072:	f7ff f839 	bl	80060e8 <chThdSleep>
 8007076:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8007078:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 800707c:	4650      	mov	r0, sl
 800707e:	f7ff f833 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007082:	1c6a      	adds	r2, r5, #1
 8007084:	f47f aef6 	bne.w	8006e74 <_Z11PAT9125initv+0x34c>
 8007088:	e712      	b.n	8006eb0 <_Z11PAT9125initv+0x388>
      palClearLine(LINE_B);
 800708a:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 800708e:	2001      	movs	r0, #1
 8007090:	f7ff f82a 	bl	80060e8 <chThdSleep>
 8007094:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007096:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007098:	f7ff f826 	bl	80060e8 <chThdSleep>
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff f823 	bl	80060e8 <chThdSleep>
 80070a2:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80070a4:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff f81e 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80070ac:	1c62      	adds	r2, r4, #1
 80070ae:	f47f ae80 	bne.w	8006db2 <_Z11PAT9125initv+0x28a>
 80070b2:	e699      	b.n	8006de8 <_Z11PAT9125initv+0x2c0>
      palClearLine(LINE_B);
 80070b4:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7ff f815 	bl	80060e8 <chThdSleep>
 80070be:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80070c0:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80070c2:	f7ff f811 	bl	80060e8 <chThdSleep>
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff f80e 	bl	80060e8 <chThdSleep>
 80070cc:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80070ce:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff f809 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80070d6:	1c62      	adds	r2, r4, #1
 80070d8:	f47f ae30 	bne.w	8006d3c <_Z11PAT9125initv+0x214>
 80070dc:	e649      	b.n	8006d72 <_Z11PAT9125initv+0x24a>
      palClearLine(LINE_B);
 80070de:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 80070e2:	2001      	movs	r0, #1
 80070e4:	f7ff f800 	bl	80060e8 <chThdSleep>
 80070e8:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80070ea:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80070ec:	f7fe fffc 	bl	80060e8 <chThdSleep>
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7fe fff9 	bl	80060e8 <chThdSleep>
 80070f6:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80070f8:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7fe fff4 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007100:	1c62      	adds	r2, r4, #1
 8007102:	f47f ade0 	bne.w	8006cc6 <_Z11PAT9125initv+0x19e>
 8007106:	e5f9      	b.n	8006cfc <_Z11PAT9125initv+0x1d4>
      palClearLine(LINE_B);
 8007108:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 800710c:	2001      	movs	r0, #1
 800710e:	f7fe ffeb 	bl	80060e8 <chThdSleep>
 8007112:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007114:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007116:	f7fe ffe7 	bl	80060e8 <chThdSleep>
 800711a:	4630      	mov	r0, r6
 800711c:	f7fe ffe4 	bl	80060e8 <chThdSleep>
 8007120:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007122:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007124:	4630      	mov	r0, r6
 8007126:	f7fe ffdf 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 800712a:	1c62      	adds	r2, r4, #1
 800712c:	f47f ad4a 	bne.w	8006bc4 <_Z11PAT9125initv+0x9c>
 8007130:	e563      	b.n	8006bfa <_Z11PAT9125initv+0xd2>
      palClearLine(LINE_B);
 8007132:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007136:	2001      	movs	r0, #1
 8007138:	f7fe ffd6 	bl	80060e8 <chThdSleep>
 800713c:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800713e:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007140:	f7fe ffd2 	bl	80060e8 <chThdSleep>
 8007144:	4630      	mov	r0, r6
 8007146:	f7fe ffcf 	bl	80060e8 <chThdSleep>
 800714a:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 800714c:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 800714e:	4630      	mov	r0, r6
 8007150:	f7fe ffca 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007154:	1c62      	adds	r2, r4, #1
 8007156:	f47f acfa 	bne.w	8006b4e <_Z11PAT9125initv+0x26>
 800715a:	e513      	b.n	8006b84 <_Z11PAT9125initv+0x5c>
 800715c:	40021c00 	.word	0x40021c00
  palClearLine(LINE_B);
 8007160:	4cd7      	ldr	r4, [pc, #860]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palClearLine(LINE_A);
 8007162:	4fd8      	ldr	r7, [pc, #864]	; (80074c4 <_Z11PAT9125initv+0x99c>)
  chThdSleepMilliseconds(10);
 8007164:	2064      	movs	r0, #100	; 0x64
 8007166:	f7fe ffbf 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_B);
 800716a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716e:	8363      	strh	r3, [r4, #26]
  chThdSleepMicroseconds(50);
 8007170:	2001      	movs	r0, #1
 8007172:	f7fe ffb9 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8007176:	2001      	movs	r0, #1
 8007178:	8378      	strh	r0, [r7, #26]
  chThdSleepMicroseconds(50);
 800717a:	f7fe ffb5 	bl	80060e8 <chThdSleep>
      palClearLine(LINE_B);
 800717e:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8007180:	f04f 0980 	mov.w	r9, #128	; 0x80
  chThdSleepMicroseconds(50);
 8007184:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8007186:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 800718a:	2601      	movs	r6, #1
    if (data & (1 << bit))
 800718c:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 800718e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007192:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8007194:	f140 84ed 	bpl.w	8007b72 <_Z11PAT9125initv+0x104a>
      palSetLine(LINE_B);
 8007198:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 800719c:	f7fe ffa4 	bl	80060e8 <chThdSleep>
 80071a0:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80071a2:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80071a4:	f7fe ffa0 	bl	80060e8 <chThdSleep>
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7fe ff9d 	bl	80060e8 <chThdSleep>
 80071ae:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80071b0:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7fe ff98 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80071b8:	1c61      	adds	r1, r4, #1
 80071ba:	d1e4      	bne.n	8007186 <_Z11PAT9125initv+0x65e>
  palSetLine(LINE_B);
 80071bc:	4cc0      	ldr	r4, [pc, #768]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palSetLine(LINE_A);
 80071be:	4fc1      	ldr	r7, [pc, #772]	; (80074c4 <_Z11PAT9125initv+0x99c>)
  palSetLine(LINE_B);
 80071c0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80071c4:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80071c6:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 80071c8:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 80071ca:	f7fe ff8d 	bl	80060e8 <chThdSleep>
 80071ce:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 80071d0:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80071d2:	f7fe ff89 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80071d6:	4629      	mov	r1, r5
 80071d8:	4620      	mov	r0, r4
 80071da:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80071dc:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 80071de:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80071e0:	f7fc f822 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7fe ff7f 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	2205      	movs	r2, #5
 80071f0:	f7fc f81a 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80071f4:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 80071f6:	f04f 097f 	mov.w	r9, #127	; 0x7f
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80071fa:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80071fc:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8007200:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007202:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007208:	4630      	mov	r0, r6
    if (data & (1 << bit))
 800720a:	f140 849c 	bpl.w	8007b46 <_Z11PAT9125initv+0x101e>
      palSetLine(LINE_B);
 800720e:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007212:	f7fe ff69 	bl	80060e8 <chThdSleep>
 8007216:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007218:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 800721a:	f7fe ff65 	bl	80060e8 <chThdSleep>
 800721e:	4630      	mov	r0, r6
 8007220:	f7fe ff62 	bl	80060e8 <chThdSleep>
 8007224:	3c01      	subs	r4, #1
 8007226:	4630      	mov	r0, r6
    palClearLine(LINE_A);
 8007228:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 800722a:	f7fe ff5d 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 800722e:	1c60      	adds	r0, r4, #1
 8007230:	d1e4      	bne.n	80071fc <_Z11PAT9125initv+0x6d4>
  palSetLine(LINE_B);
 8007232:	4fa3      	ldr	r7, [pc, #652]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palSetLine(LINE_A);
 8007234:	4ea3      	ldr	r6, [pc, #652]	; (80074c4 <_Z11PAT9125initv+0x99c>)
  palSetLine(LINE_B);
 8007236:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800723a:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800723c:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 800723e:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(50);
 8007240:	f7fe ff52 	bl	80060e8 <chThdSleep>
 8007244:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8007246:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007248:	f7fe ff4e 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800724c:	4621      	mov	r1, r4
 800724e:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8007250:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007252:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 8007254:	833c      	strh	r4, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007256:	f7fb ffe7 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800725a:	4628      	mov	r0, r5
 800725c:	f7fe ff44 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007260:	4621      	mov	r1, r4
 8007262:	4638      	mov	r0, r7
 8007264:	2205      	movs	r2, #5
 8007266:	f7fb ffdf 	bl	8003228 <_pal_lld_setgroupmode>
 800726a:	2407      	movs	r4, #7
    if (data & (1 << bit))
 800726c:	fa55 f104 	asrs.w	r1, r5, r4
      palSetLine(LINE_B);
 8007270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007274:	bf14      	ite	ne
 8007276:	833a      	strhne	r2, [r7, #24]
      palClearLine(LINE_B);
 8007278:	837a      	strheq	r2, [r7, #26]
  chThdSleepMicroseconds(50);
 800727a:	f04f 0001 	mov.w	r0, #1
 800727e:	bf08      	it	eq
 8007280:	2001      	moveq	r0, #1
 8007282:	f7fe ff31 	bl	80060e8 <chThdSleep>
 8007286:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8007288:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 800728a:	f7fe ff2d 	bl	80060e8 <chThdSleep>
 800728e:	2001      	movs	r0, #1
 8007290:	f7fe ff2a 	bl	80060e8 <chThdSleep>
 8007294:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007296:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 8007298:	2001      	movs	r0, #1
 800729a:	f7fe ff25 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 800729e:	1c62      	adds	r2, r4, #1
 80072a0:	d1e4      	bne.n	800726c <_Z11PAT9125initv+0x744>
  palSetLine(LINE_B);
 80072a2:	4f87      	ldr	r7, [pc, #540]	; (80074c0 <_Z11PAT9125initv+0x998>)
 80072a4:	4b88      	ldr	r3, [pc, #544]	; (80074c8 <_Z11PAT9125initv+0x9a0>)
  palSetLine(LINE_A);
 80072a6:	4c87      	ldr	r4, [pc, #540]	; (80074c4 <_Z11PAT9125initv+0x99c>)
 80072a8:	9301      	str	r3, [sp, #4]
  palSetLine(LINE_B);
 80072aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80072ae:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80072b0:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 80072b2:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80072b4:	f7fe ff18 	bl	80060e8 <chThdSleep>
 80072b8:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80072ba:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 80072bc:	f7fe ff14 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80072c0:	4631      	mov	r1, r6
 80072c2:	4638      	mov	r0, r7
 80072c4:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80072c6:	8365      	strh	r5, [r4, #26]
  palSetLine(LINE_B);
 80072c8:	833e      	strh	r6, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80072ca:	f7fb ffad 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80072ce:	4628      	mov	r0, r5
 80072d0:	f7fe ff0a 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80072d4:	4631      	mov	r1, r6
 80072d6:	2205      	movs	r2, #5
 80072d8:	4638      	mov	r0, r7
 80072da:	f7fb ffa5 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80072de:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80072e0:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 80072e2:	f7fe ff01 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 80072e6:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7fe fefd 	bl	80060e8 <chThdSleep>
 80072ee:	9a01      	ldr	r2, [sp, #4]
  palClearLine(LINE_B);
 80072f0:	463e      	mov	r6, r7
      const uint8_t addr = pat9125_init_seq2[i++];
 80072f2:	7817      	ldrb	r7, [r2, #0]
      if (addr == 0x0ff)
 80072f4:	2fff      	cmp	r7, #255	; 0xff
 80072f6:	f000 80d7 	beq.w	80074a8 <_Z11PAT9125initv+0x980>
  palClearLine(LINE_B);
 80072fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      if (!pat9125_wr_reg_verify(addr, pat9125_init_seq2[i++]))
 80072fe:	f892 8001 	ldrb.w	r8, [r2, #1]
  palClearLine(LINE_B);
 8007302:	8373      	strh	r3, [r6, #26]
  chThdSleepMicroseconds(50);
 8007304:	2001      	movs	r0, #1
 8007306:	f7fe feef 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 800730a:	2001      	movs	r0, #1
 800730c:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(50);
 800730e:	f7fe feeb 	bl	80060e8 <chThdSleep>
 8007312:	2507      	movs	r5, #7
    if (data & (1 << bit))
 8007314:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8007318:	fa4b f105 	asr.w	r1, fp, r5
    palSetLine(LINE_A);
 800731c:	f04f 0a01 	mov.w	sl, #1
    if (data & (1 << bit))
 8007320:	07cb      	lsls	r3, r1, #31
      palSetLine(LINE_B);
 8007322:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007326:	4650      	mov	r0, sl
    if (data & (1 << bit))
 8007328:	f140 83f6 	bpl.w	8007b18 <_Z11PAT9125initv+0xff0>
      palSetLine(LINE_B);
 800732c:	f8a6 e018 	strh.w	lr, [r6, #24]
  chThdSleepMicroseconds(50);
 8007330:	f7fe feda 	bl	80060e8 <chThdSleep>
 8007334:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8007336:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 800733a:	f7fe fed5 	bl	80060e8 <chThdSleep>
 800733e:	4650      	mov	r0, sl
 8007340:	f7fe fed2 	bl	80060e8 <chThdSleep>
 8007344:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8007346:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 800734a:	4650      	mov	r0, sl
 800734c:	f7fe fecc 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007350:	1c69      	adds	r1, r5, #1
 8007352:	d1e1      	bne.n	8007318 <_Z11PAT9125initv+0x7f0>
  palSetLine(LINE_B);
 8007354:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007358:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800735a:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 800735c:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8007360:	f7fe fec2 	bl	80060e8 <chThdSleep>
 8007364:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8007366:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8007368:	f7fe febe 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 800736c:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800736e:	4659      	mov	r1, fp
 8007370:	2205      	movs	r2, #5
 8007372:	4853      	ldr	r0, [pc, #332]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palSetLine(LINE_B);
 8007374:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007378:	f7fb ff56 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800737c:	4628      	mov	r0, r5
 800737e:	f7fe feb3 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007382:	4659      	mov	r1, fp
 8007384:	2205      	movs	r2, #5
 8007386:	484e      	ldr	r0, [pc, #312]	; (80074c0 <_Z11PAT9125initv+0x998>)
 8007388:	f7fb ff4e 	bl	8003228 <_pal_lld_setgroupmode>
 800738c:	2507      	movs	r5, #7
    if (data & (1 << bit))
 800738e:	fa47 f105 	asr.w	r1, r7, r5
    palSetLine(LINE_A);
 8007392:	f04f 0a01 	mov.w	sl, #1
    if (data & (1 << bit))
 8007396:	07cb      	lsls	r3, r1, #31
  chThdSleepMicroseconds(50);
 8007398:	4650      	mov	r0, sl
    if (data & (1 << bit))
 800739a:	f140 83a6 	bpl.w	8007aea <_Z11PAT9125initv+0xfc2>
      palSetLine(LINE_B);
 800739e:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 80073a2:	f7fe fea1 	bl	80060e8 <chThdSleep>
 80073a6:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 80073a8:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 80073ac:	f7fe fe9c 	bl	80060e8 <chThdSleep>
 80073b0:	4650      	mov	r0, sl
 80073b2:	f7fe fe99 	bl	80060e8 <chThdSleep>
 80073b6:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 80073b8:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 80073bc:	4650      	mov	r0, sl
 80073be:	f7fe fe93 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80073c2:	1c69      	adds	r1, r5, #1
 80073c4:	d1e3      	bne.n	800738e <_Z11PAT9125initv+0x866>
  palSetLine(LINE_B);
 80073c6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80073ca:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80073cc:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 80073ce:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 80073d2:	f7fe fe89 	bl	80060e8 <chThdSleep>
 80073d6:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 80073d8:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 80073da:	f7fe fe85 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 80073de:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80073e0:	4659      	mov	r1, fp
 80073e2:	2205      	movs	r2, #5
 80073e4:	4836      	ldr	r0, [pc, #216]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palSetLine(LINE_B);
 80073e6:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80073ea:	f7fb ff1d 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7fe fe7a 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80073f4:	4659      	mov	r1, fp
 80073f6:	2205      	movs	r2, #5
 80073f8:	4831      	ldr	r0, [pc, #196]	; (80074c0 <_Z11PAT9125initv+0x998>)
 80073fa:	f7fb ff15 	bl	8003228 <_pal_lld_setgroupmode>
 80073fe:	2507      	movs	r5, #7
    if (data & (1 << bit))
 8007400:	fa48 f105 	asr.w	r1, r8, r5
    palSetLine(LINE_A);
 8007404:	f04f 0901 	mov.w	r9, #1
    if (data & (1 << bit))
 8007408:	07cb      	lsls	r3, r1, #31
  chThdSleepMicroseconds(50);
 800740a:	4648      	mov	r0, r9
    if (data & (1 << bit))
 800740c:	f140 8356 	bpl.w	8007abc <_Z11PAT9125initv+0xf94>
      palSetLine(LINE_B);
 8007410:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8007414:	f7fe fe68 	bl	80060e8 <chThdSleep>
 8007418:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 800741a:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(50);
 800741e:	f7fe fe63 	bl	80060e8 <chThdSleep>
 8007422:	4648      	mov	r0, r9
 8007424:	f7fe fe60 	bl	80060e8 <chThdSleep>
 8007428:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 800742a:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(50);
 800742e:	4648      	mov	r0, r9
 8007430:	f7fe fe5a 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007434:	1c69      	adds	r1, r5, #1
 8007436:	d1e3      	bne.n	8007400 <_Z11PAT9125initv+0x8d8>
  palSetLine(LINE_B);
 8007438:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800743c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800743e:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8007440:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 8007444:	f7fe fe50 	bl	80060e8 <chThdSleep>
 8007448:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 800744a:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 800744c:	f7fe fe4c 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007450:	4659      	mov	r1, fp
 8007452:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8007454:	8365      	strh	r5, [r4, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007456:	481a      	ldr	r0, [pc, #104]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palSetLine(LINE_B);
 8007458:	f8a6 b018 	strh.w	fp, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800745c:	f7fb fee4 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007460:	4628      	mov	r0, r5
 8007462:	f7fe fe41 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007466:	2205      	movs	r2, #5
 8007468:	4659      	mov	r1, fp
 800746a:	4815      	ldr	r0, [pc, #84]	; (80074c0 <_Z11PAT9125initv+0x998>)
 800746c:	f7fb fedc 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007470:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8007472:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8007474:	f7fe fe38 	bl	80060e8 <chThdSleep>
 8007478:	4628      	mov	r0, r5
  palSetLine(LINE_B);
 800747a:	f8a6 b018 	strh.w	fp, [r6, #24]
  chThdSleepMicroseconds(50);
 800747e:	f7fe fe33 	bl	80060e8 <chThdSleep>
  uint8_t data = 0;
 8007482:	a904      	add	r1, sp, #16
 8007484:	2300      	movs	r3, #0
 8007486:	f801 3d01 	strb.w	r3, [r1, #-1]!
  swi2c_readByte_A8(PAT9125_I2C_ADDR, addr, &data);
 800748a:	4638      	mov	r0, r7
 800748c:	f7ff f9dc 	bl	8006848 <_Z17swi2c_readByte_A8hhPh.constprop.3>
 8007490:	9a01      	ldr	r2, [sp, #4]
  return data;
 8007492:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007496:	3202      	adds	r2, #2
      if (!pat9125_wr_reg_verify(addr, pat9125_init_seq2[i++]))
 8007498:	4598      	cmp	r8, r3
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	f47f adad 	bne.w	8006ffa <_Z11PAT9125initv+0x4d2>
      const uint8_t addr = pat9125_init_seq2[i++];
 80074a0:	7817      	ldrb	r7, [r2, #0]
      if (addr == 0x0ff)
 80074a2:	2fff      	cmp	r7, #255	; 0xff
 80074a4:	f47f af29 	bne.w	80072fa <_Z11PAT9125initv+0x7d2>
  palClearLine(LINE_B);
 80074a8:	4c05      	ldr	r4, [pc, #20]	; (80074c0 <_Z11PAT9125initv+0x998>)
  palClearLine(LINE_A);
 80074aa:	4f06      	ldr	r7, [pc, #24]	; (80074c4 <_Z11PAT9125initv+0x99c>)
  palClearLine(LINE_B);
 80074ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b0:	8363      	strh	r3, [r4, #26]
  chThdSleepMicroseconds(50);
 80074b2:	2001      	movs	r0, #1
 80074b4:	f7fe fe18 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 80074b8:	2001      	movs	r0, #1
 80074ba:	8378      	strh	r0, [r7, #26]
 80074bc:	e006      	b.n	80074cc <_Z11PAT9125initv+0x9a4>
 80074be:	bf00      	nop
 80074c0:	40021c00 	.word	0x40021c00
 80074c4:	40022000 	.word	0x40022000
 80074c8:	20000818 	.word	0x20000818
  chThdSleepMicroseconds(50);
 80074cc:	f7fe fe0c 	bl	80060e8 <chThdSleep>
      palClearLine(LINE_B);
 80074d0:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 80074d2:	f04f 0980 	mov.w	r9, #128	; 0x80
  chThdSleepMicroseconds(50);
 80074d6:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80074d8:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 80074dc:	2601      	movs	r6, #1
    if (data & (1 << bit))
 80074de:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 80074e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80074e4:	4630      	mov	r0, r6
    if (data & (1 << bit))
 80074e6:	f140 8406 	bpl.w	8007cf6 <_Z11PAT9125initv+0x11ce>
      palSetLine(LINE_B);
 80074ea:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 80074ee:	f7fe fdfb 	bl	80060e8 <chThdSleep>
 80074f2:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80074f4:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80074f6:	f7fe fdf7 	bl	80060e8 <chThdSleep>
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7fe fdf4 	bl	80060e8 <chThdSleep>
 8007500:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007502:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007504:	4630      	mov	r0, r6
 8007506:	f7fe fdef 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 800750a:	1c61      	adds	r1, r4, #1
 800750c:	d1e4      	bne.n	80074d8 <_Z11PAT9125initv+0x9b0>
  palSetLine(LINE_B);
 800750e:	4cda      	ldr	r4, [pc, #872]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palSetLine(LINE_A);
 8007510:	4fda      	ldr	r7, [pc, #872]	; (800787c <_Z11PAT9125initv+0xd54>)
  palSetLine(LINE_B);
 8007512:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007516:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007518:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 800751a:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 800751c:	f7fe fde4 	bl	80060e8 <chThdSleep>
 8007520:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8007522:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007524:	f7fe fde0 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007528:	4629      	mov	r1, r5
 800752a:	4620      	mov	r0, r4
 800752c:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 800752e:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8007530:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007532:	f7fb fe79 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007536:	4630      	mov	r0, r6
 8007538:	f7fe fdd6 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	2205      	movs	r2, #5
 8007542:	f7fb fe71 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8007546:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8007548:	f04f 097f 	mov.w	r9, #127	; 0x7f
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800754c:	2407      	movs	r4, #7
    if (data & (1 << bit))
 800754e:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8007552:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007554:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800755a:	4630      	mov	r0, r6
    if (data & (1 << bit))
 800755c:	f140 83b6 	bpl.w	8007ccc <_Z11PAT9125initv+0x11a4>
      palSetLine(LINE_B);
 8007560:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007564:	f7fe fdc0 	bl	80060e8 <chThdSleep>
 8007568:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800756a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 800756c:	f7fe fdbc 	bl	80060e8 <chThdSleep>
 8007570:	4630      	mov	r0, r6
 8007572:	f7fe fdb9 	bl	80060e8 <chThdSleep>
 8007576:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007578:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 800757a:	4630      	mov	r0, r6
 800757c:	f7fe fdb4 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007580:	1c61      	adds	r1, r4, #1
 8007582:	d1e4      	bne.n	800754e <_Z11PAT9125initv+0xa26>
  palSetLine(LINE_B);
 8007584:	4fbc      	ldr	r7, [pc, #752]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palSetLine(LINE_A);
 8007586:	4ebd      	ldr	r6, [pc, #756]	; (800787c <_Z11PAT9125initv+0xd54>)
  palSetLine(LINE_B);
 8007588:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800758c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800758e:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8007590:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8007594:	f7fe fda8 	bl	80060e8 <chThdSleep>
 8007598:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 800759a:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 800759c:	f7fe fda4 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075a0:	4649      	mov	r1, r9
 80075a2:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80075a4:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075a6:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 80075a8:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075ac:	f7fb fe3c 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7fe fd99 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075b6:	4649      	mov	r1, r9
 80075b8:	4638      	mov	r0, r7
 80075ba:	2205      	movs	r2, #5
 80075bc:	f7fb fe34 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80075c0:	46c8      	mov	r8, r9
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075c2:	2408      	movs	r4, #8
  chThdSleepMicroseconds(50);
 80075c4:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 80075c6:	f8a7 801a 	strh.w	r8, [r7, #26]
  chThdSleepMicroseconds(50);
 80075ca:	f7fe fd8d 	bl	80060e8 <chThdSleep>
 80075ce:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 80075d0:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80075d2:	f7fe fd89 	bl	80060e8 <chThdSleep>
 80075d6:	2001      	movs	r0, #1
 80075d8:	f7fe fd86 	bl	80060e8 <chThdSleep>
    palClearLine(LINE_A);
 80075dc:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 80075de:	2001      	movs	r0, #1
 80075e0:	f7fe fd82 	bl	80060e8 <chThdSleep>
 80075e4:	1e63      	subs	r3, r4, #1
  for (bit = 7; bit >= 0; bit--)
 80075e6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80075ea:	d1eb      	bne.n	80075c4 <_Z11PAT9125initv+0xa9c>
  palSetLine(LINE_B);
 80075ec:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 80075f0:	2001      	movs	r0, #1
 80075f2:	f7fe fd79 	bl	80060e8 <chThdSleep>
 80075f6:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80075f8:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80075fa:	f7fe fd75 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80075fe:	489e      	ldr	r0, [pc, #632]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palClearLine(LINE_A);
 8007600:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007602:	2205      	movs	r2, #5
  palSetLine(LINE_B);
 8007604:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      palClearLine(LINE_B);
 800760c:	4680      	mov	r8, r0
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800760e:	f7fb fe0b 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007612:	2001      	movs	r0, #1
 8007614:	f7fe fd68 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007618:	2205      	movs	r2, #5
 800761a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800761e:	4640      	mov	r0, r8
 8007620:	f7fb fe02 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007624:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007626:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007628:	f7fe fd5e 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 800762c:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8007630:	2001      	movs	r0, #1
 8007632:	f7fe fd59 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_B);
 8007636:	f8a7 901a 	strh.w	r9, [r7, #26]
  chThdSleepMicroseconds(50);
 800763a:	2001      	movs	r0, #1
 800763c:	f7fe fd54 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8007640:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 8007642:	2001      	movs	r0, #1
 8007644:	f7fe fd50 	bl	80060e8 <chThdSleep>
    palSetLine(LINE_A);
 8007648:	4f8c      	ldr	r7, [pc, #560]	; (800787c <_Z11PAT9125initv+0xd54>)
  chThdSleepMicroseconds(50);
 800764a:	2407      	movs	r4, #7
    if (data & (1 << bit))
 800764c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007650:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8007654:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007656:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800765c:	4630      	mov	r0, r6
    if (data & (1 << bit))
 800765e:	f140 8320 	bpl.w	8007ca2 <_Z11PAT9125initv+0x117a>
      palSetLine(LINE_B);
 8007662:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007666:	f7fe fd3f 	bl	80060e8 <chThdSleep>
 800766a:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800766c:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 800766e:	f7fe fd3b 	bl	80060e8 <chThdSleep>
 8007672:	4630      	mov	r0, r6
 8007674:	f7fe fd38 	bl	80060e8 <chThdSleep>
 8007678:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 800767a:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 800767c:	4630      	mov	r0, r6
 800767e:	f7fe fd33 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007682:	1c61      	adds	r1, r4, #1
 8007684:	d1e4      	bne.n	8007650 <_Z11PAT9125initv+0xb28>
  palSetLine(LINE_B);
 8007686:	4c7c      	ldr	r4, [pc, #496]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palSetLine(LINE_A);
 8007688:	4f7c      	ldr	r7, [pc, #496]	; (800787c <_Z11PAT9125initv+0xd54>)
  palSetLine(LINE_B);
 800768a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800768e:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007690:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 8007692:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8007694:	f7fe fd28 	bl	80060e8 <chThdSleep>
 8007698:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 800769a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 800769c:	f7fe fd24 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80076a0:	4629      	mov	r1, r5
 80076a2:	4620      	mov	r0, r4
 80076a4:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80076a6:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 80076a8:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80076aa:	f7fb fdbd 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7fe fd1a 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	2205      	movs	r2, #5
 80076ba:	f7fb fdb5 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80076be:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 80076c0:	f04f 0909 	mov.w	r9, #9
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80076c4:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80076c6:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 80076ca:	2601      	movs	r6, #1
    if (data & (1 << bit))
 80076cc:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 80076ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80076d2:	4630      	mov	r0, r6
    if (data & (1 << bit))
 80076d4:	f140 82d0 	bpl.w	8007c78 <_Z11PAT9125initv+0x1150>
      palSetLine(LINE_B);
 80076d8:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 80076dc:	f7fe fd04 	bl	80060e8 <chThdSleep>
 80076e0:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80076e2:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80076e4:	f7fe fd00 	bl	80060e8 <chThdSleep>
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7fe fcfd 	bl	80060e8 <chThdSleep>
 80076ee:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80076f0:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7fe fcf8 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80076f8:	1c61      	adds	r1, r4, #1
 80076fa:	d1e4      	bne.n	80076c6 <_Z11PAT9125initv+0xb9e>
  palSetLine(LINE_B);
 80076fc:	4f5e      	ldr	r7, [pc, #376]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palSetLine(LINE_A);
 80076fe:	4e5f      	ldr	r6, [pc, #380]	; (800787c <_Z11PAT9125initv+0xd54>)
  palSetLine(LINE_B);
 8007700:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007704:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007706:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 8007708:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 800770c:	f7fe fcec 	bl	80060e8 <chThdSleep>
 8007710:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8007712:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007714:	f7fe fce8 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007718:	4649      	mov	r1, r9
 800771a:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 800771c:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800771e:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 8007720:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007724:	f7fb fd80 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007728:	4628      	mov	r0, r5
 800772a:	f7fe fcdd 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800772e:	4649      	mov	r1, r9
 8007730:	4638      	mov	r0, r7
 8007732:	2205      	movs	r2, #5
 8007734:	f7fb fd78 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8007738:	46c8      	mov	r8, r9
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800773a:	2408      	movs	r4, #8
  chThdSleepMicroseconds(50);
 800773c:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 800773e:	f8a7 801a 	strh.w	r8, [r7, #26]
  chThdSleepMicroseconds(50);
 8007742:	f7fe fcd1 	bl	80060e8 <chThdSleep>
 8007746:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8007748:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 800774a:	f7fe fccd 	bl	80060e8 <chThdSleep>
 800774e:	2001      	movs	r0, #1
 8007750:	f7fe fcca 	bl	80060e8 <chThdSleep>
    palClearLine(LINE_A);
 8007754:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 8007756:	2001      	movs	r0, #1
 8007758:	f7fe fcc6 	bl	80060e8 <chThdSleep>
 800775c:	1e63      	subs	r3, r4, #1
  for (bit = 7; bit >= 0; bit--)
 800775e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007762:	d1eb      	bne.n	800773c <_Z11PAT9125initv+0xc14>
  palSetLine(LINE_B);
 8007764:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 8007768:	2001      	movs	r0, #1
 800776a:	f7fe fcbd 	bl	80060e8 <chThdSleep>
 800776e:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007770:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007772:	f7fe fcb9 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007776:	4840      	ldr	r0, [pc, #256]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palClearLine(LINE_A);
 8007778:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800777a:	2205      	movs	r2, #5
  palSetLine(LINE_B);
 800777c:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      palClearLine(LINE_B);
 8007784:	4680      	mov	r8, r0
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007786:	f7fb fd4f 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800778a:	2001      	movs	r0, #1
 800778c:	f7fe fcac 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007790:	2205      	movs	r2, #5
 8007792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007796:	4640      	mov	r0, r8
 8007798:	f7fb fd46 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800779c:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800779e:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80077a0:	f7fe fca2 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 80077a4:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7fe fc9d 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_B);
 80077ae:	f8a7 901a 	strh.w	r9, [r7, #26]
  chThdSleepMicroseconds(50);
 80077b2:	2001      	movs	r0, #1
 80077b4:	f7fe fc98 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 80077b8:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 80077ba:	2001      	movs	r0, #1
 80077bc:	f7fe fc94 	bl	80060e8 <chThdSleep>
    palSetLine(LINE_A);
 80077c0:	4f2e      	ldr	r7, [pc, #184]	; (800787c <_Z11PAT9125initv+0xd54>)
  chThdSleepMicroseconds(50);
 80077c2:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80077c4:	f04f 0980 	mov.w	r9, #128	; 0x80
 80077c8:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 80077cc:	2601      	movs	r6, #1
    if (data & (1 << bit))
 80077ce:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 80077d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80077d4:	4630      	mov	r0, r6
    if (data & (1 << bit))
 80077d6:	f140 823a 	bpl.w	8007c4e <_Z11PAT9125initv+0x1126>
      palSetLine(LINE_B);
 80077da:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 80077de:	f7fe fc83 	bl	80060e8 <chThdSleep>
 80077e2:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80077e4:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80077e6:	f7fe fc7f 	bl	80060e8 <chThdSleep>
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7fe fc7c 	bl	80060e8 <chThdSleep>
 80077f0:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80077f2:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7fe fc77 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80077fa:	1c61      	adds	r1, r4, #1
 80077fc:	d1e4      	bne.n	80077c8 <_Z11PAT9125initv+0xca0>
  palSetLine(LINE_B);
 80077fe:	4c1e      	ldr	r4, [pc, #120]	; (8007878 <_Z11PAT9125initv+0xd50>)
  palSetLine(LINE_A);
 8007800:	4f1e      	ldr	r7, [pc, #120]	; (800787c <_Z11PAT9125initv+0xd54>)
  palSetLine(LINE_B);
 8007802:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007806:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007808:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 800780a:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 800780c:	f7fe fc6c 	bl	80060e8 <chThdSleep>
 8007810:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8007812:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007814:	f7fe fc68 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007818:	4629      	mov	r1, r5
 800781a:	4620      	mov	r0, r4
 800781c:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 800781e:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8007820:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007822:	f7fb fd01 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007826:	4630      	mov	r0, r6
 8007828:	f7fe fc5e 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	2205      	movs	r2, #5
 8007832:	f7fb fcf9 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8007836:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8007838:	f04f 090d 	mov.w	r9, #13
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800783c:	2407      	movs	r4, #7
    if (data & (1 << bit))
 800783e:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8007842:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007844:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 800784a:	4630      	mov	r0, r6
    if (data & (1 << bit))
 800784c:	f140 81ea 	bpl.w	8007c24 <_Z11PAT9125initv+0x10fc>
      palSetLine(LINE_B);
 8007850:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007854:	f7fe fc48 	bl	80060e8 <chThdSleep>
 8007858:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 800785a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 800785c:	f7fe fc44 	bl	80060e8 <chThdSleep>
 8007860:	4630      	mov	r0, r6
 8007862:	f7fe fc41 	bl	80060e8 <chThdSleep>
 8007866:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007868:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 800786a:	4630      	mov	r0, r6
 800786c:	f7fe fc3c 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007870:	1c61      	adds	r1, r4, #1
 8007872:	d1e4      	bne.n	800783e <_Z11PAT9125initv+0xd16>
  palSetLine(LINE_B);
 8007874:	4f00      	ldr	r7, [pc, #0]	; (8007878 <_Z11PAT9125initv+0xd50>)
 8007876:	e003      	b.n	8007880 <_Z11PAT9125initv+0xd58>
 8007878:	40021c00 	.word	0x40021c00
 800787c:	40022000 	.word	0x40022000
  palSetLine(LINE_A);
 8007880:	4ed1      	ldr	r6, [pc, #836]	; (8007bc8 <_Z11PAT9125initv+0x10a0>)
  palSetLine(LINE_B);
 8007882:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007886:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007888:	4605      	mov	r5, r0
  palSetLine(LINE_B);
 800788a:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 800788e:	f7fe fc2b 	bl	80060e8 <chThdSleep>
 8007892:	4628      	mov	r0, r5
  palSetLine(LINE_A);
 8007894:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007896:	f7fe fc27 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800789a:	4649      	mov	r1, r9
 800789c:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 800789e:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078a0:	4638      	mov	r0, r7
  palSetLine(LINE_B);
 80078a2:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078a6:	f7fb fcbf 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80078aa:	4628      	mov	r0, r5
 80078ac:	f7fe fc1c 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078b0:	4649      	mov	r1, r9
 80078b2:	4638      	mov	r0, r7
 80078b4:	2205      	movs	r2, #5
 80078b6:	f7fb fcb7 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80078ba:	46c8      	mov	r8, r9
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078bc:	2408      	movs	r4, #8
  chThdSleepMicroseconds(50);
 80078be:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 80078c0:	f8a7 801a 	strh.w	r8, [r7, #26]
  chThdSleepMicroseconds(50);
 80078c4:	f7fe fc10 	bl	80060e8 <chThdSleep>
 80078c8:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 80078ca:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80078cc:	f7fe fc0c 	bl	80060e8 <chThdSleep>
 80078d0:	2001      	movs	r0, #1
 80078d2:	f7fe fc09 	bl	80060e8 <chThdSleep>
    palClearLine(LINE_A);
 80078d6:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 80078d8:	2001      	movs	r0, #1
 80078da:	f7fe fc05 	bl	80060e8 <chThdSleep>
 80078de:	1e63      	subs	r3, r4, #1
  for (bit = 7; bit >= 0; bit--)
 80078e0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80078e4:	d1eb      	bne.n	80078be <_Z11PAT9125initv+0xd96>
  palSetLine(LINE_B);
 80078e6:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 80078ea:	2001      	movs	r0, #1
 80078ec:	f7fe fbfc 	bl	80060e8 <chThdSleep>
 80078f0:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 80078f2:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 80078f4:	f7fe fbf8 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078f8:	48b4      	ldr	r0, [pc, #720]	; (8007bcc <_Z11PAT9125initv+0x10a4>)
  palClearLine(LINE_A);
 80078fa:	8375      	strh	r5, [r6, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80078fc:	2205      	movs	r2, #5
  palSetLine(LINE_B);
 80078fe:	f8a7 9018 	strh.w	r9, [r7, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      palClearLine(LINE_B);
 8007906:	4680      	mov	r8, r0
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007908:	f7fb fc8e 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800790c:	2001      	movs	r0, #1
 800790e:	f7fe fbeb 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007912:	2205      	movs	r2, #5
 8007914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007918:	4640      	mov	r0, r8
 800791a:	f7fb fc85 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 800791e:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007920:	8335      	strh	r5, [r6, #24]
  chThdSleepMicroseconds(50);
 8007922:	f7fe fbe1 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 8007926:	f8a7 9018 	strh.w	r9, [r7, #24]
  chThdSleepMicroseconds(50);
 800792a:	2001      	movs	r0, #1
 800792c:	f7fe fbdc 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_B);
 8007930:	f8a7 901a 	strh.w	r9, [r7, #26]
  chThdSleepMicroseconds(50);
 8007934:	2001      	movs	r0, #1
 8007936:	f7fe fbd7 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 800793a:	8375      	strh	r5, [r6, #26]
  chThdSleepMicroseconds(50);
 800793c:	2001      	movs	r0, #1
 800793e:	f7fe fbd3 	bl	80060e8 <chThdSleep>
    palSetLine(LINE_A);
 8007942:	4fa1      	ldr	r7, [pc, #644]	; (8007bc8 <_Z11PAT9125initv+0x10a0>)
  chThdSleepMicroseconds(50);
 8007944:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8007946:	f04f 0980 	mov.w	r9, #128	; 0x80
 800794a:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 800794e:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007950:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007956:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8007958:	f140 814f 	bpl.w	8007bfa <_Z11PAT9125initv+0x10d2>
      palSetLine(LINE_B);
 800795c:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007960:	f7fe fbc2 	bl	80060e8 <chThdSleep>
 8007964:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007966:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007968:	f7fe fbbe 	bl	80060e8 <chThdSleep>
 800796c:	4630      	mov	r0, r6
 800796e:	f7fe fbbb 	bl	80060e8 <chThdSleep>
 8007972:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007974:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007976:	4630      	mov	r0, r6
 8007978:	f7fe fbb6 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 800797c:	1c61      	adds	r1, r4, #1
 800797e:	d1e4      	bne.n	800794a <_Z11PAT9125initv+0xe22>
  palSetLine(LINE_B);
 8007980:	4c92      	ldr	r4, [pc, #584]	; (8007bcc <_Z11PAT9125initv+0x10a4>)
  palSetLine(LINE_A);
 8007982:	4f91      	ldr	r7, [pc, #580]	; (8007bc8 <_Z11PAT9125initv+0x10a0>)
  palSetLine(LINE_B);
 8007984:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007988:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 800798a:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 800798c:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 800798e:	f7fe fbab 	bl	80060e8 <chThdSleep>
 8007992:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8007994:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007996:	f7fe fba7 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 800799a:	4629      	mov	r1, r5
 800799c:	4620      	mov	r0, r4
 800799e:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 80079a0:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 80079a2:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80079a4:	f7fb fc40 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7fe fb9d 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	2205      	movs	r2, #5
 80079b4:	f7fb fc38 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 80079b8:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 80079ba:	f04f 090e 	mov.w	r9, #14
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 80079be:	2407      	movs	r4, #7
    if (data & (1 << bit))
 80079c0:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 80079c4:	2601      	movs	r6, #1
    if (data & (1 << bit))
 80079c6:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 80079c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80079cc:	4630      	mov	r0, r6
    if (data & (1 << bit))
 80079ce:	f140 80ff 	bpl.w	8007bd0 <_Z11PAT9125initv+0x10a8>
      palSetLine(LINE_B);
 80079d2:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 80079d6:	f7fe fb87 	bl	80060e8 <chThdSleep>
 80079da:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 80079dc:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 80079de:	f7fe fb83 	bl	80060e8 <chThdSleep>
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7fe fb80 	bl	80060e8 <chThdSleep>
 80079e8:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 80079ea:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7fe fb7b 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 80079f2:	1c61      	adds	r1, r4, #1
 80079f4:	d1e4      	bne.n	80079c0 <_Z11PAT9125initv+0xe98>
  palSetLine(LINE_B);
 80079f6:	4c75      	ldr	r4, [pc, #468]	; (8007bcc <_Z11PAT9125initv+0x10a4>)
  palSetLine(LINE_A);
 80079f8:	4f73      	ldr	r7, [pc, #460]	; (8007bc8 <_Z11PAT9125initv+0x10a0>)
  palSetLine(LINE_B);
 80079fa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 80079fe:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007a00:	4606      	mov	r6, r0
  palSetLine(LINE_B);
 8007a02:	8325      	strh	r5, [r4, #24]
  chThdSleepMicroseconds(50);
 8007a04:	f7fe fb70 	bl	80060e8 <chThdSleep>
 8007a08:	4630      	mov	r0, r6
  palSetLine(LINE_A);
 8007a0a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007a0c:	f7fe fb6c 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a10:	4629      	mov	r1, r5
 8007a12:	4620      	mov	r0, r4
 8007a14:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8007a16:	837e      	strh	r6, [r7, #26]
  palSetLine(LINE_B);
 8007a18:	8325      	strh	r5, [r4, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a1a:	f7fb fc05 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7fe fb62 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	2205      	movs	r2, #5
 8007a2a:	f7fb fbfd 	bl	8003228 <_pal_lld_setgroupmode>
      palClearLine(LINE_B);
 8007a2e:	46a0      	mov	r8, r4
    if (data & (1 << bit))
 8007a30:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a34:	2407      	movs	r4, #7
    if (data & (1 << bit))
 8007a36:	fa49 f304 	asr.w	r3, r9, r4
    palSetLine(LINE_A);
 8007a3a:	2601      	movs	r6, #1
    if (data & (1 << bit))
 8007a3c:	07db      	lsls	r3, r3, #31
      palSetLine(LINE_B);
 8007a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007a42:	4630      	mov	r0, r6
    if (data & (1 << bit))
 8007a44:	f140 80ab 	bpl.w	8007b9e <_Z11PAT9125initv+0x1076>
      palSetLine(LINE_B);
 8007a48:	f8a8 1018 	strh.w	r1, [r8, #24]
  chThdSleepMicroseconds(50);
 8007a4c:	f7fe fb4c 	bl	80060e8 <chThdSleep>
 8007a50:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007a52:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007a54:	f7fe fb48 	bl	80060e8 <chThdSleep>
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7fe fb45 	bl	80060e8 <chThdSleep>
 8007a5e:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007a60:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7fe fb40 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007a68:	1c62      	adds	r2, r4, #1
 8007a6a:	d1e4      	bne.n	8007a36 <_Z11PAT9125initv+0xf0e>
  palSetLine(LINE_B);
 8007a6c:	4d57      	ldr	r5, [pc, #348]	; (8007bcc <_Z11PAT9125initv+0x10a4>)
  palSetLine(LINE_A);
 8007a6e:	4f56      	ldr	r7, [pc, #344]	; (8007bc8 <_Z11PAT9125initv+0x10a0>)
  palSetLine(LINE_B);
 8007a70:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007a74:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007a76:	4604      	mov	r4, r0
  palSetLine(LINE_B);
 8007a78:	832e      	strh	r6, [r5, #24]
  chThdSleepMicroseconds(50);
 8007a7a:	f7fe fb35 	bl	80060e8 <chThdSleep>
 8007a7e:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8007a80:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(50);
 8007a82:	f7fe fb31 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a86:	4631      	mov	r1, r6
  palClearLine(LINE_A);
 8007a88:	837c      	strh	r4, [r7, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	2205      	movs	r2, #5
  palSetLine(LINE_B);
 8007a8e:	832e      	strh	r6, [r5, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a90:	f7fb fbca 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7fe fb27 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	2205      	movs	r2, #5
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f7fb fbc2 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007aa4:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8007aa6:	833c      	strh	r4, [r7, #24]
  chThdSleepMicroseconds(50);
 8007aa8:	f7fe fb1e 	bl	80060e8 <chThdSleep>
 8007aac:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8007aae:	832e      	strh	r6, [r5, #24]
  chThdSleepMicroseconds(50);
 8007ab0:	f7fe fb1a 	bl	80060e8 <chThdSleep>
  return 1;
 8007ab4:	4620      	mov	r0, r4
}
 8007ab6:	b005      	add	sp, #20
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(50);
 8007abc:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8007abe:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(50);
 8007ac2:	f7fe fb11 	bl	80060e8 <chThdSleep>
 8007ac6:	4648      	mov	r0, r9
    palSetLine(LINE_A);
 8007ac8:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMicroseconds(50);
 8007acc:	f7fe fb0c 	bl	80060e8 <chThdSleep>
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f7fe fb09 	bl	80060e8 <chThdSleep>
 8007ad6:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8007ad8:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMicroseconds(50);
 8007adc:	4648      	mov	r0, r9
 8007ade:	f7fe fb03 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007ae2:	1c6a      	adds	r2, r5, #1
 8007ae4:	f47f ac8c 	bne.w	8007400 <_Z11PAT9125initv+0x8d8>
 8007ae8:	e4a6      	b.n	8007438 <_Z11PAT9125initv+0x910>
  chThdSleepMicroseconds(50);
 8007aea:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8007aec:	f8a6 b01a 	strh.w	fp, [r6, #26]
  chThdSleepMicroseconds(50);
 8007af0:	f7fe fafa 	bl	80060e8 <chThdSleep>
 8007af4:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8007af6:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 8007afa:	f7fe faf5 	bl	80060e8 <chThdSleep>
 8007afe:	4650      	mov	r0, sl
 8007b00:	f7fe faf2 	bl	80060e8 <chThdSleep>
 8007b04:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8007b06:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7fe faec 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007b10:	1c6a      	adds	r2, r5, #1
 8007b12:	f47f ac3c 	bne.w	800738e <_Z11PAT9125initv+0x866>
 8007b16:	e456      	b.n	80073c6 <_Z11PAT9125initv+0x89e>
      palClearLine(LINE_B);
 8007b18:	f8a6 e01a 	strh.w	lr, [r6, #26]
  chThdSleepMicroseconds(50);
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	f7fe fae3 	bl	80060e8 <chThdSleep>
 8007b22:	4650      	mov	r0, sl
    palSetLine(LINE_A);
 8007b24:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMicroseconds(50);
 8007b28:	f7fe fade 	bl	80060e8 <chThdSleep>
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	f7fe fadb 	bl	80060e8 <chThdSleep>
 8007b32:	3d01      	subs	r5, #1
    palClearLine(LINE_A);
 8007b34:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMicroseconds(50);
 8007b38:	4650      	mov	r0, sl
 8007b3a:	f7fe fad5 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007b3e:	1c6a      	adds	r2, r5, #1
 8007b40:	f47f abea 	bne.w	8007318 <_Z11PAT9125initv+0x7f0>
 8007b44:	e406      	b.n	8007354 <_Z11PAT9125initv+0x82c>
      palClearLine(LINE_B);
 8007b46:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	f7fe facc 	bl	80060e8 <chThdSleep>
 8007b50:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007b52:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007b54:	f7fe fac8 	bl	80060e8 <chThdSleep>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7fe fac5 	bl	80060e8 <chThdSleep>
 8007b5e:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007b60:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7fe fac0 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007b68:	1c61      	adds	r1, r4, #1
 8007b6a:	f47f ab47 	bne.w	80071fc <_Z11PAT9125initv+0x6d4>
 8007b6e:	f7ff bb60 	b.w	8007232 <_Z11PAT9125initv+0x70a>
      palClearLine(LINE_B);
 8007b72:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007b76:	2001      	movs	r0, #1
 8007b78:	f7fe fab6 	bl	80060e8 <chThdSleep>
 8007b7c:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007b7e:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007b80:	f7fe fab2 	bl	80060e8 <chThdSleep>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7fe faaf 	bl	80060e8 <chThdSleep>
 8007b8a:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007b8c:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7fe faaa 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007b94:	1c62      	adds	r2, r4, #1
 8007b96:	f47f aaf6 	bne.w	8007186 <_Z11PAT9125initv+0x65e>
 8007b9a:	f7ff bb0f 	b.w	80071bc <_Z11PAT9125initv+0x694>
      palClearLine(LINE_B);
 8007b9e:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f7fe faa0 	bl	80060e8 <chThdSleep>
 8007ba8:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007baa:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007bac:	f7fe fa9c 	bl	80060e8 <chThdSleep>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7fe fa99 	bl	80060e8 <chThdSleep>
 8007bb6:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007bb8:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7fe fa94 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007bc0:	1c63      	adds	r3, r4, #1
 8007bc2:	f47f af38 	bne.w	8007a36 <_Z11PAT9125initv+0xf0e>
 8007bc6:	e751      	b.n	8007a6c <_Z11PAT9125initv+0xf44>
 8007bc8:	40022000 	.word	0x40022000
 8007bcc:	40021c00 	.word	0x40021c00
      palClearLine(LINE_B);
 8007bd0:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007bd4:	2001      	movs	r0, #1
 8007bd6:	f7fe fa87 	bl	80060e8 <chThdSleep>
 8007bda:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007bdc:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007bde:	f7fe fa83 	bl	80060e8 <chThdSleep>
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7fe fa80 	bl	80060e8 <chThdSleep>
 8007be8:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007bea:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7fe fa7b 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007bf2:	1c62      	adds	r2, r4, #1
 8007bf4:	f47f aee4 	bne.w	80079c0 <_Z11PAT9125initv+0xe98>
 8007bf8:	e6fd      	b.n	80079f6 <_Z11PAT9125initv+0xece>
      palClearLine(LINE_B);
 8007bfa:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f7fe fa72 	bl	80060e8 <chThdSleep>
 8007c04:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007c06:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007c08:	f7fe fa6e 	bl	80060e8 <chThdSleep>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7fe fa6b 	bl	80060e8 <chThdSleep>
 8007c12:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007c14:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7fe fa66 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007c1c:	1c62      	adds	r2, r4, #1
 8007c1e:	f47f ae94 	bne.w	800794a <_Z11PAT9125initv+0xe22>
 8007c22:	e6ad      	b.n	8007980 <_Z11PAT9125initv+0xe58>
      palClearLine(LINE_B);
 8007c24:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f7fe fa5d 	bl	80060e8 <chThdSleep>
 8007c2e:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007c30:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007c32:	f7fe fa59 	bl	80060e8 <chThdSleep>
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7fe fa56 	bl	80060e8 <chThdSleep>
 8007c3c:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007c3e:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7fe fa51 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007c46:	1c62      	adds	r2, r4, #1
 8007c48:	f47f adf9 	bne.w	800783e <_Z11PAT9125initv+0xd16>
 8007c4c:	e612      	b.n	8007874 <_Z11PAT9125initv+0xd4c>
      palClearLine(LINE_B);
 8007c4e:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007c52:	2001      	movs	r0, #1
 8007c54:	f7fe fa48 	bl	80060e8 <chThdSleep>
 8007c58:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007c5a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007c5c:	f7fe fa44 	bl	80060e8 <chThdSleep>
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7fe fa41 	bl	80060e8 <chThdSleep>
 8007c66:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007c68:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7fe fa3c 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007c70:	1c62      	adds	r2, r4, #1
 8007c72:	f47f ada9 	bne.w	80077c8 <_Z11PAT9125initv+0xca0>
 8007c76:	e5c2      	b.n	80077fe <_Z11PAT9125initv+0xcd6>
      palClearLine(LINE_B);
 8007c78:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f7fe fa33 	bl	80060e8 <chThdSleep>
 8007c82:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007c84:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007c86:	f7fe fa2f 	bl	80060e8 <chThdSleep>
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7fe fa2c 	bl	80060e8 <chThdSleep>
 8007c90:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007c92:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7fe fa27 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007c9a:	1c62      	adds	r2, r4, #1
 8007c9c:	f47f ad13 	bne.w	80076c6 <_Z11PAT9125initv+0xb9e>
 8007ca0:	e52c      	b.n	80076fc <_Z11PAT9125initv+0xbd4>
      palClearLine(LINE_B);
 8007ca2:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	f7fe fa1e 	bl	80060e8 <chThdSleep>
 8007cac:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007cae:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007cb0:	f7fe fa1a 	bl	80060e8 <chThdSleep>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f7fe fa17 	bl	80060e8 <chThdSleep>
 8007cba:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007cbc:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe fa12 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007cc4:	1c62      	adds	r2, r4, #1
 8007cc6:	f47f acc3 	bne.w	8007650 <_Z11PAT9125initv+0xb28>
 8007cca:	e4dc      	b.n	8007686 <_Z11PAT9125initv+0xb5e>
      palClearLine(LINE_B);
 8007ccc:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7fe fa09 	bl	80060e8 <chThdSleep>
 8007cd6:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007cd8:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007cda:	f7fe fa05 	bl	80060e8 <chThdSleep>
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7fe fa02 	bl	80060e8 <chThdSleep>
 8007ce4:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007ce6:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7fe f9fd 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007cee:	1c62      	adds	r2, r4, #1
 8007cf0:	f47f ac2d 	bne.w	800754e <_Z11PAT9125initv+0xa26>
 8007cf4:	e446      	b.n	8007584 <_Z11PAT9125initv+0xa5c>
      palClearLine(LINE_B);
 8007cf6:	f8a8 101a 	strh.w	r1, [r8, #26]
  chThdSleepMicroseconds(50);
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	f7fe f9f4 	bl	80060e8 <chThdSleep>
 8007d00:	4630      	mov	r0, r6
    palSetLine(LINE_A);
 8007d02:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007d04:	f7fe f9f0 	bl	80060e8 <chThdSleep>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7fe f9ed 	bl	80060e8 <chThdSleep>
 8007d0e:	3c01      	subs	r4, #1
    palClearLine(LINE_A);
 8007d10:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7fe f9e8 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007d18:	1c62      	adds	r2, r4, #1
 8007d1a:	f47f abdd 	bne.w	80074d8 <_Z11PAT9125initv+0x9b0>
 8007d1e:	f7ff bbf6 	b.w	800750e <_Z11PAT9125initv+0x9e6>
 8007d22:	bf00      	nop

08007d24 <_ZN23Adafruit_PWMServoDriver5read8Eh>:
{
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txBuffer[txBufferIndex] = data;
 8007d28:	486c      	ldr	r0, [pc, #432]	; (8007edc <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1b8>)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, true);
 8007d2a:	4a6d      	ldr	r2, [pc, #436]	; (8007ee0 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1bc>)
  txBuffer[txBufferIndex] = data;
 8007d2c:	7803      	ldrb	r3, [r0, #0]
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, true);
 8007d2e:	7815      	ldrb	r5, [r2, #0]
  txBuffer[txBufferIndex] = data;
 8007d30:	4a6c      	ldr	r2, [pc, #432]	; (8007ee4 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c0>)
  palClearLine(LINE_B);
 8007d32:	4f6d      	ldr	r7, [pc, #436]	; (8007ee8 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
  txBuffer[txBufferIndex] = data;
 8007d34:	54d1      	strb	r1, [r2, r3]
{
 8007d36:	b089      	sub	sp, #36	; 0x24
  ++txBufferIndex;
 8007d38:	f103 0a01 	add.w	sl, r3, #1
  txBufferLength = txBufferIndex;
 8007d3c:	4b6b      	ldr	r3, [pc, #428]	; (8007eec <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c8>)
{
 8007d3e:	9105      	str	r1, [sp, #20]
  ++txBufferIndex;
 8007d40:	fa5f fa8a 	uxtb.w	sl, sl
  palClearLine(LINE_B);
 8007d44:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  ++txBufferIndex;
 8007d48:	f880 a000 	strb.w	sl, [r0]
  txBufferLength = txBufferIndex;
 8007d4c:	f883 a000 	strb.w	sl, [r3]
  chThdSleepMicroseconds(50);
 8007d50:	2001      	movs	r0, #1
  palClearLine(LINE_A);
 8007d52:	4c67      	ldr	r4, [pc, #412]	; (8007ef0 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  palClearLine(LINE_B);
 8007d54:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007d56:	f7fe f9c7 	bl	80060e8 <chThdSleep>
  palClearLine(LINE_A);
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(50);
 8007d5e:	f7fe f9c3 	bl	80060e8 <chThdSleep>
  swi2c_write(SWI2C_WMSK | ((address & SWI2C_DMSK) << SWI2C_ASHF));
 8007d62:	006d      	lsls	r5, r5, #1
 8007d64:	b2ed      	uxtb	r5, r5
 8007d66:	f04f 0907 	mov.w	r9, #7
    if (data & (1 << bit))
 8007d6a:	fa45 f109 	asr.w	r1, r5, r9
    palSetLine(LINE_A);
 8007d6e:	f04f 0801 	mov.w	r8, #1
    if (data & (1 << bit))
 8007d72:	07ca      	lsls	r2, r1, #31
  chThdSleepMicroseconds(50);
 8007d74:	4640      	mov	r0, r8
    if (data & (1 << bit))
 8007d76:	f140 8098 	bpl.w	8007eaa <_ZN23Adafruit_PWMServoDriver5read8Eh+0x186>
      palSetLine(LINE_B);
 8007d7a:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8007d7c:	f7fe f9b4 	bl	80060e8 <chThdSleep>
 8007d80:	4640      	mov	r0, r8
    palSetLine(LINE_A);
 8007d82:	f8a4 8018 	strh.w	r8, [r4, #24]
  chThdSleepMicroseconds(50);
 8007d86:	f7fe f9af 	bl	80060e8 <chThdSleep>
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7fe f9ac 	bl	80060e8 <chThdSleep>
 8007d90:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8007d94:	f8a4 801a 	strh.w	r8, [r4, #26]
  chThdSleepMicroseconds(50);
 8007d98:	4640      	mov	r0, r8
 8007d9a:	f7fe f9a5 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007d9e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8007da2:	d1e2      	bne.n	8007d6a <_ZN23Adafruit_PWMServoDriver5read8Eh+0x46>
  palSetLine(LINE_B);
 8007da4:	4e50      	ldr	r6, [pc, #320]	; (8007ee8 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
  palSetLine(LINE_A);
 8007da6:	4d52      	ldr	r5, [pc, #328]	; (8007ef0 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  palSetLine(LINE_B);
 8007da8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007dac:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007dae:	4604      	mov	r4, r0
  palSetLine(LINE_B);
 8007db0:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8007db2:	f7fe f999 	bl	80060e8 <chThdSleep>
 8007db6:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8007db8:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8007dba:	f7fe f995 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8007dc2:	836c      	strh	r4, [r5, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007dc4:	4630      	mov	r0, r6
  palSetLine(LINE_B);
 8007dc6:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007dc8:	f7fb fa2e 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7fe f98b 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f7fb fa26 	bl	8003228 <_pal_lld_setgroupmode>
  for (int i = 0; i < length; ++i)
 8007ddc:	f1ba 0f00 	cmp.w	sl, #0
 8007de0:	d03d      	beq.n	8007e5e <_ZN23Adafruit_PWMServoDriver5read8Eh+0x13a>
 8007de2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007ee4 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c0>
 8007de6:	44ca      	add	sl, r9
    swi2c_write(data[i] & 0xff);
 8007de8:	f819 8b01 	ldrb.w	r8, [r9], #1
 8007dec:	f04f 0b07 	mov.w	fp, #7
    if (data & (1 << bit))
 8007df0:	fa48 f20b 	asr.w	r2, r8, fp
 8007df4:	07d3      	lsls	r3, r2, #31
      palSetLine(LINE_B);
 8007df6:	bf4c      	ite	mi
 8007df8:	8337      	strhmi	r7, [r6, #24]
      palClearLine(LINE_B);
 8007dfa:	8377      	strhpl	r7, [r6, #26]
  chThdSleepMicroseconds(50);
 8007dfc:	f04f 0001 	mov.w	r0, #1
 8007e00:	bf58      	it	pl
 8007e02:	2001      	movpl	r0, #1
 8007e04:	f7fe f970 	bl	80060e8 <chThdSleep>
 8007e08:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8007e0a:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8007e0c:	f7fe f96c 	bl	80060e8 <chThdSleep>
 8007e10:	2001      	movs	r0, #1
 8007e12:	f7fe f969 	bl	80060e8 <chThdSleep>
 8007e16:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8007e1a:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(50);
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	f7fe f963 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007e22:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8007e26:	d1e3      	bne.n	8007df0 <_ZN23Adafruit_PWMServoDriver5read8Eh+0xcc>
  chThdSleepMicroseconds(50);
 8007e28:	2001      	movs	r0, #1
  palSetLine(LINE_B);
 8007e2a:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8007e2c:	f7fe f95c 	bl	80060e8 <chThdSleep>
 8007e30:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8007e32:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8007e34:	f7fe f958 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007e38:	2205      	movs	r2, #5
 8007e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palClearLine(LINE_A);
 8007e3e:	836c      	strh	r4, [r5, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007e40:	4630      	mov	r0, r6
  palSetLine(LINE_B);
 8007e42:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007e44:	f7fb f9f0 	bl	8003228 <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f7fe f94d 	bl	80060e8 <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7fb f9e7 	bl	8003228 <_pal_lld_setgroupmode>
  for (int i = 0; i < length; ++i)
 8007e5a:	45ca      	cmp	sl, r9
 8007e5c:	d1c4      	bne.n	8007de8 <_ZN23Adafruit_PWMServoDriver5read8Eh+0xc4>
  palSetLine(LINE_A);
 8007e5e:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  txBufferIndex = 0;
 8007e60:	4d1e      	ldr	r5, [pc, #120]	; (8007edc <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1b8>)
  palSetLine(LINE_A);
 8007e62:	2401      	movs	r4, #1
 8007e64:	831c      	strh	r4, [r3, #24]
  chThdSleepMicroseconds(50);
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7fe f93e 	bl	80060e8 <chThdSleep>
  palSetLine(LINE_B);
 8007e6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
 8007e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8007e72:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8007e74:	831a      	strh	r2, [r3, #24]
  chThdSleepMicroseconds(50);
 8007e76:	f7fe f937 	bl	80060e8 <chThdSleep>
  uint8_t txbuf[1]={addr};
 8007e7a:	aa08      	add	r2, sp, #32
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	f802 3d08 	strb.w	r3, [r2, #-8]!
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8007e82:	a907      	add	r1, sp, #28
 8007e84:	9401      	str	r4, [sp, #4]
 8007e86:	4623      	mov	r3, r4
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  txBufferIndex = 0;
 8007e8c:	2400      	movs	r4, #0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8007e8e:	9002      	str	r0, [sp, #8]
 8007e90:	9100      	str	r1, [sp, #0]
  txBufferIndex = 0;
 8007e92:	702c      	strb	r4, [r5, #0]
  txBufferLength = 0;
 8007e94:	4d15      	ldr	r5, [pc, #84]	; (8007eec <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c8>)
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8007e96:	4817      	ldr	r0, [pc, #92]	; (8007ef4 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1d0>)
  txBufferLength = 0;
 8007e98:	702c      	strb	r4, [r5, #0]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8007e9a:	2140      	movs	r1, #64	; 0x40
 8007e9c:	f7f9 fc50 	bl	8001740 <i2cMasterTransmitTimeout>
}
 8007ea0:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8007ea4:	b009      	add	sp, #36	; 0x24
 8007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(50);
 8007eaa:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8007eac:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8007eae:	f7fe f91b 	bl	80060e8 <chThdSleep>
 8007eb2:	4640      	mov	r0, r8
    palSetLine(LINE_A);
 8007eb4:	f8a4 8018 	strh.w	r8, [r4, #24]
  chThdSleepMicroseconds(50);
 8007eb8:	f7fe f916 	bl	80060e8 <chThdSleep>
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	f7fe f913 	bl	80060e8 <chThdSleep>
 8007ec2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8007ec6:	f8a4 801a 	strh.w	r8, [r4, #26]
  chThdSleepMicroseconds(50);
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7fe f90c 	bl	80060e8 <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8007ed0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8007ed4:	f47f af49 	bne.w	8007d6a <_ZN23Adafruit_PWMServoDriver5read8Eh+0x46>
 8007ed8:	e764      	b.n	8007da4 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x80>
 8007eda:	bf00      	nop
 8007edc:	200018bc 	.word	0x200018bc
 8007ee0:	20001899 	.word	0x20001899
 8007ee4:	2000189c 	.word	0x2000189c
 8007ee8:	40021c00 	.word	0x40021c00
 8007eec:	200018bd 	.word	0x200018bd
 8007ef0:	40022000 	.word	0x40022000
 8007ef4:	200009e0 	.word	0x200009e0

08007ef8 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>:
{
 8007ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efa:	4605      	mov	r5, r0
 8007efc:	b089      	sub	sp, #36	; 0x24
  freq *=
 8007efe:	ee10 0a10 	vmov	r0, s0
 8007f02:	f7f8 fb81 	bl	8000608 <__aeabi_f2d>
 8007f06:	a33b      	add	r3, pc, #236	; (adr r3, 8007ff4 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xfc>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 fbd4 	bl	80006b8 <__aeabi_dmul>
 8007f10:	f7f8 fe8c 	bl	8000c2c <__aeabi_d2f>
  prescaleval /= freq;
 8007f14:	eddf 7a34 	vldr	s15, [pc, #208]	; 8007fe8 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xf0>
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f18:	4e34      	ldr	r6, [pc, #208]	; (8007fec <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xf4>)
  prescaleval /= freq;
 8007f1a:	ee07 0a10 	vmov	s14, r0
 8007f1e:	ee87 7a87 	vdiv.f32	s14, s15, s14
      d};
 8007f22:	2400      	movs	r4, #0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  prescaleval -= 1;
 8007f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f30:	ee17 0a90 	vmov	r0, s15
 8007f34:	f7f8 fb68 	bl	8000608 <__aeabi_f2d>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ff0 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xf8>)
 8007f3c:	f7f8 fa06 	bl	800034c <__adddf3>
 8007f40:	ec41 0b10 	vmov	d0, r0, r1
 8007f44:	f000 f968 	bl	8008218 <floor>
  uint8_t oldmode = read8(PCA9685_MODE1);
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f4c:	ed8d 0b04 	vstr	d0, [sp, #16]
  uint8_t oldmode = read8(PCA9685_MODE1);
 8007f50:	f7ff fee8 	bl	8007d24 <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 8007f54:	f000 0c6f 	and.w	ip, r0, #111	; 0x6f
 8007f58:	f04c 0c10 	orr.w	ip, ip, #16
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f5c:	aa07      	add	r2, sp, #28
  uint8_t oldmode = read8(PCA9685_MODE1);
 8007f5e:	4605      	mov	r5, r0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f60:	e9cd 4400 	strd	r4, r4, [sp]
 8007f64:	4630      	mov	r0, r6
 8007f66:	9702      	str	r7, [sp, #8]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	2140      	movs	r1, #64	; 0x40
      d};
 8007f6c:	f88d c01d 	strb.w	ip, [sp, #29]
 8007f70:	f88d 401c 	strb.w	r4, [sp, #28]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f74:	f7f9 fbe4 	bl	8001740 <i2cMasterTransmitTimeout>
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f78:	ed9d 0b04 	vldr	d0, [sp, #16]
      d};
 8007f7c:	23fe      	movs	r3, #254	; 0xfe
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f7e:	ec51 0b10 	vmov	r0, r1, d0
      d};
 8007f82:	f88d 301c 	strb.w	r3, [sp, #28]
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f86:	f7f8 fe31 	bl	8000bec <__aeabi_d2uiz>
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f8a:	aa07      	add	r2, sp, #28
  uint8_t prescale = floor(prescaleval + 0.5);
 8007f8c:	f88d 001d 	strb.w	r0, [sp, #29]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007f90:	9702      	str	r7, [sp, #8]
 8007f92:	e9cd 4400 	strd	r4, r4, [sp]
 8007f96:	4630      	mov	r0, r6
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2140      	movs	r1, #64	; 0x40
 8007f9c:	f7f9 fbd0 	bl	8001740 <i2cMasterTransmitTimeout>
 8007fa0:	aa07      	add	r2, sp, #28
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	2140      	movs	r1, #64	; 0x40
 8007fa6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007faa:	9400      	str	r4, [sp, #0]
 8007fac:	4630      	mov	r0, r6
      d};
 8007fae:	f88d 501d 	strb.w	r5, [sp, #29]
 8007fb2:	f88d 401c 	strb.w	r4, [sp, #28]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007fb6:	f7f9 fbc3 	bl	8001740 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 8007fba:	2001      	movs	r0, #1
 8007fbc:	f7fe f894 	bl	80060e8 <chThdSleep>
  write8(PCA9685_MODE1,
 8007fc0:	f065 055f 	orn	r5, r5, #95	; 0x5f
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007fc4:	9702      	str	r7, [sp, #8]
 8007fc6:	e9cd 4400 	strd	r4, r4, [sp]
 8007fca:	aa07      	add	r2, sp, #28
 8007fcc:	4630      	mov	r0, r6
 8007fce:	2302      	movs	r3, #2
 8007fd0:	2140      	movs	r1, #64	; 0x40
      d};
 8007fd2:	f88d 501d 	strb.w	r5, [sp, #29]
 8007fd6:	f88d 401c 	strb.w	r4, [sp, #28]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8007fda:	f7f9 fbb1 	bl	8001740 <i2cMasterTransmitTimeout>
}
 8007fde:	b009      	add	sp, #36	; 0x24
 8007fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	45bebc20 	.word	0x45bebc20
 8007fec:	200009e0 	.word	0x200009e0
 8007ff0:	3fe00000 	.word	0x3fe00000
 8007ff4:	cccccccd 	.word	0xcccccccd
 8007ff8:	3feccccc 	.word	0x3feccccc

08007ffc <_Z10myi2cstartv>:

void myi2cstart()
{
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  //palSetLineMode(LINE_K1, PAL_MODE_OUTPUT_PUSHPULL);
  //palSetLineMode(LINE_K2, PAL_MODE_ALTERNATE(5));
  palSetLineMode(LINE_C, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
 8008000:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8008140 <_Z10myi2cstartv+0x144>
  palSetLineMode(LINE_F, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
  //palSetLineMode(LINE_A, PAL_MODE_ALTERNATE(4));
  //palSetLineMode(LINE_B, PAL_MODE_ALTERNATE(4));
  palSetLineMode(LINE_A, PAL_MODE_OUTPUT_OPENDRAIN);
 8008004:	4c46      	ldr	r4, [pc, #280]	; (8008120 <_Z10myi2cstartv+0x124>)
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8008006:	4f47      	ldr	r7, [pc, #284]	; (8008124 <_Z10myi2cstartv+0x128>)
    setPWMFreq(1000);
 8008008:	4e47      	ldr	r6, [pc, #284]	; (8008128 <_Z10myi2cstartv+0x12c>)
{
 800800a:	b087      	sub	sp, #28
  palSetLineMode(LINE_C, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
 800800c:	4640      	mov	r0, r8
 800800e:	2201      	movs	r2, #1
 8008010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008014:	f7fb f908 	bl	8003228 <_pal_lld_setgroupmode>
  palSetLineMode(LINE_F, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
 8008018:	2201      	movs	r2, #1
 800801a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800801e:	4843      	ldr	r0, [pc, #268]	; (800812c <_Z10myi2cstartv+0x130>)
 8008020:	f7fb f902 	bl	8003228 <_pal_lld_setgroupmode>
  palSetLineMode(LINE_A, PAL_MODE_OUTPUT_OPENDRAIN);
 8008024:	4620      	mov	r0, r4
 8008026:	2205      	movs	r2, #5
 8008028:	2101      	movs	r1, #1
 800802a:	f7fb f8fd 	bl	8003228 <_pal_lld_setgroupmode>
      d};
 800802e:	ad06      	add	r5, sp, #24
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_PUSHPULL);
 8008030:	4640      	mov	r0, r8
 8008032:	2201      	movs	r2, #1
 8008034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008038:	f7fb f8f6 	bl	8003228 <_pal_lld_setgroupmode>
  palSetLine(LINE_A);
 800803c:	f04f 0901 	mov.w	r9, #1
      d};
 8008040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  palSetLine(LINE_A);
 8008044:	f8a4 9018 	strh.w	r9, [r4, #24]
      d};
 8008048:	f825 3d04 	strh.w	r3, [r5, #-4]!
  position = 1;
 800804c:	4b38      	ldr	r3, [pc, #224]	; (8008130 <_Z10myi2cstartv+0x134>)
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800804e:	2400      	movs	r4, #0
 8008050:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  position = 1;
 8008054:	f04f 0a01 	mov.w	sl, #1
 8008058:	f04f 0b00 	mov.w	fp, #0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800805c:	462a      	mov	r2, r5
 800805e:	2140      	movs	r1, #64	; 0x40
 8008060:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8008064:	9400      	str	r4, [sp, #0]
 8008066:	4638      	mov	r0, r7
  position = 1;
 8008068:	e9c3 ab00 	strd	sl, fp, [r3]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800806c:	2302      	movs	r3, #2
 800806e:	f7f9 fb67 	bl	8001740 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 8008072:	4648      	mov	r0, r9
 8008074:	f7fe f838 	bl	80060e8 <chThdSleep>
    setPWMFreq(1000);
 8008078:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8008134 <_Z10myi2cstartv+0x138>
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ff3b 	bl	8007ef8 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>
  uint8_t oldmode = read8(PCA9685_MODE1);
 8008082:	4621      	mov	r1, r4
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff fe4d 	bl	8007d24 <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 800808a:	f000 0c6f 	and.w	ip, r0, #111	; 0x6f
  uint8_t oldmode = read8(PCA9685_MODE1);
 800808e:	4606      	mov	r6, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 8008090:	f04c 0c10 	orr.w	ip, ip, #16
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8008094:	462a      	mov	r2, r5
 8008096:	e9cd 4801 	strd	r4, r8, [sp, #4]
 800809a:	9400      	str	r4, [sp, #0]
 800809c:	4638      	mov	r0, r7
 800809e:	2302      	movs	r3, #2
 80080a0:	2140      	movs	r1, #64	; 0x40
      d};
 80080a2:	f88d c015 	strb.w	ip, [sp, #21]
 80080a6:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80080aa:	f7f9 fb49 	bl	8001740 <i2cMasterTransmitTimeout>
      d};
 80080ae:	f240 3cfe 	movw	ip, #1022	; 0x3fe
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80080b2:	462a      	mov	r2, r5
 80080b4:	e9cd 4801 	strd	r4, r8, [sp, #4]
 80080b8:	9400      	str	r4, [sp, #0]
 80080ba:	4638      	mov	r0, r7
 80080bc:	2302      	movs	r3, #2
 80080be:	2140      	movs	r1, #64	; 0x40
      d};
 80080c0:	f8ad c014 	strh.w	ip, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80080c4:	f7f9 fb3c 	bl	8001740 <i2cMasterTransmitTimeout>
 80080c8:	462a      	mov	r2, r5
 80080ca:	2302      	movs	r3, #2
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	e9cd 4801 	strd	r4, r8, [sp, #4]
 80080d2:	9400      	str	r4, [sp, #0]
 80080d4:	4638      	mov	r0, r7
      d};
 80080d6:	f88d 6015 	strb.w	r6, [sp, #21]
 80080da:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80080de:	f7f9 fb2f 	bl	8001740 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 80080e2:	4648      	mov	r0, r9
 80080e4:	f7fe f800 	bl	80060e8 <chThdSleep>
  write8(PCA9685_MODE1,
 80080e8:	f066 065f 	orn	r6, r6, #95	; 0x5f
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80080ec:	462a      	mov	r2, r5
 80080ee:	2302      	movs	r3, #2
 80080f0:	2140      	movs	r1, #64	; 0x40
 80080f2:	e9cd 4801 	strd	r4, r8, [sp, #4]
 80080f6:	9400      	str	r4, [sp, #0]
 80080f8:	4638      	mov	r0, r7
      d};
 80080fa:	f88d 6015 	strb.w	r6, [sp, #21]
 80080fe:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8008102:	f7f9 fb1d 	bl	8001740 <i2cMasterTransmitTimeout>
  // Adafruit_PWMServoDriver(0x40);
  pwm.begin();
  pwm.setPWMFreq(1600); // This is the maximum PWM frequency

  PAT9125init();
 8008106:	f7fe fd0f 	bl	8006b28 <_Z11PAT9125initv>
  chThdCreateStatic(PAT9125ELThd_wa, sizeof(PAT9125ELThd_wa),
 800810a:	9400      	str	r4, [sp, #0]
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <_Z10myi2cstartv+0x13c>)
 800810e:	480b      	ldr	r0, [pc, #44]	; (800813c <_Z10myi2cstartv+0x140>)
 8008110:	2289      	movs	r2, #137	; 0x89
 8008112:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8008116:	f7fd ff85 	bl	8006024 <chThdCreateStatic>
                    NORMALPRIO + 9, PAT9125ELThd, NULL);
}
 800811a:	b007      	add	sp, #28
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008120:	40022000 	.word	0x40022000
 8008124:	200009e0 	.word	0x200009e0
 8008128:	20001898 	.word	0x20001898
 800812c:	40020c00 	.word	0x40020c00
 8008130:	20001890 	.word	0x20001890
 8008134:	447a0000 	.word	0x447a0000
 8008138:	080067b5 	.word	0x080067b5
 800813c:	20001340 	.word	0x20001340
 8008140:	40021c00 	.word	0x40021c00

08008144 <_GLOBAL__sub_I_mydata>:
  _i2caddr = addr;
 8008144:	4b01      	ldr	r3, [pc, #4]	; (800814c <_GLOBAL__sub_I_mydata+0x8>)
 8008146:	2270      	movs	r2, #112	; 0x70
 8008148:	701a      	strb	r2, [r3, #0]

uint8_t pat9125_wr_reg_verify(uint8_t addr, uint8_t data)
{
  pat9125_wr_reg(addr, data);
  return pat9125_rd_reg(addr) == data;
}
 800814a:	4770      	bx	lr
 800814c:	20001898 	.word	0x20001898

08008150 <main>:
        on, on >> 8 & 0x0f, off, off >> 8 & 0x0f};
    i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
}

int main(void)
{
 8008150:	b510      	push	{r4, lr}
    while (true)
    {

        //g_rpm_1 = 1;
        //sprintf(tempStr, "%d", g_rpm_1);
        palToggleLine(LINE_LED_GREEN);
 8008152:	4c17      	ldr	r4, [pc, #92]	; (80081b0 <main+0x60>)
    halInit();
 8008154:	f7f8 fefc 	bl	8000f50 <halInit>
    chSysInit();
 8008158:	f7fd fcb6 	bl	8005ac8 <chSysInit>
    board_setup_all();
 800815c:	f7f8 fdb6 	bl	8000ccc <board_setup_all>
    i2cStart(&I2CD2, &i2cfg1);
 8008160:	4914      	ldr	r1, [pc, #80]	; (80081b4 <main+0x64>)
 8008162:	4815      	ldr	r0, [pc, #84]	; (80081b8 <main+0x68>)
 8008164:	f7f9 fade 	bl	8001724 <i2cStart>
    myi2cstart();
 8008168:	f7ff ff48 	bl	8007ffc <_Z10myi2cstartv>
    palSetLineMode(LINE_VL53L0X_I2C_SDA, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 800816c:	f240 2206 	movw	r2, #518	; 0x206
 8008170:	2101      	movs	r1, #1
 8008172:	4620      	mov	r0, r4
 8008174:	f7fb f858 	bl	8003228 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_VL53L0X_I2C_SCL, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8008178:	f240 2206 	movw	r2, #518	; 0x206
 800817c:	2102      	movs	r1, #2
 800817e:	4620      	mov	r0, r4
 8008180:	f7fb f852 	bl	8003228 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_C, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
 8008184:	2201      	movs	r2, #1
 8008186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800818a:	480c      	ldr	r0, [pc, #48]	; (80081bc <main+0x6c>)
 800818c:	f7fb f84c 	bl	8003228 <_pal_lld_setgroupmode>
    palSetLineMode(LINE_F, PAL_MODE_OUTPUT_PUSHPULL); //for 3.3V
 8008190:	2201      	movs	r2, #1
 8008192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008196:	480a      	ldr	r0, [pc, #40]	; (80081c0 <main+0x70>)
 8008198:	f7fb f846 	bl	8003228 <_pal_lld_setgroupmode>
        palToggleLine(LINE_LED_GREEN);
 800819c:	6963      	ldr	r3, [r4, #20]
 800819e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80081a2:	6163      	str	r3, [r4, #20]
        //     {setPWM(i, 10, 4000);
        //     chThdSleepMilliseconds(10);}
        uint8_t addr = LED0_ON_L + 4;
        uint8_t rxbuf[20];
        // i2cMasterTransmit(&I2CD2, 0x40, &addr, 1, rxbuf, 20);
        chThdSleepMilliseconds(500);
 80081a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80081a8:	f7fd ff9e 	bl	80060e8 <chThdSleep>
 80081ac:	e7f6      	b.n	800819c <main+0x4c>
 80081ae:	bf00      	nop
 80081b0:	40021400 	.word	0x40021400
 80081b4:	08008714 	.word	0x08008714
 80081b8:	200009e0 	.word	0x200009e0
 80081bc:	40021c00 	.word	0x40021c00
 80081c0:	40020c00 	.word	0x40020c00

080081c4 <_ZdlPv>:
  return chHeapAlloc(NULL, size);
}

void operator delete(void *ptr)
{
  chHeapFree(ptr);
 80081c4:	f7fe b982 	b.w	80064cc <chHeapFree>

080081c8 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4605      	mov	r5, r0
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80081cc:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 80081ce:	42a8      	cmp	r0, r5
 80081d0:	d005      	beq.n	80081de <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0x16>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 80081d2:	6804      	ldr	r4, [r0, #0]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80081d4:	f7ff fff6 	bl	80081c4 <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 80081d8:	42ac      	cmp	r4, r5
 80081da:	4620      	mov	r0, r4
 80081dc:	d1f9      	bne.n	80081d2 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0xa>
 80081de:	4628      	mov	r0, r5
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop

080081e4 <_GLOBAL__sub_I__Z16Param_getDefByIDj>:
}

/**
 * @brief ShellCommand definition for interfacing with this module
 */
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 80081e4:	b510      	push	{r4, lr}
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 80081e6:	2017      	movs	r0, #23
 80081e8:	f7fe fab8 	bl	800675c <Flash_SectorBegin>
	: _Node_alloc_type(), _M_node()
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x24>)
 80081ee:	4a07      	ldr	r2, [pc, #28]	; (800820c <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x28>)
static std::list<const Param_Definition_t *> params;
 80081f0:	4907      	ldr	r1, [pc, #28]	; (8008210 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x2c>)
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 80081f2:	6010      	str	r0, [r2, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 80081f4:	e9c3 3300 	strd	r3, r3, [r3]
	: _Node_alloc_type(), _M_node()
 80081f8:	2400      	movs	r4, #0
 80081fa:	609c      	str	r4, [r3, #8]
static std::list<const Param_Definition_t *> params;
 80081fc:	4618      	mov	r0, r3
 80081fe:	4a05      	ldr	r2, [pc, #20]	; (8008214 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x30>)
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 8008200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::list<const Param_Definition_t *> params;
 8008204:	f000 b890 	b.w	8008328 <__aeabi_atexit>
 8008208:	200018c8 	.word	0x200018c8
 800820c:	200018c4 	.word	0x200018c4
 8008210:	080081c9 	.word	0x080081c9
 8008214:	200018c0 	.word	0x200018c0

08008218 <floor>:
 8008218:	ec51 0b10 	vmov	r0, r1, d0
 800821c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 8008228:	2d13      	cmp	r5, #19
 800822a:	460c      	mov	r4, r1
 800822c:	460f      	mov	r7, r1
 800822e:	ee10 6a10 	vmov	r6, s0
 8008232:	dc1d      	bgt.n	8008270 <floor+0x58>
 8008234:	2d00      	cmp	r5, #0
 8008236:	db3d      	blt.n	80082b4 <floor+0x9c>
 8008238:	4b39      	ldr	r3, [pc, #228]	; (8008320 <floor+0x108>)
 800823a:	fa43 f805 	asr.w	r8, r3, r5
 800823e:	ea01 0308 	and.w	r3, r1, r8
 8008242:	4303      	orrs	r3, r0
 8008244:	d019      	beq.n	800827a <floor+0x62>
 8008246:	a334      	add	r3, pc, #208	; (adr r3, 8008318 <floor+0x100>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f87e 	bl	800034c <__adddf3>
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	f7f8 fcc0 	bl	8000bd8 <__aeabi_dcmpgt>
 8008258:	b3d0      	cbz	r0, 80082d0 <floor+0xb8>
 800825a:	2c00      	cmp	r4, #0
 800825c:	da04      	bge.n	8008268 <floor+0x50>
 800825e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008262:	fa43 f505 	asr.w	r5, r3, r5
 8008266:	442f      	add	r7, r5
 8008268:	ea27 0408 	bic.w	r4, r7, r8
 800826c:	2600      	movs	r6, #0
 800826e:	e02f      	b.n	80082d0 <floor+0xb8>
 8008270:	2d33      	cmp	r5, #51	; 0x33
 8008272:	dd06      	ble.n	8008282 <floor+0x6a>
 8008274:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008278:	d030      	beq.n	80082dc <floor+0xc4>
 800827a:	ec41 0b10 	vmov	d0, r0, r1
 800827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008282:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008286:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800828a:	fa28 f803 	lsr.w	r8, r8, r3
 800828e:	ea18 0f00 	tst.w	r8, r0
 8008292:	d0f2      	beq.n	800827a <floor+0x62>
 8008294:	a320      	add	r3, pc, #128	; (adr r3, 8008318 <floor+0x100>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 f857 	bl	800034c <__adddf3>
 800829e:	2200      	movs	r2, #0
 80082a0:	2300      	movs	r3, #0
 80082a2:	f7f8 fc99 	bl	8000bd8 <__aeabi_dcmpgt>
 80082a6:	b198      	cbz	r0, 80082d0 <floor+0xb8>
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	db28      	blt.n	80082fe <floor+0xe6>
 80082ac:	ea26 0608 	bic.w	r6, r6, r8
 80082b0:	463c      	mov	r4, r7
 80082b2:	e00d      	b.n	80082d0 <floor+0xb8>
 80082b4:	a318      	add	r3, pc, #96	; (adr r3, 8008318 <floor+0x100>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 f847 	bl	800034c <__adddf3>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	f7f8 fc89 	bl	8000bd8 <__aeabi_dcmpgt>
 80082c6:	b118      	cbz	r0, 80082d0 <floor+0xb8>
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	db0f      	blt.n	80082ec <floor+0xd4>
 80082cc:	2600      	movs	r6, #0
 80082ce:	4634      	mov	r4, r6
 80082d0:	4623      	mov	r3, r4
 80082d2:	4632      	mov	r2, r6
 80082d4:	ec43 2b10 	vmov	d0, r2, r3
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082dc:	ee10 2a10 	vmov	r2, s0
 80082e0:	460b      	mov	r3, r1
 80082e2:	f7f8 f833 	bl	800034c <__adddf3>
 80082e6:	ec41 0b10 	vmov	d0, r0, r1
 80082ea:	e7c8      	b.n	800827e <floor+0x66>
 80082ec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80082f0:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <floor+0x10c>)
 80082f2:	431e      	orrs	r6, r3
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	bf18      	it	ne
 80082f8:	4614      	movne	r4, r2
 80082fa:	2600      	movs	r6, #0
 80082fc:	e7e8      	b.n	80082d0 <floor+0xb8>
 80082fe:	2d14      	cmp	r5, #20
 8008300:	d008      	beq.n	8008314 <floor+0xfc>
 8008302:	2301      	movs	r3, #1
 8008304:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8008308:	fa03 f505 	lsl.w	r5, r3, r5
 800830c:	19ae      	adds	r6, r5, r6
 800830e:	bf28      	it	cs
 8008310:	18ff      	addcs	r7, r7, r3
 8008312:	e7cb      	b.n	80082ac <floor+0x94>
 8008314:	3701      	adds	r7, #1
 8008316:	e7c9      	b.n	80082ac <floor+0x94>
 8008318:	8800759c 	.word	0x8800759c
 800831c:	7e37e43c 	.word	0x7e37e43c
 8008320:	000fffff 	.word	0x000fffff
 8008324:	bff00000 	.word	0xbff00000

08008328 <__aeabi_atexit>:
 8008328:	460b      	mov	r3, r1
 800832a:	4601      	mov	r1, r0
 800832c:	4618      	mov	r0, r3
 800832e:	f000 b801 	b.w	8008334 <__cxa_atexit>
	...

08008334 <__cxa_atexit>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4c05      	ldr	r4, [pc, #20]	; (800834c <__cxa_atexit+0x18>)
 8008338:	4613      	mov	r3, r2
 800833a:	b12c      	cbz	r4, 8008348 <__cxa_atexit+0x14>
 800833c:	460a      	mov	r2, r1
 800833e:	4601      	mov	r1, r0
 8008340:	2002      	movs	r0, #2
 8008342:	f3af 8000 	nop.w
 8008346:	bd10      	pop	{r4, pc}
 8008348:	4620      	mov	r0, r4
 800834a:	e7fc      	b.n	8008346 <__cxa_atexit+0x12>
 800834c:	00000000 	.word	0x00000000

08008350 <memcpy>:
 8008350:	b510      	push	{r4, lr}
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	440a      	add	r2, r1
 8008356:	4291      	cmp	r1, r2
 8008358:	d100      	bne.n	800835c <memcpy+0xc>
 800835a:	bd10      	pop	{r4, pc}
 800835c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008364:	e7f7      	b.n	8008356 <memcpy+0x6>

08008366 <memset>:
 8008366:	4402      	add	r2, r0
 8008368:	4603      	mov	r3, r0
 800836a:	4293      	cmp	r3, r2
 800836c:	d100      	bne.n	8008370 <memset+0xa>
 800836e:	4770      	bx	lr
 8008370:	f803 1b01 	strb.w	r1, [r3], #1
 8008374:	e7f9      	b.n	800836a <memset+0x4>
