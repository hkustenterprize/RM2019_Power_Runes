
build/RM18A.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000309 	.word	0x08000309
 8000008:	0800030b 	.word	0x0800030b
 800000c:	0800030b 	.word	0x0800030b
 8000010:	0800030b 	.word	0x0800030b
 8000014:	0800030b 	.word	0x0800030b
 8000018:	0800030b 	.word	0x0800030b
 800001c:	0800030b 	.word	0x0800030b
 8000020:	0800030b 	.word	0x0800030b
 8000024:	0800030b 	.word	0x0800030b
 8000028:	0800030b 	.word	0x0800030b
 800002c:	08005c31 	.word	0x08005c31
 8000030:	0800030b 	.word	0x0800030b
 8000034:	0800030b 	.word	0x0800030b
 8000038:	0800030b 	.word	0x0800030b
 800003c:	0800030b 	.word	0x0800030b
 8000040:	0800030b 	.word	0x0800030b
 8000044:	0800030b 	.word	0x0800030b
 8000048:	0800030b 	.word	0x0800030b
 800004c:	0800030b 	.word	0x0800030b
 8000050:	0800030b 	.word	0x0800030b
 8000054:	0800030b 	.word	0x0800030b
 8000058:	0800195d 	.word	0x0800195d
 800005c:	08001995 	.word	0x08001995
 8000060:	080019cd 	.word	0x080019cd
 8000064:	08001a05 	.word	0x08001a05
 8000068:	08001a3d 	.word	0x08001a3d
 800006c:	0800239d 	.word	0x0800239d
 8000070:	080023c5 	.word	0x080023c5
 8000074:	080023f1 	.word	0x080023f1
 8000078:	0800241d 	.word	0x0800241d
 800007c:	08002449 	.word	0x08002449
 8000080:	08002471 	.word	0x08002471
 8000084:	0800249d 	.word	0x0800249d
 8000088:	08001dbd 	.word	0x08001dbd
 800008c:	08001ecd 	.word	0x08001ecd
 8000090:	08001fc5 	.word	0x08001fc5
 8000094:	08002019 	.word	0x08002019
 8000098:	0800206d 	.word	0x0800206d
 800009c:	08001a75 	.word	0x08001a75
 80000a0:	0800030b 	.word	0x0800030b
 80000a4:	0800461d 	.word	0x0800461d
 80000a8:	0800030b 	.word	0x0800030b
 80000ac:	08004681 	.word	0x08004681
 80000b0:	0800459d 	.word	0x0800459d
 80000b4:	080046e5 	.word	0x080046e5
 80000b8:	0800030b 	.word	0x0800030b
 80000bc:	0800030b 	.word	0x0800030b
 80000c0:	0800030b 	.word	0x0800030b
 80000c4:	08002a19 	.word	0x08002a19
 80000c8:	08002b0d 	.word	0x08002b0d
 80000cc:	0800030b 	.word	0x0800030b
 80000d0:	0800030b 	.word	0x0800030b
 80000d4:	08004aa9 	.word	0x08004aa9
 80000d8:	0800030b 	.word	0x0800030b
 80000dc:	0800030b 	.word	0x0800030b
 80000e0:	08001b25 	.word	0x08001b25
 80000e4:	0800030b 	.word	0x0800030b
 80000e8:	0800030b 	.word	0x0800030b
 80000ec:	08004749 	.word	0x08004749
 80000f0:	0800030b 	.word	0x0800030b
 80000f4:	0800030b 	.word	0x0800030b
 80000f8:	0800030b 	.word	0x0800030b
 80000fc:	080024c9 	.word	0x080024c9
 8000100:	0800030b 	.word	0x0800030b
 8000104:	0800030b 	.word	0x0800030b
 8000108:	0800030b 	.word	0x0800030b
 800010c:	0800030b 	.word	0x0800030b
 8000110:	0800030b 	.word	0x0800030b
 8000114:	0800030b 	.word	0x0800030b
 8000118:	0800030b 	.word	0x0800030b
 800011c:	0800030b 	.word	0x0800030b
 8000120:	080024f5 	.word	0x080024f5
 8000124:	0800251d 	.word	0x0800251d
 8000128:	08002549 	.word	0x08002549
 800012c:	08002575 	.word	0x08002575
 8000130:	080025a1 	.word	0x080025a1
 8000134:	0800030b 	.word	0x0800030b
 8000138:	0800030b 	.word	0x0800030b
 800013c:	080020b1 	.word	0x080020b1
 8000140:	080021a9 	.word	0x080021a9
 8000144:	080021fd 	.word	0x080021fd
 8000148:	08002251 	.word	0x08002251
 800014c:	08002e15 	.word	0x08002e15
 8000150:	080025c9 	.word	0x080025c9
 8000154:	080025f5 	.word	0x080025f5
 8000158:	08002621 	.word	0x08002621
 800015c:	08004c05 	.word	0x08004c05
 8000160:	0800030b 	.word	0x0800030b
 8000164:	0800030b 	.word	0x0800030b
 8000168:	0800030b 	.word	0x0800030b
 800016c:	0800030b 	.word	0x0800030b
 8000170:	0800030b 	.word	0x0800030b
 8000174:	0800030b 	.word	0x0800030b
 8000178:	0800030b 	.word	0x0800030b
 800017c:	0800030b 	.word	0x0800030b
 8000180:	0800030b 	.word	0x0800030b
 8000184:	0800030b 	.word	0x0800030b
 8000188:	08004809 	.word	0x08004809
 800018c:	08004d61 	.word	0x08004d61
 8000190:	0800030b 	.word	0x0800030b
 8000194:	0800030b 	.word	0x0800030b
 8000198:	0800030b 	.word	0x0800030b
 800019c:	0800030b 	.word	0x0800030b
 80001a0:	0800030b 	.word	0x0800030b
 80001a4:	0800030b 	.word	0x0800030b
 80001a8:	0800030b 	.word	0x0800030b
 80001ac:	0800030b 	.word	0x0800030b
 80001b0:	0800030b 	.word	0x0800030b
 80001b4:	0800030b 	.word	0x0800030b
 80001b8:	0800030b 	.word	0x0800030b
 80001bc:	0800030b 	.word	0x0800030b
 80001c0:	0800030b 	.word	0x0800030b
 80001c4:	0800030b 	.word	0x0800030b
 80001c8:	0800030b 	.word	0x0800030b
 80001cc:	0800030b 	.word	0x0800030b
 80001d0:	0800030b 	.word	0x0800030b
 80001d4:	0800030b 	.word	0x0800030b
 80001d8:	0800030b 	.word	0x0800030b
 80001dc:	0800030b 	.word	0x0800030b

Disassembly of section .text:

080001e8 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e8:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001ea:	4839      	ldr	r0, [pc, #228]	; (80002d0 <endfiniloop+0x6>)
                msr     MSP, r0
 80001ec:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001f0:	4838      	ldr	r0, [pc, #224]	; (80002d4 <endfiniloop+0xa>)
                msr     PSP, r0
 80001f2:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001f6:	4838      	ldr	r0, [pc, #224]	; (80002d8 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f8:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001fc:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 8000202:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 8000206:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 800020a:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 800020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000212:	6008      	str	r0, [r1, #0]
                dsb
 8000214:	f3bf 8f4f 	dsb	sy
                isb
 8000218:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800021c:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000220:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000224:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000228:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800022c:	6008      	str	r0, [r1, #0]
                dsb
 800022e:	f3bf 8f4f 	dsb	sy
                isb
 8000232:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000236:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800023a:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 800023e:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000242:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000246:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000248:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800024a:	f380 8814 	msr	CONTROL, r0
                isb
 800024e:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000252:	f000 f987 	bl	8000564 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000256:	f000 f8a5 	bl	80003a4 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800025a:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800025e:	491f      	ldr	r1, [pc, #124]	; (80002dc <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000260:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <endfiniloop+0x6>)

08000262 <msloop>:
msloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800026a:	e7fa      	bcc.n	8000262 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800026c:	491c      	ldr	r1, [pc, #112]	; (80002e0 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <endfiniloop+0xa>)

08000270 <psloop>:
psloop:
                cmp     r1, r2
 8000270:	4291      	cmp	r1, r2
                itt     lo
 8000272:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000274:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000278:	e7fa      	bcc.n	8000270 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800027a:	491a      	ldr	r1, [pc, #104]	; (80002e4 <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <endfiniloop+0x22>)

08000280 <dloop>:
dloop:
                cmp     r2, r3
 8000280:	429a      	cmp	r2, r3
                ittt    lo
 8000282:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000284:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000288:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800028c:	e7f8      	bcc.n	8000280 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 800028e:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000290:	4917      	ldr	r1, [pc, #92]	; (80002f0 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <endfiniloop+0x2a>)

08000294 <bloop>:
bloop:
                cmp     r1, r2
 8000294:	4291      	cmp	r1, r2
                itt     lo
 8000296:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000298:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800029c:	e7fa      	bcc.n	8000294 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800029e:	f000 f967 	bl	8000570 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80002a2:	f000 f961 	bl	8000568 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002a6:	4c14      	ldr	r4, [pc, #80]	; (80002f8 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 80002a8:	4d14      	ldr	r5, [pc, #80]	; (80002fc <endfiniloop+0x32>)

080002aa <initloop>:
initloop:
                cmp     r4, r5
 80002aa:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002ac:	da03      	bge.n	80002b6 <endinitloop>
                ldr     r1, [r4], #4
 80002ae:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b2:	4788      	blx	r1
                b       initloop
 80002b4:	e7f9      	b.n	80002aa <initloop>

080002b6 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002b6:	f005 ff93 	bl	80061e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002ba:	4c11      	ldr	r4, [pc, #68]	; (8000300 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 80002bc:	4d11      	ldr	r5, [pc, #68]	; (8000304 <endfiniloop+0x3a>)

080002be <finiloop>:
finiloop:
                cmp     r4, r5
 80002be:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002c0:	da03      	bge.n	80002ca <endfiniloop>
                ldr     r1, [r4], #4
 80002c2:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002c6:	4788      	blx	r1
                b       finiloop
 80002c8:	e7f9      	b.n	80002be <finiloop>

080002ca <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002ca:	f000 b94f 	b.w	800056c <__default_exit>
 80002ce:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80002d0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002d4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002d8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002dc:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002e0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002e4:	08006680 	.word	0x08006680
                ldr     r2, =_data_start
 80002e8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002ec:	20000808 	.word	0x20000808
                ldr     r1, =_bss_start
 80002f0:	20000808 	.word	0x20000808
                ldr     r2, =_bss_end
 80002f4:	20001884 	.word	0x20001884
                ldr     r4, =__init_array_start
 80002f8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002fc:	080001e8 	.word	0x080001e8
                ldr     r4, =__fini_array_start
 8000300:	080001e8 	.word	0x080001e8
                ldr     r5, =__fini_array_end
 8000304:	080001e8 	.word	0x080001e8

08000308 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000308:	e76e      	b.n	80001e8 <_crt0_entry>

0800030a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800030a:	f000 f800 	bl	800030e <_unhandled_exception>

0800030e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800030e:	e7fe      	b.n	800030e <_unhandled_exception>

08000310 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 8000314:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000318:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 800031c:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800031e:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 8000320:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000328 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000328:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 800032a:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800032e:	4628      	mov	r0, r5
                blx     r4
 8000330:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 8000332:	2000      	movs	r0, #0
                bl      chThdExit
 8000334:	f005 f9ea 	bl	800570c <chThdExit>

08000338 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000338:	f005 f92e 	bl	8005598 <chSchDoReschedule>

0800033c <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033c:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 800033e:	e7fe      	b.n	800033e <_port_exit_from_isr+0x2>

08000340 <board_setup_all>:
    // enable interrupt from the user button (normal high)
    // palEnableLineEvent(LINE_USER_BUTTON, PAL_EVENT_MODE_FALLING_EDGE);
};

void board_setup_all(void)
{
 8000340:	b508      	push	{r3, lr}
     */
    static inline void CRC32_init(void)
    {
//enable CRC clock
#ifdef STM32F4XX
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <board_setup_all+0x48>)
        (void)RCC->APB1ENR;
        CRC_CR |= CRC_CR_RESET;
 8000344:	4911      	ldr	r1, [pc, #68]	; (800038c <board_setup_all+0x4c>)
        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN_Msk;
 8000346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CRC32_init();
    DR16_initDBus(&UARTD1);
 8000348:	4811      	ldr	r0, [pc, #68]	; (8000390 <board_setup_all+0x50>)
 800034a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800034e:	631a      	str	r2, [r3, #48]	; 0x30
        (void)RCC->APB1ENR;
 8000350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        CRC_CR |= CRC_CR_RESET;
 8000352:	680b      	ldr	r3, [r1, #0]
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	600b      	str	r3, [r1, #0]
 800035a:	f005 fcab 	bl	8005cb4 <DR16_initDBus>
    palSetLineMode(LINE_OLED_5_SCLK, PAL_MODE_ALTERNATE(5));
 800035e:	f240 2282 	movw	r2, #642	; 0x282
 8000362:	2108      	movs	r1, #8
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <board_setup_all+0x54>)
 8000366:	f002 fa99 	bl	800289c <_pal_lld_setgroupmode>
    palSetLineMode(LINE_OLED_6_MOSI, PAL_MODE_ALTERNATE(5));
 800036a:	f240 2282 	movw	r2, #642	; 0x282
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <board_setup_all+0x58>)
 8000372:	f002 fa93 	bl	800289c <_pal_lld_setgroupmode>
    spiStart(&SPID1, &SPI1_Config);
 8000376:	4909      	ldr	r1, [pc, #36]	; (800039c <board_setup_all+0x5c>)
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <board_setup_all+0x60>)
 800037a:	f000 ff99 	bl	80012b0 <spiStart>
    setup_SPI1();

#ifndef SHELL_SD
    setup_USB();
#endif //SHELL_USE_USB
};
 800037e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup_USB();
 8000382:	f005 bd03 	b.w	8005d8c <setup_USB>
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800
 800038c:	40023008 	.word	0x40023008
 8000390:	20000b78 	.word	0x20000b78
 8000394:	40020400 	.word	0x40020400
 8000398:	40020000 	.word	0x40020000
 800039c:	080062d8 	.word	0x080062d8
 80003a0:	20000a48 	.word	0x20000a48

080003a4 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003a4:	4a4e      	ldr	r2, [pc, #312]	; (80004e0 <__early_init+0x13c>)
  gpiop->OTYPER  = config->otyper;
 80003a6:	484f      	ldr	r0, [pc, #316]	; (80004e4 <__early_init+0x140>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003a8:	6913      	ldr	r3, [r2, #16]
 80003aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80003ae:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003b2:	6113      	str	r3, [r2, #16]
 80003b4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80003b6:	4d4c      	ldr	r5, [pc, #304]	; (80004e8 <__early_init+0x144>)
  gpiop->OSPEEDR = config->ospeedr;
 80003b8:	4e4c      	ldr	r6, [pc, #304]	; (80004ec <__early_init+0x148>)
  gpiop->OTYPER  = config->otyper;
 80003ba:	4c4d      	ldr	r4, [pc, #308]	; (80004f0 <__early_init+0x14c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80003bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80003c0:	f023 0301 	bic.w	r3, r3, #1
 80003c4:	6113      	str	r3, [r2, #16]
 80003c6:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80003c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
 80003ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6513      	str	r3, [r2, #80]	; 0x50
 80003d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80003d6:	4947      	ldr	r1, [pc, #284]	; (80004f4 <__early_init+0x150>)
 80003d8:	2300      	movs	r3, #0
  gpiop->PUPDR   = config->pupdr;
 80003da:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  gpiop->OTYPER  = config->otyper;
 80003de:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003e0:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80003e2:	60ea      	str	r2, [r5, #12]
  gpiop->ODR     = config->odr;
 80003e4:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 80003e8:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
  gpiop->ODR     = config->odr;
 80003ec:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80003ee:	622a      	str	r2, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <__early_init+0x154>)
 80003f2:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80003f4:	4a41      	ldr	r2, [pc, #260]	; (80004fc <__early_init+0x158>)
 80003f6:	602a      	str	r2, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80003f8:	4d41      	ldr	r5, [pc, #260]	; (8000500 <__early_init+0x15c>)
  gpiop->OTYPER  = config->otyper;
 80003fa:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80003fc:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80003fe:	f244 0520 	movw	r5, #16416	; 0x4020
 8000402:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8000404:	f64f 75df 	movw	r5, #65503	; 0xffdf
 8000408:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800040a:	4d3e      	ldr	r5, [pc, #248]	; (8000504 <__early_init+0x160>)
 800040c:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800040e:	f44f 0519 	mov.w	r5, #10027008	; 0x990000
 8000412:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000414:	4d3c      	ldr	r5, [pc, #240]	; (8000508 <__early_init+0x164>)
 8000416:	6025      	str	r5, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000418:	f04f 35aa 	mov.w	r5, #2863311530	; 0xaaaaaaaa
  gpiop->AFRH    = config->afrh;
 800041c:	4c3b      	ldr	r4, [pc, #236]	; (800050c <__early_init+0x168>)
  gpiop->OTYPER  = config->otyper;
 800041e:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000420:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000422:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 8000424:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000426:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000428:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800042a:	4c39      	ldr	r4, [pc, #228]	; (8000510 <__early_init+0x16c>)
 800042c:	6004      	str	r4, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800042e:	4839      	ldr	r0, [pc, #228]	; (8000514 <__early_init+0x170>)
  gpiop->OTYPER  = config->otyper;
 8000430:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000432:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000434:	4838      	ldr	r0, [pc, #224]	; (8000518 <__early_init+0x174>)
 8000436:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 8000438:	4838      	ldr	r0, [pc, #224]	; (800051c <__early_init+0x178>)
  gpiop->ODR     = config->odr;
 800043a:	614e      	str	r6, [r1, #20]
  gpiop->OTYPER  = config->otyper;
 800043c:	f102 52ab 	add.w	r2, r2, #358612992	; 0x15600000
  gpiop->AFRL    = config->afrl;
 8000440:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8000442:	2077      	movs	r0, #119	; 0x77
 8000444:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8000446:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
  gpiop->MODER   = config->moder;
 800044a:	4835      	ldr	r0, [pc, #212]	; (8000520 <__early_init+0x17c>)
 800044c:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800044e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000452:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000454:	4933      	ldr	r1, [pc, #204]	; (8000524 <__early_init+0x180>)
 8000456:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000458:	4933      	ldr	r1, [pc, #204]	; (8000528 <__early_init+0x184>)
 800045a:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800045c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8000460:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000462:	4932      	ldr	r1, [pc, #200]	; (800052c <__early_init+0x188>)
 8000464:	6211      	str	r1, [r2, #32]
  gpiop->OTYPER  = config->otyper;
 8000466:	4c32      	ldr	r4, [pc, #200]	; (8000530 <__early_init+0x18c>)
  gpiop->AFRH    = config->afrh;
 8000468:	4932      	ldr	r1, [pc, #200]	; (8000534 <__early_init+0x190>)
 800046a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 800046c:	f244 0703 	movw	r7, #16387	; 0x4003
  gpiop->MODER   = config->moder;
 8000470:	4931      	ldr	r1, [pc, #196]	; (8000538 <__early_init+0x194>)
 8000472:	6011      	str	r1, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000474:	6067      	str	r7, [r4, #4]
  gpiop->ODR     = config->odr;
 8000476:	f64b 77ff 	movw	r7, #49151	; 0xbfff
  gpiop->OSPEEDR = config->ospeedr;
 800047a:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800047c:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 800047e:	6167      	str	r7, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000480:	4f2e      	ldr	r7, [pc, #184]	; (800053c <__early_init+0x198>)
 8000482:	6227      	str	r7, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000484:	2755      	movs	r7, #85	; 0x55
 8000486:	6267      	str	r7, [r4, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8000488:	482d      	ldr	r0, [pc, #180]	; (8000540 <__early_init+0x19c>)
  gpiop->MODER   = config->moder;
 800048a:	4f2e      	ldr	r7, [pc, #184]	; (8000544 <__early_init+0x1a0>)
 800048c:	6027      	str	r7, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800048e:	f44f 74ff 	mov.w	r4, #510	; 0x1fe
 8000492:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000494:	4c2c      	ldr	r4, [pc, #176]	; (8000548 <__early_init+0x1a4>)
 8000496:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000498:	4c2c      	ldr	r4, [pc, #176]	; (800054c <__early_init+0x1a8>)
 800049a:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 800049c:	f64f 6401 	movw	r4, #65025	; 0xfe01
 80004a0:	6144      	str	r4, [r0, #20]
  gpiop->AFRH    = config->afrh;
 80004a2:	4c2b      	ldr	r4, [pc, #172]	; (8000550 <__early_init+0x1ac>)
  gpiop->AFRL    = config->afrl;
 80004a4:	6203      	str	r3, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 80004a6:	492b      	ldr	r1, [pc, #172]	; (8000554 <__early_init+0x1b0>)
  gpiop->AFRH    = config->afrh;
 80004a8:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80004aa:	4c2b      	ldr	r4, [pc, #172]	; (8000558 <__early_init+0x1b4>)
 80004ac:	6004      	str	r4, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80004ae:	482b      	ldr	r0, [pc, #172]	; (800055c <__early_init+0x1b8>)
  gpiop->OTYPER  = config->otyper;
 80004b0:	604b      	str	r3, [r1, #4]
 80004b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 80004b6:	6088      	str	r0, [r1, #8]
  gpiop->AFRL    = config->afrl;
 80004b8:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
  gpiop->PUPDR   = config->pupdr;
 80004bc:	60cb      	str	r3, [r1, #12]
  gpiop->ODR     = config->odr;
 80004be:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80004c0:	6208      	str	r0, [r1, #32]
  gpiop->MODER   = config->moder;
 80004c2:	f242 5050 	movw	r0, #9552	; 0x2550
  gpiop->AFRH    = config->afrh;
 80004c6:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80004c8:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 80004ca:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80004cc:	6095      	str	r5, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80004ce:	60d3      	str	r3, [r2, #12]
  gpiop->ODR     = config->odr;
 80004d0:	6156      	str	r6, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80004d2:	6213      	str	r3, [r2, #32]

  stm32_gpio_init();
  stm32_clock_init();
}
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
  gpiop->AFRH    = config->afrh;
 80004d6:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80004d8:	6013      	str	r3, [r2, #0]
  stm32_clock_init();
 80004da:	f001 bbf5 	b.w	8001cc8 <stm32_clock_init>
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40020800 	.word	0x40020800
 80004e8:	40020000 	.word	0x40020000
 80004ec:	bffeeaea 	.word	0xbffeeaea
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	000aaa00 	.word	0x000aaa00
 80004fc:	2aa0b000 	.word	0x2aa0b000
 8000500:	afbfeaea 	.word	0xafbfeaea
 8000504:	70005000 	.word	0x70005000
 8000508:	0a148484 	.word	0x0a148484
 800050c:	000ccccc 	.word	0x000ccccc
 8000510:	02aa0000 	.word	0x02aa0000
 8000514:	aaaaaabf 	.word	0xaaaaaabf
 8000518:	00051400 	.word	0x00051400
 800051c:	07700c99 	.word	0x07700c99
 8000520:	000a282a 	.word	0x000a282a
 8000524:	aaaaabaa 	.word	0xaaaaabaa
 8000528:	00014005 	.word	0x00014005
 800052c:	85500088 	.word	0x85500088
 8000530:	40021400 	.word	0x40021400
 8000534:	00050008 	.word	0x00050008
 8000538:	0242a90a 	.word	0x0242a90a
 800053c:	55000044 	.word	0x55000044
 8000540:	40021800 	.word	0x40021800
 8000544:	100aa00a 	.word	0x100aa00a
 8000548:	aeaaaaaa 	.word	0xaeaaaaaa
 800054c:	10040000 	.word	0x10040000
 8000550:	08000080 	.word	0x08000080
 8000554:	40021c00 	.word	0x40021c00
 8000558:	24095554 	.word	0x24095554
 800055c:	aaaaaaaf 	.word	0xaaaaaaaf

08000560 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__late_init>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800056c:	e7fe      	b.n	800056c <__default_exit>
 800056e:	bf00      	nop

08000570 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	4d13      	ldr	r5, [pc, #76]	; (80005c0 <__init_ram_areas+0x50>)
 8000574:	f105 0680 	add.w	r6, r5, #128	; 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000578:	e955 0403 	ldrd	r0, r4, [r5, #-12]
 800057c:	42a0      	cmp	r0, r4
    uint32_t *tp = rap->init_text_area;
 800057e:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8000582:	d20d      	bcs.n	80005a0 <__init_ram_areas+0x30>
 8000584:	3a04      	subs	r2, #4
 8000586:	4603      	mov	r3, r0
      *p = *tp;
 8000588:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800058c:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->clear_area) {
 8000590:	42a3      	cmp	r3, r4
 8000592:	d3f9      	bcc.n	8000588 <__init_ram_areas+0x18>
 8000594:	43c3      	mvns	r3, r0
 8000596:	441c      	add	r4, r3
 8000598:	f024 0403 	bic.w	r4, r4, #3
 800059c:	3404      	adds	r4, #4
 800059e:	4420      	add	r0, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80005a0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80005a4:	4283      	cmp	r3, r0
 80005a6:	d907      	bls.n	80005b8 <__init_ram_areas+0x48>
      *p = 0;
 80005a8:	43c2      	mvns	r2, r0
 80005aa:	441a      	add	r2, r3
 80005ac:	f022 0203 	bic.w	r2, r2, #3
 80005b0:	3204      	adds	r2, #4
 80005b2:	2100      	movs	r1, #0
 80005b4:	f005 fe87 	bl	80062c6 <memset>
 80005b8:	3510      	adds	r5, #16
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80005ba:	42b5      	cmp	r5, r6
 80005bc:	d1dc      	bne.n	8000578 <__init_ram_areas+0x8>
#endif
}
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	080062f8 	.word	0x080062f8

080005c4 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80005c4:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 80005c6:	f001 fb35 	bl	8001c34 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80005ca:	f002 f923 	bl	8002814 <_pal_lld_init>
#else
  palInit(&pal_default_config);
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 80005ce:	f000 fbb5 	bl	8000d3c <adcInit>
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 80005d2:	f000 fbc1 	bl	8000d58 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 80005d6:	f000 fbd5 	bl	8000d84 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 80005da:	f000 fc09 	bl	8000df0 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80005de:	f000 fc3b 	bl	8000e58 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80005e2:	f000 fe5d 	bl	80012a0 <spiInit>
#endif
#if (HAL_USE_TRNG == TRUE) || defined(__DOXYGEN__)
  trngInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 80005e6:	f000 fe71 	bl	80012cc <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 80005ea:	f000 fe89 	bl	8001300 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 80005ee:	f000 fce5 	bl	8000fbc <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80005f2:	f7ff ffb5 	bl	8000560 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 80005f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 80005fa:	f000 b801 	b.w	8000600 <stInit>
 80005fe:	bf00      	nop

08000600 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8000600:	f003 bfe2 	b.w	80045c8 <st_lld_init>

08000604 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8000608:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800060a:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800060c:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800060e:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000610:	60da      	str	r2, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 8000612:	4770      	bx	lr

08000614 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000624:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8000626:	4770      	bx	lr

08000628 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 8000628:	b470      	push	{r4, r5, r6}
 800062a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800062e:	3304      	adds	r3, #4
  ibqp->suspended = suspended;
 8000630:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 8000632:	9905      	ldr	r1, [sp, #20]
  ibqp->bsize     = size + sizeof (size_t);
 8000634:	61c3      	str	r3, [r0, #28]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000636:	fb05 2603 	mla	r6, r5, r3, r2
  ibqp->bcounter  = 0;
 800063a:	2300      	movs	r3, #0
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800063c:	6186      	str	r6, [r0, #24]
  ibqp->bn        = n;
 800063e:	6205      	str	r5, [r0, #32]
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
  ibqp->link      = link;
 8000640:	e9c0 410c 	strd	r4, r1, [r0, #48]	; 0x30
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8000644:	e9c0 0000 	strd	r0, r0, [r0]
  ibqp->bwrptr    = bp;
 8000648:	e9c0 2204 	strd	r2, r2, [r0, #16]
  ibqp->buffers   = bp;
 800064c:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 800064e:	60c3      	str	r3, [r0, #12]
  ibqp->top       = NULL;
 8000650:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 8000654:	bc70      	pop	{r4, r5, r6}
 8000656:	4770      	bx	lr

08000658 <ibqResetI>:
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
  ibqp->brdptr    = ibqp->buffers;
 8000658:	6a41      	ldr	r1, [r0, #36]	; 0x24
  ibqp->bcounter  = 0;
 800065a:	2200      	movs	r2, #0
  ibqp->bwrptr    = ibqp->buffers;
 800065c:	e9c0 1104 	strd	r1, r1, [r0, #16]
  ibqp->bcounter  = 0;
 8000660:	60c2      	str	r2, [r0, #12]
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
 8000662:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000666:	f06f 0101 	mvn.w	r1, #1
 800066a:	f005 b8bf 	b.w	80057ec <chThdDequeueAllI>
 800066e:	bf00      	nop

08000670 <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8000670:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8000674:	4293      	cmp	r3, r2
 8000676:	d001      	beq.n	800067c <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8000678:	1d18      	adds	r0, r3, #4
}
 800067a:	4770      	bx	lr
  if (ibqIsFullI(ibqp)) {
 800067c:	68c2      	ldr	r2, [r0, #12]
 800067e:	2a00      	cmp	r2, #0
 8000680:	d0fa      	beq.n	8000678 <ibqGetEmptyBufferI+0x8>
    return NULL;
 8000682:	2000      	movs	r0, #0
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <ibqPostFullBufferI>:

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8000688:	6903      	ldr	r3, [r0, #16]
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 800068a:	b410      	push	{r4}

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 800068c:	6984      	ldr	r4, [r0, #24]
  *((size_t *)ibqp->bwrptr) = size;
 800068e:	6019      	str	r1, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8000690:	69c1      	ldr	r1, [r0, #28]
  ibqp->bcounter++;
 8000692:	68c2      	ldr	r2, [r0, #12]
  ibqp->bwrptr += ibqp->bsize;
 8000694:	440b      	add	r3, r1
  if (ibqp->bwrptr >= ibqp->btop) {
 8000696:	42a3      	cmp	r3, r4
  ibqp->bwrptr += ibqp->bsize;
 8000698:	6103      	str	r3, [r0, #16]
  ibqp->bcounter++;
 800069a:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 800069e:	bf28      	it	cs
 80006a0:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  ibqp->bcounter++;
 80006a2:	60c2      	str	r2, [r0, #12]
    ibqp->bwrptr = ibqp->buffers;
 80006a4:	bf28      	it	cs
 80006a6:	6103      	strcs	r3, [r0, #16]
  chThdDequeueNextI(tqp, msg);
 80006a8:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 80006aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ae:	f005 b88d 	b.w	80057cc <chThdDequeueNextI>
 80006b2:	bf00      	nop

080006b4 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 80006b4:	b570      	push	{r4, r5, r6, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80006b6:	2320      	movs	r3, #32
 80006b8:	4604      	mov	r4, r0
 80006ba:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 80006be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006c0:	b1e3      	cbz	r3, 80006fc <ibqGetTimeout+0x48>
 80006c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 80006c4:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 80006c8:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d311      	bcc.n	80006f2 <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 80006ce:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 80006d2:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 80006d4:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 80006d6:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 80006d8:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 80006da:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 80006dc:	bf24      	itt	cs
 80006de:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80006e0:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 80006e2:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 80006e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 80006e6:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 80006e8:	2200      	movs	r2, #0
 80006ea:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 80006ec:	b10b      	cbz	r3, 80006f2 <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 80006ee:	4620      	mov	r0, r4
 80006f0:	4798      	blx	r3
 80006f2:	2300      	movs	r3, #0
 80006f4:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
}
 80006f8:	4628      	mov	r0, r5
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	460e      	mov	r6, r1
 80006fe:	e005      	b.n	800070c <ibqGetTimeout+0x58>
    if (ibqp->suspended) {
 8000700:	7a23      	ldrb	r3, [r4, #8]
 8000702:	b97b      	cbnz	r3, 8000724 <ibqGetTimeout+0x70>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000704:	f005 f84e 	bl	80057a4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000708:	1e05      	subs	r5, r0, #0
 800070a:	dbf2      	blt.n	80006f2 <ibqGetTimeout+0x3e>
  while (ibqIsEmptyI(ibqp)) {
 800070c:	68e3      	ldr	r3, [r4, #12]
 800070e:	4631      	mov	r1, r6
 8000710:	4620      	mov	r0, r4
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f4      	beq.n	8000700 <ibqGetTimeout+0x4c>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8000716:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8000718:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800071a:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800071c:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800071e:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 8000722:	e7cf      	b.n	80006c4 <ibqGetTimeout+0x10>
      return MSG_RESET;
 8000724:	f06f 0501 	mvn.w	r5, #1
 8000728:	e7e3      	b.n	80006f2 <ibqGetTimeout+0x3e>
 800072a:	bf00      	nop

0800072c <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 800072c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000730:	4604      	mov	r4, r0
 8000732:	460e      	mov	r6, r1
 8000734:	4617      	mov	r7, r2
 8000736:	4699      	mov	r9, r3
 8000738:	f04f 0a20 	mov.w	sl, #32
 800073c:	f38a 8811 	msr	BASEPRI, sl
  size_t r = 0;
 8000740:	2500      	movs	r5, #0
  ibqp->ptr = NULL;
 8000742:	46a8      	mov	r8, r5

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8000744:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000746:	2900      	cmp	r1, #0
 8000748:	d046      	beq.n	80007d8 <ibqReadTimeout+0xac>
 800074a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
    if (size > (n - r)) {
 800074c:	eba7 0b05 	sub.w	fp, r7, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8000750:	1a5b      	subs	r3, r3, r1
 8000752:	459b      	cmp	fp, r3
 8000754:	bf28      	it	cs
 8000756:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000758:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800075c:	d948      	bls.n	80007f0 <ibqReadTimeout+0xc4>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 800075e:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8000762:	4633      	mov	r3, r6
 8000764:	f8d1 e000 	ldr.w	lr, [r1]
 8000768:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800076c:	6888      	ldr	r0, [r1, #8]
 800076e:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8000772:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000776:	3110      	adds	r1, #16
 8000778:	4291      	cmp	r1, r2
 800077a:	f8c3 e000 	str.w	lr, [r3]
 800077e:	f8c3 c004 	str.w	ip, [r3, #4]
 8000782:	6098      	str	r0, [r3, #8]
 8000784:	f103 0310 	add.w	r3, r3, #16
 8000788:	d1ec      	bne.n	8000764 <ibqReadTimeout+0x38>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800078a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800078c:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800078e:	3640      	adds	r6, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8000790:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000792:	62a3      	str	r3, [r4, #40]	; 0x28
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8000794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000796:	429a      	cmp	r2, r3
 8000798:	d811      	bhi.n	80007be <ibqReadTimeout+0x92>
  if (ibqp->brdptr >= ibqp->btop) {
 800079a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 800079e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 80007a0:	68e2      	ldr	r2, [r4, #12]
  ibqp->ptr = NULL;
 80007a2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 80007a6:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 80007a8:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 80007aa:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 80007ac:	bf24      	itt	cs
 80007ae:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80007b0:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 80007b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 80007b4:	3a01      	subs	r2, #1
 80007b6:	60e2      	str	r2, [r4, #12]
  if (ibqp->notify != NULL) {
 80007b8:	b10b      	cbz	r3, 80007be <ibqReadTimeout+0x92>
    ibqp->notify(ibqp);
 80007ba:	4620      	mov	r0, r4
 80007bc:	4798      	blx	r3
 80007be:	f388 8811 	msr	BASEPRI, r8
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 80007c2:	42bd      	cmp	r5, r7
 80007c4:	d221      	bcs.n	800080a <ibqReadTimeout+0xde>
 80007c6:	f38a 8811 	msr	BASEPRI, sl
 80007ca:	e7bb      	b.n	8000744 <ibqReadTimeout+0x18>
    if (ibqp->suspended) {
 80007cc:	7a23      	ldrb	r3, [r4, #8]
 80007ce:	b9cb      	cbnz	r3, 8000804 <ibqReadTimeout+0xd8>
 80007d0:	f004 ffe8 	bl	80057a4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80007d4:	2800      	cmp	r0, #0
 80007d6:	db15      	blt.n	8000804 <ibqReadTimeout+0xd8>
  while (ibqIsEmptyI(ibqp)) {
 80007d8:	68e3      	ldr	r3, [r4, #12]
 80007da:	4649      	mov	r1, r9
 80007dc:	4620      	mov	r0, r4
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f4      	beq.n	80007cc <ibqReadTimeout+0xa0>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007e2:	6961      	ldr	r1, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80007e4:	680b      	ldr	r3, [r1, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007e6:	3104      	adds	r1, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80007e8:	440b      	add	r3, r1
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80007ea:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 80007ee:	e7ad      	b.n	800074c <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 80007f0:	4630      	mov	r0, r6
 80007f2:	465a      	mov	r2, fp
 80007f4:	f005 fd5c 	bl	80062b0 <memcpy>
      ibqp->ptr += size;
 80007f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007fa:	445b      	add	r3, fp
      r         += size;
 80007fc:	445d      	add	r5, fp
      bp        += size;
 80007fe:	445e      	add	r6, fp
      ibqp->ptr += size;
 8000800:	62a3      	str	r3, [r4, #40]	; 0x28
 8000802:	e7c7      	b.n	8000794 <ibqReadTimeout+0x68>
 8000804:	2300      	movs	r3, #0
 8000806:	f383 8811 	msr	BASEPRI, r3
      return r;
    }
    osalSysLock();
  }
}
 800080a:	4628      	mov	r0, r5
 800080c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000810 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 8000810:	b470      	push	{r4, r5, r6}
 8000812:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000816:	3304      	adds	r3, #4
  obqp->suspended = suspended;
 8000818:	7201      	strb	r1, [r0, #8]
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 800081a:	9905      	ldr	r1, [sp, #20]
  obqp->bsize     = size + sizeof (size_t);
 800081c:	61c3      	str	r3, [r0, #28]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800081e:	fb04 2603 	mla	r6, r4, r3, r2
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
 8000822:	2300      	movs	r3, #0
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8000824:	6186      	str	r6, [r0, #24]
  obqp->bcounter  = n;
 8000826:	60c4      	str	r4, [r0, #12]
  obqp->bn        = n;
 8000828:	6204      	str	r4, [r0, #32]
  obqp->top       = NULL;
  obqp->notify    = onfy;
  obqp->link      = link;
 800082a:	e9c0 510c 	strd	r5, r1, [r0, #48]	; 0x30
 800082e:	e9c0 0000 	strd	r0, r0, [r0]
  obqp->bwrptr    = bp;
 8000832:	e9c0 2204 	strd	r2, r2, [r0, #16]
  obqp->buffers   = bp;
 8000836:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top       = NULL;
 8000838:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 800083c:	bc70      	pop	{r4, r5, r6}
 800083e:	4770      	bx	lr

08000840 <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8000840:	b410      	push	{r4}

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
  obqp->brdptr    = obqp->buffers;
 8000842:	e9d0 4108 	ldrd	r4, r1, [r0, #32]
  obqp->bwrptr    = obqp->buffers;
  obqp->ptr       = NULL;
 8000846:	2200      	movs	r2, #0
  obqp->bcounter  = bqSizeX(obqp);
 8000848:	60c4      	str	r4, [r0, #12]
  obqp->bwrptr    = obqp->buffers;
 800084a:	e9c0 1104 	strd	r1, r1, [r0, #16]
  obqp->top       = NULL;
 800084e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  chThdDequeueAllI(tqp, msg);
 8000852:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8000856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800085a:	f004 bfc7 	b.w	80057ec <chThdDequeueAllI>
 800085e:	bf00      	nop

08000860 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8000860:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d004      	beq.n	8000872 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8000868:	4618      	mov	r0, r3
 800086a:	f850 3b04 	ldr.w	r3, [r0], #4
 800086e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8000870:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8000872:	68c2      	ldr	r2, [r0, #12]
 8000874:	2a00      	cmp	r2, #0
 8000876:	d0f7      	beq.n	8000868 <obqGetFullBufferI+0x8>
    return NULL;
 8000878:	2000      	movs	r0, #0
 800087a:	4770      	bx	lr

0800087c <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 800087c:	b410      	push	{r4}
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
 800087e:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
  obqp->brdptr += obqp->bsize;
 8000882:	6943      	ldr	r3, [r0, #20]
  obqp->bcounter++;
 8000884:	68c2      	ldr	r2, [r0, #12]
  obqp->brdptr += obqp->bsize;
 8000886:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8000888:	428b      	cmp	r3, r1
  obqp->brdptr += obqp->bsize;
 800088a:	6143      	str	r3, [r0, #20]
  obqp->bcounter++;
 800088c:	f102 0201 	add.w	r2, r2, #1
    obqp->brdptr = obqp->buffers;
 8000890:	bf28      	it	cs
 8000892:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  obqp->bcounter++;
 8000894:	60c2      	str	r2, [r0, #12]
    obqp->brdptr = obqp->buffers;
 8000896:	bf28      	it	cs
 8000898:	6143      	strcs	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 800089a:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 800089c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008a0:	f004 bf94 	b.w	80057cc <chThdDequeueNextI>

080008a4 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	2320      	movs	r3, #32
 80008a8:	4604      	mov	r4, r0
 80008aa:	460e      	mov	r6, r1
 80008ac:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 80008b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008b2:	b1fb      	cbz	r3, 80008f4 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 80008b4:	701e      	strb	r6, [r3, #0]
  obqp->ptr++;

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 80008b6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 80008ba:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 80008bc:	4293      	cmp	r3, r2
  obqp->ptr++;
 80008be:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 80008c0:	d314      	bcc.n	80008ec <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80008c2:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 80008c4:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80008c6:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80008c8:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80008ca:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80008cc:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 80008ce:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80008d0:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80008d2:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 80008d4:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 80008d6:	bf24      	itt	cs
 80008d8:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80008da:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 80008dc:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 80008de:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 80008e0:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 80008e2:	2200      	movs	r2, #0
 80008e4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 80008e6:	b10b      	cbz	r3, 80008ec <obqPutTimeout+0x48>
    obqp->notify(obqp);
 80008e8:	4620      	mov	r0, r4
 80008ea:	4798      	blx	r3
 80008ec:	2000      	movs	r0, #0
 80008ee:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();
  return MSG_OK;
}
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	4615      	mov	r5, r2
 80008f6:	e005      	b.n	8000904 <obqPutTimeout+0x60>
    if (obqp->suspended) {
 80008f8:	7a23      	ldrb	r3, [r4, #8]
 80008fa:	b97b      	cbnz	r3, 800091c <obqPutTimeout+0x78>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80008fc:	f004 ff52 	bl	80057a4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000900:	2800      	cmp	r0, #0
 8000902:	db0d      	blt.n	8000920 <obqPutTimeout+0x7c>
  while (obqIsFullI(obqp)) {
 8000904:	68e3      	ldr	r3, [r4, #12]
 8000906:	4629      	mov	r1, r5
 8000908:	4620      	mov	r0, r4
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f4      	beq.n	80008f8 <obqPutTimeout+0x54>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800090e:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8000910:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8000912:	1d13      	adds	r3, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8000914:	440a      	add	r2, r1
 8000916:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
 800091a:	e7cb      	b.n	80008b4 <obqPutTimeout+0x10>
      return MSG_RESET;
 800091c:	f06f 0001 	mvn.w	r0, #1
 8000920:	2300      	movs	r3, #0
 8000922:	f383 8811 	msr	BASEPRI, r3
}
 8000926:	bd70      	pop	{r4, r5, r6, pc}

08000928 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8000928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092c:	4604      	mov	r4, r0
 800092e:	460d      	mov	r5, r1
 8000930:	4617      	mov	r7, r2
 8000932:	4699      	mov	r9, r3
 8000934:	f04f 0a20 	mov.w	sl, #32
 8000938:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 800093c:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800093e:	46b0      	mov	r8, r6

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8000940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000942:	2800      	cmp	r0, #0
 8000944:	d045      	beq.n	80009d2 <obqWriteTimeout+0xaa>
 8000946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
    if (size > (n - w)) {
 8000948:	eba7 0b06 	sub.w	fp, r7, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800094c:	1a1b      	subs	r3, r3, r0
 800094e:	459b      	cmp	fp, r3
 8000950:	bf28      	it	cs
 8000952:	469b      	movcs	fp, r3
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8000954:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8000958:	d947      	bls.n	80009ea <obqWriteTimeout+0xc2>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 800095a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800095e:	f8d5 c000 	ldr.w	ip, [r5]
 8000962:	6869      	ldr	r1, [r5, #4]
 8000964:	68aa      	ldr	r2, [r5, #8]
 8000966:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800096a:	f8c0 e00c 	str.w	lr, [r0, #12]
 800096e:	3510      	adds	r5, #16
 8000970:	429d      	cmp	r5, r3
 8000972:	f8c0 c000 	str.w	ip, [r0]
 8000976:	6041      	str	r1, [r0, #4]
 8000978:	6082      	str	r2, [r0, #8]
 800097a:	f100 0010 	add.w	r0, r0, #16
 800097e:	d1ee      	bne.n	800095e <obqWriteTimeout+0x36>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000982:	3340      	adds	r3, #64	; 0x40
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8000984:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8000986:	62a3      	str	r3, [r4, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8000988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800098a:	429a      	cmp	r2, r3
 800098c:	d814      	bhi.n	80009b8 <obqWriteTimeout+0x90>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800098e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8000990:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8000992:	69a1      	ldr	r1, [r4, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8000994:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8000996:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8000998:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 800099a:	68e2      	ldr	r2, [r4, #12]
  obqp->ptr = NULL;
 800099c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 80009a0:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80009a2:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 80009a4:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 80009a6:	bf24      	itt	cs
 80009a8:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80009aa:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 80009ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 80009ae:	3a01      	subs	r2, #1
 80009b0:	60e2      	str	r2, [r4, #12]
  if (obqp->notify != NULL) {
 80009b2:	b10b      	cbz	r3, 80009b8 <obqWriteTimeout+0x90>
    obqp->notify(obqp);
 80009b4:	4620      	mov	r0, r4
 80009b6:	4798      	blx	r3
 80009b8:	f388 8811 	msr	BASEPRI, r8
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 80009bc:	42be      	cmp	r6, r7
 80009be:	d221      	bcs.n	8000a04 <obqWriteTimeout+0xdc>
 80009c0:	f38a 8811 	msr	BASEPRI, sl
 80009c4:	e7bc      	b.n	8000940 <obqWriteTimeout+0x18>
    if (obqp->suspended) {
 80009c6:	7a23      	ldrb	r3, [r4, #8]
 80009c8:	b9cb      	cbnz	r3, 80009fe <obqWriteTimeout+0xd6>
 80009ca:	f004 feeb 	bl	80057a4 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80009ce:	2800      	cmp	r0, #0
 80009d0:	db15      	blt.n	80009fe <obqWriteTimeout+0xd6>
  while (obqIsFullI(obqp)) {
 80009d2:	68e3      	ldr	r3, [r4, #12]
 80009d4:	4649      	mov	r1, r9
 80009d6:	4620      	mov	r0, r4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f4      	beq.n	80009c6 <obqWriteTimeout+0x9e>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80009dc:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80009de:	69e2      	ldr	r2, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80009e0:	1d18      	adds	r0, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80009e2:	4413      	add	r3, r2
 80009e4:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
 80009e8:	e7ae      	b.n	8000948 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 80009ea:	4629      	mov	r1, r5
 80009ec:	465a      	mov	r2, fp
 80009ee:	f005 fc5f 	bl	80062b0 <memcpy>
      obqp->ptr += size;
 80009f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009f4:	445b      	add	r3, fp
      w         += size;
 80009f6:	445e      	add	r6, fp
      bp        += size;
 80009f8:	445d      	add	r5, fp
      obqp->ptr += size;
 80009fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80009fc:	e7c4      	b.n	8000988 <obqWriteTimeout+0x60>
 80009fe:	2300      	movs	r3, #0
 8000a00:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    osalSysLock();
  }
}
 8000a04:	4630      	mov	r0, r6
 8000a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a0a:	bf00      	nop

08000a0c <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000a0c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d001      	beq.n	8000a18 <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8000a14:	2000      	movs	r0, #0
 8000a16:	4770      	bx	lr
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000a18:	68c3      	ldr	r3, [r0, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0fa      	beq.n	8000a14 <obqTryFlushI+0x8>
 8000a1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f7      	beq.n	8000a14 <obqTryFlushI+0x8>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000a24:	3b04      	subs	r3, #4
    if (size > 0U) {
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	d0f4      	beq.n	8000a14 <obqTryFlushI+0x8>
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8000a2a:	b410      	push	{r4}
      *((size_t *)obqp->bwrptr) = size;
 8000a2c:	6013      	str	r3, [r2, #0]
      if (obqp->bwrptr >= obqp->btop) {
 8000a2e:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
      obqp->bcounter--;
 8000a32:	68c3      	ldr	r3, [r0, #12]
      obqp->bwrptr += obqp->bsize;
 8000a34:	4422      	add	r2, r4
      obqp->bcounter--;
 8000a36:	3b01      	subs	r3, #1
      if (obqp->bwrptr >= obqp->btop) {
 8000a38:	428a      	cmp	r2, r1
      obqp->bcounter--;
 8000a3a:	60c3      	str	r3, [r0, #12]
        obqp->bwrptr = obqp->buffers;
 8000a3c:	bf28      	it	cs
 8000a3e:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
      obqp->bwrptr += obqp->bsize;
 8000a40:	6102      	str	r2, [r0, #16]
        obqp->bwrptr = obqp->buffers;
 8000a42:	bf28      	it	cs
 8000a44:	6103      	strcs	r3, [r0, #16]
      obqp->ptr = NULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	6283      	str	r3, [r0, #40]	; 0x28
}
 8000a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
      return true;
 8000a4e:	2001      	movs	r0, #1
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000a54:	b430      	push	{r4, r5}
 8000a56:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8000a58:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 8000a5a:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 8000a5c:	440a      	add	r2, r1
  iqp->q_counter = 0;
 8000a5e:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 8000a60:	6102      	str	r2, [r0, #16]
 8000a62:	e9c0 0000 	strd	r0, r0, [r0]
  iqp->q_buffer  = bp;
 8000a66:	60c1      	str	r1, [r0, #12]
  iqp->q_wrptr   = bp;
 8000a68:	e9c0 1105 	strd	r1, r1, [r0, #20]
  iqp->q_notify  = infy;
 8000a6c:	61c3      	str	r3, [r0, #28]
}
 8000a6e:	bc30      	pop	{r4, r5}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000a74:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d011      	beq.n	8000aa0 <iqPutI+0x2c>
    iqp->q_counter++;
 8000a7c:	6882      	ldr	r2, [r0, #8]
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000a7e:	b510      	push	{r4, lr}
    iqp->q_counter++;
 8000a80:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
 8000a82:	1c5c      	adds	r4, r3, #1
    iqp->q_counter++;
 8000a84:	6082      	str	r2, [r0, #8]
    *iqp->q_wrptr++ = b;
 8000a86:	6144      	str	r4, [r0, #20]
 8000a88:	7019      	strb	r1, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000a8a:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d301      	bcc.n	8000a96 <iqPutI+0x22>
      iqp->q_wrptr = iqp->q_buffer;
 8000a92:	68c3      	ldr	r3, [r0, #12]
 8000a94:	6143      	str	r3, [r0, #20]
  chThdDequeueNextI(tqp, msg);
 8000a96:	2100      	movs	r1, #0
 8000a98:	f004 fe98 	bl	80057cc <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
 8000a9c:	2000      	movs	r0, #0
  }

  return MSG_TIMEOUT;
}
 8000a9e:	bd10      	pop	{r4, pc}
  if (!iqIsFullI(iqp)) {
 8000aa0:	6882      	ldr	r2, [r0, #8]
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d0ea      	beq.n	8000a7c <iqPutI+0x8>
  return MSG_TIMEOUT;
 8000aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000aaa:	4770      	bx	lr

08000aac <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	2320      	movs	r3, #32
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	460e      	mov	r6, r1
 8000ab4:	f383 8811 	msr	BASEPRI, r3
 8000ab8:	e003      	b.n	8000ac2 <iqGetTimeout+0x16>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000aba:	f004 fe73 	bl	80057a4 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	db1a      	blt.n	8000af8 <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000ac2:	68a5      	ldr	r5, [r4, #8]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0f6      	beq.n	8000aba <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000acc:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000ace:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ad0:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8000ad2:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000ad4:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ad6:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8000ad8:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000ada:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000adc:	bf28      	it	cs
 8000ade:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000ae0:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000ae2:	bf28      	it	cs
 8000ae4:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000ae6:	69e3      	ldr	r3, [r4, #28]
 8000ae8:	b10b      	cbz	r3, 8000aee <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8000aea:	4620      	mov	r0, r4
 8000aec:	4798      	blx	r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8000af4:	4628      	mov	r0, r5
}
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f385 8811 	msr	BASEPRI, r5
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	bf00      	nop

08000b00 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b085      	sub	sp, #20
 8000b06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8000b0a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000b0e:	f04f 0a20 	mov.w	sl, #32
 8000b12:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000b16:	b33a      	cbz	r2, 8000b68 <iqReadTimeout+0x68>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	460f      	mov	r7, r1
 8000b1c:	4616      	mov	r6, r2
 8000b1e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8000b22:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b24:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8000b26:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b28:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8000b2a:	bf8c      	ite	hi
 8000b2c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8000b2e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000b30:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8000b34:	45a8      	cmp	r8, r5
 8000b36:	d840      	bhi.n	8000bba <iqReadTimeout+0xba>
  else if (n > s1) {
 8000b38:	d32b      	bcc.n	8000b92 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000b3a:	462a      	mov	r2, r5
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f005 fbb7 	bl	80062b0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000b42:	68e2      	ldr	r2, [r4, #12]
 8000b44:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8000b46:	68a2      	ldr	r2, [r4, #8]
 8000b48:	1b52      	subs	r2, r2, r5
 8000b4a:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 8000b4c:	b19d      	cbz	r5, 8000b76 <iqReadTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000b4e:	f1b9 0f00 	cmp.w	r9, #0
 8000b52:	d001      	beq.n	8000b58 <iqReadTimeout+0x58>
        nfy(iqp);
 8000b54:	4620      	mov	r0, r4
 8000b56:	47c8      	blx	r9
 8000b58:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000b5c:	1b76      	subs	r6, r6, r5
      bp += done;
 8000b5e:	442f      	add	r7, r5
 8000b60:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d1dc      	bne.n	8000b22 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8000b68:	9803      	ldr	r0, [sp, #12]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000b70:	b005      	add	sp, #20
 8000b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b76:	9902      	ldr	r1, [sp, #8]
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f004 fe13 	bl	80057a4 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d0cf      	beq.n	8000b22 <iqReadTimeout+0x22>
 8000b82:	9b03      	ldr	r3, [sp, #12]
 8000b84:	1b98      	subs	r0, r3, r6
 8000b86:	2300      	movs	r3, #0
 8000b88:	f383 8811 	msr	BASEPRI, r3
}
 8000b8c:	b005      	add	sp, #20
 8000b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000b92:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000b96:	4642      	mov	r2, r8
 8000b98:	4638      	mov	r0, r7
    s2 = n - s1;
 8000b9a:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000b9c:	f005 fb88 	bl	80062b0 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000ba0:	eb07 0008 	add.w	r0, r7, r8
 8000ba4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000ba8:	68e1      	ldr	r1, [r4, #12]
 8000baa:	4642      	mov	r2, r8
 8000bac:	f005 fb80 	bl	80062b0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000bb0:	68e2      	ldr	r2, [r4, #12]
 8000bb2:	4643      	mov	r3, r8
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	61a3      	str	r3, [r4, #24]
 8000bb8:	e7c5      	b.n	8000b46 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000bba:	462a      	mov	r2, r5
 8000bbc:	4638      	mov	r0, r7
 8000bbe:	f005 fb77 	bl	80062b0 <memcpy>
    iqp->q_rdptr += n;
 8000bc2:	69a2      	ldr	r2, [r4, #24]
 8000bc4:	442a      	add	r2, r5
 8000bc6:	61a2      	str	r2, [r4, #24]
 8000bc8:	e7bd      	b.n	8000b46 <iqReadTimeout+0x46>
 8000bca:	bf00      	nop

08000bcc <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000bcc:	b430      	push	{r4, r5}
 8000bce:	9c02      	ldr	r4, [sp, #8]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000bd0:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000bd2:	188d      	adds	r5, r1, r2
  oqp->q_buffer  = bp;
 8000bd4:	e9c0 1503 	strd	r1, r5, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000bd8:	e9c0 3407 	strd	r3, r4, [r0, #28]
 8000bdc:	e9c0 0000 	strd	r0, r0, [r0]
  oqp->q_wrptr   = bp;
 8000be0:	e9c0 1105 	strd	r1, r1, [r0, #20]
}
 8000be4:	bc30      	pop	{r4, r5}
 8000be6:	4770      	bx	lr

08000be8 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	460f      	mov	r7, r1
 8000bee:	4616      	mov	r6, r2
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	f383 8811 	msr	BASEPRI, r3
 8000bf6:	e003      	b.n	8000c00 <oqPutTimeout+0x18>
 8000bf8:	f004 fdd4 	bl	80057a4 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	db18      	blt.n	8000c32 <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8000c00:	68a5      	ldr	r5, [r4, #8]
 8000c02:	4631      	mov	r1, r6
 8000c04:	4620      	mov	r0, r4
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0f6      	beq.n	8000bf8 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000c0a:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000c0c:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c0e:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000c10:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000c12:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000c14:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c16:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000c18:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000c1c:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000c1e:	bf24      	itt	cs
 8000c20:	68e3      	ldrcs	r3, [r4, #12]
 8000c22:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000c24:	69e3      	ldr	r3, [r4, #28]
 8000c26:	b103      	cbz	r3, 8000c2a <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8000c28:	4798      	blx	r3
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c32:	f385 8811 	msr	BASEPRI, r5
 8000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c38 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000c38:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000c3a:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d00f      	beq.n	8000c62 <oqGetI+0x2a>
    uint8_t b;

    oqp->q_counter++;
 8000c42:	6882      	ldr	r2, [r0, #8]
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c44:	6905      	ldr	r5, [r0, #16]
    b = *oqp->q_rdptr++;
 8000c46:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8000c48:	3201      	adds	r2, #1
 8000c4a:	6082      	str	r2, [r0, #8]
    b = *oqp->q_rdptr++;
 8000c4c:	6181      	str	r1, [r0, #24]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c4e:	42a9      	cmp	r1, r5
    b = *oqp->q_rdptr++;
 8000c50:	781c      	ldrb	r4, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c52:	d301      	bcc.n	8000c58 <oqGetI+0x20>
      oqp->q_rdptr = oqp->q_buffer;
 8000c54:	68c3      	ldr	r3, [r0, #12]
 8000c56:	6183      	str	r3, [r0, #24]
  chThdDequeueNextI(tqp, msg);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f004 fdb7 	bl	80057cc <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 8000c5e:	4620      	mov	r0, r4
  }

  return MSG_TIMEOUT;
}
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
  if (!oqIsEmptyI(oqp)) {
 8000c62:	6882      	ldr	r2, [r0, #8]
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d0ec      	beq.n	8000c42 <oqGetI+0xa>
  return MSG_TIMEOUT;
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000c6c:	bd38      	pop	{r3, r4, r5, pc}
 8000c6e:	bf00      	nop

08000c70 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c74:	b085      	sub	sp, #20
 8000c76:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8000c7a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000c7e:	f04f 0a20 	mov.w	sl, #32
 8000c82:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000c86:	b33a      	cbz	r2, 8000cd8 <oqWriteTimeout+0x68>
 8000c88:	4604      	mov	r4, r0
 8000c8a:	460f      	mov	r7, r1
 8000c8c:	4616      	mov	r6, r2
 8000c8e:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8000c92:	68a2      	ldr	r2, [r4, #8]
 8000c94:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000c96:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8000c9a:	bf8c      	ite	hi
 8000c9c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8000c9e:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000ca0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8000ca4:	45a8      	cmp	r8, r5
 8000ca6:	d840      	bhi.n	8000d2a <oqWriteTimeout+0xba>
  else if (n > s1) {
 8000ca8:	d32b      	bcc.n	8000d02 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000caa:	462a      	mov	r2, r5
 8000cac:	4639      	mov	r1, r7
 8000cae:	f005 faff 	bl	80062b0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000cb2:	68e2      	ldr	r2, [r4, #12]
 8000cb4:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8000cb6:	68a2      	ldr	r2, [r4, #8]
 8000cb8:	1b52      	subs	r2, r2, r5
 8000cba:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8000cbc:	b19d      	cbz	r5, 8000ce6 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000cbe:	f1b9 0f00 	cmp.w	r9, #0
 8000cc2:	d001      	beq.n	8000cc8 <oqWriteTimeout+0x58>
        nfy(oqp);
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	47c8      	blx	r9
 8000cc8:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000ccc:	1b76      	subs	r6, r6, r5
      bp += done;
 8000cce:	442f      	add	r7, r5
 8000cd0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d1dc      	bne.n	8000c92 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8000cd8:	9803      	ldr	r0, [sp, #12]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000ce0:	b005      	add	sp, #20
 8000ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000ce6:	9902      	ldr	r1, [sp, #8]
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f004 fd5b 	bl	80057a4 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d0cf      	beq.n	8000c92 <oqWriteTimeout+0x22>
 8000cf2:	9b03      	ldr	r3, [sp, #12]
 8000cf4:	1b98      	subs	r0, r3, r6
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f383 8811 	msr	BASEPRI, r3
}
 8000cfc:	b005      	add	sp, #20
 8000cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000d02:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000d06:	4642      	mov	r2, r8
 8000d08:	4639      	mov	r1, r7
    s2 = n - s1;
 8000d0a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000d0c:	f005 fad0 	bl	80062b0 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000d10:	eb07 0108 	add.w	r1, r7, r8
 8000d14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000d18:	68e0      	ldr	r0, [r4, #12]
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	f005 fac8 	bl	80062b0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000d20:	68e2      	ldr	r2, [r4, #12]
 8000d22:	4643      	mov	r3, r8
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	6163      	str	r3, [r4, #20]
 8000d28:	e7c5      	b.n	8000cb6 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000d2a:	462a      	mov	r2, r5
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	f005 fabf 	bl	80062b0 <memcpy>
    oqp->q_wrptr += n;
 8000d32:	6962      	ldr	r2, [r4, #20]
 8000d34:	442a      	add	r2, r5
 8000d36:	6162      	str	r2, [r4, #20]
 8000d38:	e7bd      	b.n	8000cb6 <oqWriteTimeout+0x46>
 8000d3a:	bf00      	nop

08000d3c <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8000d3c:	f001 b8ae 	b.w	8001e9c <adc_lld_init>

08000d40 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8000d40:	2300      	movs	r3, #0
  adcp->state    = ADC_STOP;
 8000d42:	2201      	movs	r2, #1
 8000d44:	7002      	strb	r2, [r0, #0]
  adcp->samples  = NULL;
 8000d46:	e9c0 3301 	strd	r3, r3, [r0, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8000d4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8000d4e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8000d50:	3018      	adds	r0, #24
 8000d52:	f004 bda1 	b.w	8005898 <chMtxObjectInit>
 8000d56:	bf00      	nop

08000d58 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 8000d58:	f001 ba9c 	b.w	8002294 <can_lld_init>

08000d5c <canObjectInit>:
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state       = CAN_STOP;
  canp->config      = NULL;
 8000d5c:	2300      	movs	r3, #0
void canObjectInit(CANDriver *canp) {
 8000d5e:	b410      	push	{r4}
  osalThreadQueueObjectInit(&canp->txqueue);
 8000d60:	f100 0108 	add.w	r1, r0, #8
  canp->state       = CAN_STOP;
 8000d64:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->rxqueue);
 8000d66:	f100 0210 	add.w	r2, r0, #16
  canp->state       = CAN_STOP;
 8000d6a:	7004      	strb	r4, [r0, #0]
 8000d6c:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8000d70:	e9c0 2204 	strd	r2, r2, [r0, #16]
  canp->config      = NULL;
 8000d74:	6043      	str	r3, [r0, #4]
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
#else /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
  canp->rxfull_cb   = NULL;
  canp->txempty_cb  = NULL;
 8000d76:	e9c0 3306 	strd	r3, r3, [r0, #24]
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
 8000d7a:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 8000d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8000d84:	f001 bf32 	b.w	8002bec <i2c_lld_init>

08000d88 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8000d88:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8000d8a:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 8000d8c:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8000d8e:	6043      	str	r3, [r0, #4]
 8000d90:	300c      	adds	r0, #12
 8000d92:	f004 bd81 	b.w	8005898 <chMtxObjectInit>
 8000d96:	bf00      	nop

08000d98 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8000da2:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 8000da4:	f001 ff32 	bl	8002c0c <i2c_lld_start>
  i2cp->state = I2C_READY;
 8000da8:	2302      	movs	r3, #2
 8000daa:	7023      	strb	r3, [r4, #0]
 8000dac:	2300      	movs	r3, #0
 8000dae:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b085      	sub	sp, #20
 8000db8:	4604      	mov	r4, r0
 8000dba:	e9dd 670b 	ldrd	r6, r7, [sp, #44]	; 0x2c
 8000dbe:	f04f 0c20 	mov.w	ip, #32
 8000dc2:	f38c 8811 	msr	BASEPRI, ip

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8000dc6:	f04f 0c03 	mov.w	ip, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000dca:	e9cd 6701 	strd	r6, r7, [sp, #4]
  i2cp->errors = I2C_NO_ERROR;
 8000dce:	2500      	movs	r5, #0
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000dd0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000dd2:	9600      	str	r6, [sp, #0]
  i2cp->state = I2C_ACTIVE_TX;
 8000dd4:	f880 c000 	strb.w	ip, [r0]
  i2cp->errors = I2C_NO_ERROR;
 8000dd8:	6085      	str	r5, [r0, #8]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000dda:	f001 ffd3 	bl	8002d84 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8000dde:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 8000de0:	bf14      	ite	ne
 8000de2:	2302      	movne	r3, #2
 8000de4:	2305      	moveq	r3, #5
 8000de6:	7023      	strb	r3, [r4, #0]
 8000de8:	f385 8811 	msr	BASEPRI, r5
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8000dec:	b005      	add	sp, #20
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000df0 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8000df0:	f003 bcdc 	b.w	80047ac <pwm_lld_init>

08000df4 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8000df4:	2300      	movs	r3, #0
  pwmp->state    = PWM_STOP;
 8000df6:	2201      	movs	r2, #1
 8000df8:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8000dfa:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8000dfc:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 8000dfe:	7403      	strb	r3, [r0, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <_readt>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000e04:	300c      	adds	r0, #12
 8000e06:	f7ff be7b 	b.w	8000b00 <iqReadTimeout>
 8000e0a:	bf00      	nop

08000e0c <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000e0c:	300c      	adds	r0, #12
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e12:	f7ff be75 	b.w	8000b00 <iqReadTimeout>
 8000e16:	bf00      	nop

08000e18 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000e18:	3030      	adds	r0, #48	; 0x30
 8000e1a:	f7ff bf29 	b.w	8000c70 <oqWriteTimeout>
 8000e1e:	bf00      	nop

08000e20 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000e20:	3030      	adds	r0, #48	; 0x30
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e26:	f7ff bf23 	b.w	8000c70 <oqWriteTimeout>
 8000e2a:	bf00      	nop

08000e2c <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000e2c:	300c      	adds	r0, #12
 8000e2e:	f7ff be3d 	b.w	8000aac <iqGetTimeout>
 8000e32:	bf00      	nop

08000e34 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000e34:	300c      	adds	r0, #12
 8000e36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3a:	f7ff be37 	b.w	8000aac <iqGetTimeout>
 8000e3e:	bf00      	nop

08000e40 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000e40:	3030      	adds	r0, #48	; 0x30
 8000e42:	f7ff bed1 	b.w	8000be8 <oqPutTimeout>
 8000e46:	bf00      	nop

08000e48 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000e48:	3030      	adds	r0, #48	; 0x30
 8000e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4e:	f7ff becb 	b.w	8000be8 <oqPutTimeout>
 8000e52:	bf00      	nop

08000e54 <_ctl>:
 8000e54:	2000      	movs	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8000e58:	f003 bd8e 	b.w	8004978 <sd_lld_init>

08000e5c <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000e5c:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <sdObjectInit+0x3c>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000e60:	4604      	mov	r4, r0
 8000e62:	b082      	sub	sp, #8
  sdp->vmt = &vmt;
 8000e64:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000e68:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000e6a:	9400      	str	r4, [sp, #0]
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000e6c:	4615      	mov	r5, r2
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000e6e:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000e70:	6060      	str	r0, [r4, #4]
 8000e72:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8000e76:	f104 000c 	add.w	r0, r4, #12
  sdp->state = SD_STOP;
 8000e7a:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	f7ff fde9 	bl	8000a54 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000e82:	9400      	str	r4, [sp, #0]
 8000e84:	462b      	mov	r3, r5
 8000e86:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000e8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000e8e:	2210      	movs	r2, #16
 8000e90:	f7ff fe9c 	bl	8000bcc <oqObjectInit>
}
 8000e94:	b002      	add	sp, #8
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
 8000e98:	08006368 	.word	0x08006368

08000e9c <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000e9c:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e9e:	6943      	ldr	r3, [r0, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460d      	mov	r5, r1
  if (iqIsEmptyI(&sdp->iqueue))
 8000ea4:	b13b      	cbz	r3, 8000eb6 <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f104 000c 	add.w	r0, r4, #12
 8000eac:	f7ff fde2 	bl	8000a74 <iqPutI>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	db0b      	blt.n	8000ecc <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 8000eb4:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4408      	add	r0, r1
 8000eba:	f004 fd9f 	bl	80059fc <chEvtBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f104 000c 	add.w	r0, r4, #12
 8000ec4:	f7ff fdd6 	bl	8000a74 <iqPutI>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	daf3      	bge.n	8000eb4 <sdIncomingDataI+0x18>
 8000ecc:	1d20      	adds	r0, r4, #4
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ed6:	f004 bd91 	b.w	80059fc <chEvtBroadcastFlagsI>
 8000eda:	bf00      	nop

08000edc <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8000edc:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000ede:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000ee0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	7819      	ldrb	r1, [r3, #0]
 8000ee8:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 8000eea:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000eec:	d001      	beq.n	8000ef2 <obnotify+0x16>
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
    osalDbgAssert(buf != NULL, "buffer not found");
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000ef2:	7a21      	ldrb	r1, [r4, #8]
 8000ef4:	2902      	cmp	r1, #2
 8000ef6:	d1fa      	bne.n	8000eee <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000ef8:	7911      	ldrb	r1, [r2, #4]
 8000efa:	891a      	ldrh	r2, [r3, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	408b      	lsls	r3, r1
 8000f00:	4213      	tst	r3, r2
 8000f02:	d1f4      	bne.n	8000eee <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8000f04:	a901      	add	r1, sp, #4
 8000f06:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8000f0a:	f7ff fca9 	bl	8000860 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000f0e:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	7921      	ldrb	r1, [r4, #4]
 8000f16:	4602      	mov	r2, r0
 8000f18:	6820      	ldr	r0, [r4, #0]
 8000f1a:	f000 fa3b 	bl	8001394 <usbStartTransmitI>
 8000f1e:	e7e6      	b.n	8000eee <obnotify+0x12>

08000f20 <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8000f20:	300c      	adds	r0, #12
 8000f22:	f7ff bc03 	b.w	800072c <ibqReadTimeout>
 8000f26:	bf00      	nop

08000f28 <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8000f28:	300c      	adds	r0, #12
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2e:	f7ff bbfd 	b.w	800072c <ibqReadTimeout>
 8000f32:	bf00      	nop

08000f34 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8000f34:	3044      	adds	r0, #68	; 0x44
 8000f36:	f7ff bcf7 	b.w	8000928 <obqWriteTimeout>
 8000f3a:	bf00      	nop

08000f3c <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8000f3c:	3044      	adds	r0, #68	; 0x44
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f42:	f7ff bcf1 	b.w	8000928 <obqWriteTimeout>
 8000f46:	bf00      	nop

08000f48 <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8000f48:	300c      	adds	r0, #12
 8000f4a:	f7ff bbb3 	b.w	80006b4 <ibqGetTimeout>
 8000f4e:	bf00      	nop

08000f50 <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8000f50:	300c      	adds	r0, #12
 8000f52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f56:	f7ff bbad 	b.w	80006b4 <ibqGetTimeout>
 8000f5a:	bf00      	nop

08000f5c <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8000f5c:	3044      	adds	r0, #68	; 0x44
 8000f5e:	f7ff bca1 	b.w	80008a4 <obqPutTimeout>
 8000f62:	bf00      	nop

08000f64 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8000f64:	3044      	adds	r0, #68	; 0x44
 8000f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6a:	f7ff bc9b 	b.w	80008a4 <obqPutTimeout>
 8000f6e:	bf00      	nop

08000f70 <_ctl>:
 8000f70:	2000      	movs	r0, #0
 8000f72:	4770      	bx	lr

08000f74 <ibnotify>:
static void ibnotify(io_buffers_queue_t *bqp) {
 8000f74:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000f76:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000f78:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	7819      	ldrb	r1, [r3, #0]
 8000f80:	2904      	cmp	r1, #4
 8000f82:	d000      	beq.n	8000f86 <ibnotify+0x12>
}
 8000f84:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000f86:	7a21      	ldrb	r1, [r4, #8]
 8000f88:	2902      	cmp	r1, #2
 8000f8a:	d1fb      	bne.n	8000f84 <ibnotify+0x10>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000f8c:	7911      	ldrb	r1, [r2, #4]
 8000f8e:	895a      	ldrh	r2, [r3, #10]
 8000f90:	2301      	movs	r3, #1
 8000f92:	408b      	lsls	r3, r1
 8000f94:	4213      	tst	r3, r2
 8000f96:	d1f5      	bne.n	8000f84 <ibnotify+0x10>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8000f98:	f104 000c 	add.w	r0, r4, #12
 8000f9c:	f7ff fb68 	bl	8000670 <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d0ef      	beq.n	8000f84 <ibnotify+0x10>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8000fa4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8000fa8:	4602      	mov	r2, r0
 8000faa:	7959      	ldrb	r1, [r3, #5]
 8000fac:	6818      	ldr	r0, [r3, #0]
}
 8000fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	f000 b9d9 	b.w	800136c <usbStartReceiveI>
 8000fba:	bf00      	nop

08000fbc <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}

  sdup->vmt = &vmt;
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <sduObjectInit+0x4c>)
 8000fc6:	f843 2b04 	str.w	r2, [r3], #4
void sduObjectInit(SerialUSBDriver *sdup) {
 8000fca:	b085      	sub	sp, #20
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000fcc:	4f10      	ldr	r7, [pc, #64]	; (8001010 <sduObjectInit+0x50>)
 8000fce:	9002      	str	r0, [sp, #8]
  sdup->state = SDU_STOP;
 8000fd0:	2501      	movs	r5, #1
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000fd2:	2602      	movs	r6, #2
void sduObjectInit(SerialUSBDriver *sdup) {
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	6043      	str	r3, [r0, #4]
  sdup->state = SDU_STOP;
 8000fd8:	7205      	strb	r5, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 8000fda:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8000fde:	4629      	mov	r1, r5
 8000fe0:	300c      	adds	r0, #12
 8000fe2:	e9cd 6700 	strd	r6, r7, [sp]
 8000fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fea:	f7ff fb1d 	bl	8000628 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <sduObjectInit+0x54>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9402      	str	r4, [sp, #8]
 8000ff4:	9600      	str	r6, [sp, #0]
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f504 7221 	add.w	r2, r4, #644	; 0x284
 8000ffc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	f7ff fc04 	bl	8000810 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8001008:	b005      	add	sp, #20
 800100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100c:	08006390 	.word	0x08006390
 8001010:	08000f75 	.word	0x08000f75
 8001014:	08000edd 	.word	0x08000edd

08001018 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8001018:	680b      	ldr	r3, [r1, #0]
 800101a:	2220      	movs	r2, #32
 800101c:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8001020:	790a      	ldrb	r2, [r1, #4]
 8001022:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001026:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8001028:	794a      	ldrb	r2, [r1, #5]
 800102a:	3209      	adds	r2, #9
 800102c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8001030:	798a      	ldrb	r2, [r1, #6]
 8001032:	b112      	cbz	r2, 800103a <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 8001034:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001038:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800103a:	2302      	movs	r3, #2
 800103c:	7203      	strb	r3, [r0, #8]
  sdup->config = config;
 800103e:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
 8001042:	2300      	movs	r3, #0
 8001044:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 800104c:	b538      	push	{r3, r4, r5, lr}

  /* Avoiding events spam.*/
  if(bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 800104e:	7d03      	ldrb	r3, [r0, #20]
 8001050:	b113      	cbz	r3, 8001058 <sduSuspendHookI+0xc>
 8001052:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001056:	b9b3      	cbnz	r3, 8001086 <sduSuspendHookI+0x3a>
 8001058:	4604      	mov	r4, r0
    return;
  }
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  bqSuspendI(&sdup->ibqueue);
 800105a:	2501      	movs	r5, #1
 800105c:	2102      	movs	r1, #2
 800105e:	3004      	adds	r0, #4
 8001060:	f004 fccc 	bl	80059fc <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 8001064:	f104 000c 	add.w	r0, r4, #12
 8001068:	7525      	strb	r5, [r4, #20]
 800106a:	f06f 0101 	mvn.w	r1, #1
 800106e:	f004 fbbd 	bl	80057ec <chThdDequeueAllI>
  bqSuspendI(&sdup->obqueue);
 8001072:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8001076:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800107a:	f06f 0101 	mvn.w	r1, #1
}
 800107e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001082:	f004 bbb3 	b.w	80057ec <chThdDequeueAllI>
 8001086:	bd38      	pop	{r3, r4, r5, pc}

08001088 <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 8001088:	b510      	push	{r4, lr}
  chEvtBroadcastFlagsI(esp, flags);
 800108a:	2101      	movs	r1, #1
 800108c:	4604      	mov	r4, r0
 800108e:	3004      	adds	r0, #4
 8001090:	f004 fcb4 	bl	80059fc <chEvtBroadcastFlagsI>

  chnAddFlagsI(sdup, CHN_CONNECTED);
  bqResumeX(&sdup->ibqueue);
 8001094:	2300      	movs	r3, #0
 8001096:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8001098:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop

080010a0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4604      	mov	r4, r0

  ibqResetI(&sdup->ibqueue);
 80010a4:	f100 060c 	add.w	r6, r0, #12
 80010a8:	4630      	mov	r0, r6
  bqResumeX(&sdup->ibqueue);
 80010aa:	2500      	movs	r5, #0
  ibqResetI(&sdup->ibqueue);
 80010ac:	f7ff fad4 	bl	8000658 <ibqResetI>
  obqResetI(&sdup->obqueue);
 80010b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
  bqResumeX(&sdup->ibqueue);
 80010b4:	7525      	strb	r5, [r4, #20]
  obqResetI(&sdup->obqueue);
 80010b6:	f7ff fbc3 	bl	8000840 <obqResetI>
 80010ba:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 80010bc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80010c0:	1d20      	adds	r0, r4, #4
 80010c2:	f004 fc9b 	bl	80059fc <chEvtBroadcastFlagsI>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80010c6:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	7819      	ldrb	r1, [r3, #0]
 80010ce:	2904      	cmp	r1, #4
 80010d0:	d000      	beq.n	80010d4 <sduConfigureHookI+0x34>
  chnAddFlagsI(sdup, CHN_CONNECTED);
  (void) sdu_start_receive(sdup);
}
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80010d4:	7a21      	ldrb	r1, [r4, #8]
 80010d6:	2902      	cmp	r1, #2
 80010d8:	d1fb      	bne.n	80010d2 <sduConfigureHookI+0x32>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80010da:	7911      	ldrb	r1, [r2, #4]
 80010dc:	895a      	ldrh	r2, [r3, #10]
 80010de:	2301      	movs	r3, #1
 80010e0:	408b      	lsls	r3, r1
 80010e2:	4213      	tst	r3, r2
 80010e4:	d1f5      	bne.n	80010d2 <sduConfigureHookI+0x32>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80010e6:	4630      	mov	r0, r6
 80010e8:	f7ff fac2 	bl	8000670 <ibqGetEmptyBufferI>
  if (buf == NULL) {
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d0f0      	beq.n	80010d2 <sduConfigureHookI+0x32>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80010f0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80010f4:	4602      	mov	r2, r0
 80010f6:	7959      	ldrb	r1, [r3, #5]
 80010f8:	6818      	ldr	r0, [r3, #0]
}
 80010fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	f000 b933 	b.w	800136c <usbStartReceiveI>
 8001106:	bf00      	nop

08001108 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001108:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800110c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001110:	2b20      	cmp	r3, #32
 8001112:	d001      	beq.n	8001118 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 8001114:	2000      	movs	r0, #0
    }
  }
  return false;
}
 8001116:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001118:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800111c:	2b20      	cmp	r3, #32
 800111e:	d3f9      	bcc.n	8001114 <sduRequestsHook+0xc>
 8001120:	2b21      	cmp	r3, #33	; 0x21
 8001122:	d807      	bhi.n	8001134 <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <sduRequestsHook+0x3c>)
 8001126:	6383      	str	r3, [r0, #56]	; 0x38
 8001128:	2207      	movs	r2, #7
 800112a:	2300      	movs	r3, #0
 800112c:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
      return true;
 8001130:	2001      	movs	r0, #1
 8001132:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001134:	2b22      	cmp	r3, #34	; 0x22
 8001136:	d1ed      	bne.n	8001114 <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001138:	2300      	movs	r3, #0
 800113a:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 800113e:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8001140:	2001      	movs	r0, #1
 8001142:	4770      	bx	lr
 8001144:	20000800 	.word	0x20000800

08001148 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001148:	f8d0 248c 	ldr.w	r2, [r0, #1164]	; 0x48c
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	7819      	ldrb	r1, [r3, #0]
 8001150:	2904      	cmp	r1, #4
 8001152:	d000      	beq.n	8001156 <sduSOFHookI+0xe>
 8001154:	4770      	bx	lr
 8001156:	7a01      	ldrb	r1, [r0, #8]
 8001158:	2902      	cmp	r1, #2
 800115a:	d1fb      	bne.n	8001154 <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800115c:	7911      	ldrb	r1, [r2, #4]
 800115e:	891a      	ldrh	r2, [r3, #8]
 8001160:	2301      	movs	r3, #1
 8001162:	408b      	lsls	r3, r1
 8001164:	4213      	tst	r3, r2
 8001166:	d1f5      	bne.n	8001154 <sduSOFHookI+0xc>
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001168:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 800116a:	f100 0544 	add.w	r5, r0, #68	; 0x44
void sduSOFHookI(SerialUSBDriver *sdup) {
 800116e:	b083      	sub	sp, #12
 8001170:	4604      	mov	r4, r0
  if (obqTryFlushI(&sdup->obqueue)) {
 8001172:	4628      	mov	r0, r5
 8001174:	f7ff fc4a 	bl	8000a0c <obqTryFlushI>
 8001178:	b908      	cbnz	r0, 800117e <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 800117a:	b003      	add	sp, #12
 800117c:	bd30      	pop	{r4, r5, pc}
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800117e:	a901      	add	r1, sp, #4
 8001180:	4628      	mov	r0, r5
 8001182:	f7ff fb6d 	bl	8000860 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001186:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
 800118a:	9b01      	ldr	r3, [sp, #4]
 800118c:	7921      	ldrb	r1, [r4, #4]
 800118e:	4602      	mov	r2, r0
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f000 f8ff 	bl	8001394 <usbStartTransmitI>
 8001196:	e7f0      	b.n	800117a <sduSOFHookI+0x32>

08001198 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800119a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800119e:	b083      	sub	sp, #12
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 80011a0:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 80011a2:	b1ec      	cbz	r4, 80011e0 <sduDataTransmitted+0x48>
 80011a4:	460e      	mov	r6, r1
 80011a6:	4605      	mov	r5, r0
 80011a8:	2320      	movs	r3, #32
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 80011b2:	1d20      	adds	r0, r4, #4
 80011b4:	2108      	movs	r1, #8
 80011b6:	f004 fc21 	bl	80059fc <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3444      	adds	r4, #68	; 0x44
 80011c2:	b9fb      	cbnz	r3, 8001204 <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80011c4:	4620      	mov	r0, r4
 80011c6:	a901      	add	r1, sp, #4
 80011c8:	f7ff fb4a 	bl	8000860 <obqGetFullBufferI>

  if (buf != NULL) {
 80011cc:	b150      	cbz	r0, 80011e4 <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 80011ce:	4602      	mov	r2, r0
 80011d0:	4631      	mov	r1, r6
 80011d2:	4628      	mov	r0, r5
 80011d4:	9b01      	ldr	r3, [sp, #4]
 80011d6:	f000 f8dd 	bl	8001394 <usbStartTransmitI>
 80011da:	2300      	movs	r3, #0
 80011dc:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 80011e0:	b003      	add	sp, #12
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	d0f5      	beq.n	80011da <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80011ee:	8a1b      	ldrh	r3, [r3, #16]
 80011f0:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80011f2:	4013      	ands	r3, r2
 80011f4:	d1f1      	bne.n	80011da <sduDataTransmitted+0x42>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80011f6:	4631      	mov	r1, r6
 80011f8:	f105 0244 	add.w	r2, r5, #68	; 0x44
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f8c9 	bl	8001394 <usbStartTransmitI>
 8001202:	e7ea      	b.n	80011da <sduDataTransmitted+0x42>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fb39 	bl	800087c <obqReleaseEmptyBufferI>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800120a:	4620      	mov	r0, r4
 800120c:	a901      	add	r1, sp, #4
 800120e:	f7ff fb27 	bl	8000860 <obqGetFullBufferI>
  if (buf != NULL) {
 8001212:	2800      	cmp	r0, #0
 8001214:	d1db      	bne.n	80011ce <sduDataTransmitted+0x36>
 8001216:	e7e5      	b.n	80011e4 <sduDataTransmitted+0x4c>

08001218 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001218:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800121a:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800121c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 8001220:	b194      	cbz	r4, 8001248 <sduDataReceived+0x30>
 8001222:	2320      	movs	r3, #32
 8001224:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysLockFromISR();

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001228:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	7953      	ldrb	r3, [r2, #5]
 8001230:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	685d      	ldr	r5, [r3, #4]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 800123a:	b9fd      	cbnz	r5, 800127c <sduDataReceived+0x64>
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800123c:	780b      	ldrb	r3, [r1, #0]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d003      	beq.n	800124a <sduDataReceived+0x32>
 8001242:	2300      	movs	r3, #0
 8001244:	f383 8811 	msr	BASEPRI, r3
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);

  osalSysUnlockFromISR();
}
 8001248:	bd38      	pop	{r3, r4, r5, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800124a:	7a23      	ldrb	r3, [r4, #8]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d1f8      	bne.n	8001242 <sduDataReceived+0x2a>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001250:	7910      	ldrb	r0, [r2, #4]
 8001252:	894a      	ldrh	r2, [r1, #10]
 8001254:	2301      	movs	r3, #1
 8001256:	4083      	lsls	r3, r0
 8001258:	4213      	tst	r3, r2
 800125a:	d1f2      	bne.n	8001242 <sduDataReceived+0x2a>
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800125c:	f104 000c 	add.w	r0, r4, #12
 8001260:	f7ff fa06 	bl	8000670 <ibqGetEmptyBufferI>
  if (buf == NULL) {
 8001264:	2800      	cmp	r0, #0
 8001266:	d0ec      	beq.n	8001242 <sduDataReceived+0x2a>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001268:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800126c:	4602      	mov	r2, r0
 800126e:	7959      	ldrb	r1, [r3, #5]
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001276:	f000 f879 	bl	800136c <usbStartReceiveI>
 800127a:	e7e2      	b.n	8001242 <sduDataReceived+0x2a>
 800127c:	2104      	movs	r1, #4
 800127e:	1860      	adds	r0, r4, r1
 8001280:	f004 fbbc 	bl	80059fc <chEvtBroadcastFlagsI>
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001284:	4629      	mov	r1, r5
 8001286:	f104 000c 	add.w	r0, r4, #12
 800128a:	f7ff f9fd 	bl	8000688 <ibqPostFullBufferI>
 800128e:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001292:	6811      	ldr	r1, [r2, #0]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001294:	780b      	ldrb	r3, [r1, #0]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d1d3      	bne.n	8001242 <sduDataReceived+0x2a>
 800129a:	e7d6      	b.n	800124a <sduDataReceived+0x32>

0800129c <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 80012a0:	f003 b89e 	b.w	80043e0 <spi_lld_init>

080012a4 <spiObjectInit>:
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80012a4:	2201      	movs	r2, #1
  spip->config = NULL;
 80012a6:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 80012a8:	7002      	strb	r2, [r0, #0]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80012aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 80012ae:	4770      	bx	lr

080012b0 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 80012b0:	b510      	push	{r4, lr}
 80012b2:	2320      	movs	r3, #32
 80012b4:	4604      	mov	r4, r0
 80012b6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 80012ba:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 80012bc:	f003 f8d0 	bl	8004460 <spi_lld_start>
  spip->state = SPI_READY;
 80012c0:	2302      	movs	r3, #2
 80012c2:	7023      	strb	r3, [r4, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80012ca:	bd10      	pop	{r4, pc}

080012cc <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 80012cc:	f003 bdf6 	b.w	8004ebc <uart_lld_init>

080012d0 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
 80012d0:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 80012d2:	2201      	movs	r2, #1
 80012d4:	7002      	strb	r2, [r0, #0]
  uartp->txstate    = UART_TX_IDLE;
 80012d6:	7043      	strb	r3, [r0, #1]
  uartp->rxstate    = UART_RX_IDLE;
 80012d8:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 80012da:	6043      	str	r3, [r0, #4]
#if UART_USE_WAIT == TRUE
  uartp->early      = false;
 80012dc:	7203      	strb	r3, [r0, #8]
  uartp->threadrx   = NULL;
  uartp->threadtx   = NULL;
 80012de:	e9c0 3303 	strd	r3, r3, [r0, #12]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 80012e2:	4770      	bx	lr

080012e4 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 80012e4:	b510      	push	{r4, lr}
 80012e6:	2320      	movs	r3, #32
 80012e8:	4604      	mov	r4, r0
 80012ea:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 80012ee:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 80012f0:	f003 fe12 	bl	8004f18 <uart_lld_start>
  uartp->state = UART_READY;
 80012f4:	2302      	movs	r3, #2
 80012f6:	7023      	strb	r3, [r4, #0]
 80012f8:	2300      	movs	r3, #0
 80012fa:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 80012fe:	bd10      	pop	{r4, pc}

08001300 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8001300:	f002 bafc 	b.w	80038fc <usb_lld_init>

08001304 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8001304:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 8001306:	2201      	movs	r2, #1
 8001308:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800130a:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800130c:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800130e:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8001310:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 8001312:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8001314:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8001316:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8001318:	6083      	str	r3, [r0, #8]
  usbp->receiving    = 0;
}
 800131a:	4770      	bx	lr

0800131c <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800131c:	b538      	push	{r3, r4, r5, lr}
 800131e:	4604      	mov	r4, r0
 8001320:	2320      	movs	r3, #32
 8001322:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001326:	2500      	movs	r5, #0
  usbp->config = config;
 8001328:	6041      	str	r1, [r0, #4]
    usbp->epc[i] = NULL;
 800132a:	e9c0 5503 	strd	r5, r5, [r0, #12]
 800132e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  }
  usb_lld_start(usbp);
 8001332:	f002 faf3 	bl	800391c <usb_lld_start>
  usbp->state = USB_READY;
 8001336:	2302      	movs	r3, #2
 8001338:	7023      	strb	r3, [r4, #0]
 800133a:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 800133e:	bd38      	pop	{r3, r4, r5, pc}

08001340 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8001340:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 8001342:	6953      	ldr	r3, [r2, #20]
  usbp->epc[ep] = epcp;
 8001344:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001348:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 800134a:	b123      	cbz	r3, 8001356 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800134c:	2400      	movs	r4, #0
 800134e:	601c      	str	r4, [r3, #0]
 8001350:	605c      	str	r4, [r3, #4]
 8001352:	609c      	str	r4, [r3, #8]
 8001354:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 8001356:	6993      	ldr	r3, [r2, #24]
 8001358:	b123      	cbz	r3, 8001364 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 8001364:	f85d 4b04 	ldr.w	r4, [sp], #4
  usb_lld_init_endpoint(usbp, ep);
 8001368:	f002 bd2a 	b.w	8003dc0 <usb_lld_init_endpoint>

0800136c <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 800136c:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800136e:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001372:	8947      	ldrh	r7, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8001374:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001378:	2401      	movs	r4, #1
  osp = usbp->epc[ep]->out_state;
 800137a:	f8dc 5018 	ldr.w	r5, [ip, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800137e:	408c      	lsls	r4, r1
 8001380:	433c      	orrs	r4, r7
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8001382:	2700      	movs	r7, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001384:	8144      	strh	r4, [r0, #10]
  osp->rxbuf  = buf;
 8001386:	60aa      	str	r2, [r5, #8]
  osp->rxcnt  = 0;
 8001388:	e9c5 3700 	strd	r3, r7, [r5]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 800138c:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_out(usbp, ep);
 800138e:	f002 bee3 	b.w	8004158 <usb_lld_start_out>
 8001392:	bf00      	nop

08001394 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8001394:	b4f0      	push	{r4, r5, r6, r7}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8001396:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800139a:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 800139c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013a0:	2401      	movs	r4, #1
  isp = usbp->epc[ep]->in_state;
 80013a2:	f8dc 5014 	ldr.w	r5, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013a6:	408c      	lsls	r4, r1
 80013a8:	433c      	orrs	r4, r7
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 80013aa:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013ac:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
 80013ae:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
 80013b0:	e9c5 3700 	strd	r3, r7, [r5]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 80013b4:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 80013b6:	f002 bf0f 	b.w	80041d8 <usb_lld_start_in>
 80013ba:	bf00      	nop

080013bc <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 80013bc:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80013be:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 80013c0:	2500      	movs	r5, #0
void _usb_reset(USBDriver *usbp) {
 80013c2:	4604      	mov	r4, r0
  usbp->state         = USB_READY;
 80013c4:	7003      	strb	r3, [r0, #0]
  usbp->status        = 0;
 80013c6:	64c5      	str	r5, [r0, #76]	; 0x4c
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 80013c8:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80013cc:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80013d0:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 80013d2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80013d6:	f002 fbf7 	bl	8003bc8 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b123      	cbz	r3, 80013ea <_usb_reset+0x2e>
 80013e0:	4629      	mov	r1, r5
 80013e2:	4620      	mov	r0, r4
}
 80013e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80013e8:	4718      	bx	r3
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}

080013ec <_usb_suspend>:
  /* State transition.*/
  usbp->saved_state = usbp->state;
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80013ec:	6842      	ldr	r2, [r0, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
void _usb_suspend(USBDriver *usbp) {
 80013f0:	b410      	push	{r4}
  usbp->state       = USB_SUSPENDED;
 80013f2:	2105      	movs	r1, #5
  usbp->saved_state = usbp->state;
 80013f4:	7804      	ldrb	r4, [r0, #0]
 80013f6:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 80013fa:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80013fc:	b11a      	cbz	r2, 8001406 <_usb_suspend+0x1a>
 80013fe:	2104      	movs	r1, #4
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 8001400:	f85d 4b04 	ldr.w	r4, [sp], #4
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001404:	4710      	bx	r2
}
 8001406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_usb_wakeup>:

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800140c:	6842      	ldr	r2, [r0, #4]
  usbp->state = usbp->saved_state;
 800140e:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001412:	6812      	ldr	r2, [r2, #0]
  usbp->state = usbp->saved_state;
 8001414:	7001      	strb	r1, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001416:	b10a      	cbz	r2, 800141c <_usb_wakeup+0x10>
 8001418:	2105      	movs	r1, #5
 800141a:	4710      	bx	r2
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001420:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001428:	b113      	cbz	r3, 8001430 <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 800142a:	2300      	movs	r3, #0
 800142c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 8001430:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001434:	4620      	mov	r0, r4
 8001436:	f002 fe85 	bl	8004144 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	b363      	cbz	r3, 800149a <_usb_ep0setup+0x7a>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001440:	4620      	mov	r0, r4
 8001442:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001444:	b348      	cbz	r0, 800149a <_usb_ep0setup+0x7a>
 8001446:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001448:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 800144c:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 8001450:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8001454:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8001458:	428a      	cmp	r2, r1
 800145a:	bf2c      	ite	cs
 800145c:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 800145e:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001460:	0619      	lsls	r1, r3, #24
 8001462:	f100 808a 	bmi.w	800157a <_usb_ep0setup+0x15a>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8001466:	2a00      	cmp	r2, #0
 8001468:	d05a      	beq.n	8001520 <_usb_ep0setup+0x100>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 800146a:	2315      	movs	r3, #21
 800146c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001470:	2320      	movs	r3, #32
 8001472:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001476:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001478:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 800147a:	699b      	ldr	r3, [r3, #24]
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800147c:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001480:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8001484:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001486:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001488:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 800148a:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 800148e:	4629      	mov	r1, r5
 8001490:	f002 fe62 	bl	8004158 <usb_lld_start_out>
 8001494:	f385 8811 	msr	BASEPRI, r5
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 8001498:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800149a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800149e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80014a2:	4618      	mov	r0, r3
 80014a4:	d011      	beq.n	80014ca <_usb_ep0setup+0xaa>
      usb_lld_stall_in(usbp, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	4620      	mov	r0, r4
 80014aa:	f002 fef3 	bl	8004294 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	4620      	mov	r0, r4
 80014b2:	f002 fee5 	bl	8004280 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80014b6:	6863      	ldr	r3, [r4, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b113      	cbz	r3, 80014c2 <_usb_ep0setup+0xa2>
 80014bc:	2106      	movs	r1, #6
 80014be:	4620      	mov	r0, r4
 80014c0:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 80014c2:	2306      	movs	r3, #6
 80014c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 80014ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80014ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80014d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80014d6:	f240 3102 	movw	r1, #770	; 0x302
 80014da:	428a      	cmp	r2, r1
 80014dc:	f000 80f1 	beq.w	80016c2 <_usb_ep0setup+0x2a2>
 80014e0:	d835      	bhi.n	800154e <_usb_ep0setup+0x12e>
 80014e2:	2a02      	cmp	r2, #2
 80014e4:	f000 80d6 	beq.w	8001694 <_usb_ep0setup+0x274>
 80014e8:	f240 80af 	bls.w	800164a <_usb_ep0setup+0x22a>
 80014ec:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80014f0:	f000 80b3 	beq.w	800165a <_usb_ep0setup+0x23a>
 80014f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80014f8:	f000 8087 	beq.w	800160a <_usb_ep0setup+0x1ea>
 80014fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001500:	d1d1      	bne.n	80014a6 <_usb_ep0setup+0x86>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001502:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001506:	2b01      	cmp	r3, #1
 8001508:	d1cd      	bne.n	80014a6 <_usb_ep0setup+0x86>
      usbp->status &= ~2U;
 800150a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800150e:	63a5      	str	r5, [r4, #56]	; 0x38
 8001510:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800151c:	0603      	lsls	r3, r0, #24
 800151e:	d445      	bmi.n	80015ac <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001520:	230b      	movs	r3, #11
 8001522:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001526:	2320      	movs	r3, #32
 8001528:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 800152c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800152e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001530:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001532:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800153a:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 800153c:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 800153e:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001542:	4629      	mov	r1, r5
 8001544:	f002 fe48 	bl	80041d8 <usb_lld_start_in>
 8001548:	f385 8811 	msr	BASEPRI, r5
}
 800154c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800154e:	f240 6101 	movw	r1, #1537	; 0x601
 8001552:	428a      	cmp	r2, r1
 8001554:	d968      	bls.n	8001628 <_usb_ep0setup+0x208>
 8001556:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800155a:	d03e      	beq.n	80015da <_usb_ep0setup+0x1ba>
 800155c:	f640 4102 	movw	r1, #3074	; 0xc02
 8001560:	428a      	cmp	r2, r1
 8001562:	f000 8090 	beq.w	8001686 <_usb_ep0setup+0x266>
 8001566:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800156a:	d19c      	bne.n	80014a6 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800156c:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8001570:	2101      	movs	r1, #1
 8001572:	6425      	str	r5, [r4, #64]	; 0x40
 8001574:	e9c4 210e 	strd	r2, r1, [r4, #56]	; 0x38
 8001578:	e768      	b.n	800144c <_usb_ep0setup+0x2c>
    if (usbp->ep0n != 0U) {
 800157a:	b1ba      	cbz	r2, 80015ac <_usb_ep0setup+0x18c>
      usbp->ep0state = USB_EP0_IN_TX;
 800157c:	2309      	movs	r3, #9
 800157e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001582:	2320      	movs	r3, #32
 8001584:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001588:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800158a:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 800158c:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800158e:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001592:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8001596:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001598:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800159a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 800159c:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 80015a0:	4629      	mov	r1, r5
 80015a2:	f002 fe19 	bl	80041d8 <usb_lld_start_in>
 80015a6:	f385 8811 	msr	BASEPRI, r5
}
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80015ac:	2314      	movs	r3, #20
 80015ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80015b2:	2320      	movs	r3, #32
 80015b4:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 80015b8:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80015ba:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80015bc:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 80015be:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80015c6:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 80015c8:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80015ca:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80015ce:	4629      	mov	r1, r5
 80015d0:	f002 fdc2 	bl	8004158 <usb_lld_start_out>
 80015d4:	f385 8811 	msr	BASEPRI, r5
}
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
      if (usbp->state == USB_ACTIVE) {
 80015da:	7823      	ldrb	r3, [r4, #0]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	f000 80b3 	beq.w	8001748 <_usb_ep0setup+0x328>
      if (usbp->setup[2] != 0U) {
 80015e2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80015e6:	b14b      	cbz	r3, 80015fc <_usb_ep0setup+0x1dc>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80015e8:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 80015ea:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80015ee:	6813      	ldr	r3, [r2, #0]
        usbp->state = USB_ACTIVE;
 80015f0:	2204      	movs	r2, #4
 80015f2:	7022      	strb	r2, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80015f4:	b113      	cbz	r3, 80015fc <_usb_ep0setup+0x1dc>
 80015f6:	2102      	movs	r1, #2
 80015f8:	4620      	mov	r0, r4
 80015fa:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80015fc:	2300      	movs	r3, #0
 80015fe:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001602:	6423      	str	r3, [r4, #64]	; 0x40
 8001604:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001608:	e788      	b.n	800151c <_usb_ep0setup+0xfc>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800160a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800160e:	2b01      	cmp	r3, #1
 8001610:	f47f af49 	bne.w	80014a6 <_usb_ep0setup+0x86>
      usbp->status |= 2U;
 8001614:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001618:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status |= 2U;
 800161a:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800161e:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8001622:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8001626:	e779      	b.n	800151c <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001628:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800162c:	d25b      	bcs.n	80016e6 <_usb_ep0setup+0x2c6>
 800162e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001632:	f47f af38 	bne.w	80014a6 <_usb_ep0setup+0x86>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8001636:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800163a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800163e:	d071      	beq.n	8001724 <_usb_ep0setup+0x304>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001640:	2300      	movs	r3, #0
 8001642:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001646:	6423      	str	r3, [r4, #64]	; 0x40
 8001648:	e768      	b.n	800151c <_usb_ep0setup+0xfc>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800164a:	b9ca      	cbnz	r2, 8001680 <_usb_ep0setup+0x260>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800164c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8001650:	2102      	movs	r1, #2
 8001652:	6422      	str	r2, [r4, #64]	; 0x40
 8001654:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8001658:	e6f8      	b.n	800144c <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800165a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f af21 	bne.w	80014a6 <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001664:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001668:	f013 010f 	ands.w	r1, r3, #15
 800166c:	d0e8      	beq.n	8001640 <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800166e:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8001670:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001672:	f100 8088 	bmi.w	8001786 <_usb_ep0setup+0x366>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 8001676:	f002 fe17 	bl	80042a8 <usb_lld_clear_out>
 800167a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800167e:	e7df      	b.n	8001640 <_usb_ep0setup+0x220>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001680:	2a01      	cmp	r2, #1
 8001682:	f47f af10 	bne.w	80014a6 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001686:	4a45      	ldr	r2, [pc, #276]	; (800179c <_usb_ep0setup+0x37c>)
 8001688:	63a2      	str	r2, [r4, #56]	; 0x38
 800168a:	2102      	movs	r1, #2
 800168c:	2200      	movs	r2, #0
 800168e:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 8001692:	e6db      	b.n	800144c <_usb_ep0setup+0x2c>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001694:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001698:	f003 010f 	and.w	r1, r3, #15
 800169c:	061b      	lsls	r3, r3, #24
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800169e:	4620      	mov	r0, r4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80016a0:	d43a      	bmi.n	8001718 <_usb_ep0setup+0x2f8>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80016a2:	f002 fd33 	bl	800410c <usb_lld_get_status_out>
 80016a6:	2801      	cmp	r0, #1
 80016a8:	d03a      	beq.n	8001720 <_usb_ep0setup+0x300>
 80016aa:	2802      	cmp	r0, #2
 80016ac:	f47f aefb 	bne.w	80014a6 <_usb_ep0setup+0x86>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80016b0:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <_usb_ep0setup+0x380>)
 80016b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80016b4:	2102      	movs	r1, #2
 80016b6:	2300      	movs	r3, #0
 80016b8:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
 80016bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80016c0:	e6c4      	b.n	800144c <_usb_ep0setup+0x2c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80016c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f47f aeed 	bne.w	80014a6 <_usb_ep0setup+0x86>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80016cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80016d0:	f013 010f 	ands.w	r1, r3, #15
 80016d4:	d0b4      	beq.n	8001640 <_usb_ep0setup+0x220>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80016d6:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80016d8:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80016da:	d459      	bmi.n	8001790 <_usb_ep0setup+0x370>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 80016dc:	f002 fdd0 	bl	8004280 <usb_lld_stall_out>
 80016e0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80016e4:	e7ac      	b.n	8001640 <_usb_ep0setup+0x220>
  hw |= (uint16_t)*p << 8U;
 80016e6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80016ea:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 80016ec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80016f0:	684e      	ldr	r6, [r1, #4]
 80016f2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80016f6:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80016fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80016fe:	4620      	mov	r0, r4
 8001700:	47b0      	blx	r6
    if (dp == NULL) {
 8001702:	2800      	cmp	r0, #0
 8001704:	f43f aecf 	beq.w	80014a6 <_usb_ep0setup+0x86>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001708:	e9d0 1300 	ldrd	r1, r3, [r0]
 800170c:	6425      	str	r5, [r4, #64]	; 0x40
 800170e:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
 8001712:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001716:	e699      	b.n	800144c <_usb_ep0setup+0x2c>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8001718:	f002 fd06 	bl	8004128 <usb_lld_get_status_in>
 800171c:	2801      	cmp	r0, #1
 800171e:	d1c4      	bne.n	80016aa <_usb_ep0setup+0x28a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <_usb_ep0setup+0x384>)
 8001722:	e7c6      	b.n	80016b2 <_usb_ep0setup+0x292>
  usbp->address = usbp->setup[2];
 8001724:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001728:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800172c:	4620      	mov	r0, r4
 800172e:	f002 fb3b 	bl	8003da8 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b113      	cbz	r3, 800173e <_usb_ep0setup+0x31e>
 8001738:	2101      	movs	r1, #1
 800173a:	4620      	mov	r0, r4
 800173c:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800173e:	2303      	movs	r3, #3
 8001740:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001744:	7023      	strb	r3, [r4, #0]
 8001746:	e77b      	b.n	8001640 <_usb_ep0setup+0x220>
 8001748:	2320      	movs	r3, #32
 800174a:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting &= 1U;
 800174e:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 8001750:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 8001752:	6125      	str	r5, [r4, #16]
  usbp->transmitting &= 1U;
 8001754:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 8001758:	f003 0301 	and.w	r3, r3, #1
    usbp->epc[i] = NULL;
 800175c:	e9c4 5505 	strd	r5, r5, [r4, #20]
  usbp->transmitting &= 1U;
 8001760:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 8001762:	8163      	strh	r3, [r4, #10]
  usb_lld_disable_endpoints(usbp);
 8001764:	4620      	mov	r0, r4
 8001766:	f002 fbdd 	bl	8003f24 <usb_lld_disable_endpoints>
 800176a:	f385 8811 	msr	BASEPRI, r5
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 800176e:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8001770:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001774:	681b      	ldr	r3, [r3, #0]
        usbp->state = USB_SELECTED;
 8001776:	2103      	movs	r1, #3
 8001778:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 800177a:	2b00      	cmp	r3, #0
 800177c:	f43f af31 	beq.w	80015e2 <_usb_ep0setup+0x1c2>
 8001780:	4620      	mov	r0, r4
 8001782:	4798      	blx	r3
 8001784:	e72d      	b.n	80015e2 <_usb_ep0setup+0x1c2>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8001786:	f002 fd99 	bl	80042bc <usb_lld_clear_in>
 800178a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800178e:	e757      	b.n	8001640 <_usb_ep0setup+0x220>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8001790:	f002 fd80 	bl	8004294 <usb_lld_stall_in>
 8001794:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001798:	e752      	b.n	8001640 <_usb_ep0setup+0x220>
 800179a:	bf00      	nop
 800179c:	080063c0 	.word	0x080063c0
 80017a0:	080063b8 	.word	0x080063b8
 80017a4:	080063bc 	.word	0x080063bc

080017a8 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80017a8:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80017aa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80017ae:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 80017b0:	2b15      	cmp	r3, #21
 80017b2:	d81c      	bhi.n	80017ee <_usb_ep0in+0x46>
 80017b4:	e8df f003 	tbb	[pc, r3]
 80017b8:	1b1b1b0b 	.word	0x1b1b1b0b
 80017bc:	1b0b1b1b 	.word	0x1b0b1b1b
 80017c0:	432c1c1b 	.word	0x432c1c1b
 80017c4:	1b1b1b1b 	.word	0x1b1b1b1b
 80017c8:	1b1b1b1b 	.word	0x1b1b1b1b
 80017cc:	0b0b      	.short	0x0b0b
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 80017ce:	2100      	movs	r1, #0
 80017d0:	f002 fd60 	bl	8004294 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80017d4:	2100      	movs	r1, #0
 80017d6:	4620      	mov	r0, r4
 80017d8:	f002 fd52 	bl	8004280 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b113      	cbz	r3, 80017e8 <_usb_ep0in+0x40>
 80017e2:	2106      	movs	r1, #6
 80017e4:	4620      	mov	r0, r4
 80017e6:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 80017e8:	2306      	movs	r3, #6
 80017ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 80017f0:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80017f4:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 80017f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 80017fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 80017fe:	429a      	cmp	r2, r3
 8001800:	d206      	bcs.n	8001810 <_usb_ep0in+0x68>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001802:	68c3      	ldr	r3, [r0, #12]
 8001804:	8a1b      	ldrh	r3, [r3, #16]
 8001806:	fbb2 f5f3 	udiv	r5, r2, r3
 800180a:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 800180e:	b1ed      	cbz	r5, 800184c <_usb_ep0in+0xa4>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001810:	2314      	movs	r3, #20
 8001812:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001816:	2320      	movs	r3, #32
 8001818:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800181c:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800181e:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001820:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001822:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800182a:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 800182c:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 800182e:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8001832:	4629      	mov	r1, r5
 8001834:	f002 fc90 	bl	8004158 <usb_lld_start_out>
 8001838:	f385 8811 	msr	BASEPRI, r5
}
 800183c:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 800183e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001840:	b103      	cbz	r3, 8001844 <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 8001842:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001844:	2300      	movs	r3, #0
 8001846:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	2320      	movs	r3, #32
 800184e:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001852:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001854:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001856:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800185e:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8001860:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001862:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001866:	f002 fcb7 	bl	80041d8 <usb_lld_start_in>
 800186a:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 800186e:	230a      	movs	r3, #10
 8001870:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop

08001878 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8001878:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800187c:	2a15      	cmp	r2, #21
 800187e:	d815      	bhi.n	80018ac <_usb_ep0out+0x34>
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	2301      	movs	r3, #1
 8001884:	4093      	lsls	r3, r2
 8001886:	f640 6241 	movw	r2, #3649	; 0xe41
 800188a:	4213      	tst	r3, r2
 800188c:	4604      	mov	r4, r0
 800188e:	d125      	bne.n	80018dc <_usb_ep0out+0x64>
 8001890:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8001894:	d00b      	beq.n	80018ae <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001896:	68c3      	ldr	r3, [r0, #12]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b92b      	cbnz	r3, 80018aa <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800189e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018a0:	b103      	cbz	r3, 80018a4 <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 80018a2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
 80018ac:	4770      	bx	lr
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	d5fb      	bpl.n	80018aa <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80018b2:	230b      	movs	r3, #11
 80018b4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80018b8:	2320      	movs	r3, #32
 80018ba:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80018be:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80018c0:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80018c2:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80018ca:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 80018cc:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 80018ce:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 80018d2:	f002 fc81 	bl	80041d8 <usb_lld_start_in>
 80018d6:	f385 8811 	msr	BASEPRI, r5
}
 80018da:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_stall_in(usbp, 0);
 80018dc:	2100      	movs	r1, #0
 80018de:	f002 fcd9 	bl	8004294 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80018e2:	2100      	movs	r1, #0
 80018e4:	4620      	mov	r0, r4
 80018e6:	f002 fccb 	bl	8004280 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80018ea:	6863      	ldr	r3, [r4, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b113      	cbz	r3, 80018f6 <_usb_ep0out+0x7e>
 80018f0:	2106      	movs	r1, #6
 80018f2:	4620      	mov	r0, r4
 80018f4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 80018f6:	2306      	movs	r3, #6
 80018f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
 80018fe:	bf00      	nop

08001900 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001900:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001902:	b410      	push	{r4}
 8001904:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001906:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800190a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800190e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001912:	0109      	lsls	r1, r1, #4
 8001914:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001918:	f000 001f 	and.w	r0, r0, #31
 800191c:	2201      	movs	r2, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800191e:	b2c9      	uxtb	r1, r1
 8001920:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001924:	fa02 f000 	lsl.w	r0, r2, r0
 8001928:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
}
 800192c:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001930:	6018      	str	r0, [r3, #0]
}
 8001932:	4770      	bx	lr

08001934 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001934:	4908      	ldr	r1, [pc, #32]	; (8001958 <nvicDisableVector+0x24>)
 8001936:	0943      	lsrs	r3, r0, #5
void nvicDisableVector(uint32_t n) {
 8001938:	b410      	push	{r4}
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800193a:	3320      	adds	r3, #32
 800193c:	f000 041f 	and.w	r4, r0, #31
 8001940:	2201      	movs	r2, #1
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8001942:	4408      	add	r0, r1
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001944:	40a2      	lsls	r2, r4
  NVIC->IP[n] = 0U;
 8001946:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n] = 0U;
 800194c:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
#endif
}
 8001950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <Vector58+0x30>)
OSAL_IRQ_HANDLER(Vector58) {
 800195e:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001960:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	400b      	ands	r3, r1
 8001966:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 800196a:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 800196c:	b14b      	cbz	r3, 8001982 <Vector58+0x26>
 800196e:	2320      	movs	r3, #32
 8001970:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8001974:	2100      	movs	r1, #0
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <Vector58+0x34>)
 8001978:	f003 ff38 	bl	80057ec <chThdDequeueAllI>
 800197c:	2300      	movs	r3, #0
 800197e:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001986:	f004 b963 	b.w	8005c50 <_port_irq_epilogue>
 800198a:	bf00      	nop
 800198c:	40013c00 	.word	0x40013c00
 8001990:	20000918 	.word	0x20000918

08001994 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <Vector5C+0x30>)
OSAL_IRQ_HANDLER(Vector5C) {
 8001996:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001998:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	400b      	ands	r3, r1
 800199e:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 80019a2:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 80019a4:	b14b      	cbz	r3, 80019ba <Vector5C+0x26>
 80019a6:	2320      	movs	r3, #32
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <Vector5C+0x34>)
 80019b0:	f003 ff1c 	bl	80057ec <chThdDequeueAllI>
 80019b4:	2300      	movs	r3, #0
 80019b6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80019ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80019be:	f004 b947 	b.w	8005c50 <_port_irq_epilogue>
 80019c2:	bf00      	nop
 80019c4:	40013c00 	.word	0x40013c00
 80019c8:	20000920 	.word	0x20000920

080019cc <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <Vector60+0x30>)
OSAL_IRQ_HANDLER(Vector60) {
 80019ce:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80019d0:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	400b      	ands	r3, r1
 80019d6:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 80019da:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 80019dc:	b14b      	cbz	r3, 80019f2 <Vector60+0x26>
 80019de:	2320      	movs	r3, #32
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	2100      	movs	r1, #0
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <Vector60+0x34>)
 80019e8:	f003 ff00 	bl	80057ec <chThdDequeueAllI>
 80019ec:	2300      	movs	r3, #0
 80019ee:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80019f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80019f6:	f004 b92b 	b.w	8005c50 <_port_irq_epilogue>
 80019fa:	bf00      	nop
 80019fc:	40013c00 	.word	0x40013c00
 8001a00:	20000928 	.word	0x20000928

08001a04 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <Vector64+0x30>)
OSAL_IRQ_HANDLER(Vector64) {
 8001a06:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001a08:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8001a12:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8001a14:	b14b      	cbz	r3, 8001a2a <Vector64+0x26>
 8001a16:	2320      	movs	r3, #32
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <Vector64+0x34>)
 8001a20:	f003 fee4 	bl	80057ec <chThdDequeueAllI>
 8001a24:	2300      	movs	r3, #0
 8001a26:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001a2e:	f004 b90f 	b.w	8005c50 <_port_irq_epilogue>
 8001a32:	bf00      	nop
 8001a34:	40013c00 	.word	0x40013c00
 8001a38:	20000930 	.word	0x20000930

08001a3c <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <Vector68+0x30>)
OSAL_IRQ_HANDLER(Vector68) {
 8001a3e:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8001a40:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	400b      	ands	r3, r1
 8001a46:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8001a4a:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8001a4c:	b14b      	cbz	r3, 8001a62 <Vector68+0x26>
 8001a4e:	2320      	movs	r3, #32
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	2100      	movs	r1, #0
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <Vector68+0x34>)
 8001a58:	f003 fec8 	bl	80057ec <chThdDequeueAllI>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001a66:	f004 b8f3 	b.w	8005c50 <_port_irq_epilogue>
 8001a6a:	bf00      	nop
 8001a6c:	40013c00 	.word	0x40013c00
 8001a70:	20000938 	.word	0x20000938

08001a74 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <Vector9C+0x98>)
OSAL_IRQ_HANDLER(Vector9C) {
 8001a76:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8001a78:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	4014      	ands	r4, r2
 8001a7e:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 8001a82:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 5);
 8001a84:	06a3      	lsls	r3, r4, #26
 8001a86:	d436      	bmi.n	8001af6 <Vector9C+0x82>
  exti_serve_irq(pr, 6);
 8001a88:	0660      	lsls	r0, r4, #25
 8001a8a:	d429      	bmi.n	8001ae0 <Vector9C+0x6c>
  exti_serve_irq(pr, 7);
 8001a8c:	0621      	lsls	r1, r4, #24
 8001a8e:	d41c      	bmi.n	8001aca <Vector9C+0x56>
  exti_serve_irq(pr, 8);
 8001a90:	05e2      	lsls	r2, r4, #23
 8001a92:	d40f      	bmi.n	8001ab4 <Vector9C+0x40>
  exti_serve_irq(pr, 9);
 8001a94:	05a3      	lsls	r3, r4, #22
 8001a96:	d509      	bpl.n	8001aac <Vector9C+0x38>
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	481b      	ldr	r0, [pc, #108]	; (8001b10 <Vector9C+0x9c>)
 8001aa2:	f003 fea3 	bl	80057ec <chThdDequeueAllI>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001ab0:	f004 b8ce 	b.w	8005c50 <_port_irq_epilogue>
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	4815      	ldr	r0, [pc, #84]	; (8001b14 <Vector9C+0xa0>)
 8001abe:	f003 fe95 	bl	80057ec <chThdDequeueAllI>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	e7e4      	b.n	8001a94 <Vector9C+0x20>
 8001aca:	2320      	movs	r3, #32
 8001acc:	f383 8811 	msr	BASEPRI, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <Vector9C+0xa4>)
 8001ad4:	f003 fe8a 	bl	80057ec <chThdDequeueAllI>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f383 8811 	msr	BASEPRI, r3
 8001ade:	e7d7      	b.n	8001a90 <Vector9C+0x1c>
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <Vector9C+0xa8>)
 8001aea:	f003 fe7f 	bl	80057ec <chThdDequeueAllI>
 8001aee:	2300      	movs	r3, #0
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	e7ca      	b.n	8001a8c <Vector9C+0x18>
 8001af6:	2320      	movs	r3, #32
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <Vector9C+0xac>)
 8001b00:	f003 fe74 	bl	80057ec <chThdDequeueAllI>
 8001b04:	2300      	movs	r3, #0
 8001b06:	f383 8811 	msr	BASEPRI, r3
 8001b0a:	e7bd      	b.n	8001a88 <Vector9C+0x14>
 8001b0c:	40013c00 	.word	0x40013c00
 8001b10:	20000960 	.word	0x20000960
 8001b14:	20000958 	.word	0x20000958
 8001b18:	20000950 	.word	0x20000950
 8001b1c:	20000948 	.word	0x20000948
 8001b20:	20000940 	.word	0x20000940

08001b24 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <VectorE0+0xb4>)
OSAL_IRQ_HANDLER(VectorE0) {
 8001b26:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8001b28:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	4014      	ands	r4, r2
 8001b2e:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8001b32:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8001b34:	0562      	lsls	r2, r4, #21
 8001b36:	d443      	bmi.n	8001bc0 <VectorE0+0x9c>
  exti_serve_irq(pr, 11);
 8001b38:	0523      	lsls	r3, r4, #20
 8001b3a:	d436      	bmi.n	8001baa <VectorE0+0x86>
  exti_serve_irq(pr, 12);
 8001b3c:	04e0      	lsls	r0, r4, #19
 8001b3e:	d429      	bmi.n	8001b94 <VectorE0+0x70>
  exti_serve_irq(pr, 13);
 8001b40:	04a1      	lsls	r1, r4, #18
 8001b42:	d41c      	bmi.n	8001b7e <VectorE0+0x5a>
  exti_serve_irq(pr, 14);
 8001b44:	0462      	lsls	r2, r4, #17
 8001b46:	d40f      	bmi.n	8001b68 <VectorE0+0x44>
  exti_serve_irq(pr, 15);
 8001b48:	0423      	lsls	r3, r4, #16
 8001b4a:	d509      	bpl.n	8001b60 <VectorE0+0x3c>
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	4821      	ldr	r0, [pc, #132]	; (8001bdc <VectorE0+0xb8>)
 8001b56:	f003 fe49 	bl	80057ec <chThdDequeueAllI>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b64:	f004 b874 	b.w	8005c50 <_port_irq_epilogue>
 8001b68:	2320      	movs	r3, #32
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	481b      	ldr	r0, [pc, #108]	; (8001be0 <VectorE0+0xbc>)
 8001b72:	f003 fe3b 	bl	80057ec <chThdDequeueAllI>
 8001b76:	2300      	movs	r3, #0
 8001b78:	f383 8811 	msr	BASEPRI, r3
 8001b7c:	e7e4      	b.n	8001b48 <VectorE0+0x24>
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f383 8811 	msr	BASEPRI, r3
 8001b84:	2100      	movs	r1, #0
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <VectorE0+0xc0>)
 8001b88:	f003 fe30 	bl	80057ec <chThdDequeueAllI>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	e7d7      	b.n	8001b44 <VectorE0+0x20>
 8001b94:	2320      	movs	r3, #32
 8001b96:	f383 8811 	msr	BASEPRI, r3
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <VectorE0+0xc4>)
 8001b9e:	f003 fe25 	bl	80057ec <chThdDequeueAllI>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f383 8811 	msr	BASEPRI, r3
 8001ba8:	e7ca      	b.n	8001b40 <VectorE0+0x1c>
 8001baa:	2320      	movs	r3, #32
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <VectorE0+0xc8>)
 8001bb4:	f003 fe1a 	bl	80057ec <chThdDequeueAllI>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	e7bd      	b.n	8001b3c <VectorE0+0x18>
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <VectorE0+0xcc>)
 8001bca:	f003 fe0f 	bl	80057ec <chThdDequeueAllI>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	e7b0      	b.n	8001b38 <VectorE0+0x14>
 8001bd6:	bf00      	nop
 8001bd8:	40013c00 	.word	0x40013c00
 8001bdc:	20000990 	.word	0x20000990
 8001be0:	20000988 	.word	0x20000988
 8001be4:	20000980 	.word	0x20000980
 8001be8:	20000978 	.word	0x20000978
 8001bec:	20000970 	.word	0x20000970
 8001bf0:	20000968 	.word	0x20000968

08001bf4 <irqInit>:
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001bf4:	2106      	movs	r1, #6
void irqInit(void) {
 8001bf6:	b508      	push	{r3, lr}
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	f7ff fe81 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8001bfe:	2106      	movs	r1, #6
 8001c00:	2007      	movs	r0, #7
 8001c02:	f7ff fe7d 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8001c06:	2106      	movs	r1, #6
 8001c08:	2008      	movs	r0, #8
 8001c0a:	f7ff fe79 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2009      	movs	r0, #9
 8001c12:	f7ff fe75 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8001c16:	2106      	movs	r1, #6
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f7ff fe71 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8001c1e:	2106      	movs	r1, #6
 8001c20:	2017      	movs	r0, #23
 8001c22:	f7ff fe6d 	bl	8001900 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001c26:	2106      	movs	r1, #6
 8001c28:	2028      	movs	r0, #40	; 0x28
#endif
}
 8001c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001c2e:	f7ff be67 	b.w	8001900 <nvicEnableVector>
 8001c32:	bf00      	nop

08001c34 <hal_lld_init>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <hal_lld_init+0x8c>)
  PWR->CR |= PWR_CR_DBP;
 8001c36:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <hal_lld_init+0x90>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8001c3e:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
void hal_lld_init(void) {
 8001c42:	b510      	push	{r4, lr}
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c4c:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8001c4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001c52:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	615c      	str	r4, [r3, #20]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	6159      	str	r1, [r3, #20]
 8001c5e:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8001c66:	621a      	str	r2, [r3, #32]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8001c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c74:	625c      	str	r4, [r3, #36]	; 0x24
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c78:	6259      	str	r1, [r3, #36]	; 0x24
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8001c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
 8001c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60
 8001c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c94:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001ca0:	d003      	beq.n	8001caa <hal_lld_init+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca6:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001ca8:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001caa:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <hal_lld_init+0x90>)
 8001cac:	6853      	ldr	r3, [r2, #4]
 8001cae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cb2:	6053      	str	r3, [r2, #4]
  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001cb4:	f000 fcca 	bl	800264c <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  irqInit();
 8001cbc:	f7ff bf9a 	b.w	8001bf4 <irqInit>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <stm32_clock_init+0xd0>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001cca:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <stm32_clock_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001ccc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8001cd0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001cd4:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001cd6:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	0792      	lsls	r2, r2, #30
 8001ce4:	d5fc      	bpl.n	8001ce0 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001ce6:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <stm32_clock_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001cea:	f021 0103 	bic.w	r1, r1, #3
 8001cee:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	f013 030c 	ands.w	r3, r3, #12
 8001cf6:	d1fb      	bne.n	8001cf0 <stm32_clock_init+0x28>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001cf8:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001cfa:	4927      	ldr	r1, [pc, #156]	; (8001d98 <stm32_clock_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001cfc:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001d00:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001d02:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001d0c:	680b      	ldr	r3, [r1, #0]
 8001d0e:	0398      	lsls	r0, r3, #14
 8001d10:	d5fc      	bpl.n	8001d0c <stm32_clock_init+0x44>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001d12:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <stm32_clock_init+0xd0>)
  RCC->CSR |= RCC_CSR_LSION;
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001d1c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001d1e:	0799      	lsls	r1, r3, #30
 8001d20:	d5fc      	bpl.n	8001d1c <stm32_clock_init+0x54>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <stm32_clock_init+0xd8>)
 8001d24:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001d26:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001d28:	491c      	ldr	r1, [pc, #112]	; (8001d9c <stm32_clock_init+0xd4>)
  RCC->CR |= RCC_CR_PLLON;
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001d30:	684b      	ldr	r3, [r1, #4]
 8001d32:	045a      	lsls	r2, r3, #17
 8001d34:	d5fc      	bpl.n	8001d30 <stm32_clock_init+0x68>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <stm32_clock_init+0xd0>)
 8001d38:	6813      	ldr	r3, [r2, #0]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	d5fc      	bpl.n	8001d38 <stm32_clock_init+0x70>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001d3e:	4919      	ldr	r1, [pc, #100]	; (8001da4 <stm32_clock_init+0xdc>)
 8001d40:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <stm32_clock_init+0xe0>)
    RCC->DCKCFGR = dckcfgr |
 8001d44:	2103      	movs	r1, #3
 8001d46:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <stm32_clock_init+0xe4>)
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d017      	beq.n	8001d82 <stm32_clock_init+0xba>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <stm32_clock_init+0xe8>)
 8001d54:	f240 7205 	movw	r2, #1797	; 0x705
 8001d58:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <stm32_clock_init+0xd0>)
 8001d5c:	6893      	ldr	r3, [r2, #8]
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001d64:	6893      	ldr	r3, [r2, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d1fa      	bne.n	8001d64 <stm32_clock_init+0x9c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001d6e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6653      	str	r3, [r2, #100]	; 0x64
 8001d7e:	6e53      	ldr	r3, [r2, #100]	; 0x64
}
 8001d80:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <stm32_clock_init+0xec>)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <stm32_clock_init+0xf0>)
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1e2      	bne.n	8001d52 <stm32_clock_init+0x8a>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <stm32_clock_init+0xe8>)
 8001d8e:	f240 1205 	movw	r2, #261	; 0x105
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e7e1      	b.n	8001d5a <stm32_clock_init+0x92>
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	0740540c 	.word	0x0740540c
 8001da4:	38889400 	.word	0x38889400
 8001da8:	e0042000 	.word	0xe0042000
 8001dac:	20006411 	.word	0x20006411
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	e000ed00 	.word	0xe000ed00
 8001db8:	410fc241 	.word	0x410fc241

08001dbc <Vector88>:
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8001dbc:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <Vector88+0xd4>)
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001dbe:	b570      	push	{r4, r5, r6, lr}
  sr = ADC1->SR;
 8001dc0:	6815      	ldr	r5, [r2, #0]
  ADC1->SR = 0;
 8001dc2:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001dc4:	06ab      	lsls	r3, r5, #26
  ADC1->SR = 0;
 8001dc6:	6011      	str	r1, [r2, #0]
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001dc8:	d42c      	bmi.n	8001e24 <Vector88+0x68>
 8001dca:	f005 0501 	and.w	r5, r5, #1
      /* ADC overflow condition, this could happen only if the DMA is unable
        to read data fast enough.*/
      if (ADCD1.grpp != NULL)
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
    }
  if (sr & ADC_SR_AWD) {
 8001dce:	b32d      	cbz	r5, 8001e1c <Vector88+0x60>
    if (ADCD1.grpp != NULL) {
 8001dd0:	4c30      	ldr	r4, [pc, #192]	; (8001e94 <Vector88+0xd8>)
 8001dd2:	6922      	ldr	r2, [r4, #16]
 8001dd4:	b312      	cbz	r2, 8001e1c <Vector88+0x60>

  if (adcp->config->useDMA)
  {
  // dmaStreamDisable(adcp->dmastp);
  }
  adcp->adc->CR1 = 0;
 8001dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001dd8:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001dde:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001de0:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001de2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001de6:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001de8:	6099      	str	r1, [r3, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001dea:	2d00      	cmp	r5, #0
 8001dec:	d048      	beq.n	8001e80 <Vector88+0xc4>
 8001dee:	2305      	movs	r3, #5
 8001df0:	7023      	strb	r3, [r4, #0]
 8001df2:	2102      	movs	r1, #2
 8001df4:	4620      	mov	r0, r4
 8001df6:	47a8      	blx	r5
 8001df8:	7823      	ldrb	r3, [r4, #0]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	bf04      	itt	eq
 8001dfe:	2302      	moveq	r3, #2
 8001e00:	7023      	strbeq	r3, [r4, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	6123      	str	r3, [r4, #16]
 8001e06:	2320      	movs	r3, #32
 8001e08:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	4821      	ldr	r0, [pc, #132]	; (8001e98 <Vector88+0xdc>)
 8001e12:	f003 fcbd 	bl	8005790 <chThdResumeI>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f383 8811 	msr	BASEPRI, r3
}
 8001e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001e20:	f003 bf16 	b.w	8005c50 <_port_irq_epilogue>
    if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001e24:	4c1b      	ldr	r4, [pc, #108]	; (8001e94 <Vector88+0xd8>)
 8001e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	6852      	ldr	r2, [r2, #4]
 8001e2c:	f005 0501 	and.w	r5, r5, #1
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d0cc      	beq.n	8001dce <Vector88+0x12>
      if (ADCD1.grpp != NULL)
 8001e34:	6922      	ldr	r2, [r4, #16]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d0f0      	beq.n	8001e1c <Vector88+0x60>
  adcp->adc->CR1 = 0;
 8001e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001e3c:	6896      	ldr	r6, [r2, #8]
  adcp->adc->CR1 = 0;
 8001e3e:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e40:	689a      	ldr	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e42:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8001e44:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001e48:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001e4a:	6099      	str	r1, [r3, #8]
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001e4c:	b1e6      	cbz	r6, 8001e88 <Vector88+0xcc>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	7023      	strb	r3, [r4, #0]
 8001e52:	4620      	mov	r0, r4
 8001e54:	47b0      	blx	r6
 8001e56:	7823      	ldrb	r3, [r4, #0]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	bf04      	itt	eq
 8001e5c:	2302      	moveq	r3, #2
 8001e5e:	7023      	strbeq	r3, [r4, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	2320      	movs	r3, #32
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e6e:	480a      	ldr	r0, [pc, #40]	; (8001e98 <Vector88+0xdc>)
 8001e70:	f003 fc8e 	bl	8005790 <chThdResumeI>
 8001e74:	2300      	movs	r3, #0
 8001e76:	f383 8811 	msr	BASEPRI, r3
  if (sr & ADC_SR_AWD) {
 8001e7a:	2d00      	cmp	r5, #0
 8001e7c:	d1a8      	bne.n	8001dd0 <Vector88+0x14>
 8001e7e:	e7cd      	b.n	8001e1c <Vector88+0x60>
      _adc_isr_error_code(&ADCD1, ADC_ERR_WATCHDOG);
 8001e80:	2302      	movs	r3, #2
 8001e82:	6125      	str	r5, [r4, #16]
 8001e84:	7023      	strb	r3, [r4, #0]
 8001e86:	e7be      	b.n	8001e06 <Vector88+0x4a>
        _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001e88:	2302      	movs	r3, #2
 8001e8a:	6126      	str	r6, [r4, #16]
 8001e8c:	7023      	strb	r3, [r4, #0]
 8001e8e:	e7e9      	b.n	8001e64 <Vector88+0xa8>
 8001e90:	40012000 	.word	0x40012000
 8001e94:	20000808 	.word	0x20000808
 8001e98:	2000081c 	.word	0x2000081c

08001e9c <adc_lld_init>:
void adc_lld_init(void) {
 8001e9c:	b510      	push	{r4, lr}
  adcObjectInit(&ADCD1);
 8001e9e:	4c08      	ldr	r4, [pc, #32]	; (8001ec0 <adc_lld_init+0x24>)
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7fe ff4d 	bl	8000d40 <adcObjectInit>
  ADCD1.adc     = ADC1;
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <adc_lld_init+0x28>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <adc_lld_init+0x2c>)
  ADCD1.adc     = ADC1;
 8001eaa:	62a2      	str	r2, [r4, #40]	; 0x28
  ADCD1.dmastp  = NULL;
 8001eac:	2200      	movs	r2, #0
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001eae:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001eb2:	2106      	movs	r1, #6
 8001eb4:	2012      	movs	r0, #18
}
 8001eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001eba:	f7ff bd21 	b.w	8001900 <nvicEnableVector>
 8001ebe:	bf00      	nop
 8001ec0:	20000808 	.word	0x20000808
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	00022c16 	.word	0x00022c16

08001ecc <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <Vector8C+0xc0>)
 8001ece:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ed0:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8001ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 8001ed6:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001ed8:	f013 0101 	ands.w	r1, r3, #1
 8001edc:	d045      	beq.n	8001f6a <Vector8C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8001ede:	f003 0c0c 	and.w	ip, r3, #12
 8001ee2:	492b      	ldr	r1, [pc, #172]	; (8001f90 <Vector8C+0xc4>)
 8001ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001fb0 <Vector8C+0xe4>
 8001ee8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001fb4 <Vector8C+0xe8>
 8001eec:	4e29      	ldr	r6, [pc, #164]	; (8001f94 <Vector8C+0xc8>)
 8001eee:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8001fb8 <Vector8C+0xec>
 8001ef2:	4829      	ldr	r0, [pc, #164]	; (8001f98 <Vector8C+0xcc>)
 8001ef4:	4c29      	ldr	r4, [pc, #164]	; (8001f9c <Vector8C+0xd0>)
 8001ef6:	4f2a      	ldr	r7, [pc, #168]	; (8001fa0 <Vector8C+0xd4>)
 8001ef8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001fbc <Vector8C+0xf0>
 8001efc:	4d29      	ldr	r5, [pc, #164]	; (8001fa4 <Vector8C+0xd8>)
 8001efe:	f1bc 0f00 	cmp.w	ip, #0
 8001f02:	bf01      	itttt	eq
 8001f04:	468c      	moveq	ip, r1
 8001f06:	4656      	moveq	r6, sl
 8001f08:	46ce      	moveq	lr, r9
 8001f0a:	2005      	moveq	r0, #5
 8001f0c:	bf15      	itete	ne
 8001f0e:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 8001f12:	2707      	moveq	r7, #7
 8001f14:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 8001f18:	2503      	moveq	r5, #3
 8001f1a:	bf16      	itet	ne
 8001f1c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 8001f20:	2101      	moveq	r1, #1
 8001f22:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8001f26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f2a:	d005      	beq.n	8001f38 <Vector8C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001f2c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001f30:	d028      	beq.n	8001f84 <Vector8C+0xb8>
 8001f32:	4670      	mov	r0, lr
 8001f34:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8001f36:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8001f38:	03dd      	lsls	r5, r3, #15
 8001f3a:	d504      	bpl.n	8001f46 <Vector8C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8001f3c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8001f40:	bf14      	ite	ne
 8001f42:	4621      	movne	r1, r4
 8001f44:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 8001f46:	69d3      	ldr	r3, [r2, #28]
 8001f48:	b10b      	cbz	r3, 8001f4e <Vector8C+0x82>
 8001f4a:	4810      	ldr	r0, [pc, #64]	; (8001f8c <Vector8C+0xc0>)
 8001f4c:	4798      	blx	r3
 8001f4e:	2320      	movs	r3, #32
 8001f50:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8001f54:	2100      	movs	r1, #0
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <Vector8C+0xdc>)
 8001f58:	f003 fc48 	bl	80057ec <chThdDequeueAllI>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8001f62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001f66:	f003 be73 	b.w	8005c50 <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001f6a:	4e10      	ldr	r6, [pc, #64]	; (8001fac <Vector8C+0xe0>)
 8001f6c:	f8df e050 	ldr.w	lr, [pc, #80]	; 8001fc0 <Vector8C+0xf4>
 8001f70:	2004      	movs	r0, #4
 8001f72:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8001f76:	2706      	movs	r7, #6
 8001f78:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 8001f7c:	2502      	movs	r5, #2
 8001f7e:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8001f82:	e7d0      	b.n	8001f26 <Vector8C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001f84:	4638      	mov	r0, r7
 8001f86:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8001f88:	4629      	mov	r1, r5
 8001f8a:	e7d5      	b.n	8001f38 <Vector8C+0x6c>
 8001f8c:	2000083c 	.word	0x2000083c
 8001f90:	00020001 	.word	0x00020001
 8001f94:	00050002 	.word	0x00050002
 8001f98:	00010004 	.word	0x00010004
 8001f9c:	00040001 	.word	0x00040001
 8001fa0:	00010006 	.word	0x00010006
 8001fa4:	00010002 	.word	0x00010002
 8001fa8:	20000844 	.word	0x20000844
 8001fac:	00040002 	.word	0x00040002
 8001fb0:	00040003 	.word	0x00040003
 8001fb4:	00020005 	.word	0x00020005
 8001fb8:	00030004 	.word	0x00030004
 8001fbc:	00060001 	.word	0x00060001
 8001fc0:	00020004 	.word	0x00020004

08001fc4 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8001fc4:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8001fc6:	4c12      	ldr	r4, [pc, #72]	; (8002010 <Vector90+0x4c>)
 8001fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fca:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8001fcc:	07aa      	lsls	r2, r5, #30
 8001fce:	d012      	beq.n	8001ff6 <Vector90+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8001fd0:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8001fd2:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8001fd4:	f022 0202 	bic.w	r2, r2, #2
 8001fd8:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8001fda:	b116      	cbz	r6, 8001fe2 <Vector90+0x1e>
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4620      	mov	r0, r4
 8001fe0:	47b0      	blx	r6
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	480a      	ldr	r0, [pc, #40]	; (8002014 <Vector90+0x50>)
 8001fec:	f003 fbfe 	bl	80057ec <chThdDequeueAllI>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8001ff6:	06eb      	lsls	r3, r5, #27
 8001ff8:	d506      	bpl.n	8002008 <Vector90+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8001ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8001ffc:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8001ffe:	2110      	movs	r1, #16
 8002000:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002002:	b10b      	cbz	r3, 8002008 <Vector90+0x44>
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <Vector90+0x4c>)
 8002006:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8002008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800200c:	f003 be20 	b.w	8005c50 <_port_irq_epilogue>
 8002010:	2000083c 	.word	0x2000083c
 8002014:	2000084c 	.word	0x2000084c

08002018 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8002018:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 800201a:	4c12      	ldr	r4, [pc, #72]	; (8002064 <Vector94+0x4c>)
 800201c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800201e:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002020:	07aa      	lsls	r2, r5, #30
 8002022:	d012      	beq.n	800204a <Vector94+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002024:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002026:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002028:	f022 0210 	bic.w	r2, r2, #16
 800202c:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 800202e:	b116      	cbz	r6, 8002036 <Vector94+0x1e>
 8002030:	2102      	movs	r1, #2
 8002032:	4620      	mov	r0, r4
 8002034:	47b0      	blx	r6
 8002036:	2320      	movs	r3, #32
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	2100      	movs	r1, #0
 800203e:	480a      	ldr	r0, [pc, #40]	; (8002068 <Vector94+0x50>)
 8002040:	f003 fbd4 	bl	80057ec <chThdDequeueAllI>
 8002044:	2300      	movs	r3, #0
 8002046:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800204a:	06eb      	lsls	r3, r5, #27
 800204c:	d506      	bpl.n	800205c <Vector94+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800204e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002050:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002052:	2110      	movs	r1, #16
 8002054:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002056:	b10b      	cbz	r3, 800205c <Vector94+0x44>
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <Vector94+0x4c>)
 800205a:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800205c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002060:	f003 bdf6 	b.w	8005c50 <_port_irq_epilogue>
 8002064:	2000083c 	.word	0x2000083c
 8002068:	2000084c 	.word	0x2000084c

0800206c <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800206c:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 800206e:	4c0f      	ldr	r4, [pc, #60]	; (80020ac <Vector98+0x40>)
 8002070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002072:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8002074:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8002076:	072a      	lsls	r2, r5, #28
 8002078:	d50a      	bpl.n	8002090 <Vector98+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800207a:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 800207c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800207e:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 8002082:	2103      	movs	r1, #3
 8002084:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002086:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002088:	b116      	cbz	r6, 8002090 <Vector98+0x24>
 800208a:	2100      	movs	r1, #0
 800208c:	4620      	mov	r0, r4
 800208e:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 8002090:	076b      	lsls	r3, r5, #29
 8002092:	d506      	bpl.n	80020a2 <Vector98+0x36>
    uint32_t esr = canp->can->ESR;
 8002094:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 8002096:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 8002098:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 800209a:	b113      	cbz	r3, 80020a2 <Vector98+0x36>
 800209c:	0409      	lsls	r1, r1, #16
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <Vector98+0x40>)
 80020a0:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80020a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80020a6:	f003 bdd3 	b.w	8005c50 <_port_irq_epilogue>
 80020aa:	bf00      	nop
 80020ac:	2000083c 	.word	0x2000083c

080020b0 <Vector13C>:
  tsr = canp->can->TSR;
 80020b0:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <Vector13C+0xc0>)
 80020b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020b4:	688b      	ldr	r3, [r1, #8]
/**
 * @brief   CAN2 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_TX_HANDLER) {
 80020b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  canp->can->TSR = tsr;
 80020ba:	608b      	str	r3, [r1, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 80020bc:	f013 0101 	ands.w	r1, r3, #1
 80020c0:	d045      	beq.n	800214e <Vector13C+0x9e>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 80020c2:	f003 0c0c 	and.w	ip, r3, #12
 80020c6:	492b      	ldr	r1, [pc, #172]	; (8002174 <Vector13C+0xc4>)
 80020c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002194 <Vector13C+0xe4>
 80020cc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002198 <Vector13C+0xe8>
 80020d0:	4e29      	ldr	r6, [pc, #164]	; (8002178 <Vector13C+0xc8>)
 80020d2:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 800219c <Vector13C+0xec>
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <Vector13C+0xcc>)
 80020d8:	4c29      	ldr	r4, [pc, #164]	; (8002180 <Vector13C+0xd0>)
 80020da:	4f2a      	ldr	r7, [pc, #168]	; (8002184 <Vector13C+0xd4>)
 80020dc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80021a0 <Vector13C+0xf0>
 80020e0:	4d29      	ldr	r5, [pc, #164]	; (8002188 <Vector13C+0xd8>)
 80020e2:	f1bc 0f00 	cmp.w	ip, #0
 80020e6:	bf01      	itttt	eq
 80020e8:	468c      	moveq	ip, r1
 80020ea:	4656      	moveq	r6, sl
 80020ec:	46ce      	moveq	lr, r9
 80020ee:	2005      	moveq	r0, #5
 80020f0:	bf15      	itete	ne
 80020f2:	f44f 24a0 	movne.w	r4, #327680	; 0x50000
 80020f6:	2707      	moveq	r7, #7
 80020f8:	f44f 28e0 	movne.w	r8, #458752	; 0x70000
 80020fc:	2503      	moveq	r5, #3
 80020fe:	bf16      	itet	ne
 8002100:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 8002104:	2101      	moveq	r1, #1
 8002106:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800210a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800210e:	d005      	beq.n	800211c <Vector13C+0x6c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002110:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002114:	d028      	beq.n	8002168 <Vector13C+0xb8>
 8002116:	4670      	mov	r0, lr
 8002118:	4644      	mov	r4, r8
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 800211a:	4661      	mov	r1, ip
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800211c:	03dd      	lsls	r5, r3, #15
 800211e:	d504      	bpl.n	800212a <Vector13C+0x7a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8002120:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8002124:	bf14      	ite	ne
 8002126:	4621      	movne	r1, r4
 8002128:	4601      	moveq	r1, r0
  _can_tx_empty_isr(canp, flags);
 800212a:	69d3      	ldr	r3, [r2, #28]
 800212c:	b10b      	cbz	r3, 8002132 <Vector13C+0x82>
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <Vector13C+0xc0>)
 8002130:	4798      	blx	r3
 8002132:	2320      	movs	r3, #32
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	2100      	movs	r1, #0
 800213a:	4814      	ldr	r0, [pc, #80]	; (800218c <Vector13C+0xdc>)
 800213c:	f003 fb56 	bl	80057ec <chThdDequeueAllI>
 8002140:	2300      	movs	r3, #0
 8002142:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002146:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800214a:	f003 bd81 	b.w	8005c50 <_port_irq_epilogue>
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800214e:	4e10      	ldr	r6, [pc, #64]	; (8002190 <Vector13C+0xe0>)
 8002150:	f8df e050 	ldr.w	lr, [pc, #80]	; 80021a4 <Vector13C+0xf4>
 8002154:	2004      	movs	r0, #4
 8002156:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800215a:	2706      	movs	r7, #6
 800215c:	f44f 28c0 	mov.w	r8, #393216	; 0x60000
 8002160:	2502      	movs	r5, #2
 8002162:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8002166:	e7d0      	b.n	800210a <Vector13C+0x5a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8002168:	4638      	mov	r0, r7
 800216a:	4634      	mov	r4, r6
      flags |= CAN_MAILBOX_TO_MASK(2U);
 800216c:	4629      	mov	r1, r5
 800216e:	e7d5      	b.n	800211c <Vector13C+0x6c>
 8002170:	20000868 	.word	0x20000868
 8002174:	00020001 	.word	0x00020001
 8002178:	00050002 	.word	0x00050002
 800217c:	00010004 	.word	0x00010004
 8002180:	00040001 	.word	0x00040001
 8002184:	00010006 	.word	0x00010006
 8002188:	00010002 	.word	0x00010002
 800218c:	20000870 	.word	0x20000870
 8002190:	00040002 	.word	0x00040002
 8002194:	00040003 	.word	0x00040003
 8002198:	00020005 	.word	0x00020005
 800219c:	00030004 	.word	0x00030004
 80021a0:	00060001 	.word	0x00060001
 80021a4:	00020004 	.word	0x00020004

080021a8 <Vector140>:
/**
 * @brief   CAN2 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX0_HANDLER) {
 80021a8:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 80021aa:	4c12      	ldr	r4, [pc, #72]	; (80021f4 <Vector140+0x4c>)
 80021ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021ae:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 80021b0:	07aa      	lsls	r2, r5, #30
 80021b2:	d012      	beq.n	80021da <Vector140+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 80021b4:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 80021b6:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
 80021b8:	f022 0202 	bic.w	r2, r2, #2
 80021bc:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 80021be:	b116      	cbz	r6, 80021c6 <Vector140+0x1e>
 80021c0:	2101      	movs	r1, #1
 80021c2:	4620      	mov	r0, r4
 80021c4:	47b0      	blx	r6
 80021c6:	2320      	movs	r3, #32
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	480a      	ldr	r0, [pc, #40]	; (80021f8 <Vector140+0x50>)
 80021d0:	f003 fb0c 	bl	80057ec <chThdDequeueAllI>
 80021d4:	2300      	movs	r3, #0
 80021d6:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80021da:	06eb      	lsls	r3, r5, #27
 80021dc:	d506      	bpl.n	80021ec <Vector140+0x44>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80021de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80021e0:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80021e2:	2110      	movs	r1, #16
 80021e4:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80021e6:	b10b      	cbz	r3, 80021ec <Vector140+0x44>
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <Vector140+0x4c>)
 80021ea:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 80021ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80021f0:	f003 bd2e 	b.w	8005c50 <_port_irq_epilogue>
 80021f4:	20000868 	.word	0x20000868
 80021f8:	20000878 	.word	0x20000878

080021fc <Vector144>:
/**
 * @brief   CAN2 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_RX1_HANDLER) {
 80021fc:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 80021fe:	4c12      	ldr	r4, [pc, #72]	; (8002248 <Vector144+0x4c>)
 8002200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002202:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8002204:	07aa      	lsls	r2, r5, #30
 8002206:	d012      	beq.n	800222e <Vector144+0x32>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8002208:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 800220a:	69a6      	ldr	r6, [r4, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800220c:	f022 0210 	bic.w	r2, r2, #16
 8002210:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8002212:	b116      	cbz	r6, 800221a <Vector144+0x1e>
 8002214:	2102      	movs	r1, #2
 8002216:	4620      	mov	r0, r4
 8002218:	47b0      	blx	r6
 800221a:	2320      	movs	r3, #32
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	2100      	movs	r1, #0
 8002222:	480a      	ldr	r0, [pc, #40]	; (800224c <Vector144+0x50>)
 8002224:	f003 fae2 	bl	80057ec <chThdDequeueAllI>
 8002228:	2300      	movs	r3, #0
 800222a:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800222e:	06eb      	lsls	r3, r5, #27
 8002230:	d506      	bpl.n	8002240 <Vector144+0x44>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8002234:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8002236:	2110      	movs	r1, #16
 8002238:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 800223a:	b10b      	cbz	r3, 8002240 <Vector144+0x44>
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <Vector144+0x4c>)
 800223e:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002244:	f003 bd04 	b.w	8005c50 <_port_irq_epilogue>
 8002248:	20000868 	.word	0x20000868
 800224c:	20000878 	.word	0x20000878

08002250 <Vector148>:
/**
 * @brief   CAN2 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN2_SCE_HANDLER) {
 8002250:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 8002252:	4c0f      	ldr	r4, [pc, #60]	; (8002290 <Vector148+0x40>)
 8002254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002256:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8002258:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800225a:	072a      	lsls	r2, r5, #28
 800225c:	d50a      	bpl.n	8002274 <Vector148+0x24>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800225e:	681a      	ldr	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8002260:	6a66      	ldr	r6, [r4, #36]	; 0x24
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8002262:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 8002266:	2103      	movs	r1, #3
 8002268:	7021      	strb	r1, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800226a:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 800226c:	b116      	cbz	r6, 8002274 <Vector148+0x24>
 800226e:	2100      	movs	r1, #0
 8002270:	4620      	mov	r0, r4
 8002272:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
 8002274:	076b      	lsls	r3, r5, #29
 8002276:	d506      	bpl.n	8002286 <Vector148+0x36>
    uint32_t esr = canp->can->ESR;
 8002278:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 800227a:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
 800227c:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 800227e:	b113      	cbz	r3, 8002286 <Vector148+0x36>
 8002280:	0409      	lsls	r1, r1, #16
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <Vector148+0x40>)
 8002284:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND2);

  OSAL_IRQ_EPILOGUE();
}
 8002286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800228a:	f003 bce1 	b.w	8005c50 <_port_irq_epilogue>
 800228e:	bf00      	nop
 8002290:	20000868 	.word	0x20000868

08002294 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 8002294:	b538      	push	{r3, r4, r5, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 8002296:	4c3b      	ldr	r4, [pc, #236]	; (8002384 <can_lld_init+0xf0>)
#endif
#endif

#if STM32_CAN_USE_CAN2
  /* Driver initialization.*/
  canObjectInit(&CAND2);
 8002298:	4d3b      	ldr	r5, [pc, #236]	; (8002388 <can_lld_init+0xf4>)
  canObjectInit(&CAND1);
 800229a:	4620      	mov	r0, r4
 800229c:	f7fe fd5e 	bl	8000d5c <canObjectInit>
  CAND1.can = CAN1;
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <can_lld_init+0xf8>)
 80022a2:	62a3      	str	r3, [r4, #40]	; 0x28
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022a4:	210b      	movs	r1, #11
 80022a6:	2013      	movs	r0, #19
 80022a8:	f7ff fb2a 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022ac:	210b      	movs	r1, #11
 80022ae:	2014      	movs	r0, #20
 80022b0:	f7ff fb26 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022b4:	210b      	movs	r1, #11
 80022b6:	2015      	movs	r0, #21
 80022b8:	f7ff fb22 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80022bc:	210b      	movs	r1, #11
 80022be:	2016      	movs	r0, #22
 80022c0:	f7ff fb1e 	bl	8001900 <nvicEnableVector>
  canObjectInit(&CAND2);
 80022c4:	4628      	mov	r0, r5
 80022c6:	f7fe fd49 	bl	8000d5c <canObjectInit>
  CAND2.can = CAN2;
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <can_lld_init+0xfc>)
 80022cc:	62ab      	str	r3, [r5, #40]	; 0x28
#if defined(STM32_CAN2_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN2_UNIFIED_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN2_TX_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 80022ce:	210b      	movs	r1, #11
 80022d0:	203f      	movs	r0, #63	; 0x3f
 80022d2:	f7ff fb15 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX0_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 80022d6:	210b      	movs	r1, #11
 80022d8:	2040      	movs	r0, #64	; 0x40
 80022da:	f7ff fb11 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_RX1_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 80022de:	210b      	movs	r1, #11
 80022e0:	2041      	movs	r0, #65	; 0x41
 80022e2:	f7ff fb0d 	bl	8001900 <nvicEnableVector>
    nvicEnableVector(STM32_CAN2_SCE_NUMBER, STM32_CAN_CAN2_IRQ_PRIORITY);
 80022e6:	210b      	movs	r1, #11
 80022e8:	2042      	movs	r0, #66	; 0x42
 80022ea:	f7ff fb09 	bl	8001900 <nvicEnableVector>
    rccEnableCAN1(true);
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <can_lld_init+0x100>)
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80022f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    rccEnableCAN1(true);
 80022f2:	6c10      	ldr	r0, [r2, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80022f4:	4c28      	ldr	r4, [pc, #160]	; (8002398 <can_lld_init+0x104>)
    rccEnableCAN1(true);
 80022f6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80022fa:	6410      	str	r0, [r2, #64]	; 0x40
 80022fc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80022fe:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002302:	6610      	str	r0, [r2, #96]	; 0x60
 8002304:	6e11      	ldr	r1, [r2, #96]	; 0x60
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8002306:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800230a:	4020      	ands	r0, r4
 800230c:	f040 0001 	orr.w	r0, r0, #1
 8002310:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002314:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002318:	4021      	ands	r1, r4
 800231a:	f441 6160 	orr.w	r1, r1, #3584	; 0xe00
    canp->can->sFilterRegister[0].FR1 = 0;
 800231e:	2000      	movs	r0, #0
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002320:	f041 0101 	orr.w	r1, r1, #1
    canp->can->FS1R = 1;
 8002324:	2401      	movs	r4, #1
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8002326:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
 800232a:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 800232e:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
      canp->can->sFilterRegister[can2sb].FR1 = 0;
 8002332:	f8c3 02b0 	str.w	r0, [r3, #688]	; 0x2b0
      canp->can->sFilterRegister[can2sb].FR2 = 0;
 8002336:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
    canp->can->FM1R = 0;
 800233a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 800233e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 8002342:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 8002346:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
 800234a:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800234e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002352:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
      canp->can->FA1R |= 1 << can2sb;
 8002356:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800235a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800235e:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8002362:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002366:	f021 0101 	bic.w	r1, r1, #1
 800236a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
 800236e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002370:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002378:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800237c:	6613      	str	r3, [r2, #96]	; 0x60
 800237e:	6e13      	ldr	r3, [r2, #96]	; 0x60
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 8002380:	bd38      	pop	{r3, r4, r5, pc}
 8002382:	bf00      	nop
 8002384:	2000083c 	.word	0x2000083c
 8002388:	20000868 	.word	0x20000868
 800238c:	40006400 	.word	0x40006400
 8002390:	40006800 	.word	0x40006800
 8002394:	40023800 	.word	0x40023800
 8002398:	ffff0000 	.word	0xffff0000

0800239c <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 800239c:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023a2:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 80023a4:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80023aa:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80023ac:	b10a      	cbz	r2, 80023b2 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 80023ae:	6880      	ldr	r0, [r0, #8]
 80023b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80023b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80023b6:	f003 bc4b 	b.w	8005c50 <_port_irq_epilogue>
 80023ba:	bf00      	nop
 80023bc:	40026000 	.word	0x40026000
 80023c0:	20000894 	.word	0x20000894

080023c4 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023c8:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80023ca:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023cc:	0989      	lsrs	r1, r1, #6
 80023ce:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80023d2:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 80023d4:	018c      	lsls	r4, r1, #6
 80023d6:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80023d8:	b10a      	cbz	r2, 80023de <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80023da:	6900      	ldr	r0, [r0, #16]
 80023dc:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80023de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80023e2:	f003 bc35 	b.w	8005c50 <_port_irq_epilogue>
 80023e6:	bf00      	nop
 80023e8:	40026000 	.word	0x40026000
 80023ec:	20000894 	.word	0x20000894

080023f0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 80023f2:	4809      	ldr	r0, [pc, #36]	; (8002418 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80023f4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80023f6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80023f8:	0c09      	lsrs	r1, r1, #16
 80023fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80023fe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8002400:	040c      	lsls	r4, r1, #16
 8002402:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8002404:	b10a      	cbz	r2, 800240a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002406:	6980      	ldr	r0, [r0, #24]
 8002408:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800240a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800240e:	f003 bc1f 	b.w	8005c50 <_port_irq_epilogue>
 8002412:	bf00      	nop
 8002414:	40026000 	.word	0x40026000
 8002418:	20000894 	.word	0x20000894

0800241c <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002420:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8002422:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002424:	0d89      	lsrs	r1, r1, #22
 8002426:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800242a:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 800242c:	058c      	lsls	r4, r1, #22
 800242e:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8002430:	b10a      	cbz	r2, 8002436 <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002432:	6a00      	ldr	r0, [r0, #32]
 8002434:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800243a:	f003 bc09 	b.w	8005c50 <_port_irq_epilogue>
 800243e:	bf00      	nop
 8002440:	40026000 	.word	0x40026000
 8002444:	20000894 	.word	0x20000894

08002448 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002448:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800244e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8002450:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002452:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002456:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8002458:	b10a      	cbz	r2, 800245e <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 800245a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800245c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002462:	f003 bbf5 	b.w	8005c50 <_port_irq_epilogue>
 8002466:	bf00      	nop
 8002468:	40026000 	.word	0x40026000
 800246c:	20000894 	.word	0x20000894

08002470 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8002472:	4809      	ldr	r0, [pc, #36]	; (8002498 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002474:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8002476:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002478:	0989      	lsrs	r1, r1, #6
 800247a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800247e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8002480:	018c      	lsls	r4, r1, #6
 8002482:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8002484:	b10a      	cbz	r2, 800248a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002486:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002488:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800248e:	f003 bbdf 	b.w	8005c50 <_port_irq_epilogue>
 8002492:	bf00      	nop
 8002494:	40026000 	.word	0x40026000
 8002498:	20000894 	.word	0x20000894

0800249c <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80024a0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80024a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80024a4:	0c09      	lsrs	r1, r1, #16
 80024a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80024aa:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80024ac:	040c      	lsls	r4, r1, #16
 80024ae:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80024b0:	b10a      	cbz	r2, 80024b6 <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80024b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80024b4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80024ba:	f003 bbc9 	b.w	8005c50 <_port_irq_epilogue>
 80024be:	bf00      	nop
 80024c0:	40026000 	.word	0x40026000
 80024c4:	20000894 	.word	0x20000894

080024c8 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80024cc:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80024ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80024d0:	0d89      	lsrs	r1, r1, #22
 80024d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80024d6:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80024d8:	058c      	lsls	r4, r1, #22
 80024da:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80024dc:	b10a      	cbz	r2, 80024e2 <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80024de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80024e0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80024e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80024e6:	f003 bbb3 	b.w	8005c50 <_port_irq_epilogue>
 80024ea:	bf00      	nop
 80024ec:	40026000 	.word	0x40026000
 80024f0:	20000894 	.word	0x20000894

080024f4 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80024f4:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80024fa:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80024fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80024fe:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002502:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002504:	b10a      	cbz	r2, 800250a <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002506:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002508:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800250e:	f003 bb9f 	b.w	8005c50 <_port_irq_epilogue>
 8002512:	bf00      	nop
 8002514:	40026400 	.word	0x40026400
 8002518:	20000894 	.word	0x20000894

0800251c <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002520:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8002522:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002524:	0989      	lsrs	r1, r1, #6
 8002526:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800252a:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 800252c:	018c      	lsls	r4, r1, #6
 800252e:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8002530:	b10a      	cbz	r2, 8002536 <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002532:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002534:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800253a:	f003 bb89 	b.w	8005c50 <_port_irq_epilogue>
 800253e:	bf00      	nop
 8002540:	40026400 	.word	0x40026400
 8002544:	20000894 	.word	0x20000894

08002548 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800254c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 800254e:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002550:	0c09      	lsrs	r1, r1, #16
 8002552:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002556:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8002558:	040c      	lsls	r4, r1, #16
 800255a:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 800255c:	b10a      	cbz	r2, 8002562 <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 800255e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002560:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002566:	f003 bb73 	b.w	8005c50 <_port_irq_epilogue>
 800256a:	bf00      	nop
 800256c:	40026400 	.word	0x40026400
 8002570:	20000894 	.word	0x20000894

08002574 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 8002576:	4809      	ldr	r0, [pc, #36]	; (800259c <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002578:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 800257a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800257c:	0d89      	lsrs	r1, r1, #22
 800257e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002582:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8002584:	058c      	lsls	r4, r1, #22
 8002586:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8002588:	b10a      	cbz	r2, 800258e <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 800258a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800258c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800258e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002592:	f003 bb5d 	b.w	8005c50 <_port_irq_epilogue>
 8002596:	bf00      	nop
 8002598:	40026400 	.word	0x40026400
 800259c:	20000894 	.word	0x20000894

080025a0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80025a0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 80025a4:	4807      	ldr	r0, [pc, #28]	; (80025c4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025a6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80025a8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80025ae:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80025b0:	b10a      	cbz	r2, 80025b6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 80025b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80025b4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80025b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80025ba:	f003 bb49 	b.w	8005c50 <_port_irq_epilogue>
 80025be:	bf00      	nop
 80025c0:	40026400 	.word	0x40026400
 80025c4:	20000894 	.word	0x20000894

080025c8 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80025cc:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80025ce:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80025d0:	0989      	lsrs	r1, r1, #6
 80025d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80025d6:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80025d8:	018c      	lsls	r4, r1, #6
 80025da:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80025dc:	b10a      	cbz	r2, 80025e2 <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80025de:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80025e0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80025e6:	f003 bb33 	b.w	8005c50 <_port_irq_epilogue>
 80025ea:	bf00      	nop
 80025ec:	40026400 	.word	0x40026400
 80025f0:	20000894 	.word	0x20000894

080025f4 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 80025f6:	4809      	ldr	r0, [pc, #36]	; (800261c <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80025f8:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80025fa:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80025fc:	0c09      	lsrs	r1, r1, #16
 80025fe:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002602:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8002604:	040c      	lsls	r4, r1, #16
 8002606:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8002608:	b10a      	cbz	r2, 800260e <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 800260a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800260c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002612:	f003 bb1d 	b.w	8005c50 <_port_irq_epilogue>
 8002616:	bf00      	nop
 8002618:	40026400 	.word	0x40026400
 800261c:	20000894 	.word	0x20000894

08002620 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002624:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8002626:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002628:	0d89      	lsrs	r1, r1, #22
 800262a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800262e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8002630:	058c      	lsls	r4, r1, #22
 8002632:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002634:	b112      	cbz	r2, 800263c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002636:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800263a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002640:	f003 bb06 	b.w	8005c50 <_port_irq_epilogue>
 8002644:	40026400 	.word	0x40026400
 8002648:	20000894 	.word	0x20000894

0800264c <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800264c:	b4f0      	push	{r4, r5, r6, r7}
  unsigned i;

  dma.allocated_mask = 0U;
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <dmaInit+0x7c>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002650:	4c1e      	ldr	r4, [pc, #120]	; (80026cc <dmaInit+0x80>)
 8002652:	491f      	ldr	r1, [pc, #124]	; (80026d0 <dmaInit+0x84>)
 8002654:	4d1f      	ldr	r5, [pc, #124]	; (80026d4 <dmaInit+0x88>)
 8002656:	4820      	ldr	r0, [pc, #128]	; (80026d8 <dmaInit+0x8c>)
 8002658:	4f20      	ldr	r7, [pc, #128]	; (80026dc <dmaInit+0x90>)
 800265a:	4e21      	ldr	r6, [pc, #132]	; (80026e0 <dmaInit+0x94>)
  dma.allocated_mask = 0U;
 800265c:	2300      	movs	r3, #0
    dma.streams[i].func = NULL;
 800265e:	e9c2 3300 	strd	r3, r3, [r2]
 8002662:	60d3      	str	r3, [r2, #12]
 8002664:	6153      	str	r3, [r2, #20]
 8002666:	61d3      	str	r3, [r2, #28]
 8002668:	6253      	str	r3, [r2, #36]	; 0x24
 800266a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800266c:	6353      	str	r3, [r2, #52]	; 0x34
 800266e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002674:	6553      	str	r3, [r2, #84]	; 0x54
 8002676:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002678:	6653      	str	r3, [r2, #100]	; 0x64
 800267a:	66d3      	str	r3, [r2, #108]	; 0x6c
 800267c:	6753      	str	r3, [r2, #116]	; 0x74
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800267e:	3c70      	subs	r4, #112	; 0x70
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	6033      	str	r3, [r6, #0]
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	6723      	str	r3, [r4, #112]	; 0x70
 800268a:	6003      	str	r3, [r0, #0]
 800268c:	660b      	str	r3, [r1, #96]	; 0x60
 800268e:	662b      	str	r3, [r5, #96]	; 0x60
 8002690:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 8002694:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
 8002698:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 800269c:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
 80026a0:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
 80026a4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 80026a8:	f8c1 3460 	str.w	r3, [r1, #1120]	; 0x460
  DMA1->LIFCR = 0xFFFFFFFFU;
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80026b0:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
    dma.streams[i].func = NULL;
 80026b4:	67d3      	str	r3, [r2, #124]	; 0x7c
  DMA1->LIFCR = 0xFFFFFFFFU;
 80026b6:	60a1      	str	r1, [r4, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80026b8:	60e1      	str	r1, [r4, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80026ba:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 80026be:	bcf0      	pop	{r4, r5, r6, r7}
  DMA2->HIFCR = 0xFFFFFFFFU;
 80026c0:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000894 	.word	0x20000894
 80026cc:	40026070 	.word	0x40026070
 80026d0:	40026040 	.word	0x40026040
 80026d4:	40026058 	.word	0x40026058
 80026d8:	40026088 	.word	0x40026088
 80026dc:	40026010 	.word	0x40026010
 80026e0:	40026028 	.word	0x40026028

080026e4 <dmaStreamAllocI>:
    osalDbgCheck(false);
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 80026e4:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80027ac <dmaStreamAllocI+0xc8>
  if (id < STM32_DMA_STREAMS) {
 80026e8:	280f      	cmp	r0, #15
                                          void *param) {
 80026ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (id < STM32_DMA_STREAMS) {
 80026ec:	bf98      	it	ls
 80026ee:	4607      	movls	r7, r0
    if ((dma.allocated_mask & mask) == 0U) {
 80026f0:	f8dc 0000 	ldr.w	r0, [ip]
  if (id < STM32_DMA_STREAMS) {
 80026f4:	bf98      	it	ls
 80026f6:	463c      	movls	r4, r7
    uint32_t mask = (1U << i);
 80026f8:	2601      	movs	r6, #1
 80026fa:	fa06 f504 	lsl.w	r5, r6, r4
    if ((dma.allocated_mask & mask) == 0U) {
 80026fe:	4228      	tst	r0, r5
 8002700:	d005      	beq.n	800270e <dmaStreamAllocI+0x2a>
  for (i = startid; i <= endid; i++) {
 8002702:	3401      	adds	r4, #1
 8002704:	42a7      	cmp	r7, r4
 8002706:	d2f8      	bcs.n	80026fa <dmaStreamAllocI+0x16>

      return dmastp;
    }
  }

  return NULL;
 8002708:	2700      	movs	r7, #0
}
 800270a:	4638      	mov	r0, r7
 800270c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      dma.allocated_mask  |= mask;
 800270e:	4328      	orrs	r0, r5
      dma.streams[i].func  = func;
 8002710:	eb0c 07c4 	add.w	r7, ip, r4, lsl #3
      dma.allocated_mask  |= mask;
 8002714:	f8cc 0000 	str.w	r0, [ip]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002718:	4e22      	ldr	r6, [pc, #136]	; (80027a4 <dmaStreamAllocI+0xc0>)
 800271a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
      dma.streams[i].param = param;
 800271e:	e9c7 2301 	strd	r2, r3, [r7, #4]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8002722:	f015 0fff 	tst.w	r5, #255	; 0xff
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002726:	eb0c 0704 	add.w	r7, ip, r4
 800272a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 800272e:	d009      	beq.n	8002744 <dmaStreamAllocI+0x60>
        rccEnableDMA1(true);
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <dmaStreamAllocI+0xc4>)
 8002732:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002734:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002738:	6318      	str	r0, [r3, #48]	; 0x30
 800273a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800273c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002740:	6518      	str	r0, [r3, #80]	; 0x50
 8002742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8002744:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8002748:	d009      	beq.n	800275e <dmaStreamAllocI+0x7a>
        rccEnableDMA2(true);
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <dmaStreamAllocI+0xc4>)
 800274c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800274e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002752:	6318      	str	r0, [r3, #48]	; 0x30
 8002754:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002756:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800275a:	6518      	str	r0, [r3, #80]	; 0x50
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 800275e:	eb0c 0304 	add.w	r3, ip, r4
 8002762:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8002766:	6803      	ldr	r3, [r0, #0]
 8002768:	f023 031f 	bic.w	r3, r3, #31
 800276c:	6003      	str	r3, [r0, #0]
 800276e:	6803      	ldr	r3, [r0, #0]
 8002770:	f013 0301 	ands.w	r3, r3, #1
 8002774:	d1fb      	bne.n	800276e <dmaStreamAllocI+0x8a>
 8002776:	4464      	add	r4, ip
 8002778:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800277c:	243d      	movs	r4, #61	; 0x3d
 800277e:	f896 c009 	ldrb.w	ip, [r6, #9]
 8002782:	6875      	ldr	r5, [r6, #4]
 8002784:	fa04 f40c 	lsl.w	r4, r4, ip
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002788:	f04f 0c21 	mov.w	ip, #33	; 0x21
      dmaStreamDisable(dmastp);
 800278c:	602c      	str	r4, [r5, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800278e:	6003      	str	r3, [r0, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002790:	f8c0 c014 	str.w	ip, [r0, #20]
      if (func != NULL) {
 8002794:	2a00      	cmp	r2, #0
 8002796:	d0b8      	beq.n	800270a <dmaStreamAllocI+0x26>
        nvicEnableVector(dmastp->vector, priority);
 8002798:	7af0      	ldrb	r0, [r6, #11]
 800279a:	f7ff f8b1 	bl	8001900 <nvicEnableVector>
}
 800279e:	4638      	mov	r0, r7
 80027a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a2:	bf00      	nop
 80027a4:	080063c4 	.word	0x080063c4
 80027a8:	40023800 	.word	0x40023800
 80027ac:	20000894 	.word	0x20000894

080027b0 <dmaStreamFree>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @api
 */
void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 80027b0:	b510      	push	{r4, lr}
 80027b2:	2320      	movs	r3, #32
 80027b4:	4604      	mov	r4, r0
 80027b6:	f383 8811 	msr	BASEPRI, r3
  nvicDisableVector(dmastp->vector);
 80027ba:	7ac0      	ldrb	r0, [r0, #11]
 80027bc:	f7ff f8ba 	bl	8001934 <nvicDisableVector>
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 80027c0:	4912      	ldr	r1, [pc, #72]	; (800280c <dmaStreamFree+0x5c>)
 80027c2:	7aa0      	ldrb	r0, [r4, #10]
 80027c4:	680b      	ldr	r3, [r1, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4082      	lsls	r2, r0
 80027ca:	ea23 0302 	bic.w	r3, r3, r2
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80027ce:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 80027d2:	600b      	str	r3, [r1, #0]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80027d4:	d109      	bne.n	80027ea <dmaStreamFree+0x3a>
    rccDisableDMA1();
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <dmaStreamFree+0x60>)
 80027d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027da:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80027de:	6311      	str	r1, [r2, #48]	; 0x30
 80027e0:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80027e2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80027e6:	6511      	str	r1, [r2, #80]	; 0x50
 80027e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 80027ea:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80027ee:	d109      	bne.n	8002804 <dmaStreamFree+0x54>
    rccDisableDMA2();
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <dmaStreamFree+0x60>)
 80027f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
 80027fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002800:	651a      	str	r2, [r3, #80]	; 0x50
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	2300      	movs	r3, #0
 8002806:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  dmaStreamFreeI(dmastp);
  osalSysUnlock();
}
 800280a:	bd10      	pop	{r4, pc}
 800280c:	20000894 	.word	0x20000894
 8002810:	40023800 	.word	0x40023800

08002814 <_pal_lld_init>:
  tqp->next = (thread_t *)tqp;
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <_pal_lld_init+0x84>)
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8002816:	b430      	push	{r4, r5}
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f103 0508 	add.w	r5, r3, #8
 8002820:	f103 0410 	add.w	r4, r3, #16
 8002824:	f103 0120 	add.w	r1, r3, #32
 8002828:	f103 0228 	add.w	r2, r3, #40	; 0x28
  tqp->prev = (thread_t *)tqp;
 800282c:	e9c3 5502 	strd	r5, r5, [r3, #8]
 8002830:	e9c3 4404 	strd	r4, r4, [r3, #16]
  tqp->next = (thread_t *)tqp;
 8002834:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8002838:	f103 0438 	add.w	r4, r3, #56	; 0x38
  tqp->prev = (thread_t *)tqp;
 800283c:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8002840:	e9c3 1108 	strd	r1, r1, [r3, #32]
  tqp->next = (thread_t *)tqp;
 8002844:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002848:	f103 0148 	add.w	r1, r3, #72	; 0x48
  tqp->prev = (thread_t *)tqp;
 800284c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  tqp->next = (thread_t *)tqp;
 8002850:	f103 0250 	add.w	r2, r3, #80	; 0x50
  tqp->prev = (thread_t *)tqp;
 8002854:	e9c3 550c 	strd	r5, r5, [r3, #48]	; 0x30
 8002858:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
  tqp->next = (thread_t *)tqp;
 800285c:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8002860:	f103 0460 	add.w	r4, r3, #96	; 0x60
  tqp->prev = (thread_t *)tqp;
 8002864:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
 8002868:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
 800286c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 8002870:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8002874:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002878:	f103 0278 	add.w	r2, r3, #120	; 0x78
  tqp->prev = (thread_t *)tqp;
 800287c:	e9c3 5516 	strd	r5, r5, [r3, #88]	; 0x58
 8002880:	e9c3 4418 	strd	r4, r4, [r3, #96]	; 0x60
 8002884:	e9c3 3300 	strd	r3, r3, [r3]
 8002888:	e9c3 001a 	strd	r0, r0, [r3, #104]	; 0x68
 800288c:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
 8002890:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8002894:	bc30      	pop	{r4, r5}
 8002896:	4770      	bx	lr
 8002898:	20000918 	.word	0x20000918

0800289c <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80028a0:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80028a4:	f3c2 0e80 	ubfx	lr, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80028a8:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80028ac:	f3c2 1741 	ubfx	r7, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80028b0:	46c8      	mov	r8, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80028b2:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 80028b6:	2600      	movs	r6, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80028b8:	f04f 0a01 	mov.w	sl, #1
 80028bc:	e016      	b.n	80028ec <_pal_lld_setgroupmode+0x50>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80028be:	f8d0 b000 	ldr.w	fp, [r0]
 80028c2:	ea03 030b 	and.w	r3, r3, fp
 80028c6:	ea43 0308 	orr.w	r3, r3, r8
        if (bit < 8)
 80028ca:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80028cc:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80028ce:	d844      	bhi.n	800295a <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80028d0:	6a03      	ldr	r3, [r0, #32]
 80028d2:	401d      	ands	r5, r3
 80028d4:	432c      	orrs	r4, r5
 80028d6:	6204      	str	r4, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80028d8:	0849      	lsrs	r1, r1, #1
 80028da:	d03c      	beq.n	8002956 <_pal_lld_setgroupmode+0xba>
      return;
    otyper <<= 1;
 80028dc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    ospeedr <<= 2;
 80028e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 80028e4:	00bf      	lsls	r7, r7, #2
    moder <<= 2;
 80028e6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    bit++;
 80028ea:	3601      	adds	r6, #1
    if ((mask & 1) != 0) {
 80028ec:	07cb      	lsls	r3, r1, #31
 80028ee:	d5f3      	bpl.n	80028d8 <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80028f0:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80028f2:	fa0a f406 	lsl.w	r4, sl, r6
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80028f6:	ea23 0304 	bic.w	r3, r3, r4
 80028fa:	ea43 030e 	orr.w	r3, r3, lr
 80028fe:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8002900:	2503      	movs	r5, #3
 8002902:	0073      	lsls	r3, r6, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002904:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8002906:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800290a:	43db      	mvns	r3, r3
 800290c:	401c      	ands	r4, r3
 800290e:	ea44 040c 	orr.w	r4, r4, ip
 8002912:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002914:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8002916:	f006 0407 	and.w	r4, r6, #7
 800291a:	00a4      	lsls	r4, r4, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800291c:	401d      	ands	r5, r3
      m4 = 15 << ((bit & 7) * 4);
 800291e:	f04f 0b0f 	mov.w	fp, #15
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002922:	433d      	orrs	r5, r7
      m4 = 15 << ((bit & 7) * 4);
 8002924:	fa0b fb04 	lsl.w	fp, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8002928:	f1b9 0f02 	cmp.w	r9, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800292c:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800292e:	fa02 f404 	lsl.w	r4, r2, r4
 8002932:	ea6f 050b 	mvn.w	r5, fp
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8002936:	d1c2      	bne.n	80028be <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 8002938:	2e07      	cmp	r6, #7
 800293a:	d813      	bhi.n	8002964 <_pal_lld_setgroupmode+0xc8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800293c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8002940:	ea0b 0505 	and.w	r5, fp, r5
 8002944:	432c      	orrs	r4, r5
 8002946:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8002948:	6804      	ldr	r4, [r0, #0]
 800294a:	4023      	ands	r3, r4
 800294c:	ea43 0308 	orr.w	r3, r3, r8
    if (!mask)
 8002950:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8002952:	6003      	str	r3, [r0, #0]
    if (!mask)
 8002954:	d1c2      	bne.n	80028dc <_pal_lld_setgroupmode+0x40>
  }
}
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800295a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800295c:	401d      	ands	r5, r3
 800295e:	432c      	orrs	r4, r5
 8002960:	6244      	str	r4, [r0, #36]	; 0x24
 8002962:	e7b9      	b.n	80028d8 <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002964:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8002968:	ea0b 0505 	and.w	r5, fp, r5
 800296c:	432c      	orrs	r4, r5
 800296e:	6244      	str	r4, [r0, #36]	; 0x24
 8002970:	e7ea      	b.n	8002948 <_pal_lld_setgroupmode+0xac>
 8002972:	bf00      	nop

08002974 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002974:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 800297c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800297e:	d112      	bne.n	80029a6 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8002980:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002982:	680a      	ldr	r2, [r1, #0]
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	f023 031f 	bic.w	r3, r3, #31
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	07db      	lsls	r3, r3, #31
 8002990:	d4fc      	bmi.n	800298c <i2c_lld_serve_tx_end_irq+0x18>
 8002992:	7a48      	ldrb	r0, [r1, #9]
 8002994:	684a      	ldr	r2, [r1, #4]
 8002996:	233d      	movs	r3, #61	; 0x3d
 8002998:	4083      	lsls	r3, r0
 800299a:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800299c:	6863      	ldr	r3, [r4, #4]
 800299e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a2:	6063      	str	r3, [r4, #4]
}
 80029a4:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <i2c_lld_serve_tx_end_irq+0x3c>)
 80029a8:	f002 fc1a 	bl	80051e0 <chSysHalt>
 80029ac:	e7e8      	b.n	8002980 <i2c_lld_serve_tx_end_irq+0xc>
 80029ae:	bf00      	nop
 80029b0:	08006484 	.word	0x08006484

080029b4 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80029b4:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 80029bc:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80029be:	d125      	bne.n	8002a0c <i2c_lld_serve_rx_end_irq+0x58>
  dmaStreamDisable(i2cp->dmarx);
 80029c0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	f021 011f 	bic.w	r1, r1, #31
 80029ca:	6019      	str	r1, [r3, #0]
 80029cc:	681c      	ldr	r4, [r3, #0]
 80029ce:	f014 0401 	ands.w	r4, r4, #1
 80029d2:	d1fb      	bne.n	80029cc <i2c_lld_serve_rx_end_irq+0x18>
 80029d4:	7a51      	ldrb	r1, [r2, #9]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	233d      	movs	r3, #61	; 0x3d
 80029da:	408b      	lsls	r3, r1
 80029dc:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 80029de:	686b      	ldr	r3, [r5, #4]
 80029e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e4:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ec:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f4:	602b      	str	r3, [r5, #0]
 80029f6:	2320      	movs	r3, #32
 80029f8:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80029fc:	f106 001c 	add.w	r0, r6, #28
 8002a00:	4621      	mov	r1, r4
 8002a02:	f002 fec5 	bl	8005790 <chThdResumeI>
 8002a06:	f384 8811 	msr	BASEPRI, r4
}
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <i2c_lld_serve_rx_end_irq+0x60>)
 8002a0e:	f002 fbe7 	bl	80051e0 <chSysHalt>
 8002a12:	e7d5      	b.n	80029c0 <i2c_lld_serve_rx_end_irq+0xc>
 8002a14:	08006484 	.word	0x08006484

08002a18 <VectorC4>:
  I2C_TypeDef *dp = i2cp->i2c;
 8002a18:	4839      	ldr	r0, [pc, #228]	; (8002b00 <VectorC4+0xe8>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002a1a:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <VectorC4+0xec>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8002a1c:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002a1e:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8002a20:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8002a22:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002a24:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d050      	beq.n	8002ad2 <VectorC4+0xba>
 8002a30:	d822      	bhi.n	8002a78 <VectorC4+0x60>
 8002a32:	3a07      	subs	r2, #7
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d040      	beq.n	8002aba <VectorC4+0xa2>
 8002a38:	3201      	adds	r2, #1
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d114      	bne.n	8002a68 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002a3e:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002a40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002a42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8002a46:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002a48:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8002a52:	6862      	ldr	r2, [r4, #4]
 8002a54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a58:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d803      	bhi.n	8002a68 <VectorC4+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a66:	6023      	str	r3, [r4, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002a68:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002a6c:	bf18      	it	ne
 8002a6e:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 8002a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002a74:	f003 b8ec 	b.w	8005c50 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002a78:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <VectorC4+0xf0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d012      	beq.n	8002aa4 <VectorC4+0x8c>
 8002a7e:	3202      	adds	r2, #2
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d1f1      	bne.n	8002a68 <VectorC4+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685e      	ldr	r6, [r3, #4]
 8002a8a:	b33e      	cbz	r6, 8002adc <VectorC4+0xc4>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002a8c:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8002a8e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002a90:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002a9a:	6023      	str	r3, [r4, #0]
}
 8002a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002aa0:	f003 b8d6 	b.w	8005c50 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002aa4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002aa6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8002aac:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002aae:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e7d6      	b.n	8002a68 <VectorC4+0x50>
    if ((i2cp->addr >> 8) > 0) { 
 8002aba:	8c03      	ldrh	r3, [r0, #32]
 8002abc:	0a1a      	lsrs	r2, r3, #8
 8002abe:	d00b      	beq.n	8002ad8 <VectorC4+0xc0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002ac8:	f002 0206 	and.w	r2, r2, #6
 8002acc:	4313      	orrs	r3, r2
 8002ace:	6123      	str	r3, [r4, #16]
 8002ad0:	e7ca      	b.n	8002a68 <VectorC4+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002ad2:	8c03      	ldrh	r3, [r0, #32]
 8002ad4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002ad8:	6123      	str	r3, [r4, #16]
 8002ada:	e7c5      	b.n	8002a68 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002adc:	6863      	ldr	r3, [r4, #4]
 8002ade:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6023      	str	r3, [r4, #0]
 8002aec:	2320      	movs	r3, #32
 8002aee:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8002af2:	301c      	adds	r0, #28
 8002af4:	4631      	mov	r1, r6
 8002af6:	f002 fe4b 	bl	8005790 <chThdResumeI>
 8002afa:	f386 8811 	msr	BASEPRI, r6
 8002afe:	e7b3      	b.n	8002a68 <VectorC4+0x50>
 8002b00:	20000998 	.word	0x20000998
 8002b04:	00030008 	.word	0x00030008
 8002b08:	00070082 	.word	0x00070082

08002b0c <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8002b0c:	4835      	ldr	r0, [pc, #212]	; (8002be4 <VectorC8+0xd8>)
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8002b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8002b10:	e9d0 750c 	ldrd	r7, r5, [r0, #48]	; 0x30
  uint16_t sr = I2CD2.i2c->SR1;
 8002b14:	696c      	ldr	r4, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002b16:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002b18:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	f023 031f 	bic.w	r3, r3, #31
 8002b26:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD2.i2c->SR1;
 8002b28:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 8002b2a:	6813      	ldr	r3, [r2, #0]
 8002b2c:	07db      	lsls	r3, r3, #31
 8002b2e:	d4fc      	bmi.n	8002b2a <VectorC8+0x1e>
 8002b30:	7a7a      	ldrb	r2, [r7, #9]
  dmaStreamDisable(i2cp->dmarx);
 8002b32:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002b34:	687f      	ldr	r7, [r7, #4]
 8002b36:	233d      	movs	r3, #61	; 0x3d
 8002b38:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 8002b3a:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002b3c:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f023 031f 	bic.w	r3, r3, #31
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	07df      	lsls	r7, r3, #31
 8002b4a:	d4fc      	bmi.n	8002b46 <VectorC8+0x3a>
 8002b4c:	7a77      	ldrb	r7, [r6, #9]
 8002b4e:	6872      	ldr	r2, [r6, #4]
 8002b50:	233d      	movs	r3, #61	; 0x3d
 8002b52:	40bb      	lsls	r3, r7
 8002b54:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8002b56:	f411 7380 	ands.w	r3, r1, #256	; 0x100
 8002b5a:	d133      	bne.n	8002bc4 <VectorC8+0xb8>
  i2cp->errors = I2C_NO_ERROR;
 8002b5c:	6083      	str	r3, [r0, #8]
 8002b5e:	2202      	movs	r2, #2
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002b60:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002b62:	bf44      	itt	mi
 8002b64:	6082      	strmi	r2, [r0, #8]
 8002b66:	4613      	movmi	r3, r2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002b68:	054f      	lsls	r7, r1, #21
 8002b6a:	d50a      	bpl.n	8002b82 <VectorC8+0x76>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002b6c:	686a      	ldr	r2, [r5, #4]
 8002b6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b72:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002b74:	682a      	ldr	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002b76:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002b80:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8002b82:	050e      	lsls	r6, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8002b84:	bf44      	itt	mi
 8002b86:	f043 0308 	orrmi.w	r3, r3, #8
 8002b8a:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002b8c:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002b8e:	bf44      	itt	mi
 8002b90:	f043 0320 	orrmi.w	r3, r3, #32
 8002b94:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002b96:	04ca      	lsls	r2, r1, #19
 8002b98:	b224      	sxth	r4, r4
 8002b9a:	d517      	bpl.n	8002bcc <VectorC8+0xc0>
    i2cp->errors |= I2C_PEC_ERROR;
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002ba0:	2c00      	cmp	r4, #0
    i2cp->errors |= I2C_PEC_ERROR;
 8002ba2:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002ba4:	db1a      	blt.n	8002bdc <VectorC8+0xd0>
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f06f 0101 	mvn.w	r1, #1
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <VectorC8+0xdc>)
 8002bb2:	f002 fded 	bl	8005790 <chThdResumeI>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8002bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002bc0:	f003 b846 	b.w	8005c50 <_port_irq_epilogue>
    i2cp->errors |= I2C_BUS_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6083      	str	r3, [r0, #8]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	e7c9      	b.n	8002b60 <VectorC8+0x54>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002bcc:	2c00      	cmp	r4, #0
 8002bce:	db05      	blt.n	8002bdc <VectorC8+0xd0>
  if (i2cp->errors != I2C_NO_ERROR)
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e8      	bne.n	8002ba6 <VectorC8+0x9a>
}
 8002bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002bd8:	f003 b83a 	b.w	8005c50 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be0:	6083      	str	r3, [r0, #8]
 8002be2:	e7e0      	b.n	8002ba6 <VectorC8+0x9a>
 8002be4:	20000998 	.word	0x20000998
 8002be8:	200009b4 	.word	0x200009b4

08002bec <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8002bec:	b510      	push	{r4, lr}
  I2CD1.dmarx  = NULL;
  I2CD1.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 8002bee:	4c05      	ldr	r4, [pc, #20]	; (8002c04 <i2c_lld_init+0x18>)
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7fe f8c9 	bl	8000d88 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <i2c_lld_init+0x1c>)
 8002bf8:	6363      	str	r3, [r4, #52]	; 0x34
  I2CD2.thread = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61e3      	str	r3, [r4, #28]
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 8002bfe:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 8002c02:	bd10      	pop	{r4, pc}
 8002c04:	20000998 	.word	0x20000998
 8002c08:	40005800 	.word	0x40005800

08002c0c <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8002c0e:	7803      	ldrb	r3, [r0, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8002c10:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if (i2cp->state == I2C_STOP) {
 8002c12:	2b01      	cmp	r3, #1
void i2c_lld_start(I2CDriver *i2cp) {
 8002c14:	4605      	mov	r5, r0
  if (i2cp->state == I2C_STOP) {
 8002c16:	d03c      	beq.n	8002c92 <i2c_lld_start+0x86>
  I2C_TypeDef *dp = i2cp->i2c;
 8002c18:	4623      	mov	r3, r4
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002c1a:	e9d5 120b 	ldrd	r1, r2, [r5, #44]	; 0x2c
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 8002c1e:	6868      	ldr	r0, [r5, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002c20:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002c22:	f8d2 c000 	ldr.w	ip, [r2]
  int32_t clock_speed = i2cp->config->clock_speed;
 8002c26:	6841      	ldr	r1, [r0, #4]
  if (clock_speed <= 100000) {
 8002c28:	4e4e      	ldr	r6, [pc, #312]	; (8002d64 <i2c_lld_start+0x158>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002c2a:	f104 0210 	add.w	r2, r4, #16
 8002c2e:	60ba      	str	r2, [r7, #8]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002c30:	f44f 6510 	mov.w	r5, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002c34:	f8cc 2008 	str.w	r2, [ip, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8002c38:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 8002c3c:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 8002c3e:	6027      	str	r7, [r4, #0]
  dp->CR1 = 0;
 8002c40:	6022      	str	r2, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002c42:	6065      	str	r5, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002c44:	685d      	ldr	r5, [r3, #4]
 8002c46:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 8002c4a:	403d      	ands	r5, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8002c4c:	7a07      	ldrb	r7, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002c4e:	605d      	str	r5, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002c50:	685d      	ldr	r5, [r3, #4]
  if (clock_speed <= 100000) {
 8002c52:	42b1      	cmp	r1, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002c54:	f045 052a 	orr.w	r5, r5, #42	; 0x2a
 8002c58:	605d      	str	r5, [r3, #4]
  if (clock_speed <= 100000) {
 8002c5a:	dd59      	ble.n	8002d10 <i2c_lld_start+0x104>
  else if (clock_speed <= 400000) {
 8002c5c:	4d42      	ldr	r5, [pc, #264]	; (8002d68 <i2c_lld_start+0x15c>)
 8002c5e:	42a9      	cmp	r1, r5
 8002c60:	dc07      	bgt.n	8002c72 <i2c_lld_start+0x66>
    if (duty == FAST_DUTY_CYCLE_2) {
 8002c62:	2f02      	cmp	r7, #2
 8002c64:	d066      	beq.n	8002d34 <i2c_lld_start+0x128>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8002c66:	2f03      	cmp	r7, #3
 8002c68:	d06f      	beq.n	8002d4a <i2c_lld_start+0x13e>
 8002c6a:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002c6e:	210d      	movs	r1, #13
 8002c70:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 8002c72:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 8002c74:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 8002c76:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8002c78:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8002c7a:	b292      	uxth	r2, r2
  switch (opmode) {
 8002c7c:	d054      	beq.n	8002d28 <i2c_lld_start+0x11c>
 8002c7e:	2903      	cmp	r1, #3
 8002c80:	d04f      	beq.n	8002d22 <i2c_lld_start+0x116>
 8002c82:	2901      	cmp	r1, #1
 8002c84:	d040      	beq.n	8002d08 <i2c_lld_start+0xfc>
  dp->CR1 = regCR1;
 8002c86:	601a      	str	r2, [r3, #0]
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6023      	str	r3, [r4, #0]
}
 8002c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&I2CD2 == i2cp) {
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <i2c_lld_start+0x160>)
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002c94:	f240 4216 	movw	r2, #1046	; 0x416
 8002c98:	f240 4156 	movw	r1, #1110	; 0x456
    if (&I2CD2 == i2cp) {
 8002c9c:	4298      	cmp	r0, r3
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002c9e:	e9c0 2109 	strd	r2, r1, [r0, #36]	; 0x24
    if (&I2CD2 == i2cp) {
 8002ca2:	d1b9      	bne.n	8002c18 <i2c_lld_start+0xc>
      rccResetI2C2();
 8002ca4:	4e32      	ldr	r6, [pc, #200]	; (8002d70 <i2c_lld_start+0x164>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8002ca6:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <i2c_lld_start+0x168>)
      rccResetI2C2();
 8002ca8:	6a33      	ldr	r3, [r6, #32]
 8002caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cae:	6233      	str	r3, [r6, #32]
 8002cb0:	6a33      	ldr	r3, [r6, #32]
 8002cb2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002cb6:	6233      	str	r3, [r6, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8002cb8:	2103      	movs	r1, #3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2002      	movs	r0, #2
      rccResetI2C2();
 8002cbe:	6a37      	ldr	r7, [r6, #32]
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8002cc0:	f7ff fd10 	bl	80026e4 <dmaStreamAllocI>
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <i2c_lld_start+0x16c>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8002cc6:	62e8      	str	r0, [r5, #44]	; 0x2c
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8002cc8:	462b      	mov	r3, r5
 8002cca:	2103      	movs	r1, #3
 8002ccc:	2007      	movs	r0, #7
 8002cce:	f7ff fd09 	bl	80026e4 <dmaStreamAllocI>
      rccEnableI2C2(true);
 8002cd2:	6c33      	ldr	r3, [r6, #64]	; 0x40
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8002cd4:	6328      	str	r0, [r5, #48]	; 0x30
      rccEnableI2C2(true);
 8002cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cda:	6433      	str	r3, [r6, #64]	; 0x40
 8002cdc:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ce2:	6633      	str	r3, [r6, #96]	; 0x60
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8002ce4:	2103      	movs	r1, #3
 8002ce6:	2021      	movs	r0, #33	; 0x21
      rccEnableI2C2(true);
 8002ce8:	6e33      	ldr	r3, [r6, #96]	; 0x60
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8002cea:	f7fe fe09 	bl	8001900 <nvicEnableVector>
      nvicEnableVector(I2C2_ER_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8002cee:	2103      	movs	r1, #3
 8002cf0:	2022      	movs	r0, #34	; 0x22
 8002cf2:	f7fe fe05 	bl	8001900 <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8002cf6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002cf8:	4820      	ldr	r0, [pc, #128]	; (8002d7c <i2c_lld_start+0x170>)
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8002cfa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002cfc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8002cfe:	4301      	orrs	r1, r0
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8002d00:	4302      	orrs	r2, r0
 8002d02:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
 8002d06:	e788      	b.n	8002c1a <i2c_lld_start+0xe>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002d08:	f022 020a 	bic.w	r2, r2, #10
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	e7ba      	b.n	8002c86 <i2c_lld_start+0x7a>
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002d10:	252b      	movs	r5, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8002d12:	0049      	lsls	r1, r1, #1
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <i2c_lld_start+0x174>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002d16:	621d      	str	r5, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8002d18:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d1c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002d20:	e7a7      	b.n	8002c72 <i2c_lld_start+0x66>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002d22:	f042 020a 	orr.w	r2, r2, #10
 8002d26:	e7ae      	b.n	8002c86 <i2c_lld_start+0x7a>
 8002d28:	f022 0208 	bic.w	r2, r2, #8
 8002d2c:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8002d2e:	f042 0202 	orr.w	r2, r2, #2
 8002d32:	e7a8      	b.n	8002c86 <i2c_lld_start+0x7a>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8002d34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <i2c_lld_start+0x174>)
 8002d3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d3e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d42:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d46:	b292      	uxth	r2, r2
 8002d48:	e791      	b.n	8002c6e <i2c_lld_start+0x62>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002d4a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002d4e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <i2c_lld_start+0x174>)
 8002d54:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d58:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8002d5c:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8002d60:	b292      	uxth	r2, r2
 8002d62:	e784      	b.n	8002c6e <i2c_lld_start+0x62>
 8002d64:	000186a0 	.word	0x000186a0
 8002d68:	00061a80 	.word	0x00061a80
 8002d6c:	20000998 	.word	0x20000998
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080029b5 	.word	0x080029b5
 8002d78:	08002975 	.word	0x08002975
 8002d7c:	0e030000 	.word	0x0e030000
 8002d80:	0280de80 	.word	0x0280de80

08002d84 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8002d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8002d88:	0049      	lsls	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 8002d8a:	2500      	movs	r5, #0
                                      sysinterval_t timeout) {
 8002d8c:	4616      	mov	r6, r2
 8002d8e:	469e      	mov	lr, r3
  i2cp->addr = (addr << 1);
 8002d90:	8401      	strh	r1, [r0, #32]
  I2C_TypeDef *dp = i2cp->i2c;
 8002d92:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8002d94:	6085      	str	r5, [r0, #8]
                                      sysinterval_t timeout) {
 8002d96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002d9a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002d9e:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002da2:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8002da4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002da6:	f8d7 c000 	ldr.w	ip, [r7]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002daa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002dac:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8002db0:	683f      	ldr	r7, [r7, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002db2:	f8cc 1000 	str.w	r1, [ip]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8002db6:	f8cc 600c 	str.w	r6, [ip, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8002dba:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8002dbe:	f8cc e004 	str.w	lr, [ip, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002dc2:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8002dc6:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002dcc:	462a      	mov	r2, r5
 8002dce:	4635      	mov	r5, r6
 8002dd0:	2620      	movs	r6, #32
 8002dd2:	e001      	b.n	8002dd8 <i2c_lld_master_transmit_timeout+0x54>
 8002dd4:	f382 8811 	msr	BASEPRI, r2
 8002dd8:	f386 8811 	msr	BASEPRI, r6
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8002ddc:	69a3      	ldr	r3, [r4, #24]
 8002dde:	0799      	lsls	r1, r3, #30
 8002de0:	d402      	bmi.n	8002de8 <i2c_lld_master_transmit_timeout+0x64>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	059b      	lsls	r3, r3, #22
 8002de6:	d507      	bpl.n	8002df8 <i2c_lld_master_transmit_timeout+0x74>
 8002de8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8002dea:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end))
 8002dec:	2b09      	cmp	r3, #9
 8002dee:	d9f1      	bls.n	8002dd4 <i2c_lld_master_transmit_timeout+0x50>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8002df8:	6863      	ldr	r3, [r4, #4]
 8002dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfe:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return chThdSuspendTimeoutS(trp, timeout);
 8002e06:	4641      	mov	r1, r8
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	301c      	adds	r0, #28
}
 8002e0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e10:	f002 bcb0 	b.w	8005774 <chThdSuspendTimeoutS>

08002e14 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8002e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8002e18:	4cba      	ldr	r4, [pc, #744]	; (8003104 <Vector14C+0x2f0>)
 8002e1a:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8002e1e:	f8da 2014 	ldr.w	r2, [sl, #20]
  sts &= otgp->GINTMSK;
 8002e22:	f8da 3018 	ldr.w	r3, [sl, #24]
 8002e26:	ea02 0b03 	and.w	fp, r2, r3
  if (sts & GINTSTS_USBRST) {
 8002e2a:	f41b 5580 	ands.w	r5, fp, #4096	; 0x1000
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8002e2e:	b085      	sub	sp, #20
  otgp->GINTSTS = sts;
 8002e30:	f8ca b014 	str.w	fp, [sl, #20]
  if (sts & GINTSTS_USBRST) {
 8002e34:	f040 815e 	bne.w	80030f4 <Vector14C+0x2e0>
  if (sts & GINTSTS_WKUPINT) {
 8002e38:	f1bb 0f00 	cmp.w	fp, #0
 8002e3c:	db4c      	blt.n	8002ed8 <Vector14C+0xc4>
  if (sts & GINTSTS_USBSUSP) {
 8002e3e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8002e42:	f040 8123 	bne.w	800308c <Vector14C+0x278>
  if (sts & GINTSTS_ENUMDNE) {
 8002e46:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 8002e4a:	d00e      	beq.n	8002e6a <Vector14C+0x56>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8002e4c:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 8002e50:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8002e54:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002e58:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002e5c:	bf0c      	ite	eq
 8002e5e:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8002e62:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8002e66:	f8ca 300c 	str.w	r3, [sl, #12]
  if (sts & GINTSTS_SOF) {
 8002e6a:	f01b 0f08 	tst.w	fp, #8
 8002e6e:	d004      	beq.n	8002e7a <Vector14C+0x66>
    _usb_isr_invoke_sof_cb(usbp);
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	b10b      	cbz	r3, 8002e7a <Vector14C+0x66>
 8002e76:	48a3      	ldr	r0, [pc, #652]	; (8003104 <Vector14C+0x2f0>)
 8002e78:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8002e7a:	f41b 1f80 	tst.w	fp, #1048576	; 0x100000
 8002e7e:	d179      	bne.n	8002f74 <Vector14C+0x160>
  if (sts & GINTSTS_IISOOXFR) {
 8002e80:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 8002e84:	f040 810a 	bne.w	800309c <Vector14C+0x288>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8002e88:	f01b 0f10 	tst.w	fp, #16
 8002e8c:	d13b      	bne.n	8002f06 <Vector14C+0xf2>
  if (sts & GINTSTS_OEPINT) {
 8002e8e:	f41b 2f00 	tst.w	fp, #524288	; 0x80000
  src = otgp->DAINT;
 8002e92:	f8da 5818 	ldr.w	r5, [sl, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8002e96:	d00b      	beq.n	8002eb0 <Vector14C+0x9c>
    if (src & (1 << 16))
 8002e98:	03e9      	lsls	r1, r5, #15
 8002e9a:	f100 8360 	bmi.w	800355e <Vector14C+0x74a>
    if (src & (1 << 17))
 8002e9e:	03a9      	lsls	r1, r5, #14
 8002ea0:	f100 8338 	bmi.w	8003514 <Vector14C+0x700>
    if (src & (1 << 18))
 8002ea4:	0369      	lsls	r1, r5, #13
 8002ea6:	f100 8310 	bmi.w	80034ca <Vector14C+0x6b6>
    if (src & (1 << 19))
 8002eaa:	0329      	lsls	r1, r5, #12
 8002eac:	f100 818b 	bmi.w	80031c6 <Vector14C+0x3b2>
  if (sts & GINTSTS_IEPINT) {
 8002eb0:	f41b 2f80 	tst.w	fp, #262144	; 0x40000
 8002eb4:	d00b      	beq.n	8002ece <Vector14C+0xba>
    if (src & (1 << 0))
 8002eb6:	07e9      	lsls	r1, r5, #31
 8002eb8:	f100 823f 	bmi.w	800333a <Vector14C+0x526>
    if (src & (1 << 1))
 8002ebc:	07a9      	lsls	r1, r5, #30
 8002ebe:	f100 81d9 	bmi.w	8003274 <Vector14C+0x460>
    if (src & (1 << 2))
 8002ec2:	0769      	lsls	r1, r5, #29
 8002ec4:	f100 829e 	bmi.w	8003404 <Vector14C+0x5f0>
    if (src & (1 << 3))
 8002ec8:	072d      	lsls	r5, r5, #28
 8002eca:	f100 811d 	bmi.w	8003108 <Vector14C+0x2f4>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8002ece:	b005      	add	sp, #20
 8002ed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002ed4:	f002 bebc 	b.w	8005c50 <_port_irq_epilogue>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8002ed8:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8002edc:	079a      	lsls	r2, r3, #30
 8002ede:	d005      	beq.n	8002eec <Vector14C+0xd8>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8002ee0:	f8da 3e00 	ldr.w	r3, [sl, #3584]	; 0xe00
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	f8ca 3e00 	str.w	r3, [sl, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
 8002eec:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 8002ef0:	4884      	ldr	r0, [pc, #528]	; (8003104 <Vector14C+0x2f0>)
    otgp->DCTL &= ~DCTL_RWUSIG;
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
    _usb_wakeup(usbp);
 8002efa:	f7fe fa87 	bl	800140c <_usb_wakeup>
  if (sts & GINTSTS_USBSUSP) {
 8002efe:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8002f02:	d0a0      	beq.n	8002e46 <Vector14C+0x32>
 8002f04:	e0c2      	b.n	800308c <Vector14C+0x278>
  sts = usbp->otg->GRXSTSP;
 8002f06:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002f08:	6a2b      	ldr	r3, [r5, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8002f0a:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 8002f0e:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8002f12:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8002f16:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8002f1a:	f000 8179 	beq.w	8003210 <Vector14C+0x3fc>
 8002f1e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002f22:	d1b4      	bne.n	8002e8e <Vector14C+0x7a>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8002f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	6a1e      	ldr	r6, [r3, #32]
  while (i < n) {
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d0ae      	beq.n	8002e8e <Vector14C+0x7a>
 8002f30:	1e53      	subs	r3, r2, #1
 8002f32:	2b07      	cmp	r3, #7
 8002f34:	bf28      	it	cs
 8002f36:	2307      	movcs	r3, #7
  uint32_t w = 0;
 8002f38:	2000      	movs	r0, #0
 8002f3a:	3301      	adds	r3, #1
  size_t i = 0;
 8002f3c:	4601      	mov	r1, r0
      w = *fifop;
 8002f3e:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8002f42:	f011 0f03 	tst.w	r1, #3
 8002f46:	f040 8185 	bne.w	8003254 <Vector14C+0x440>
      w = *fifop;
 8002f4a:	6838      	ldr	r0, [r7, #0]
      *buf++ = (uint8_t)w;
 8002f4c:	f806 0b01 	strb.w	r0, [r6], #1
    i++;
 8002f50:	3101      	adds	r1, #1
  while (i < n) {
 8002f52:	428b      	cmp	r3, r1
      w >>= 8;
 8002f54:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 8002f58:	d1f3      	bne.n	8002f42 <Vector14C+0x12e>
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d997      	bls.n	8002e8e <Vector14C+0x7a>
      w = *fifop;
 8002f5e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 8002f62:	f013 0f03 	tst.w	r3, #3
    i++;
 8002f66:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 8002f6a:	bf08      	it	eq
 8002f6c:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d1f7      	bne.n	8002f62 <Vector14C+0x14e>
 8002f72:	e78c      	b.n	8002e8e <Vector14C+0x7a>
  stm32_otg_t *otgp = usbp->otg;
 8002f74:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002f78:	f04f 0900 	mov.w	r9, #0
      _usb_isr_invoke_in_cb(usbp, ep);
 8002f7c:	e9cd ab00 	strd	sl, fp, [sp]
 8002f80:	e009      	b.n	8002f96 <Vector14C+0x182>
 8002f82:	f109 0c01 	add.w	ip, r9, #1
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8002f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	fa5f f98c 	uxtb.w	r9, ip
 8002f8e:	4599      	cmp	r9, r3
 8002f90:	464d      	mov	r5, r9
 8002f92:	f200 8168 	bhi.w	8003266 <Vector14C+0x452>
 8002f96:	eb08 1249 	add.w	r2, r8, r9, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8002f9a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002f9e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fa6:	d1ec      	bne.n	8002f82 <Vector14C+0x16e>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8002fa8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dae8      	bge.n	8002f82 <Vector14C+0x16e>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8002fb0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002fb4:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8002fb8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8002fbc:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dbfb      	blt.n	8002fbc <Vector14C+0x1a8>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002fc4:	01ad      	lsls	r5, r5, #6
      otg_txfifo_flush(usbp, ep);
 8002fc6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002fc8:	f045 0520 	orr.w	r5, r5, #32
 8002fcc:	6115      	str	r5, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8002fce:	6913      	ldr	r3, [r2, #16]
 8002fd0:	069b      	lsls	r3, r3, #26
 8002fd2:	d4fc      	bmi.n	8002fce <Vector14C+0x1ba>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002fd4:	f109 0502 	add.w	r5, r9, #2
 8002fd8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  chSysPolledDelayX(cycles);
 8002fdc:	2012      	movs	r0, #18
 8002fde:	f002 f945 	bl	800526c <chSysPolledDelayX>
 8002fe2:	686b      	ldr	r3, [r5, #4]
 8002fe4:	8921      	ldrh	r1, [r4, #8]
 8002fe6:	689e      	ldr	r6, [r3, #8]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	fa02 f209 	lsl.w	r2, r2, r9
 8002fee:	ea21 0202 	bic.w	r2, r1, r2
 8002ff2:	8122      	strh	r2, [r4, #8]
 8002ff4:	b11e      	cbz	r6, 8002ffe <Vector14C+0x1ea>
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	4842      	ldr	r0, [pc, #264]	; (8003104 <Vector14C+0x2f0>)
 8002ffa:	47b0      	blx	r6
 8002ffc:	686b      	ldr	r3, [r5, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8002ffe:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8003002:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003004:	9202      	str	r2, [sp, #8]
 8003006:	e9de a700 	ldrd	sl, r7, [lr]
 800300a:	4557      	cmp	r7, sl
 800300c:	bf28      	it	cs
 800300e:	f109 0c01 	addcs.w	ip, r9, #1
 8003012:	f080 82f8 	bcs.w	8003606 <Vector14C+0x7f2>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003016:	eb02 1249 	add.w	r2, r2, r9, lsl #5
    if (n > usbp->epc[ep]->in_maxsize)
 800301a:	f8b3 b010 	ldrh.w	fp, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800301e:	f8d2 3918 	ldr.w	r3, [r2, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003022:	ebaa 0007 	sub.w	r0, sl, r7
 8003026:	4558      	cmp	r0, fp
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003028:	b29b      	uxth	r3, r3
 800302a:	bf28      	it	cs
 800302c:	4658      	movcs	r0, fp
 800302e:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8003032:	f109 0c01 	add.w	ip, r9, #1
 8003036:	d8a6      	bhi.n	8002f86 <Vector14C+0x172>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8003038:	9b02      	ldr	r3, [sp, #8]
 800303a:	f8de 6008 	ldr.w	r6, [lr, #8]
 800303e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003042:	eb03 350c 	add.w	r5, r3, ip, lsl #12
 8003046:	4691      	mov	r9, r2
    *fifop = *((uint32_t *)buf);
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	602b      	str	r3, [r5, #0]
    if (n <= 4) {
 800304c:	2804      	cmp	r0, #4
 800304e:	d90a      	bls.n	8003066 <Vector14C+0x252>
 8003050:	1f42      	subs	r2, r0, #5
 8003052:	f022 0203 	bic.w	r2, r2, #3
 8003056:	3204      	adds	r2, #4
 8003058:	4432      	add	r2, r6
 800305a:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 800305c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8003060:	6029      	str	r1, [r5, #0]
    if (n <= 4) {
 8003062:	4293      	cmp	r3, r2
 8003064:	d1fa      	bne.n	800305c <Vector14C+0x248>
    usbp->epc[ep]->in_state->txcnt += n;
 8003066:	4407      	add	r7, r0
    usbp->epc[ep]->in_state->txbuf += n;
 8003068:	4406      	add	r6, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800306a:	4557      	cmp	r7, sl
    usbp->epc[ep]->in_state->txcnt += n;
 800306c:	e9ce 7601 	strd	r7, r6, [lr, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003070:	f080 82c7 	bcs.w	8003602 <Vector14C+0x7ee>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003074:	ebaa 0007 	sub.w	r0, sl, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003078:	f8d9 3918 	ldr.w	r3, [r9, #2328]	; 0x918
 800307c:	4558      	cmp	r0, fp
 800307e:	b29b      	uxth	r3, r3
 8003080:	bf28      	it	cs
 8003082:	4658      	movcs	r0, fp
 8003084:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8003088:	d9de      	bls.n	8003048 <Vector14C+0x234>
 800308a:	e77c      	b.n	8002f86 <Vector14C+0x172>
    _usb_suspend(usbp);
 800308c:	481d      	ldr	r0, [pc, #116]	; (8003104 <Vector14C+0x2f0>)
 800308e:	f7fe f9ad 	bl	80013ec <_usb_suspend>
  if (sts & GINTSTS_ENUMDNE) {
 8003092:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 8003096:	f43f aee8 	beq.w	8002e6a <Vector14C+0x56>
 800309a:	e6d7      	b.n	8002e4c <Vector14C+0x38>
  stm32_otg_t *otgp = usbp->otg;
 800309c:	6d66      	ldr	r6, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 800309e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003104 <Vector14C+0x2f0>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80030a2:	2500      	movs	r5, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 80030a4:	2701      	movs	r7, #1
 80030a6:	e006      	b.n	80030b6 <Vector14C+0x2a2>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80030a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030aa:	3501      	adds	r5, #1
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	b2ed      	uxtb	r5, r5
 80030b0:	429d      	cmp	r5, r3
 80030b2:	f63f aee9 	bhi.w	8002e88 <Vector14C+0x74>
 80030b6:	eb06 1245 	add.w	r2, r6, r5, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80030ba:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80030be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80030c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030c6:	d1ef      	bne.n	80030a8 <Vector14C+0x294>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 80030c8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	daeb      	bge.n	80030a8 <Vector14C+0x294>
      _usb_isr_invoke_out_cb(usbp, ep);
 80030d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80030d4:	8962      	ldrh	r2, [r4, #10]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	fa07 f305 	lsl.w	r3, r7, r5
 80030dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80030e0:	ea22 0303 	bic.w	r3, r2, r3
 80030e4:	4629      	mov	r1, r5
 80030e6:	4640      	mov	r0, r8
 80030e8:	8163      	strh	r3, [r4, #10]
 80030ea:	f1b9 0f00 	cmp.w	r9, #0
 80030ee:	d0db      	beq.n	80030a8 <Vector14C+0x294>
 80030f0:	47c8      	blx	r9
 80030f2:	e7d9      	b.n	80030a8 <Vector14C+0x294>
    _usb_reset(usbp);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7fe f961 	bl	80013bc <_usb_reset>
}
 80030fa:	b005      	add	sp, #20
 80030fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8003100:	f002 bda6 	b.w	8005c50 <_port_irq_epilogue>
 8003104:	200009d0 	.word	0x200009d0
  stm32_otg_t *otgp = usbp->otg;
 8003108:	6d65      	ldr	r5, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800310a:	f8d5 6968 	ldr.w	r6, [r5, #2408]	; 0x968
  otgp->ie[ep].DIEPINT = epint;
 800310e:	f8c5 6968 	str.w	r6, [r5, #2408]	; 0x968
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003112:	07f0      	lsls	r0, r6, #31
 8003114:	d513      	bpl.n	800313e <Vector14C+0x32a>
 8003116:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800311a:	07d9      	lsls	r1, r3, #31
 800311c:	d50f      	bpl.n	800313e <Vector14C+0x32a>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800311e:	69a1      	ldr	r1, [r4, #24]
 8003120:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4290      	cmp	r0, r2
 8003128:	f0c0 8296 	bcc.w	8003658 <Vector14C+0x844>
      _usb_isr_invoke_in_cb(usbp, ep);
 800312c:	8923      	ldrh	r3, [r4, #8]
 800312e:	688a      	ldr	r2, [r1, #8]
 8003130:	f023 0308 	bic.w	r3, r3, #8
 8003134:	8123      	strh	r3, [r4, #8]
 8003136:	b112      	cbz	r2, 800313e <Vector14C+0x32a>
 8003138:	2103      	movs	r1, #3
 800313a:	48b1      	ldr	r0, [pc, #708]	; (8003400 <Vector14C+0x5ec>)
 800313c:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 800313e:	0632      	lsls	r2, r6, #24
 8003140:	f57f aec5 	bpl.w	8002ece <Vector14C+0xba>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003144:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	f57f aec0 	bpl.w	8002ece <Vector14C+0xba>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800314e:	69a3      	ldr	r3, [r4, #24]
 8003150:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8003154:	695e      	ldr	r6, [r3, #20]
 8003156:	e9d6 7500 	ldrd	r7, r5, [r6]
 800315a:	42af      	cmp	r7, r5
 800315c:	f240 825d 	bls.w	800361a <Vector14C+0x806>
    if (n > usbp->epc[ep]->in_maxsize)
 8003160:	f8b3 e010 	ldrh.w	lr, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003164:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003168:	1b79      	subs	r1, r7, r5
 800316a:	4571      	cmp	r1, lr
 800316c:	bf28      	it	cs
 800316e:	4671      	movcs	r1, lr
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003170:	b29b      	uxth	r3, r3
 8003172:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003176:	f63f aeaa 	bhi.w	8002ece <Vector14C+0xba>
 800317a:	68b4      	ldr	r4, [r6, #8]
 800317c:	f50c 4080 	add.w	r0, ip, #16384	; 0x4000
 8003180:	46b8      	mov	r8, r7
    *fifop = *((uint32_t *)buf);
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003186:	2904      	cmp	r1, #4
 8003188:	d90a      	bls.n	80031a0 <Vector14C+0x38c>
 800318a:	1f4a      	subs	r2, r1, #5
 800318c:	f022 0203 	bic.w	r2, r2, #3
 8003190:	3204      	adds	r2, #4
 8003192:	4422      	add	r2, r4
 8003194:	4623      	mov	r3, r4
    *fifop = *((uint32_t *)buf);
 8003196:	f853 7f04 	ldr.w	r7, [r3, #4]!
 800319a:	6007      	str	r7, [r0, #0]
    if (n <= 4) {
 800319c:	4293      	cmp	r3, r2
 800319e:	d1fa      	bne.n	8003196 <Vector14C+0x382>
    usbp->epc[ep]->in_state->txcnt += n;
 80031a0:	440d      	add	r5, r1
    usbp->epc[ep]->in_state->txbuf += n;
 80031a2:	440c      	add	r4, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80031a4:	45a8      	cmp	r8, r5
    usbp->epc[ep]->in_state->txcnt += n;
 80031a6:	e9c6 5401 	strd	r5, r4, [r6, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80031aa:	f240 8236 	bls.w	800361a <Vector14C+0x806>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80031ae:	eba8 0105 	sub.w	r1, r8, r5
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80031b2:	f8dc 3978 	ldr.w	r3, [ip, #2424]	; 0x978
 80031b6:	4571      	cmp	r1, lr
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	bf28      	it	cs
 80031bc:	4671      	movcs	r1, lr
 80031be:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80031c2:	d9de      	bls.n	8003182 <Vector14C+0x36e>
 80031c4:	e683      	b.n	8002ece <Vector14C+0xba>
  stm32_otg_t *otgp = usbp->otg;
 80031c6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80031c8:	f8d6 7b68 	ldr.w	r7, [r6, #2920]	; 0xb68
  otgp->oe[ep].DOEPINT = epint;
 80031cc:	f8c6 7b68 	str.w	r7, [r6, #2920]	; 0xb68
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80031d0:	073a      	lsls	r2, r7, #28
 80031d2:	d508      	bpl.n	80031e6 <Vector14C+0x3d2>
 80031d4:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	d504      	bpl.n	80031e6 <Vector14C+0x3d2>
    _usb_isr_invoke_setup_cb(usbp, ep);
 80031dc:	69a3      	ldr	r3, [r4, #24]
 80031de:	4888      	ldr	r0, [pc, #544]	; (8003400 <Vector14C+0x5ec>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2103      	movs	r1, #3
 80031e4:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80031e6:	07ff      	lsls	r7, r7, #31
 80031e8:	f57f ae62 	bpl.w	8002eb0 <Vector14C+0x9c>
 80031ec:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80031f0:	07d8      	lsls	r0, r3, #31
 80031f2:	f57f ae5d 	bpl.w	8002eb0 <Vector14C+0x9c>
    osp = usbp->epc[ep]->out_state;
 80031f6:	69a2      	ldr	r2, [r4, #24]
    _usb_isr_invoke_out_cb(usbp, ep);
 80031f8:	8963      	ldrh	r3, [r4, #10]
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	f023 0308 	bic.w	r3, r3, #8
 8003200:	8163      	strh	r3, [r4, #10]
 8003202:	2a00      	cmp	r2, #0
 8003204:	f43f ae54 	beq.w	8002eb0 <Vector14C+0x9c>
 8003208:	2103      	movs	r1, #3
 800320a:	487d      	ldr	r0, [pc, #500]	; (8003400 <Vector14C+0x5ec>)
 800320c:	4790      	blx	r2
 800320e:	e64f      	b.n	8002eb0 <Vector14C+0x9c>
                            usbp->epc[ep]->out_state->rxbuf,
 8003210:	1c98      	adds	r0, r3, #2
 8003212:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	6999      	ldr	r1, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800321a:	e9d1 3700 	ldrd	r3, r7, [r1]
 800321e:	688e      	ldr	r6, [r1, #8]
 8003220:	1bdb      	subs	r3, r3, r7
  while (i < n) {
 8003222:	b192      	cbz	r2, 800324a <Vector14C+0x436>
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 81cc 	bne.w	80035c2 <Vector14C+0x7ae>
      w = *fifop;
 800322a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 800322e:	f013 0f03 	tst.w	r3, #3
    i++;
 8003232:	f103 0301 	add.w	r3, r3, #1
      w = *fifop;
 8003236:	bf08      	it	eq
 8003238:	6829      	ldreq	r1, [r5, #0]
  while (i < n) {
 800323a:	429a      	cmp	r2, r3
 800323c:	d8f7      	bhi.n	800322e <Vector14C+0x41a>
 800323e:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800324a:	4416      	add	r6, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800324c:	443a      	add	r2, r7
 800324e:	e9c1 2601 	strd	r2, r6, [r1, #4]
 8003252:	e61c      	b.n	8002e8e <Vector14C+0x7a>
    i++;
 8003254:	3101      	adds	r1, #1
  while (i < n) {
 8003256:	4299      	cmp	r1, r3
      *buf++ = (uint8_t)w;
 8003258:	f806 0b01 	strb.w	r0, [r6], #1
      w >>= 8;
 800325c:	ea4f 2010 	mov.w	r0, r0, lsr #8
  while (i < n) {
 8003260:	f47f ae6f 	bne.w	8002f42 <Vector14C+0x12e>
 8003264:	e679      	b.n	8002f5a <Vector14C+0x146>
 8003266:	e9dd ab00 	ldrd	sl, fp, [sp]
  if (sts & GINTSTS_IISOOXFR) {
 800326a:	f41b 1f00 	tst.w	fp, #2097152	; 0x200000
 800326e:	f43f ae0b 	beq.w	8002e88 <Vector14C+0x74>
 8003272:	e713      	b.n	800309c <Vector14C+0x288>
  stm32_otg_t *otgp = usbp->otg;
 8003274:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003276:	f8d6 7928 	ldr.w	r7, [r6, #2344]	; 0x928
  otgp->ie[ep].DIEPINT = epint;
 800327a:	f8c6 7928 	str.w	r7, [r6, #2344]	; 0x928
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800327e:	07fa      	lsls	r2, r7, #31
 8003280:	d513      	bpl.n	80032aa <Vector14C+0x496>
 8003282:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003286:	07db      	lsls	r3, r3, #31
 8003288:	d50f      	bpl.n	80032aa <Vector14C+0x496>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800328a:	6921      	ldr	r1, [r4, #16]
 800328c:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	4290      	cmp	r0, r2
 8003294:	f0c0 8280 	bcc.w	8003798 <Vector14C+0x984>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003298:	8923      	ldrh	r3, [r4, #8]
 800329a:	688a      	ldr	r2, [r1, #8]
 800329c:	f023 0302 	bic.w	r3, r3, #2
 80032a0:	8123      	strh	r3, [r4, #8]
 80032a2:	b112      	cbz	r2, 80032aa <Vector14C+0x496>
 80032a4:	2101      	movs	r1, #1
 80032a6:	4856      	ldr	r0, [pc, #344]	; (8003400 <Vector14C+0x5ec>)
 80032a8:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 80032aa:	063f      	lsls	r7, r7, #24
 80032ac:	f57f ae09 	bpl.w	8002ec2 <Vector14C+0xae>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 80032b0:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 80032b4:	0798      	lsls	r0, r3, #30
 80032b6:	f57f ae04 	bpl.w	8002ec2 <Vector14C+0xae>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 80032c0:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80032c4:	e9dc e700 	ldrd	lr, r7, [ip]
 80032c8:	45be      	cmp	lr, r7
 80032ca:	f240 81ae 	bls.w	800362a <Vector14C+0x816>
    if (n > usbp->epc[ep]->in_maxsize)
 80032ce:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80032d2:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80032d6:	ebae 0107 	sub.w	r1, lr, r7
 80032da:	4549      	cmp	r1, r9
 80032dc:	bf28      	it	cs
 80032de:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80032e6:	f63f adec 	bhi.w	8002ec2 <Vector14C+0xae>
 80032ea:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80032ee:	f508 5000 	add.w	r0, r8, #8192	; 0x2000
 80032f2:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 80032f4:	6833      	ldr	r3, [r6, #0]
 80032f6:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 80032f8:	2904      	cmp	r1, #4
 80032fa:	d90a      	bls.n	8003312 <Vector14C+0x4fe>
 80032fc:	1f4a      	subs	r2, r1, #5
 80032fe:	f022 0203 	bic.w	r2, r2, #3
 8003302:	3204      	adds	r2, #4
 8003304:	4432      	add	r2, r6
 8003306:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003308:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800330c:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 800330e:	4293      	cmp	r3, r2
 8003310:	d1fa      	bne.n	8003308 <Vector14C+0x4f4>
    usbp->epc[ep]->in_state->txcnt += n;
 8003312:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 8003314:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003316:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 8003318:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800331c:	f080 8184 	bcs.w	8003628 <Vector14C+0x814>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003320:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003324:	f8d8 3938 	ldr.w	r3, [r8, #2360]	; 0x938
 8003328:	4549      	cmp	r1, r9
 800332a:	b29b      	uxth	r3, r3
 800332c:	bf28      	it	cs
 800332e:	4649      	movcs	r1, r9
 8003330:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003334:	d9de      	bls.n	80032f4 <Vector14C+0x4e0>
 8003336:	4655      	mov	r5, sl
 8003338:	e5c3      	b.n	8002ec2 <Vector14C+0xae>
  stm32_otg_t *otgp = usbp->otg;
 800333a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800333c:	f8d6 7908 	ldr.w	r7, [r6, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8003340:	f8c6 7908 	str.w	r7, [r6, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003344:	07fa      	lsls	r2, r7, #31
 8003346:	d513      	bpl.n	8003370 <Vector14C+0x55c>
 8003348:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800334c:	07db      	lsls	r3, r3, #31
 800334e:	d50f      	bpl.n	8003370 <Vector14C+0x55c>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003350:	68e1      	ldr	r1, [r4, #12]
 8003352:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4290      	cmp	r0, r2
 800335a:	f0c0 81e9 	bcc.w	8003730 <Vector14C+0x91c>
      _usb_isr_invoke_in_cb(usbp, ep);
 800335e:	8923      	ldrh	r3, [r4, #8]
 8003360:	688a      	ldr	r2, [r1, #8]
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	8123      	strh	r3, [r4, #8]
 8003368:	b112      	cbz	r2, 8003370 <Vector14C+0x55c>
 800336a:	2100      	movs	r1, #0
 800336c:	4824      	ldr	r0, [pc, #144]	; (8003400 <Vector14C+0x5ec>)
 800336e:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 8003370:	063f      	lsls	r7, r7, #24
 8003372:	f57f ada3 	bpl.w	8002ebc <Vector14C+0xa8>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003376:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 800337a:	07d8      	lsls	r0, r3, #31
 800337c:	f57f ad9e 	bpl.w	8002ebc <Vector14C+0xa8>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003380:	68e3      	ldr	r3, [r4, #12]
 8003382:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003386:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800338a:	e9dc e700 	ldrd	lr, r7, [ip]
 800338e:	4577      	cmp	r7, lr
 8003390:	f080 8153 	bcs.w	800363a <Vector14C+0x826>
    if (n > usbp->epc[ep]->in_maxsize)
 8003394:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003398:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800339c:	ebae 0107 	sub.w	r1, lr, r7
 80033a0:	4549      	cmp	r1, r9
 80033a2:	bf28      	it	cs
 80033a4:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80033ac:	f63f ad86 	bhi.w	8002ebc <Vector14C+0xa8>
 80033b0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80033b4:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
 80033b8:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 80033ba:	6833      	ldr	r3, [r6, #0]
 80033bc:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 80033be:	2904      	cmp	r1, #4
 80033c0:	d90a      	bls.n	80033d8 <Vector14C+0x5c4>
 80033c2:	1f4a      	subs	r2, r1, #5
 80033c4:	f022 0203 	bic.w	r2, r2, #3
 80033c8:	3204      	adds	r2, #4
 80033ca:	4432      	add	r2, r6
 80033cc:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 80033ce:	f853 5f04 	ldr.w	r5, [r3, #4]!
 80033d2:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1fa      	bne.n	80033ce <Vector14C+0x5ba>
    usbp->epc[ep]->in_state->txcnt += n;
 80033d8:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 80033da:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80033dc:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 80033de:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80033e2:	f080 8129 	bcs.w	8003638 <Vector14C+0x824>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80033e6:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80033ea:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 80033ee:	4549      	cmp	r1, r9
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	bf28      	it	cs
 80033f4:	4649      	movcs	r1, r9
 80033f6:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80033fa:	d9de      	bls.n	80033ba <Vector14C+0x5a6>
 80033fc:	4655      	mov	r5, sl
 80033fe:	e55d      	b.n	8002ebc <Vector14C+0xa8>
 8003400:	200009d0 	.word	0x200009d0
  stm32_otg_t *otgp = usbp->otg;
 8003404:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003406:	f8d6 7948 	ldr.w	r7, [r6, #2376]	; 0x948
  otgp->ie[ep].DIEPINT = epint;
 800340a:	f8c6 7948 	str.w	r7, [r6, #2376]	; 0x948
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800340e:	07fa      	lsls	r2, r7, #31
 8003410:	d513      	bpl.n	800343a <Vector14C+0x626>
 8003412:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8003416:	07db      	lsls	r3, r3, #31
 8003418:	d50f      	bpl.n	800343a <Vector14C+0x626>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800341a:	6961      	ldr	r1, [r4, #20]
 800341c:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4290      	cmp	r0, r2
 8003424:	f0c0 814d 	bcc.w	80036c2 <Vector14C+0x8ae>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003428:	8923      	ldrh	r3, [r4, #8]
 800342a:	688a      	ldr	r2, [r1, #8]
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	8123      	strh	r3, [r4, #8]
 8003432:	b112      	cbz	r2, 800343a <Vector14C+0x626>
 8003434:	2102      	movs	r1, #2
 8003436:	48bd      	ldr	r0, [pc, #756]	; (800372c <Vector14C+0x918>)
 8003438:	4790      	blx	r2
  if ((epint & DIEPINT_TXFE) &&
 800343a:	063f      	lsls	r7, r7, #24
 800343c:	f57f ad44 	bpl.w	8002ec8 <Vector14C+0xb4>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003440:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  if ((epint & DIEPINT_TXFE) &&
 8003444:	075e      	lsls	r6, r3, #29
 8003446:	f57f ad3f 	bpl.w	8002ec8 <Vector14C+0xb4>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800344a:	6963      	ldr	r3, [r4, #20]
 800344c:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 8003450:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8003454:	e9dc e700 	ldrd	lr, r7, [ip]
 8003458:	45be      	cmp	lr, r7
 800345a:	f240 80f6 	bls.w	800364a <Vector14C+0x836>
    if (n > usbp->epc[ep]->in_maxsize)
 800345e:	f8b3 9010 	ldrh.w	r9, [r3, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003462:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003466:	ebae 0107 	sub.w	r1, lr, r7
 800346a:	4549      	cmp	r1, r9
 800346c:	bf28      	it	cs
 800346e:	4649      	movcs	r1, r9
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003470:	b29b      	uxth	r3, r3
 8003472:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 8003476:	f63f ad27 	bhi.w	8002ec8 <Vector14C+0xb4>
 800347a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800347e:	f508 5040 	add.w	r0, r8, #12288	; 0x3000
 8003482:	46aa      	mov	sl, r5
    *fifop = *((uint32_t *)buf);
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003488:	2904      	cmp	r1, #4
 800348a:	d90a      	bls.n	80034a2 <Vector14C+0x68e>
 800348c:	1f4a      	subs	r2, r1, #5
 800348e:	f022 0203 	bic.w	r2, r2, #3
 8003492:	3204      	adds	r2, #4
 8003494:	4432      	add	r2, r6
 8003496:	4633      	mov	r3, r6
    *fifop = *((uint32_t *)buf);
 8003498:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800349c:	6005      	str	r5, [r0, #0]
    if (n <= 4) {
 800349e:	4293      	cmp	r3, r2
 80034a0:	d1fa      	bne.n	8003498 <Vector14C+0x684>
    usbp->epc[ep]->in_state->txcnt += n;
 80034a2:	440f      	add	r7, r1
    usbp->epc[ep]->in_state->txbuf += n;
 80034a4:	440e      	add	r6, r1
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80034a6:	4577      	cmp	r7, lr
    usbp->epc[ep]->in_state->txcnt += n;
 80034a8:	e9cc 7601 	strd	r7, r6, [ip, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80034ac:	f080 80cc 	bcs.w	8003648 <Vector14C+0x834>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80034b0:	ebae 0107 	sub.w	r1, lr, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80034b4:	f8d8 3958 	ldr.w	r3, [r8, #2392]	; 0x958
 80034b8:	4549      	cmp	r1, r9
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	bf28      	it	cs
 80034be:	4649      	movcs	r1, r9
 80034c0:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
 80034c4:	d9de      	bls.n	8003484 <Vector14C+0x670>
 80034c6:	4655      	mov	r5, sl
 80034c8:	e4fe      	b.n	8002ec8 <Vector14C+0xb4>
  stm32_otg_t *otgp = usbp->otg;
 80034ca:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80034cc:	f8d6 7b48 	ldr.w	r7, [r6, #2888]	; 0xb48
  otgp->oe[ep].DOEPINT = epint;
 80034d0:	f8c6 7b48 	str.w	r7, [r6, #2888]	; 0xb48
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80034d4:	073a      	lsls	r2, r7, #28
 80034d6:	d508      	bpl.n	80034ea <Vector14C+0x6d6>
 80034d8:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	d504      	bpl.n	80034ea <Vector14C+0x6d6>
    _usb_isr_invoke_setup_cb(usbp, ep);
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	4892      	ldr	r0, [pc, #584]	; (800372c <Vector14C+0x918>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2102      	movs	r1, #2
 80034e8:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80034ea:	07ff      	lsls	r7, r7, #31
 80034ec:	f57f acdd 	bpl.w	8002eaa <Vector14C+0x96>
 80034f0:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80034f4:	07d8      	lsls	r0, r3, #31
 80034f6:	f57f acd8 	bpl.w	8002eaa <Vector14C+0x96>
    osp = usbp->epc[ep]->out_state;
 80034fa:	6962      	ldr	r2, [r4, #20]
    _usb_isr_invoke_out_cb(usbp, ep);
 80034fc:	8963      	ldrh	r3, [r4, #10]
 80034fe:	68d2      	ldr	r2, [r2, #12]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	8163      	strh	r3, [r4, #10]
 8003506:	2a00      	cmp	r2, #0
 8003508:	f43f accf 	beq.w	8002eaa <Vector14C+0x96>
 800350c:	2102      	movs	r1, #2
 800350e:	4887      	ldr	r0, [pc, #540]	; (800372c <Vector14C+0x918>)
 8003510:	4790      	blx	r2
 8003512:	e4ca      	b.n	8002eaa <Vector14C+0x96>
  stm32_otg_t *otgp = usbp->otg;
 8003514:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003516:	f8d6 7b28 	ldr.w	r7, [r6, #2856]	; 0xb28
  otgp->oe[ep].DOEPINT = epint;
 800351a:	f8c6 7b28 	str.w	r7, [r6, #2856]	; 0xb28
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800351e:	073a      	lsls	r2, r7, #28
 8003520:	d508      	bpl.n	8003534 <Vector14C+0x720>
 8003522:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003526:	071b      	lsls	r3, r3, #28
 8003528:	d504      	bpl.n	8003534 <Vector14C+0x720>
    _usb_isr_invoke_setup_cb(usbp, ep);
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	487f      	ldr	r0, [pc, #508]	; (800372c <Vector14C+0x918>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2101      	movs	r1, #1
 8003532:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003534:	07ff      	lsls	r7, r7, #31
 8003536:	f57f acb5 	bpl.w	8002ea4 <Vector14C+0x90>
 800353a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800353e:	07d8      	lsls	r0, r3, #31
 8003540:	f57f acb0 	bpl.w	8002ea4 <Vector14C+0x90>
    osp = usbp->epc[ep]->out_state;
 8003544:	6922      	ldr	r2, [r4, #16]
    _usb_isr_invoke_out_cb(usbp, ep);
 8003546:	8963      	ldrh	r3, [r4, #10]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	f023 0302 	bic.w	r3, r3, #2
 800354e:	8163      	strh	r3, [r4, #10]
 8003550:	2a00      	cmp	r2, #0
 8003552:	f43f aca7 	beq.w	8002ea4 <Vector14C+0x90>
 8003556:	2101      	movs	r1, #1
 8003558:	4874      	ldr	r0, [pc, #464]	; (800372c <Vector14C+0x918>)
 800355a:	4790      	blx	r2
 800355c:	e4a2      	b.n	8002ea4 <Vector14C+0x90>
  stm32_otg_t *otgp = usbp->otg;
 800355e:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003560:	f8d6 7b08 	ldr.w	r7, [r6, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8003564:	f8c6 7b08 	str.w	r7, [r6, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003568:	073a      	lsls	r2, r7, #28
 800356a:	d508      	bpl.n	800357e <Vector14C+0x76a>
 800356c:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	d504      	bpl.n	800357e <Vector14C+0x76a>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003574:	68e3      	ldr	r3, [r4, #12]
 8003576:	486d      	ldr	r0, [pc, #436]	; (800372c <Vector14C+0x918>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2100      	movs	r1, #0
 800357c:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800357e:	07ff      	lsls	r7, r7, #31
 8003580:	f57f ac8d 	bpl.w	8002e9e <Vector14C+0x8a>
 8003584:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8003588:	07d8      	lsls	r0, r3, #31
 800358a:	f57f ac88 	bpl.w	8002e9e <Vector14C+0x8a>
    osp = usbp->epc[ep]->out_state;
 800358e:	68e2      	ldr	r2, [r4, #12]
 8003590:	6991      	ldr	r1, [r2, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003592:	8a50      	ldrh	r0, [r2, #18]
 8003594:	684e      	ldr	r6, [r1, #4]
 8003596:	fbb6 f3f0 	udiv	r3, r6, r0
 800359a:	fb00 6313 	mls	r3, r0, r3, r6
 800359e:	b923      	cbnz	r3, 80035aa <Vector14C+0x796>
          (osp->rxsize < osp->totsize)) {
 80035a0:	680e      	ldr	r6, [r1, #0]
 80035a2:	68c8      	ldr	r0, [r1, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80035a4:	4286      	cmp	r6, r0
 80035a6:	f0c0 816a 	bcc.w	800387e <Vector14C+0xa6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 80035aa:	8963      	ldrh	r3, [r4, #10]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	8163      	strh	r3, [r4, #10]
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	f43f ac72 	beq.w	8002e9e <Vector14C+0x8a>
 80035ba:	2100      	movs	r1, #0
 80035bc:	485b      	ldr	r0, [pc, #364]	; (800372c <Vector14C+0x918>)
 80035be:	4790      	blx	r2
 80035c0:	e46d      	b.n	8002e9e <Vector14C+0x8a>
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bf28      	it	cs
 80035c6:	4613      	movcs	r3, r2
 80035c8:	461f      	mov	r7, r3
  uint32_t w = 0;
 80035ca:	2300      	movs	r3, #0
  size_t i = 0;
 80035cc:	4619      	mov	r1, r3
      w = *fifop;
 80035ce:	f505 5c80 	add.w	ip, r5, #4096	; 0x1000
    if ((i & 3) == 0){
 80035d2:	f013 0f03 	tst.w	r3, #3
 80035d6:	d10c      	bne.n	80035f2 <Vector14C+0x7de>
      w = *fifop;
 80035d8:	f8dc 1000 	ldr.w	r1, [ip]
      *buf++ = (uint8_t)w;
 80035dc:	f806 1b01 	strb.w	r1, [r6], #1
    i++;
 80035e0:	3301      	adds	r3, #1
  while (i < n) {
 80035e2:	42bb      	cmp	r3, r7
      w >>= 8;
 80035e4:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 80035e8:	d3f3      	bcc.n	80035d2 <Vector14C+0x7be>
 80035ea:	429a      	cmp	r2, r3
 80035ec:	f63f ae1d 	bhi.w	800322a <Vector14C+0x416>
 80035f0:	e625      	b.n	800323e <Vector14C+0x42a>
    i++;
 80035f2:	3301      	adds	r3, #1
  while (i < n) {
 80035f4:	42bb      	cmp	r3, r7
      *buf++ = (uint8_t)w;
 80035f6:	f806 1b01 	strb.w	r1, [r6], #1
      w >>= 8;
 80035fa:	ea4f 2111 	mov.w	r1, r1, lsr #8
  while (i < n) {
 80035fe:	d3e8      	bcc.n	80035d2 <Vector14C+0x7be>
 8003600:	e7f3      	b.n	80035ea <Vector14C+0x7d6>
 8003602:	e9dd 2902 	ldrd	r2, r9, [sp, #8]
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8003606:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f909 	lsl.w	r9, r1, r9
 8003610:	ea23 0309 	bic.w	r3, r3, r9
 8003614:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 8003618:	e4b5      	b.n	8002f86 <Vector14C+0x172>
 800361a:	f8dc 3834 	ldr.w	r3, [ip, #2100]	; 0x834
 800361e:	f023 0308 	bic.w	r3, r3, #8
 8003622:	f8cc 3834 	str.w	r3, [ip, #2100]	; 0x834
 8003626:	e452      	b.n	8002ece <Vector14C+0xba>
 8003628:	4655      	mov	r5, sl
 800362a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800362e:	f023 0302 	bic.w	r3, r3, #2
 8003632:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003636:	e444      	b.n	8002ec2 <Vector14C+0xae>
 8003638:	4655      	mov	r5, sl
 800363a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003646:	e439      	b.n	8002ebc <Vector14C+0xa8>
 8003648:	4655      	mov	r5, sl
 800364a:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 800364e:	f023 0304 	bic.w	r3, r3, #4
 8003652:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003656:	e437      	b.n	8002ec8 <Vector14C+0xb4>
      isp->txsize = isp->totsize - isp->txsize;
 8003658:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800365a:	2100      	movs	r1, #0
 800365c:	e9c3 2100 	strd	r2, r1, [r3]
 8003660:	2320      	movs	r3, #32
 8003662:	f383 8811 	msr	BASEPRI, r3
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003666:	69a1      	ldr	r1, [r4, #24]
 8003668:	694b      	ldr	r3, [r1, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 800366e:	2a00      	cmp	r2, #0
 8003670:	f040 80c5 	bne.w	80037fe <Vector14C+0x9ea>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003676:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800367a:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800367e:	680a      	ldr	r2, [r1, #0]
 8003680:	f002 0203 	and.w	r2, r2, #3
 8003684:	2a01      	cmp	r2, #1
 8003686:	d10c      	bne.n	80036a2 <Vector14C+0x88e>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003688:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800368c:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003690:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 8003694:	bf14      	ite	ne
 8003696:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 800369a:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 800369e:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80036a2:	f8d3 2960 	ldr.w	r2, [r3, #2400]	; 0x960
 80036a6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80036aa:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80036ae:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80036ba:	2300      	movs	r3, #0
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	e53d      	b.n	800313e <Vector14C+0x32a>
      isp->txsize = isp->totsize - isp->txsize;
 80036c2:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 80036c4:	2100      	movs	r1, #0
 80036c6:	e9c3 2100 	strd	r2, r1, [r3]
 80036ca:	2320      	movs	r3, #32
 80036cc:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80036d0:	6961      	ldr	r1, [r4, #20]
 80036d2:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 80036d8:	2a00      	cmp	r2, #0
 80036da:	f040 80c1 	bne.w	8003860 <Vector14C+0xa4c>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80036de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036e4:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80036e8:	680a      	ldr	r2, [r1, #0]
 80036ea:	f002 0203 	and.w	r2, r2, #3
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	d10c      	bne.n	800370c <Vector14C+0x8f8>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80036f2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80036f6:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80036fa:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 80036fe:	bf14      	ite	ne
 8003700:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003704:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8003708:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800370c:	f8d3 2940 	ldr.w	r2, [r3, #2368]	; 0x940
 8003710:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003714:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003718:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800371c:	f042 0204 	orr.w	r2, r2, #4
 8003720:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003724:	2300      	movs	r3, #0
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	e686      	b.n	800343a <Vector14C+0x626>
 800372c:	200009d0 	.word	0x200009d0
      isp->txsize = isp->totsize - isp->txsize;
 8003730:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8003732:	2100      	movs	r1, #0
 8003734:	e9c3 2100 	strd	r2, r1, [r3]
 8003738:	2320      	movs	r3, #32
 800373a:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800373e:	68e1      	ldr	r1, [r4, #12]
 8003740:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8003746:	2a00      	cmp	r2, #0
 8003748:	d175      	bne.n	8003836 <Vector14C+0xa22>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800374a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800374c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003750:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003754:	680a      	ldr	r2, [r1, #0]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	2a01      	cmp	r2, #1
 800375c:	d10c      	bne.n	8003778 <Vector14C+0x964>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800375e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003762:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003766:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800376a:	bf14      	ite	ne
 800376c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003770:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8003774:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003778:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800377c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003780:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003784:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003790:	2300      	movs	r3, #0
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	e5eb      	b.n	8003370 <Vector14C+0x55c>
      isp->txsize = isp->totsize - isp->txsize;
 8003798:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800379a:	2100      	movs	r1, #0
 800379c:	e9c3 2100 	strd	r2, r1, [r3]
 80037a0:	2320      	movs	r3, #32
 80037a2:	f383 8811 	msr	BASEPRI, r3
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	694b      	ldr	r3, [r1, #20]
  isp->totsize = isp->txsize;
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 80037ae:	bb9a      	cbnz	r2, 8003818 <Vector14C+0xa04>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80037b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037b6:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80037ba:	680a      	ldr	r2, [r1, #0]
 80037bc:	f002 0203 	and.w	r2, r2, #3
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	d10c      	bne.n	80037de <Vector14C+0x9ca>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80037c4:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80037c8:	f412 7f80 	tst.w	r2, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80037cc:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 80037d0:	bf14      	ite	ne
 80037d2:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80037d6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 80037da:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80037de:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 80037e2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80037e6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80037ea:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80037ee:	f042 0202 	orr.w	r2, r2, #2
 80037f2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80037f6:	2300      	movs	r3, #0
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	e555      	b.n	80032aa <Vector14C+0x496>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80037fe:	8a0f      	ldrh	r7, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003800:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003802:	19d0      	adds	r0, r2, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003804:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003808:	3801      	subs	r0, #1
 800380a:	fbb0 f0f7 	udiv	r0, r0, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800380e:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003812:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
 8003816:	e732      	b.n	800367e <Vector14C+0x86a>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003818:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800381c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800381e:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003822:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003826:	3801      	subs	r0, #1
 8003828:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800382c:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003830:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
 8003834:	e7c1      	b.n	80037ba <Vector14C+0x9a6>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003836:	2a40      	cmp	r2, #64	; 0x40
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003838:	f8b1 e010 	ldrh.w	lr, [r1, #16]
      isp->txsize = EP0_MAX_INSIZE;
 800383c:	bf85      	ittet	hi
 800383e:	f8df c0b8 	ldrhi.w	ip, [pc, #184]	; 80038f8 <Vector14C+0xae4>
 8003842:	2240      	movhi	r2, #64	; 0x40
 8003844:	f042 5c00 	orrls.w	ip, r2, #536870912	; 0x20000000
 8003848:	601a      	strhi	r2, [r3, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800384a:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800384e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003850:	4402      	add	r2, r0
 8003852:	fbb2 f2fe 	udiv	r2, r2, lr
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003856:	ea4c 42c2 	orr.w	r2, ip, r2, lsl #19
 800385a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
 800385e:	e779      	b.n	8003754 <Vector14C+0x940>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003860:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003864:	6d63      	ldr	r3, [r4, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003866:	eb02 000c 	add.w	r0, r2, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800386a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800386e:	3801      	subs	r0, #1
 8003870:	fbb0 f0fc 	udiv	r0, r0, ip
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003874:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8003878:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
 800387c:	e734      	b.n	80036e8 <Vector14C+0x8d4>
        osp->rxsize = osp->totsize - osp->rxsize;
 800387e:	1b80      	subs	r0, r0, r6
        osp->rxcnt  = 0;
 8003880:	e9c1 0300 	strd	r0, r3, [r1]
 8003884:	2320      	movs	r3, #32
 8003886:	f383 8811 	msr	BASEPRI, r3
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800388a:	68e2      	ldr	r2, [r4, #12]
 800388c:	6993      	ldr	r3, [r2, #24]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800388e:	6816      	ldr	r6, [r2, #0]
  osp->totsize = osp->rxsize;
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	60d9      	str	r1, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8003894:	2940      	cmp	r1, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8003896:	bf84      	itt	hi
 8003898:	2140      	movhi	r1, #64	; 0x40
 800389a:	6019      	strhi	r1, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800389c:	8a53      	ldrh	r3, [r2, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800389e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80038a0:	1e58      	subs	r0, r3, #1
 80038a2:	4401      	add	r1, r0
 80038a4:	fbb1 f1f3 	udiv	r1, r1, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	3303      	adds	r3, #3
 80038ae:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80038b2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80038b6:	f006 0103 	and.w	r1, r6, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80038ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80038be:	2901      	cmp	r1, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80038c0:	f8c2 3b10 	str.w	r3, [r2, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80038c4:	d10c      	bne.n	80038e0 <Vector14C+0xacc>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80038c6:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 80038ca:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 80038ce:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80038d2:	bf14      	ite	ne
 80038d4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80038d8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80038dc:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80038e0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80038e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038e8:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80038ec:	2300      	movs	r3, #0
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f7ff bad4 	b.w	8002e9e <Vector14C+0x8a>
 80038f6:	bf00      	nop
 80038f8:	20000040 	.word	0x20000040

080038fc <usb_lld_init>:
void usb_lld_init(void) {
 80038fc:	b510      	push	{r4, lr}
  usbObjectInit(&USBD1);
 80038fe:	4c05      	ldr	r4, [pc, #20]	; (8003914 <usb_lld_init+0x18>)
 8003900:	4620      	mov	r0, r4
 8003902:	f7fd fcff 	bl	8001304 <usbObjectInit>
  USBD1.otgparams = &fsparams;
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <usb_lld_init+0x1c>)
  USBD1.otg       = OTG_FS;
 8003908:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800390c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
}
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	200009d0 	.word	0x200009d0
 8003918:	080064b4 	.word	0x080064b4

0800391c <usb_lld_start>:
  if (usbp->state == USB_STOP) {
 800391c:	7803      	ldrb	r3, [r0, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d000      	beq.n	8003924 <usb_lld_start+0x8>
 8003922:	4770      	bx	lr
    if (&USBD1 == usbp) {
 8003924:	4ba2      	ldr	r3, [pc, #648]	; (8003bb0 <usb_lld_start+0x294>)
 8003926:	4298      	cmp	r0, r3
void usb_lld_start(USBDriver *usbp) {
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
 800392c:	6d45      	ldr	r5, [r0, #84]	; 0x54
    if (&USBD1 == usbp) {
 800392e:	f000 8120 	beq.w	8003b72 <usb_lld_start+0x256>
  stm32_otg_t *otgp = usbp->otg;
 8003932:	462c      	mov	r4, r5
    otgp->PCGCCTL = 0;
 8003934:	2100      	movs	r1, #0
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003936:	22c0      	movs	r2, #192	; 0xc0
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8003938:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 800393c:	f8c5 1e00 	str.w	r1, [r5, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003940:	602a      	str	r2, [r5, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8003942:	63ab      	str	r3, [r5, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	dafc      	bge.n	8003944 <usb_lld_start+0x28>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800394a:	2301      	movs	r3, #1
 800394c:	6123      	str	r3, [r4, #16]
 800394e:	200c      	movs	r0, #12
 8003950:	f001 fc8c 	bl	800526c <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d4fc      	bmi.n	8003954 <usb_lld_start+0x38>
 800395a:	2012      	movs	r0, #18
 800395c:	f001 fc86 	bl	800526c <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	dafc      	bge.n	8003960 <usb_lld_start+0x44>
    otg_disable_ep(usbp);
 8003966:	e9d6 3215 	ldrd	r3, r2, [r6, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800396a:	6894      	ldr	r4, [r2, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800396c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->GAHBCFG = 0;
 8003970:	2200      	movs	r2, #0
 8003972:	60aa      	str	r2, [r5, #8]
    otgp->ie[i].DIEPCTL = 0;
 8003974:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8003978:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800397c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 8003980:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8003984:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003988:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800398c:	2c00      	cmp	r4, #0
 800398e:	f000 80d5 	beq.w	8003b3c <usb_lld_start+0x220>
 8003992:	2c01      	cmp	r4, #1
    otgp->ie[i].DIEPCTL = 0;
 8003994:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 8003998:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800399c:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 80039a0:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 80039a4:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80039a8:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039ac:	f240 80c6 	bls.w	8003b3c <usb_lld_start+0x220>
 80039b0:	2c02      	cmp	r4, #2
    otgp->ie[i].DIEPCTL = 0;
 80039b2:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 80039b6:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80039ba:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 80039be:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 80039c2:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80039c6:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039ca:	f000 80b7 	beq.w	8003b3c <usb_lld_start+0x220>
 80039ce:	2c03      	cmp	r4, #3
    otgp->ie[i].DIEPCTL = 0;
 80039d0:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 80039d4:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80039d8:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 80039dc:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 80039e0:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80039e4:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039e8:	f000 80a8 	beq.w	8003b3c <usb_lld_start+0x220>
 80039ec:	2c04      	cmp	r4, #4
    otgp->ie[i].DIEPCTL = 0;
 80039ee:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 80039f2:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80039f6:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 80039fa:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 80039fe:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a02:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a06:	f000 8099 	beq.w	8003b3c <usb_lld_start+0x220>
 8003a0a:	2c05      	cmp	r4, #5
    otgp->ie[i].DIEPCTL = 0;
 8003a0c:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 8003a10:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003a14:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 8003a18:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 8003a1c:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a20:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a24:	f000 808a 	beq.w	8003b3c <usb_lld_start+0x220>
 8003a28:	2c06      	cmp	r4, #6
    otgp->ie[i].DIEPCTL = 0;
 8003a2a:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 8003a2e:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003a32:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 8003a36:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 8003a3a:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a3e:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a42:	d07b      	beq.n	8003b3c <usb_lld_start+0x220>
 8003a44:	2c07      	cmp	r4, #7
    otgp->ie[i].DIEPCTL = 0;
 8003a46:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 8003a4a:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003a4e:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 8003a52:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 8003a56:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a5a:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a5e:	d06d      	beq.n	8003b3c <usb_lld_start+0x220>
 8003a60:	2c08      	cmp	r4, #8
    otgp->ie[i].DIEPCTL = 0;
 8003a62:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 8003a66:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003a6a:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 8003a6e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 8003a72:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a76:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a7a:	d05f      	beq.n	8003b3c <usb_lld_start+0x220>
 8003a7c:	2c09      	cmp	r4, #9
    otgp->ie[i].DIEPCTL = 0;
 8003a7e:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 8003a82:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003a86:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 8003a8a:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 8003a8e:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003a92:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003a96:	d051      	beq.n	8003b3c <usb_lld_start+0x220>
 8003a98:	2c0a      	cmp	r4, #10
    otgp->ie[i].DIEPCTL = 0;
 8003a9a:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 8003a9e:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003aa2:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 8003aa6:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 8003aaa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003aae:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003ab2:	d043      	beq.n	8003b3c <usb_lld_start+0x220>
 8003ab4:	2c0b      	cmp	r4, #11
    otgp->ie[i].DIEPCTL = 0;
 8003ab6:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 8003aba:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003abe:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 8003ac2:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 8003ac6:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003aca:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003ace:	d035      	beq.n	8003b3c <usb_lld_start+0x220>
 8003ad0:	2c0c      	cmp	r4, #12
    otgp->ie[i].DIEPCTL = 0;
 8003ad2:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 8003ad6:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003ada:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 8003ade:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 8003ae2:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003ae6:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003aea:	d027      	beq.n	8003b3c <usb_lld_start+0x220>
 8003aec:	2c0d      	cmp	r4, #13
    otgp->ie[i].DIEPCTL = 0;
 8003aee:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 8003af2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003af6:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 8003afa:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 8003afe:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b02:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b06:	d019      	beq.n	8003b3c <usb_lld_start+0x220>
 8003b08:	2c0e      	cmp	r4, #14
    otgp->ie[i].DIEPCTL = 0;
 8003b0a:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 8003b0e:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b12:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 8003b16:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 8003b1a:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b1e:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003b22:	d00b      	beq.n	8003b3c <usb_lld_start+0x220>
    otgp->ie[i].DIEPCTL = 0;
 8003b24:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 8003b28:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003b2c:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 8003b30:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 8003b34:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003b38:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
    if (usbp->config->sof_cb == NULL)
 8003b3c:	6872      	ldr	r2, [r6, #4]
 8003b3e:	68d1      	ldr	r1, [r2, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003b40:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    otgp->DIEPMSK  = 0;
 8003b44:	2200      	movs	r2, #0
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003b46:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8003b4a:	f8c5 2810 	str.w	r2, [r5, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8003b4e:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8003b52:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8003b56:	b149      	cbz	r1, 8003b6c <usb_lld_start+0x250>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <usb_lld_start+0x298>)
 8003b5a:	61ab      	str	r3, [r5, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b60:	616b      	str	r3, [r5, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8003b62:	68ab      	ldr	r3, [r5, #8]
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	60ab      	str	r3, [r5, #8]
}
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <usb_lld_start+0x29c>)
 8003b6e:	61ab      	str	r3, [r5, #24]
 8003b70:	e7f4      	b.n	8003b5c <usb_lld_start+0x240>
      rccEnableOTG_FS(true);
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <usb_lld_start+0x2a0>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
 8003b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8c:	615a      	str	r2, [r3, #20]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003b96:	210e      	movs	r1, #14
 8003b98:	2043      	movs	r0, #67	; 0x43
      rccResetOTG_FS();
 8003b9a:	695b      	ldr	r3, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003b9c:	f7fd feb0 	bl	8001900 <nvicEnableVector>
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8003ba0:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <usb_lld_start+0x2a4>)
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <usb_lld_start+0x2a8>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8003ba4:	60ea      	str	r2, [r5, #12]
 8003ba6:	6d74      	ldr	r4, [r6, #84]	; 0x54
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8003ba8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 8003bac:	e6c2      	b.n	8003934 <usb_lld_start+0x18>
 8003bae:	bf00      	nop
 8003bb0:	200009d0 	.word	0x200009d0
 8003bb4:	c0303c08 	.word	0xc0303c08
 8003bb8:	c0303c00 	.word	0xc0303c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40001440 	.word	0x40001440
 8003bc4:	02200003 	.word	0x02200003

08003bc8 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 8003bc8:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003bca:	6d44      	ldr	r4, [r0, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003bcc:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 8003bce:	4606      	mov	r6, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003bd0:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003bd2:	6925      	ldr	r5, [r4, #16]
 8003bd4:	f015 0520 	ands.w	r5, r5, #32
 8003bd8:	d1fb      	bne.n	8003bd2 <usb_lld_reset+0xa>
 8003bda:	2012      	movs	r0, #18
 8003bdc:	f001 fb46 	bl	800526c <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003be0:	6db0      	ldr	r0, [r6, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 8003be2:	f8c4 5834 	str.w	r5, [r4, #2100]	; 0x834
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003be6:	6881      	ldr	r1, [r0, #8]
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003be8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003bf0:	f04f 1501 	mov.w	r5, #65537	; 0x10001
 8003bf4:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003bf8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003bfc:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c00:	f8c4 3908 	str.w	r3, [r4, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c04:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	f000 8095 	beq.w	8003d38 <usb_lld_reset+0x170>
 8003c0e:	2901      	cmp	r1, #1
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c10:	f8c4 2920 	str.w	r2, [r4, #2336]	; 0x920
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c14:	f8c4 2b20 	str.w	r2, [r4, #2848]	; 0xb20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c18:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c1c:	f8c4 3b28 	str.w	r3, [r4, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c20:	f240 808a 	bls.w	8003d38 <usb_lld_reset+0x170>
 8003c24:	2902      	cmp	r1, #2
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c26:	f8c4 2940 	str.w	r2, [r4, #2368]	; 0x940
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c2a:	f8c4 2b40 	str.w	r2, [r4, #2880]	; 0xb40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c2e:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c32:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c36:	d07f      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c38:	2903      	cmp	r1, #3
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c3a:	f8c4 2960 	str.w	r2, [r4, #2400]	; 0x960
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c3e:	f8c4 2b60 	str.w	r2, [r4, #2912]	; 0xb60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c42:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c46:	f8c4 3b68 	str.w	r3, [r4, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c4a:	d075      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c4c:	2904      	cmp	r1, #4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c4e:	f8c4 2980 	str.w	r2, [r4, #2432]	; 0x980
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c52:	f8c4 2b80 	str.w	r2, [r4, #2944]	; 0xb80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c56:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c5a:	f8c4 3b88 	str.w	r3, [r4, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c5e:	d06b      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c60:	2905      	cmp	r1, #5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c62:	f8c4 29a0 	str.w	r2, [r4, #2464]	; 0x9a0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c66:	f8c4 2ba0 	str.w	r2, [r4, #2976]	; 0xba0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c6a:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c6e:	f8c4 3ba8 	str.w	r3, [r4, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c72:	d061      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c74:	2906      	cmp	r1, #6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c76:	f8c4 29c0 	str.w	r2, [r4, #2496]	; 0x9c0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c7a:	f8c4 2bc0 	str.w	r2, [r4, #3008]	; 0xbc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c7e:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c82:	f8c4 3bc8 	str.w	r3, [r4, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c86:	d057      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c88:	2907      	cmp	r1, #7
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c8a:	f8c4 29e0 	str.w	r2, [r4, #2528]	; 0x9e0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003c8e:	f8c4 2be0 	str.w	r2, [r4, #3040]	; 0xbe0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003c92:	f8c4 39e8 	str.w	r3, [r4, #2536]	; 0x9e8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003c96:	f8c4 3be8 	str.w	r3, [r4, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003c9a:	d04d      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003c9c:	2908      	cmp	r1, #8
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003c9e:	f8c4 2a00 	str.w	r2, [r4, #2560]	; 0xa00
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003ca2:	f8c4 2c00 	str.w	r2, [r4, #3072]	; 0xc00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003ca6:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003caa:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cae:	d043      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003cb0:	2909      	cmp	r1, #9
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003cb2:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003cb6:	f8c4 2c20 	str.w	r2, [r4, #3104]	; 0xc20
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cba:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cbe:	f8c4 3c28 	str.w	r3, [r4, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cc2:	d039      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003cc4:	290a      	cmp	r1, #10
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003cc6:	f8c4 2a40 	str.w	r2, [r4, #2624]	; 0xa40
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003cca:	f8c4 2c40 	str.w	r2, [r4, #3136]	; 0xc40
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cce:	f8c4 3a48 	str.w	r3, [r4, #2632]	; 0xa48
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cd2:	f8c4 3c48 	str.w	r3, [r4, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cd6:	d02f      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003cd8:	290b      	cmp	r1, #11
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003cda:	f8c4 2a60 	str.w	r2, [r4, #2656]	; 0xa60
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003cde:	f8c4 2c60 	str.w	r2, [r4, #3168]	; 0xc60
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003ce2:	f8c4 3a68 	str.w	r3, [r4, #2664]	; 0xa68
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003ce6:	f8c4 3c68 	str.w	r3, [r4, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cea:	d025      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003cec:	290c      	cmp	r1, #12
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003cee:	f8c4 2a80 	str.w	r2, [r4, #2688]	; 0xa80
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003cf2:	f8c4 2c80 	str.w	r2, [r4, #3200]	; 0xc80
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cf6:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cfa:	f8c4 3c88 	str.w	r3, [r4, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cfe:	d01b      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003d00:	290d      	cmp	r1, #13
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003d02:	f8c4 2aa0 	str.w	r2, [r4, #2720]	; 0xaa0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003d06:	f8c4 2ca0 	str.w	r2, [r4, #3232]	; 0xca0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003d0a:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003d0e:	f8c4 3ca8 	str.w	r3, [r4, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003d12:	d011      	beq.n	8003d38 <usb_lld_reset+0x170>
 8003d14:	290e      	cmp	r1, #14
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003d16:	f8c4 2ac0 	str.w	r2, [r4, #2752]	; 0xac0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003d1a:	f8c4 2cc0 	str.w	r2, [r4, #3264]	; 0xcc0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003d1e:	f8c4 3ac8 	str.w	r3, [r4, #2760]	; 0xac8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003d22:	f8c4 3cc8 	str.w	r3, [r4, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003d26:	d007      	beq.n	8003d38 <usb_lld_reset+0x170>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003d28:	f8c4 2ae0 	str.w	r2, [r4, #2784]	; 0xae0
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003d2c:	f8c4 2ce0 	str.w	r2, [r4, #3296]	; 0xce0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003d30:	f8c4 3ae8 	str.w	r3, [r4, #2792]	; 0xae8
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003d34:	f8c4 3ce8 	str.w	r3, [r4, #3304]	; 0xce8
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003d38:	6803      	ldr	r3, [r0, #0]
 8003d3a:	65f3      	str	r3, [r6, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003d3c:	6803      	ldr	r3, [r0, #0]
  otg_rxfifo_flush(usbp);
 8003d3e:	6d72      	ldr	r2, [r6, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003d40:	6263      	str	r3, [r4, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8003d42:	2310      	movs	r3, #16
 8003d44:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003d46:	6915      	ldr	r5, [r2, #16]
 8003d48:	f015 0510 	ands.w	r5, r5, #16
 8003d4c:	d1fb      	bne.n	8003d46 <usb_lld_reset+0x17e>
 8003d4e:	2012      	movs	r0, #18
 8003d50:	f001 fa8c 	bl	800526c <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003d54:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <usb_lld_reset+0x1d8>)
  usbp->epc[0] = &ep0config;
 8003d5a:	4912      	ldr	r1, [pc, #72]	; (8003da4 <usb_lld_reset+0x1dc>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003d5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d60:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003d64:	69a3      	ldr	r3, [r4, #24]
 8003d66:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003d6a:	f043 0310 	orr.w	r3, r3, #16
 8003d6e:	61a3      	str	r3, [r4, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003d70:	2309      	movs	r3, #9
 8003d72:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8003d76:	f8c4 3814 	str.w	r3, [r4, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8003d7a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  usbp->epc[0] = &ep0config;
 8003d7e:	60f1      	str	r1, [r6, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8003d80:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003d84:	f8c4 2b00 	str.w	r2, [r4, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8003d88:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8003d8c:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  next = usbp->pmnext;
 8003d90:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  usbp->pmnext += size;
 8003d92:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 8003d9a:	65f2      	str	r2, [r6, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003d9c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	10008040 	.word	0x10008040
 8003da4:	08006490 	.word	0x08006490

08003da8 <usb_lld_set_address>:
  stm32_otg_t *otgp = usbp->otg;
 8003da8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8003daa:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8003dae:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003db2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003db6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003dba:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 8003dbe:	4770      	bx	lr

08003dc0 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	fa0f f881 	sxth.w	r8, r1
 8003dc8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 8003dcc:	460d      	mov	r5, r1
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f002 0203 	and.w	r2, r2, #3
 8003dd6:	2a02      	cmp	r2, #2
 8003dd8:	f000 8097 	beq.w	8003f0a <usb_lld_init_endpoint+0x14a>
 8003ddc:	2a03      	cmp	r2, #3
 8003dde:	f000 8091 	beq.w	8003f04 <usb_lld_init_endpoint+0x144>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8003de2:	4c4b      	ldr	r4, [pc, #300]	; (8003f10 <usb_lld_init_endpoint+0x150>)
 8003de4:	494b      	ldr	r1, [pc, #300]	; (8003f14 <usb_lld_init_endpoint+0x154>)
 8003de6:	2a01      	cmp	r2, #1
 8003de8:	bf0c      	ite	eq
 8003dea:	46a1      	moveq	r9, r4
 8003dec:	4689      	movne	r9, r1
  stm32_otg_t *otgp = usbp->otg;
 8003dee:	6d44      	ldr	r4, [r0, #84]	; 0x54
  if (usbp->epc[ep]->out_state != NULL) {
 8003df0:	699e      	ldr	r6, [r3, #24]
  otgp->oe[ep].DOEPTSIZ = 0;
 8003df2:	0169      	lsls	r1, r5, #5
 8003df4:	1862      	adds	r2, r4, r1
 8003df6:	f04f 0c00 	mov.w	ip, #0
 8003dfa:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 8003dfe:	f105 0210 	add.w	r2, r5, #16
 8003e02:	f04f 0c01 	mov.w	ip, #1
 8003e06:	fa0c f202 	lsl.w	r2, ip, r2
  if (usbp->epc[ep]->out_state != NULL) {
 8003e0a:	2e00      	cmp	r6, #0
 8003e0c:	d04b      	beq.n	8003ea6 <usb_lld_init_endpoint+0xe6>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8003e0e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8003e12:	f105 0658 	add.w	r6, r5, #88	; 0x58
 8003e16:	0176      	lsls	r6, r6, #5
 8003e18:	ea4c 0c09 	orr.w	ip, ip, r9
 8003e1c:	f844 c006 	str.w	ip, [r4, r6]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8003e20:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8003e24:	4332      	orrs	r2, r6
 8003e26:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8003e2a:	1866      	adds	r6, r4, r1
  if (usbp->epc[ep]->in_state != NULL) {
 8003e2c:	f8d3 c014 	ldr.w	ip, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8003e30:	2200      	movs	r2, #0
 8003e32:	01a9      	lsls	r1, r5, #6
 8003e34:	f8c6 2910 	str.w	r2, [r6, #2320]	; 0x910
 8003e38:	f041 0120 	orr.w	r1, r1, #32
 8003e3c:	1e6a      	subs	r2, r5, #1
  if (usbp->epc[ep]->in_state != NULL) {
 8003e3e:	f1bc 0f00 	cmp.w	ip, #0
 8003e42:	d03f      	beq.n	8003ec4 <usb_lld_init_endpoint+0x104>
    if (usbp->epc[ep]->in_multiplier > 1)
 8003e44:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003e48:	8a1e      	ldrh	r6, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8003e4a:	f1bc 0f01 	cmp.w	ip, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003e4e:	ea4f 0396 	mov.w	r3, r6, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003e52:	f102 0240 	add.w	r2, r2, #64	; 0x40
  next = usbp->pmnext;
 8003e56:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8003e58:	bf88      	it	hi
 8003e5a:	fb0c f303 	mulhi.w	r3, ip, r3
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003e5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  usbp->pmnext += size;
 8003e62:	eb03 0c06 	add.w	ip, r3, r6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003e66:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  usbp->pmnext += size;
 8003e6a:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003e6e:	6053      	str	r3, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003e70:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	069a      	lsls	r2, r3, #26
 8003e76:	d4fc      	bmi.n	8003e72 <usb_lld_init_endpoint+0xb2>
 8003e78:	2012      	movs	r0, #18
 8003e7a:	f001 f9f7 	bl	800526c <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 8003e82:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8003e86:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8003e8a:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8003e8c:	ea42 0209 	orr.w	r2, r2, r9
    otgp->ie[ep].DIEPCTL = ctl |
 8003e90:	50e2      	str	r2, [r4, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8003e92:	2101      	movs	r1, #1
 8003e94:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003e98:	fa01 f505 	lsl.w	r5, r1, r5
 8003e9c:	431d      	orrs	r5, r3
 8003e9e:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 8003ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea6:	eb04 1c48 	add.w	ip, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8003eaa:	f8dc 6b00 	ldr.w	r6, [ip, #2816]	; 0xb00
 8003eae:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
 8003eb2:	f8cc 6b00 	str.w	r6, [ip, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003eb6:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8003eba:	ea26 0202 	bic.w	r2, r6, r2
 8003ebe:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
 8003ec2:	e7b2      	b.n	8003e2a <usb_lld_init_endpoint+0x6a>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003ec4:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8003ec8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ecc:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <usb_lld_init_endpoint+0x158>)
 8003ece:	605a      	str	r2, [r3, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003ed0:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	d4fc      	bmi.n	8003ed2 <usb_lld_init_endpoint+0x112>
 8003ed8:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8003edc:	2012      	movs	r0, #18
 8003ede:	f001 f9c5 	bl	800526c <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8003ee2:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8003ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eea:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8003eee:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f505 	lsl.w	r5, r1, r5
 8003ef8:	ea23 0505 	bic.w	r5, r3, r5
 8003efc:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 8003f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8003f04:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8003f1c <usb_lld_init_endpoint+0x15c>
    break;
 8003f08:	e771      	b.n	8003dee <usb_lld_init_endpoint+0x2e>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8003f0a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8003f20 <usb_lld_init_endpoint+0x160>
    break;
 8003f0e:	e76e      	b.n	8003dee <usb_lld_init_endpoint+0x2e>
 8003f10:	10048000 	.word	0x10048000
 8003f14:	10008000 	.word	0x10008000
 8003f18:	02000400 	.word	0x02000400
 8003f1c:	100c8000 	.word	0x100c8000
 8003f20:	10088000 	.word	0x10088000

08003f24 <usb_lld_disable_endpoints>:
  otg_disable_ep(usbp);
 8003f24:	e9d0 3115 	ldrd	r3, r1, [r0, #84]	; 0x54
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8003f28:	b410      	push	{r4}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003f2a:	680c      	ldr	r4, [r1, #0]
 8003f2c:	65c4      	str	r4, [r0, #92]	; 0x5c
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003f2e:	6888      	ldr	r0, [r1, #8]
    otgp->ie[i].DIEPCTL = 0;
 8003f30:	2200      	movs	r2, #0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    otgp->ie[i].DIEPCTL = 0;
 8003f36:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8003f3a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003f3e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 8003f42:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8003f46:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003f4a:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f000 80d5 	beq.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003f54:	2801      	cmp	r0, #1
    otgp->ie[i].DIEPCTL = 0;
 8003f56:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    otgp->ie[i].DIEPTSIZ = 0;
 8003f5a:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003f5e:	f8c3 1928 	str.w	r1, [r3, #2344]	; 0x928
    otgp->oe[i].DOEPCTL = 0;
 8003f62:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    otgp->oe[i].DOEPTSIZ = 0;
 8003f66:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003f6a:	f8c3 1b28 	str.w	r1, [r3, #2856]	; 0xb28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003f6e:	f240 80c6 	bls.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003f72:	2802      	cmp	r0, #2
    otgp->ie[i].DIEPCTL = 0;
 8003f74:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
    otgp->ie[i].DIEPTSIZ = 0;
 8003f78:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003f7c:	f8c3 1948 	str.w	r1, [r3, #2376]	; 0x948
    otgp->oe[i].DOEPCTL = 0;
 8003f80:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    otgp->oe[i].DOEPTSIZ = 0;
 8003f84:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003f88:	f8c3 1b48 	str.w	r1, [r3, #2888]	; 0xb48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003f8c:	f000 80b7 	beq.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003f90:	2803      	cmp	r0, #3
    otgp->ie[i].DIEPCTL = 0;
 8003f92:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    otgp->ie[i].DIEPTSIZ = 0;
 8003f96:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003f9a:	f8c3 1968 	str.w	r1, [r3, #2408]	; 0x968
    otgp->oe[i].DOEPCTL = 0;
 8003f9e:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
    otgp->oe[i].DOEPTSIZ = 0;
 8003fa2:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003fa6:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003faa:	f000 80a8 	beq.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003fae:	2804      	cmp	r0, #4
    otgp->ie[i].DIEPCTL = 0;
 8003fb0:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
    otgp->ie[i].DIEPTSIZ = 0;
 8003fb4:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003fb8:	f8c3 1988 	str.w	r1, [r3, #2440]	; 0x988
    otgp->oe[i].DOEPCTL = 0;
 8003fbc:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
    otgp->oe[i].DOEPTSIZ = 0;
 8003fc0:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003fc4:	f8c3 1b88 	str.w	r1, [r3, #2952]	; 0xb88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003fc8:	f000 8099 	beq.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003fcc:	2805      	cmp	r0, #5
    otgp->ie[i].DIEPCTL = 0;
 8003fce:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0
    otgp->ie[i].DIEPTSIZ = 0;
 8003fd2:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003fd6:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
    otgp->oe[i].DOEPCTL = 0;
 8003fda:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    otgp->oe[i].DOEPTSIZ = 0;
 8003fde:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003fe2:	f8c3 1ba8 	str.w	r1, [r3, #2984]	; 0xba8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003fe6:	f000 808a 	beq.w	80040fe <usb_lld_disable_endpoints+0x1da>
 8003fea:	2806      	cmp	r0, #6
    otgp->ie[i].DIEPCTL = 0;
 8003fec:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
    otgp->ie[i].DIEPTSIZ = 0;
 8003ff0:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003ff4:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
    otgp->oe[i].DOEPCTL = 0;
 8003ff8:	f8c3 2bc0 	str.w	r2, [r3, #3008]	; 0xbc0
    otgp->oe[i].DOEPTSIZ = 0;
 8003ffc:	f8c3 2bd0 	str.w	r2, [r3, #3024]	; 0xbd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004000:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004004:	d07b      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 8004006:	2807      	cmp	r0, #7
    otgp->ie[i].DIEPCTL = 0;
 8004008:	f8c3 29e0 	str.w	r2, [r3, #2528]	; 0x9e0
    otgp->ie[i].DIEPTSIZ = 0;
 800400c:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004010:	f8c3 19e8 	str.w	r1, [r3, #2536]	; 0x9e8
    otgp->oe[i].DOEPCTL = 0;
 8004014:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
    otgp->oe[i].DOEPTSIZ = 0;
 8004018:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800401c:	f8c3 1be8 	str.w	r1, [r3, #3048]	; 0xbe8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004020:	d06d      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 8004022:	2808      	cmp	r0, #8
    otgp->ie[i].DIEPCTL = 0;
 8004024:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
    otgp->ie[i].DIEPTSIZ = 0;
 8004028:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800402c:	f8c3 1a08 	str.w	r1, [r3, #2568]	; 0xa08
    otgp->oe[i].DOEPCTL = 0;
 8004030:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    otgp->oe[i].DOEPTSIZ = 0;
 8004034:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004038:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800403c:	d05f      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 800403e:	2809      	cmp	r0, #9
    otgp->ie[i].DIEPCTL = 0;
 8004040:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
    otgp->ie[i].DIEPTSIZ = 0;
 8004044:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004048:	f8c3 1a28 	str.w	r1, [r3, #2600]	; 0xa28
    otgp->oe[i].DOEPCTL = 0;
 800404c:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
    otgp->oe[i].DOEPTSIZ = 0;
 8004050:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004054:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004058:	d051      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 800405a:	280a      	cmp	r0, #10
    otgp->ie[i].DIEPCTL = 0;
 800405c:	f8c3 2a40 	str.w	r2, [r3, #2624]	; 0xa40
    otgp->ie[i].DIEPTSIZ = 0;
 8004060:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004064:	f8c3 1a48 	str.w	r1, [r3, #2632]	; 0xa48
    otgp->oe[i].DOEPCTL = 0;
 8004068:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
    otgp->oe[i].DOEPTSIZ = 0;
 800406c:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004070:	f8c3 1c48 	str.w	r1, [r3, #3144]	; 0xc48
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004074:	d043      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 8004076:	280b      	cmp	r0, #11
    otgp->ie[i].DIEPCTL = 0;
 8004078:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
    otgp->ie[i].DIEPTSIZ = 0;
 800407c:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004080:	f8c3 1a68 	str.w	r1, [r3, #2664]	; 0xa68
    otgp->oe[i].DOEPCTL = 0;
 8004084:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
    otgp->oe[i].DOEPTSIZ = 0;
 8004088:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800408c:	f8c3 1c68 	str.w	r1, [r3, #3176]	; 0xc68
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004090:	d035      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 8004092:	280c      	cmp	r0, #12
    otgp->ie[i].DIEPCTL = 0;
 8004094:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
    otgp->ie[i].DIEPTSIZ = 0;
 8004098:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800409c:	f8c3 1a88 	str.w	r1, [r3, #2696]	; 0xa88
    otgp->oe[i].DOEPCTL = 0;
 80040a0:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    otgp->oe[i].DOEPTSIZ = 0;
 80040a4:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80040a8:	f8c3 1c88 	str.w	r1, [r3, #3208]	; 0xc88
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80040ac:	d027      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 80040ae:	280d      	cmp	r0, #13
    otgp->ie[i].DIEPCTL = 0;
 80040b0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    otgp->ie[i].DIEPTSIZ = 0;
 80040b4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80040b8:	f8c3 1aa8 	str.w	r1, [r3, #2728]	; 0xaa8
    otgp->oe[i].DOEPCTL = 0;
 80040bc:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    otgp->oe[i].DOEPTSIZ = 0;
 80040c0:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80040c4:	f8c3 1ca8 	str.w	r1, [r3, #3240]	; 0xca8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80040c8:	d019      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
 80040ca:	280e      	cmp	r0, #14
    otgp->ie[i].DIEPCTL = 0;
 80040cc:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
    otgp->ie[i].DIEPTSIZ = 0;
 80040d0:	f8c3 2ad0 	str.w	r2, [r3, #2768]	; 0xad0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80040d4:	f8c3 1ac8 	str.w	r1, [r3, #2760]	; 0xac8
    otgp->oe[i].DOEPCTL = 0;
 80040d8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
    otgp->oe[i].DOEPTSIZ = 0;
 80040dc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80040e0:	f8c3 1cc8 	str.w	r1, [r3, #3272]	; 0xcc8
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80040e4:	d00b      	beq.n	80040fe <usb_lld_disable_endpoints+0x1da>
    otgp->ie[i].DIEPCTL = 0;
 80040e6:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
    otgp->ie[i].DIEPTSIZ = 0;
 80040ea:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80040ee:	f8c3 1ae8 	str.w	r1, [r3, #2792]	; 0xae8
    otgp->oe[i].DOEPCTL = 0;
 80040f2:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
    otgp->oe[i].DOEPTSIZ = 0;
 80040f6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80040fa:	f8c3 1ce8 	str.w	r1, [r3, #3304]	; 0xce8
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80040fe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004102:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8004106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800410a:	4770      	bx	lr

0800410c <usb_lld_get_status_out>:
  ctl = usbp->otg->oe[ep].DOEPCTL;
 800410c:	3158      	adds	r1, #88	; 0x58
 800410e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004110:	0149      	lsls	r1, r1, #5
 8004112:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8004114:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004118:	d004      	beq.n	8004124 <usb_lld_get_status_out+0x18>
  if (ctl & DOEPCTL_STALL)
 800411a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 800411e:	bf14      	ite	ne
 8004120:	2001      	movne	r0, #1
 8004122:	2002      	moveq	r0, #2
}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <usb_lld_get_status_in>:
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004128:	3148      	adds	r1, #72	; 0x48
 800412a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800412c:	0149      	lsls	r1, r1, #5
 800412e:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8004130:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004134:	d004      	beq.n	8004140 <usb_lld_get_status_in+0x18>
  if (ctl & DIEPCTL_STALL)
 8004136:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 800413a:	bf14      	ite	ne
 800413c:	2001      	movne	r0, #1
 800413e:	2002      	moveq	r0, #2
}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <usb_lld_read_setup>:
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004144:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004148:	68cb      	ldr	r3, [r1, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	6011      	str	r1, [r2, #0]
}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop

08004158 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004158:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800415c:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800415e:	68dd      	ldr	r5, [r3, #12]
 8004160:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 8004162:	681c      	ldr	r4, [r3, #0]
 8004164:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8004166:	b919      	cbnz	r1, 8004170 <usb_lld_start_out+0x18>
 8004168:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 800416a:	bf84      	itt	hi
 800416c:	2440      	movhi	r4, #64	; 0x40
 800416e:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004170:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004172:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004174:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004176:	1e5a      	subs	r2, r3, #1
 8004178:	4422      	add	r2, r4
 800417a:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	3303      	adds	r3, #3
 8004184:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004188:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800418c:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004190:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004194:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004198:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800419a:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800419e:	d00a      	beq.n	80041b6 <usb_lld_start_out+0x5e>
 80041a0:	b209      	sxth	r1, r1
 80041a2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80041a6:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80041a8:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 80041ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b0:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 80041b4:	4770      	bx	lr
 80041b6:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80041b8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80041bc:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 80041c0:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 80041c4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80041c8:	bf14      	ite	ne
 80041ca:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80041ce:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80041d2:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80041d6:	e7e4      	b.n	80041a2 <usb_lld_start_out+0x4a>

080041d8 <usb_lld_start_in>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80041d8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80041dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80041de:	68d8      	ldr	r0, [r3, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80041e0:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80041e2:	6944      	ldr	r4, [r0, #20]
  isp->totsize = isp->txsize;
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	60e3      	str	r3, [r4, #12]
  if (isp->txsize == 0) {
 80041e8:	b9eb      	cbnz	r3, 8004226 <usb_lld_start_in+0x4e>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80041ea:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 80041ee:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80041f2:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80041f6:	6803      	ldr	r3, [r0, #0]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d025      	beq.n	800424c <usb_lld_start_in+0x74>
 8004200:	b208      	sxth	r0, r1
 8004202:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004206:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004208:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800420c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004210:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004214:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8004218:	fa03 f101 	lsl.w	r1, r3, r1
 800421c:	4301      	orrs	r1, r0
 800421e:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8004222:	bcf0      	pop	{r4, r5, r6, r7}
 8004224:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8004226:	b311      	cbz	r1, 800426e <usb_lld_start_in+0x96>
 8004228:	f043 5600 	orr.w	r6, r3, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800422c:	8a07      	ldrh	r7, [r0, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800422e:	eb02 1541 	add.w	r5, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004232:	1e7c      	subs	r4, r7, #1
 8004234:	4423      	add	r3, r4
 8004236:	fbb3 f3f7 	udiv	r3, r3, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800423a:	ea46 43c3 	orr.w	r3, r6, r3, lsl #19
 800423e:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004242:	6803      	ldr	r3, [r0, #0]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d1d9      	bne.n	8004200 <usb_lld_start_in+0x28>
 800424c:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800424e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8004252:	eb02 1440 	add.w	r4, r2, r0, lsl #5
 8004256:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800425a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800425e:	bf14      	ite	ne
 8004260:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8004264:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004268:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800426c:	e7c9      	b.n	8004202 <usb_lld_start_in+0x2a>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d9da      	bls.n	8004228 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	4e01      	ldr	r6, [pc, #4]	; (800427c <usb_lld_start_in+0xa4>)
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	e7d8      	b.n	800422c <usb_lld_start_in+0x54>
 800427a:	bf00      	nop
 800427c:	20000040 	.word	0x20000040

08004280 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8004280:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004282:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004286:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800428a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800428e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004292:	4770      	bx	lr

08004294 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8004294:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004296:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800429a:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800429e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042a2:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 80042a6:	4770      	bx	lr

080042a8 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 80042a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042aa:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80042ae:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 80042b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042b6:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 80042ba:	4770      	bx	lr

080042bc <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 80042bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042be:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 80042c2:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80042c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ca:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 80042ce:	4770      	bx	lr

080042d0 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80042d0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	460d      	mov	r5, r1
 80042d8:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80042da:	d149      	bne.n	8004370 <spi_lld_serve_rx_interrupt+0xa0>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 80042dc:	6861      	ldr	r1, [r4, #4]
 80042de:	780b      	ldrb	r3, [r1, #0]
 80042e0:	b17b      	cbz	r3, 8004302 <spi_lld_serve_rx_interrupt+0x32>
 80042e2:	f005 0620 	and.w	r6, r5, #32
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80042e6:	06ed      	lsls	r5, r5, #27
 80042e8:	d43c      	bmi.n	8004364 <spi_lld_serve_rx_interrupt+0x94>
      /* Half buffer interrupt.*/
      _spi_isr_half_code(spip);
    }
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 80042ea:	b14e      	cbz	r6, 8004300 <spi_lld_serve_rx_interrupt+0x30>
      /* End buffer interrupt.*/
      _spi_isr_full_code(spip);
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	b133      	cbz	r3, 8004300 <spi_lld_serve_rx_interrupt+0x30>
 80042f2:	2204      	movs	r2, #4
 80042f4:	7022      	strb	r2, [r4, #0]
 80042f6:	4620      	mov	r0, r4
 80042f8:	4798      	blx	r3
 80042fa:	7823      	ldrb	r3, [r4, #0]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d03b      	beq.n	8004378 <spi_lld_serve_rx_interrupt+0xa8>

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
  }
}
 8004300:	bd70      	pop	{r4, r5, r6, pc}
    dmaStreamDisable(spip->dmatx);
 8004302:	6965      	ldr	r5, [r4, #20]
 8004304:	682a      	ldr	r2, [r5, #0]
 8004306:	6813      	ldr	r3, [r2, #0]
 8004308:	f023 031f 	bic.w	r3, r3, #31
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	07d8      	lsls	r0, r3, #31
 8004312:	d4fc      	bmi.n	800430e <spi_lld_serve_rx_interrupt+0x3e>
 8004314:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 8004316:	6920      	ldr	r0, [r4, #16]
    dmaStreamDisable(spip->dmatx);
 8004318:	686d      	ldr	r5, [r5, #4]
 800431a:	233d      	movs	r3, #61	; 0x3d
 800431c:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 800431e:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8004320:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	f023 031f 	bic.w	r3, r3, #31
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	07db      	lsls	r3, r3, #31
 800432e:	d4fc      	bmi.n	800432a <spi_lld_serve_rx_interrupt+0x5a>
 8004330:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8004332:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8004334:	6841      	ldr	r1, [r0, #4]
 8004336:	233d      	movs	r3, #61	; 0x3d
 8004338:	40ab      	lsls	r3, r5
 800433a:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 800433c:	b1fa      	cbz	r2, 800437e <spi_lld_serve_rx_interrupt+0xae>
 800433e:	2304      	movs	r3, #4
 8004340:	7023      	strb	r3, [r4, #0]
 8004342:	4620      	mov	r0, r4
 8004344:	4790      	blx	r2
 8004346:	7823      	ldrb	r3, [r4, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d018      	beq.n	800437e <spi_lld_serve_rx_interrupt+0xae>
 800434c:	2320      	movs	r3, #32
 800434e:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8004352:	2100      	movs	r1, #0
 8004354:	f104 0008 	add.w	r0, r4, #8
 8004358:	f001 fa1a 	bl	8005790 <chThdResumeI>
 800435c:	2300      	movs	r3, #0
 800435e:	f383 8811 	msr	BASEPRI, r3
}
 8004362:	bd70      	pop	{r4, r5, r6, pc}
      _spi_isr_half_code(spip);
 8004364:	684b      	ldr	r3, [r1, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ca      	beq.n	8004300 <spi_lld_serve_rx_interrupt+0x30>
 800436a:	4620      	mov	r0, r4
 800436c:	4798      	blx	r3
 800436e:	e7bc      	b.n	80042ea <spi_lld_serve_rx_interrupt+0x1a>
  chSysHalt(reason);
 8004370:	4804      	ldr	r0, [pc, #16]	; (8004384 <spi_lld_serve_rx_interrupt+0xb4>)
 8004372:	f000 ff35 	bl	80051e0 <chSysHalt>
 8004376:	e7b1      	b.n	80042dc <spi_lld_serve_rx_interrupt+0xc>
      _spi_isr_full_code(spip);
 8004378:	2303      	movs	r3, #3
 800437a:	7023      	strb	r3, [r4, #0]
}
 800437c:	bd70      	pop	{r4, r5, r6, pc}
    _spi_isr_code(spip);
 800437e:	2302      	movs	r3, #2
 8004380:	7023      	strb	r3, [r4, #0]
 8004382:	e7e3      	b.n	800434c <spi_lld_serve_rx_interrupt+0x7c>
 8004384:	08006484 	.word	0x08006484

08004388 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004388:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4605      	mov	r5, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004390:	d118      	bne.n	80043c4 <spi_lld_serve_tx_interrupt+0x3c>
#else
  (void)spip;
  (void)flags;
#endif
  #if !SPID1_USE_RECEIVE
  if (spip == &SPID1)
 8004392:	4c10      	ldr	r4, [pc, #64]	; (80043d4 <spi_lld_serve_tx_interrupt+0x4c>)
 8004394:	42a5      	cmp	r5, r4
 8004396:	d000      	beq.n	800439a <spi_lld_serve_tx_interrupt+0x12>
    _spi_isr_code(spip);
  #endif
}
 8004398:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 800439a:	6863      	ldr	r3, [r4, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b1ab      	cbz	r3, 80043cc <spi_lld_serve_tx_interrupt+0x44>
 80043a0:	2204      	movs	r2, #4
 80043a2:	7022      	strb	r2, [r4, #0]
 80043a4:	4620      	mov	r0, r4
 80043a6:	4798      	blx	r3
 80043a8:	7823      	ldrb	r3, [r4, #0]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00e      	beq.n	80043cc <spi_lld_serve_tx_interrupt+0x44>
 80043ae:	2320      	movs	r3, #32
 80043b0:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80043b4:	2100      	movs	r1, #0
 80043b6:	4808      	ldr	r0, [pc, #32]	; (80043d8 <spi_lld_serve_tx_interrupt+0x50>)
 80043b8:	f001 f9ea 	bl	8005790 <chThdResumeI>
 80043bc:	2300      	movs	r3, #0
 80043be:	f383 8811 	msr	BASEPRI, r3
}
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 80043c4:	4805      	ldr	r0, [pc, #20]	; (80043dc <spi_lld_serve_tx_interrupt+0x54>)
 80043c6:	f000 ff0b 	bl	80051e0 <chSysHalt>
 80043ca:	e7e2      	b.n	8004392 <spi_lld_serve_tx_interrupt+0xa>
    _spi_isr_code(spip);
 80043cc:	2302      	movs	r3, #2
 80043ce:	7023      	strb	r3, [r4, #0]
 80043d0:	e7ed      	b.n	80043ae <spi_lld_serve_tx_interrupt+0x26>
 80043d2:	bf00      	nop
 80043d4:	20000a48 	.word	0x20000a48
 80043d8:	20000a50 	.word	0x20000a50
 80043dc:	08006484 	.word	0x08006484

080043e0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80043e2:	4f13      	ldr	r7, [pc, #76]	; (8004430 <spi_lld_init+0x50>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI4
  spiObjectInit(&SPID4);
 80043e4:	4e13      	ldr	r6, [pc, #76]	; (8004434 <spi_lld_init+0x54>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI5
  spiObjectInit(&SPID5);
 80043e6:	4c14      	ldr	r4, [pc, #80]	; (8004438 <spi_lld_init+0x58>)
  spiObjectInit(&SPID1);
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7fc ff5b 	bl	80012a4 <spiObjectInit>
  SPID1.spi       = SPI1;
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <spi_lld_init+0x5c>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80043f0:	4a13      	ldr	r2, [pc, #76]	; (8004440 <spi_lld_init+0x60>)
  SPID1.spi       = SPI1;
 80043f2:	60fb      	str	r3, [r7, #12]
  SPID1.dmarx     = NULL;
 80043f4:	2500      	movs	r5, #0
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <spi_lld_init+0x64>)
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80043f8:	61ba      	str	r2, [r7, #24]
  spiObjectInit(&SPID4);
 80043fa:	4630      	mov	r0, r6
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80043fc:	61fb      	str	r3, [r7, #28]
  SPID1.dmatx     = NULL;
 80043fe:	e9c7 5504 	strd	r5, r5, [r7, #16]
  spiObjectInit(&SPID4);
 8004402:	f7fc ff4f 	bl	80012a4 <spiObjectInit>
  SPID4.rxdmamode = STM32_DMA_CR_CHSEL(SPI4_RX_DMA_CHANNEL) |
 8004406:	4a10      	ldr	r2, [pc, #64]	; (8004448 <spi_lld_init+0x68>)
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004408:	4b10      	ldr	r3, [pc, #64]	; (800444c <spi_lld_init+0x6c>)
  SPID4.spi       = SPI4;
 800440a:	4911      	ldr	r1, [pc, #68]	; (8004450 <spi_lld_init+0x70>)
 800440c:	60f1      	str	r1, [r6, #12]
  spiObjectInit(&SPID5);
 800440e:	4620      	mov	r0, r4
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
 8004410:	e9c6 2306 	strd	r2, r3, [r6, #24]
  SPID4.dmatx     = NULL;
 8004414:	e9c6 5504 	strd	r5, r5, [r6, #16]
  spiObjectInit(&SPID5);
 8004418:	f7fc ff44 	bl	80012a4 <spiObjectInit>
  SPID5.spi       = SPI5;
  SPID5.dmarx     = NULL;
  SPID5.dmatx     = NULL;
  SPID5.rxdmamode = STM32_DMA_CR_CHSEL(SPI5_RX_DMA_CHANNEL) |
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <spi_lld_init+0x74>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI5_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <spi_lld_init+0x78>)
  SPID5.spi       = SPI5;
 8004420:	490e      	ldr	r1, [pc, #56]	; (800445c <spi_lld_init+0x7c>)
 8004422:	60e1      	str	r1, [r4, #12]
  SPID5.dmatx     = NULL;
 8004424:	e9c4 5504 	strd	r5, r5, [r4, #16]
  SPID5.txdmamode = STM32_DMA_CR_CHSEL(SPI5_TX_DMA_CHANNEL) |
 8004428:	e9c4 2306 	strd	r2, r3, [r4, #24]
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442e:	bf00      	nop
 8004430:	20000a48 	.word	0x20000a48
 8004434:	20000a68 	.word	0x20000a68
 8004438:	20000a88 	.word	0x20000a88
 800443c:	40013000 	.word	0x40013000
 8004440:	06010016 	.word	0x06010016
 8004444:	06010056 	.word	0x06010056
 8004448:	08010016 	.word	0x08010016
 800444c:	0a010046 	.word	0x0a010046
 8004450:	40013400 	.word	0x40013400
 8004454:	04010016 	.word	0x04010016
 8004458:	0e010046 	.word	0x0e010046
 800445c:	40015000 	.word	0x40015000

08004460 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004462:	7803      	ldrb	r3, [r0, #0]
 8004464:	2b01      	cmp	r3, #1
void spi_lld_start(SPIDriver *spip) {
 8004466:	4604      	mov	r4, r0
  if (spip->state == SPI_STOP) {
 8004468:	d032      	beq.n	80044d0 <spi_lld_start+0x70>
 800446a:	68c3      	ldr	r3, [r0, #12]
 800446c:	4d45      	ldr	r5, [pc, #276]	; (8004584 <spi_lld_start+0x124>)
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800446e:	6866      	ldr	r6, [r4, #4]
 8004470:	69a2      	ldr	r2, [r4, #24]
 8004472:	89b0      	ldrh	r0, [r6, #12]
 8004474:	69e1      	ldr	r1, [r4, #28]
 8004476:	0507      	lsls	r7, r0, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8004478:	7837      	ldrb	r7, [r6, #0]
 800447a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800447e:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004482:	bf44      	itt	mi
 8004484:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004488:	f441 5120 	orrmi.w	r1, r1, #10240	; 0x2800
  if (spip->config->circular) {
 800448c:	b1df      	cbz	r7, 80044c6 <spi_lld_start+0x66>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800448e:	f442 7284 	orr.w	r2, r2, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004492:	f441 7184 	orr.w	r1, r1, #264	; 0x108

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004496:	89f6      	ldrh	r6, [r6, #14]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004498:	681f      	ldr	r7, [r3, #0]
 800449a:	61e1      	str	r1, [r4, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800449c:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80044a0:	f046 0107 	orr.w	r1, r6, #7
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80044a4:	f027 0740 	bic.w	r7, r7, #64	; 0x40
                    SPI_CR2_TXDMAEN;

#if !SPID1_USE_RECEIVE
  if (spip != &SPID1)
 80044a8:	42ac      	cmp	r4, r5
 80044aa:	61a2      	str	r2, [r4, #24]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80044ac:	601f      	str	r7, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80044ae:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80044b0:	6059      	str	r1, [r3, #4]
  if (spip != &SPID1)
 80044b2:	d003      	beq.n	80044bc <spi_lld_start+0x5c>
#endif
    spip->spi->CR2 |= SPI_CR2_RXDMAEN;
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80044c6:	f422 7284 	bic.w	r2, r2, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80044ca:	f421 7184 	bic.w	r1, r1, #264	; 0x108
 80044ce:	e7e2      	b.n	8004496 <spi_lld_start+0x36>
    if (&SPID1 == spip) {
 80044d0:	4d2c      	ldr	r5, [pc, #176]	; (8004584 <spi_lld_start+0x124>)
 80044d2:	42a8      	cmp	r0, r5
 80044d4:	d041      	beq.n	800455a <spi_lld_start+0xfa>
    if (&SPID4 == spip) {
 80044d6:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <spi_lld_start+0x128>)
 80044d8:	4298      	cmp	r0, r3
 80044da:	d025      	beq.n	8004528 <spi_lld_start+0xc8>
    if (&SPID5 == spip) {
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <spi_lld_start+0x12c>)
 80044de:	4298      	cmp	r0, r3
 80044e0:	d009      	beq.n	80044f6 <spi_lld_start+0x96>
      dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80044e2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80044e6:	6811      	ldr	r1, [r2, #0]
 80044e8:	f103 020c 	add.w	r2, r3, #12
 80044ec:	608a      	str	r2, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80044ee:	6961      	ldr	r1, [r4, #20]
 80044f0:	6809      	ldr	r1, [r1, #0]
 80044f2:	608a      	str	r2, [r1, #8]
 80044f4:	e7bb      	b.n	800446e <spi_lld_start+0xe>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 80044f6:	4623      	mov	r3, r4
 80044f8:	4a25      	ldr	r2, [pc, #148]	; (8004590 <spi_lld_start+0x130>)
 80044fa:	210a      	movs	r1, #10
 80044fc:	200b      	movs	r0, #11
 80044fe:	f7fe f8f1 	bl	80026e4 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004502:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI5_RX_DMA_STREAM,
 8004504:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004506:	4a23      	ldr	r2, [pc, #140]	; (8004594 <spi_lld_start+0x134>)
 8004508:	210a      	movs	r1, #10
 800450a:	200e      	movs	r0, #14
 800450c:	f7fe f8ea 	bl	80026e4 <dmaStreamAllocI>
      rccEnableSPI5(true);
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI5_TX_DMA_STREAM,
 8004512:	6160      	str	r0, [r4, #20]
      rccEnableSPI5(true);
 8004514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004516:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800451a:	645a      	str	r2, [r3, #68]	; 0x44
 800451c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800451e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004522:	665a      	str	r2, [r3, #100]	; 0x64
 8004524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004526:	e7dc      	b.n	80044e2 <spi_lld_start+0x82>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004528:	4603      	mov	r3, r0
 800452a:	4a19      	ldr	r2, [pc, #100]	; (8004590 <spi_lld_start+0x130>)
 800452c:	210a      	movs	r1, #10
 800452e:	2008      	movs	r0, #8
 8004530:	f7fe f8d8 	bl	80026e4 <dmaStreamAllocI>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004534:	4623      	mov	r3, r4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI4_RX_DMA_STREAM,
 8004536:	6120      	str	r0, [r4, #16]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <spi_lld_start+0x134>)
 800453a:	210a      	movs	r1, #10
 800453c:	200c      	movs	r0, #12
 800453e:	f7fe f8d1 	bl	80026e4 <dmaStreamAllocI>
      rccEnableSPI4(true);
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <spi_lld_start+0x138>)
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI4_TX_DMA_STREAM,
 8004544:	6160      	str	r0, [r4, #20]
      rccEnableSPI4(true);
 8004546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
 800454e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004554:	665a      	str	r2, [r3, #100]	; 0x64
 8004556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004558:	e7c3      	b.n	80044e2 <spi_lld_start+0x82>
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800455a:	4603      	mov	r3, r0
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <spi_lld_start+0x134>)
 800455e:	210a      	movs	r1, #10
 8004560:	200d      	movs	r0, #13
 8004562:	f7fe f8bf 	bl	80026e4 <dmaStreamAllocI>
      rccEnableSPI1(true);
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <spi_lld_start+0x138>)
 8004568:	68e3      	ldr	r3, [r4, #12]
 800456a:	6c51      	ldr	r1, [r2, #68]	; 0x44
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800456c:	6160      	str	r0, [r4, #20]
      rccEnableSPI1(true);
 800456e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004572:	6451      	str	r1, [r2, #68]	; 0x44
 8004574:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004576:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800457a:	6651      	str	r1, [r2, #100]	; 0x64
 800457c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800457e:	f103 020c 	add.w	r2, r3, #12
 8004582:	e7b4      	b.n	80044ee <spi_lld_start+0x8e>
 8004584:	20000a48 	.word	0x20000a48
 8004588:	20000a68 	.word	0x20000a68
 800458c:	20000a88 	.word	0x20000a88
 8004590:	080042d1 	.word	0x080042d1
 8004594:	08004389 	.word	0x08004389
 8004598:	40023800 	.word	0x40023800

0800459c <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800459c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	0792      	lsls	r2, r2, #30
 80045a4:	d401      	bmi.n	80045aa <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80045a6:	f001 bb53 	b.w	8005c50 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80045aa:	b510      	push	{r4, lr}
    STM32_ST_TIM->SR = 0U;
 80045ac:	2400      	movs	r4, #0
 80045ae:	611c      	str	r4, [r3, #16]
 80045b0:	2320      	movs	r3, #32
 80045b2:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 80045b6:	f000 fe19 	bl	80051ec <chSysTimerHandlerI>
 80045ba:	f384 8811 	msr	BASEPRI, r4
}
 80045be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80045c2:	f001 bb45 	b.w	8005c50 <_port_irq_epilogue>
 80045c6:	bf00      	nop

080045c8 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <st_lld_init+0x4c>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80045ca:	4813      	ldr	r0, [pc, #76]	; (8004618 <st_lld_init+0x50>)
  ST_ENABLE_CLOCK();
 80045cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ce:	f042 0201 	orr.w	r2, r2, #1
void st_lld_init(void) {
 80045d2:	b470      	push	{r4, r5, r6}
  ST_ENABLE_CLOCK();
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
 80045d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 80045e0:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80045e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80045e6:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80045e8:	2401      	movs	r4, #1
  ST_ENABLE_STOP();
 80045ea:	f041 0101 	orr.w	r1, r1, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80045ee:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80045f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
 80045f6:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80045f8:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80045fa:	2108      	movs	r1, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80045fc:	62dd      	str	r5, [r3, #44]	; 0x2c
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80045fe:	201c      	movs	r0, #28
  STM32_ST_TIM->CCMR1  = 0;
 8004600:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004602:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004604:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004606:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004608:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800460a:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800460c:	bc70      	pop	{r4, r5, r6}
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800460e:	f7fd b977 	b.w	8001900 <nvicEnableVector>
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	e0042000 	.word	0xe0042000

0800461c <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 800461c:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 800461e:	4d17      	ldr	r5, [pc, #92]	; (800467c <VectorA4+0x60>)
 8004620:	69ab      	ldr	r3, [r5, #24]
 8004622:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	4014      	ands	r4, r2
 8004628:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800462a:	43d2      	mvns	r2, r2
 800462c:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800462e:	07a3      	lsls	r3, r4, #30
 8004630:	d504      	bpl.n	800463c <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8004632:	686b      	ldr	r3, [r5, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004636:	b10b      	cbz	r3, 800463c <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 8004638:	4628      	mov	r0, r5
 800463a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800463c:	0760      	lsls	r0, r4, #29
 800463e:	d504      	bpl.n	800464a <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8004640:	686b      	ldr	r3, [r5, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004644:	b10b      	cbz	r3, 800464a <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 8004646:	480d      	ldr	r0, [pc, #52]	; (800467c <VectorA4+0x60>)
 8004648:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800464a:	0721      	lsls	r1, r4, #28
 800464c:	d504      	bpl.n	8004658 <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 800464e:	686b      	ldr	r3, [r5, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004652:	b10b      	cbz	r3, 8004658 <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8004654:	4809      	ldr	r0, [pc, #36]	; (800467c <VectorA4+0x60>)
 8004656:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004658:	06e2      	lsls	r2, r4, #27
 800465a:	d504      	bpl.n	8004666 <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 800465c:	686b      	ldr	r3, [r5, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004660:	b10b      	cbz	r3, 8004666 <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8004662:	4806      	ldr	r0, [pc, #24]	; (800467c <VectorA4+0x60>)
 8004664:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004666:	07e3      	lsls	r3, r4, #31
 8004668:	d504      	bpl.n	8004674 <VectorA4+0x58>
 800466a:	686b      	ldr	r3, [r5, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	b10b      	cbz	r3, 8004674 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <VectorA4+0x60>)
 8004672:	4798      	blx	r3
}
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004678:	f001 baea 	b.w	8005c50 <_port_irq_epilogue>
 800467c:	20000aa8 	.word	0x20000aa8

08004680 <VectorAC>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d17      	ldr	r5, [pc, #92]	; (80046e0 <VectorAC+0x60>)
 8004684:	69ab      	ldr	r3, [r5, #24]
 8004686:	691c      	ldr	r4, [r3, #16]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	4014      	ands	r4, r2
 800468c:	b2e2      	uxtb	r2, r4
 800468e:	43d2      	mvns	r2, r2
 8004690:	611a      	str	r2, [r3, #16]
 8004692:	07a3      	lsls	r3, r4, #30
 8004694:	d504      	bpl.n	80046a0 <VectorAC+0x20>
 8004696:	686b      	ldr	r3, [r5, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	b10b      	cbz	r3, 80046a0 <VectorAC+0x20>
 800469c:	4628      	mov	r0, r5
 800469e:	4798      	blx	r3
 80046a0:	0760      	lsls	r0, r4, #29
 80046a2:	d504      	bpl.n	80046ae <VectorAC+0x2e>
 80046a4:	686b      	ldr	r3, [r5, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	b10b      	cbz	r3, 80046ae <VectorAC+0x2e>
 80046aa:	480d      	ldr	r0, [pc, #52]	; (80046e0 <VectorAC+0x60>)
 80046ac:	4798      	blx	r3
 80046ae:	0721      	lsls	r1, r4, #28
 80046b0:	d504      	bpl.n	80046bc <VectorAC+0x3c>
 80046b2:	686b      	ldr	r3, [r5, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	b10b      	cbz	r3, 80046bc <VectorAC+0x3c>
 80046b8:	4809      	ldr	r0, [pc, #36]	; (80046e0 <VectorAC+0x60>)
 80046ba:	4798      	blx	r3
 80046bc:	06e2      	lsls	r2, r4, #27
 80046be:	d504      	bpl.n	80046ca <VectorAC+0x4a>
 80046c0:	686b      	ldr	r3, [r5, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	b10b      	cbz	r3, 80046ca <VectorAC+0x4a>
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <VectorAC+0x60>)
 80046c8:	4798      	blx	r3
 80046ca:	07e3      	lsls	r3, r4, #31
 80046cc:	d504      	bpl.n	80046d8 <VectorAC+0x58>
 80046ce:	686b      	ldr	r3, [r5, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	b10b      	cbz	r3, 80046d8 <VectorAC+0x58>
 80046d4:	4802      	ldr	r0, [pc, #8]	; (80046e0 <VectorAC+0x60>)
 80046d6:	4798      	blx	r3
 80046d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046dc:	f001 bab8 	b.w	8005c50 <_port_irq_epilogue>
 80046e0:	20000aa8 	.word	0x20000aa8

080046e4 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80046e4:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 80046e6:	4d17      	ldr	r5, [pc, #92]	; (8004744 <VectorB4+0x60>)
 80046e8:	69ab      	ldr	r3, [r5, #24]
 80046ea:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	4014      	ands	r4, r2
 80046f0:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80046f2:	43d2      	mvns	r2, r2
 80046f4:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80046f6:	07a3      	lsls	r3, r4, #30
 80046f8:	d504      	bpl.n	8004704 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80046fa:	686b      	ldr	r3, [r5, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80046fe:	b10b      	cbz	r3, 8004704 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 8004700:	4628      	mov	r0, r5
 8004702:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004704:	0760      	lsls	r0, r4, #29
 8004706:	d504      	bpl.n	8004712 <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8004708:	686b      	ldr	r3, [r5, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800470c:	b10b      	cbz	r3, 8004712 <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800470e:	480d      	ldr	r0, [pc, #52]	; (8004744 <VectorB4+0x60>)
 8004710:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004712:	0721      	lsls	r1, r4, #28
 8004714:	d504      	bpl.n	8004720 <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8004716:	686b      	ldr	r3, [r5, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800471a:	b10b      	cbz	r3, 8004720 <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 800471c:	4809      	ldr	r0, [pc, #36]	; (8004744 <VectorB4+0x60>)
 800471e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004720:	06e2      	lsls	r2, r4, #27
 8004722:	d504      	bpl.n	800472e <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8004724:	686b      	ldr	r3, [r5, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004728:	b10b      	cbz	r3, 800472e <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 800472a:	4806      	ldr	r0, [pc, #24]	; (8004744 <VectorB4+0x60>)
 800472c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800472e:	07e3      	lsls	r3, r4, #31
 8004730:	d504      	bpl.n	800473c <VectorB4+0x58>
 8004732:	686b      	ldr	r3, [r5, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	b10b      	cbz	r3, 800473c <VectorB4+0x58>
    pwmp->config->callback(pwmp);
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <VectorB4+0x60>)
 800473a:	4798      	blx	r3
}
 800473c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004740:	f001 ba86 	b.w	8005c50 <_port_irq_epilogue>
 8004744:	20000ae0 	.word	0x20000ae0

08004748 <VectorEC>:
OSAL_IRQ_HANDLER(STM32_TIM12_HANDLER) {
 8004748:	b538      	push	{r3, r4, r5, lr}
  sr  = pwmp->tim->SR;
 800474a:	4d17      	ldr	r5, [pc, #92]	; (80047a8 <VectorEC+0x60>)
 800474c:	69ab      	ldr	r3, [r5, #24]
 800474e:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	4014      	ands	r4, r2
 8004754:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8004756:	43d2      	mvns	r2, r2
 8004758:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800475a:	07a3      	lsls	r3, r4, #30
 800475c:	d504      	bpl.n	8004768 <VectorEC+0x20>
      (pwmp->config->channels[0].callback != NULL))
 800475e:	686b      	ldr	r3, [r5, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004762:	b10b      	cbz	r3, 8004768 <VectorEC+0x20>
    pwmp->config->channels[0].callback(pwmp);
 8004764:	4628      	mov	r0, r5
 8004766:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004768:	0760      	lsls	r0, r4, #29
 800476a:	d504      	bpl.n	8004776 <VectorEC+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 800476c:	686b      	ldr	r3, [r5, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004770:	b10b      	cbz	r3, 8004776 <VectorEC+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 8004772:	480d      	ldr	r0, [pc, #52]	; (80047a8 <VectorEC+0x60>)
 8004774:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004776:	0721      	lsls	r1, r4, #28
 8004778:	d504      	bpl.n	8004784 <VectorEC+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 800477a:	686b      	ldr	r3, [r5, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800477e:	b10b      	cbz	r3, 8004784 <VectorEC+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8004780:	4809      	ldr	r0, [pc, #36]	; (80047a8 <VectorEC+0x60>)
 8004782:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004784:	06e2      	lsls	r2, r4, #27
 8004786:	d504      	bpl.n	8004792 <VectorEC+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8004788:	686b      	ldr	r3, [r5, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800478c:	b10b      	cbz	r3, 8004792 <VectorEC+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 800478e:	4806      	ldr	r0, [pc, #24]	; (80047a8 <VectorEC+0x60>)
 8004790:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004792:	07e3      	lsls	r3, r4, #31
 8004794:	d504      	bpl.n	80047a0 <VectorEC+0x58>
 8004796:	686b      	ldr	r3, [r5, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	b10b      	cbz	r3, 80047a0 <VectorEC+0x58>
    pwmp->config->callback(pwmp);
 800479c:	4802      	ldr	r0, [pc, #8]	; (80047a8 <VectorEC+0x60>)
 800479e:	4798      	blx	r3
}
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80047a4:	f001 ba54 	b.w	8005c50 <_port_irq_epilogue>
 80047a8:	20000ac4 	.word	0x20000ac4

080047ac <pwm_lld_init>:
void pwm_lld_init(void) {
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pwmObjectInit(&PWMD1);
 80047ae:	4e0c      	ldr	r6, [pc, #48]	; (80047e0 <pwm_lld_init+0x34>)
  pwmObjectInit(&PWMD3);
 80047b0:	4d0c      	ldr	r5, [pc, #48]	; (80047e4 <pwm_lld_init+0x38>)
  pwmObjectInit(&PWMD12);
 80047b2:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <pwm_lld_init+0x3c>)
  pwmObjectInit(&PWMD1);
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7fc fb1d 	bl	8000df4 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80047ba:	2704      	movs	r7, #4
  PWMD1.tim = STM32_TIM1;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <pwm_lld_init+0x40>)
 80047be:	61b3      	str	r3, [r6, #24]
  pwmObjectInit(&PWMD3);
 80047c0:	4628      	mov	r0, r5
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80047c2:	7437      	strb	r7, [r6, #16]
  pwmObjectInit(&PWMD3);
 80047c4:	f7fc fb16 	bl	8000df4 <pwmObjectInit>
  PWMD3.tim = STM32_TIM3;
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <pwm_lld_init+0x44>)
 80047ca:	61ab      	str	r3, [r5, #24]
  pwmObjectInit(&PWMD12);
 80047cc:	4620      	mov	r0, r4
  PWMD3.channels = STM32_TIM3_CHANNELS;
 80047ce:	742f      	strb	r7, [r5, #16]
  pwmObjectInit(&PWMD12);
 80047d0:	f7fc fb10 	bl	8000df4 <pwmObjectInit>
  PWMD12.channels = STM32_TIM12_CHANNELS;
 80047d4:	2202      	movs	r2, #2
  PWMD12.tim = STM32_TIM12;
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <pwm_lld_init+0x48>)
  PWMD12.channels = STM32_TIM12_CHANNELS;
 80047d8:	7422      	strb	r2, [r4, #16]
  PWMD12.tim = STM32_TIM12;
 80047da:	61a3      	str	r3, [r4, #24]
}
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000aa8 	.word	0x20000aa8
 80047e4:	20000ae0 	.word	0x20000ae0
 80047e8:	20000ac4 	.word	0x20000ac4
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40001800 	.word	0x40001800

080047f8 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80047f8:	4a02      	ldr	r2, [pc, #8]	; (8004804 <notify7+0xc>)
 80047fa:	68d3      	ldr	r3, [r2, #12]
 80047fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004800:	60d3      	str	r3, [r2, #12]
}
 8004802:	4770      	bx	lr
 8004804:	40007800 	.word	0x40007800

08004808 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 800480c:	4e57      	ldr	r6, [pc, #348]	; (800496c <Vector188+0x164>)
 800480e:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8004810:	f8d5 900c 	ldr.w	r9, [r5, #12]
  uint16_t sr = u->SR;
 8004814:	682b      	ldr	r3, [r5, #0]
  if (sr & USART_SR_LBD) {
 8004816:	05d8      	lsls	r0, r3, #23
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
 8004818:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 800481a:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 800481c:	d473      	bmi.n	8004906 <Vector188+0xfe>
 800481e:	2320      	movs	r3, #32
 8004820:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004824:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004828:	d00b      	beq.n	8004842 <Vector188+0x3a>
  chEvtBroadcastFlagsI(esp, flags);
 800482a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004974 <Vector188+0x16c>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800482e:	0723      	lsls	r3, r4, #28
 8004830:	d130      	bne.n	8004894 <Vector188+0x8c>
    if (sr & USART_SR_RXNE)
 8004832:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8004834:	686b      	ldr	r3, [r5, #4]
    if (sr & USART_SR_RXNE)
 8004836:	d420      	bmi.n	800487a <Vector188+0x72>
    sr = u->SR;
 8004838:	682c      	ldr	r4, [r5, #0]
 800483a:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800483c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004840:	d1f5      	bne.n	800482e <Vector188+0x26>
 8004842:	2300      	movs	r3, #0
 8004844:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8004848:	f019 0f80 	tst.w	r9, #128	; 0x80
 800484c:	d001      	beq.n	8004852 <Vector188+0x4a>
 800484e:	0622      	lsls	r2, r4, #24
 8004850:	d468      	bmi.n	8004924 <Vector188+0x11c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8004852:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004856:	d00b      	beq.n	8004870 <Vector188+0x68>
 8004858:	0663      	lsls	r3, r4, #25
 800485a:	d509      	bpl.n	8004870 <Vector188+0x68>
 800485c:	2320      	movs	r3, #32
 800485e:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004862:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8004866:	429a      	cmp	r2, r3
 8004868:	d069      	beq.n	800493e <Vector188+0x136>
 800486a:	2300      	movs	r3, #0
 800486c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
 8004870:	b003      	add	sp, #12
 8004872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004876:	f001 b9eb 	b.w	8005c50 <_port_irq_epilogue>
    b = (uint8_t)u->DR & sdp->rxmask;
 800487a:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
      sdIncomingDataI(sdp, b);
 800487e:	483b      	ldr	r0, [pc, #236]	; (800496c <Vector188+0x164>)
 8004880:	4019      	ands	r1, r3
 8004882:	f7fc fb0b 	bl	8000e9c <sdIncomingDataI>
    sr = u->SR;
 8004886:	682c      	ldr	r4, [r5, #0]
 8004888:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800488a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800488e:	d0d8      	beq.n	8004842 <Vector188+0x3a>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004890:	0723      	lsls	r3, r4, #28
 8004892:	d0ce      	beq.n	8004832 <Vector188+0x2a>
  if (sr & USART_SR_ORE)
 8004894:	f004 0308 	and.w	r3, r4, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	21a0      	movne	r1, #160	; 0xa0
 800489e:	2120      	moveq	r1, #32
 80048a0:	9101      	str	r1, [sp, #4]
 80048a2:	bf15      	itete	ne
 80048a4:	f44f 73c0 	movne.w	r3, #384	; 0x180
 80048a8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80048ac:	f44f 77e0 	movne.w	r7, #448	; 0x1c0
 80048b0:	f44f 77a0 	moveq.w	r7, #320	; 0x140
 80048b4:	bf15      	itete	ne
 80048b6:	22c0      	movne	r2, #192	; 0xc0
 80048b8:	2240      	moveq	r2, #64	; 0x40
 80048ba:	f44f 7bd0 	movne.w	fp, #416	; 0x1a0
 80048be:	f44f 7b90 	moveq.w	fp, #288	; 0x120
 80048c2:	bf15      	itete	ne
 80048c4:	f44f 7af0 	movne.w	sl, #480	; 0x1e0
 80048c8:	f44f 7ab0 	moveq.w	sl, #352	; 0x160
 80048cc:	f04f 0ee0 	movne.w	lr, #224	; 0xe0
 80048d0:	f04f 0e60 	moveq.w	lr, #96	; 0x60
 80048d4:	bf14      	ite	ne
 80048d6:	2180      	movne	r1, #128	; 0x80
 80048d8:	2100      	moveq	r1, #0
  if (sr & USART_SR_PE)
 80048da:	f014 0f01 	tst.w	r4, #1
  if (sr & USART_SR_FE)
 80048de:	f004 0c02 	and.w	ip, r4, #2
 80048e2:	4640      	mov	r0, r8
  if (sr & USART_SR_PE)
 80048e4:	d003      	beq.n	80048ee <Vector188+0xe6>
    sts |= SD_PARITY_ERROR;
 80048e6:	9901      	ldr	r1, [sp, #4]
  if (sr & USART_SR_PE)
 80048e8:	465b      	mov	r3, fp
 80048ea:	4657      	mov	r7, sl
 80048ec:	4672      	mov	r2, lr
  if (sr & USART_SR_FE)
 80048ee:	f1bc 0f00 	cmp.w	ip, #0
 80048f2:	bf1c      	itt	ne
 80048f4:	463b      	movne	r3, r7
 80048f6:	4611      	movne	r1, r2
    sts |= SD_NOISE_ERROR;
 80048f8:	f014 0f04 	tst.w	r4, #4
 80048fc:	bf18      	it	ne
 80048fe:	4619      	movne	r1, r3
 8004900:	f001 f87c 	bl	80059fc <chEvtBroadcastFlagsI>
 8004904:	e795      	b.n	8004832 <Vector188+0x2a>
 8004906:	2320      	movs	r3, #32
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004910:	1d30      	adds	r0, r6, #4
 8004912:	f001 f873 	bl	80059fc <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8004916:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800491a:	602b      	str	r3, [r5, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	e77c      	b.n	800481e <Vector188+0x16>
 8004924:	2320      	movs	r3, #32
 8004926:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 800492a:	4811      	ldr	r0, [pc, #68]	; (8004970 <Vector188+0x168>)
 800492c:	f7fc f984 	bl	8000c38 <oqGetI>
    if (b < MSG_OK) {
 8004930:	2800      	cmp	r0, #0
 8004932:	db11      	blt.n	8004958 <Vector188+0x150>
      u->DR = b;
 8004934:	6068      	str	r0, [r5, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	e789      	b.n	8004852 <Vector188+0x4a>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800493e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d092      	beq.n	800486a <Vector188+0x62>
 8004944:	2110      	movs	r1, #16
 8004946:	480b      	ldr	r0, [pc, #44]	; (8004974 <Vector188+0x16c>)
 8004948:	f001 f858 	bl	80059fc <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800494c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8004950:	ea09 0303 	and.w	r3, r9, r3
 8004954:	60eb      	str	r3, [r5, #12]
 8004956:	e788      	b.n	800486a <Vector188+0x62>
 8004958:	2108      	movs	r1, #8
 800495a:	4806      	ldr	r0, [pc, #24]	; (8004974 <Vector188+0x16c>)
 800495c:	f001 f84e 	bl	80059fc <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8004960:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8004964:	ea09 0303 	and.w	r3, r9, r3
 8004968:	60eb      	str	r3, [r5, #12]
 800496a:	e7e4      	b.n	8004936 <Vector188+0x12e>
 800496c:	20000afc 	.word	0x20000afc
 8004970:	20000b2c 	.word	0x20000b2c
 8004974:	20000b00 	.word	0x20000b00

08004978 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8004978:	b510      	push	{r4, lr}
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
#endif

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7, NULL, notify7);
 800497a:	4c04      	ldr	r4, [pc, #16]	; (800498c <sd_lld_init+0x14>)
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <sd_lld_init+0x18>)
 800497e:	4620      	mov	r0, r4
 8004980:	2100      	movs	r1, #0
 8004982:	f7fc fa6b 	bl	8000e5c <sdObjectInit>
  SD7.usart = UART7;
 8004986:	4b03      	ldr	r3, [pc, #12]	; (8004994 <sd_lld_init+0x1c>)
 8004988:	6763      	str	r3, [r4, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 800498a:	bd10      	pop	{r4, pc}
 800498c:	20000afc 	.word	0x20000afc
 8004990:	080047f9 	.word	0x080047f9
 8004994:	40007800 	.word	0x40007800

08004998 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004998:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80049a0:	d129      	bne.n	80049f6 <uart_lld_serve_tx_end_irq+0x5e>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 80049a2:	6a21      	ldr	r1, [r4, #32]
 80049a4:	680a      	ldr	r2, [r1, #0]
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	f023 031f 	bic.w	r3, r3, #31
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	07db      	lsls	r3, r3, #31
 80049b2:	d4fc      	bmi.n	80049ae <uart_lld_serve_tx_end_irq+0x16>

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 80049b4:	6863      	ldr	r3, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 80049b6:	7a4d      	ldrb	r5, [r1, #9]
 80049b8:	6848      	ldr	r0, [r1, #4]
  _uart_tx1_isr_code(uartp);
 80049ba:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 80049bc:	233d      	movs	r3, #61	; 0x3d
 80049be:	40ab      	lsls	r3, r5
  _uart_tx1_isr_code(uartp);
 80049c0:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 80049c2:	6003      	str	r3, [r0, #0]
  _uart_tx1_isr_code(uartp);
 80049c4:	7061      	strb	r1, [r4, #1]
 80049c6:	b19a      	cbz	r2, 80049f0 <uart_lld_serve_tx_end_irq+0x58>
 80049c8:	4620      	mov	r0, r4
 80049ca:	4790      	blx	r2
 80049cc:	7863      	ldrb	r3, [r4, #1]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d00e      	beq.n	80049f0 <uart_lld_serve_tx_end_irq+0x58>
 80049d2:	7a23      	ldrb	r3, [r4, #8]
 80049d4:	b903      	cbnz	r3, 80049d8 <uart_lld_serve_tx_end_irq+0x40>
}
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	2320      	movs	r3, #32
 80049da:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80049de:	2100      	movs	r1, #0
 80049e0:	f104 0010 	add.w	r0, r4, #16
 80049e4:	f000 fed4 	bl	8005790 <chThdResumeI>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
  _uart_tx1_isr_code(uartp);
 80049f0:	2300      	movs	r3, #0
 80049f2:	7063      	strb	r3, [r4, #1]
 80049f4:	e7ed      	b.n	80049d2 <uart_lld_serve_tx_end_irq+0x3a>
  chSysHalt(reason);
 80049f6:	4802      	ldr	r0, [pc, #8]	; (8004a00 <uart_lld_serve_tx_end_irq+0x68>)
 80049f8:	f000 fbf2 	bl	80051e0 <chSysHalt>
 80049fc:	e7d1      	b.n	80049a2 <uart_lld_serve_tx_end_irq+0xa>
 80049fe:	bf00      	nop
 8004a00:	08006484 	.word	0x08006484

08004a04 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a04:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a0e:	d12d      	bne.n	8004a6c <uart_lld_serve_rx_end_irq+0x68>
  if (uartp->rxstate == UART_RX_IDLE) {
 8004a10:	78a3      	ldrb	r3, [r4, #2]
 8004a12:	6861      	ldr	r1, [r4, #4]
 8004a14:	b933      	cbnz	r3, 8004a24 <uart_lld_serve_rx_end_irq+0x20>
    _uart_rx_idle_code(uartp);
 8004a16:	68cb      	ldr	r3, [r1, #12]
 8004a18:	b333      	cbz	r3, 8004a68 <uart_lld_serve_rx_end_irq+0x64>
 8004a1a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8004a1c:	4620      	mov	r0, r4
}
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _uart_rx_idle_code(uartp);
 8004a22:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8004a24:	69e0      	ldr	r0, [r4, #28]
 8004a26:	6802      	ldr	r2, [r0, #0]
 8004a28:	6813      	ldr	r3, [r2, #0]
 8004a2a:	f023 031f 	bic.w	r3, r3, #31
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	6813      	ldr	r3, [r2, #0]
 8004a32:	07db      	lsls	r3, r3, #31
 8004a34:	d4fc      	bmi.n	8004a30 <uart_lld_serve_rx_end_irq+0x2c>
 8004a36:	7a47      	ldrb	r7, [r0, #9]
 8004a38:	6846      	ldr	r6, [r0, #4]
    _uart_rx_complete_isr_code(uartp);
 8004a3a:	688d      	ldr	r5, [r1, #8]
    dmaStreamDisable(uartp->dmarx);
 8004a3c:	233d      	movs	r3, #61	; 0x3d
 8004a3e:	40bb      	lsls	r3, r7
    _uart_rx_complete_isr_code(uartp);
 8004a40:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 8004a42:	6033      	str	r3, [r6, #0]
    _uart_rx_complete_isr_code(uartp);
 8004a44:	70a0      	strb	r0, [r4, #2]
 8004a46:	b1c5      	cbz	r5, 8004a7a <uart_lld_serve_rx_end_irq+0x76>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	47a8      	blx	r5
 8004a4c:	78a3      	ldrb	r3, [r4, #2]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d010      	beq.n	8004a74 <uart_lld_serve_rx_end_irq+0x70>
 8004a52:	2320      	movs	r3, #32
 8004a54:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8004a58:	2100      	movs	r1, #0
 8004a5a:	f104 000c 	add.w	r0, r4, #12
 8004a5e:	f000 fe97 	bl	8005790 <chThdResumeI>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f383 8811 	msr	BASEPRI, r3
}
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chSysHalt(reason);
 8004a6c:	480d      	ldr	r0, [pc, #52]	; (8004aa4 <uart_lld_serve_rx_end_irq+0xa0>)
 8004a6e:	f000 fbb7 	bl	80051e0 <chSysHalt>
 8004a72:	e7cd      	b.n	8004a10 <uart_lld_serve_rx_end_irq+0xc>
 8004a74:	69e3      	ldr	r3, [r4, #28]
 8004a76:	6861      	ldr	r1, [r4, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
  if (uartp->config->rxchar_cb == NULL)
 8004a7a:	68cb      	ldr	r3, [r1, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004a7c:	69a1      	ldr	r1, [r4, #24]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	f44f 7388 	movne.w	r3, #272	; 0x110
 8004a86:	f44f 7380 	moveq.w	r3, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004a8a:	430b      	orrs	r3, r1
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004a8c:	2001      	movs	r0, #1
    _uart_rx_complete_isr_code(uartp);
 8004a8e:	2500      	movs	r5, #0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004a90:	f104 0124 	add.w	r1, r4, #36	; 0x24
    _uart_rx_complete_isr_code(uartp);
 8004a94:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004a96:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004a98:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004a9a:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	4303      	orrs	r3, r0
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e7d6      	b.n	8004a52 <uart_lld_serve_rx_end_irq+0x4e>
 8004aa4:	08006484 	.word	0x08006484

08004aa8 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004aac:	4e52      	ldr	r6, [pc, #328]	; (8004bf8 <VectorD4+0x150>)
 8004aae:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8004ab0:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8004ab2:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004ab4:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004ab6:	f240 131f 	movw	r3, #287	; 0x11f
 8004aba:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004abc:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004abe:	d076      	beq.n	8004bae <VectorD4+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004ac0:	6873      	ldr	r3, [r6, #4]
 8004ac2:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8004ac6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004aca:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004acc:	f1b8 0f00 	cmp.w	r8, #0
 8004ad0:	d062      	beq.n	8004b98 <VectorD4+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 8004ad2:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8004ad4:	f003 0208 	and.w	r2, r3, #8
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2254      	movne	r2, #84	; 0x54
 8004ade:	2244      	moveq	r2, #68	; 0x44
 8004ae0:	9200      	str	r2, [sp, #0]
 8004ae2:	bf14      	ite	ne
 8004ae4:	2274      	movne	r2, #116	; 0x74
 8004ae6:	2264      	moveq	r2, #100	; 0x64
 8004ae8:	9207      	str	r2, [sp, #28]
 8004aea:	bf14      	ite	ne
 8004aec:	2234      	movne	r2, #52	; 0x34
 8004aee:	2224      	moveq	r2, #36	; 0x24
 8004af0:	9203      	str	r2, [sp, #12]
 8004af2:	bf14      	ite	ne
 8004af4:	225c      	movne	r2, #92	; 0x5c
 8004af6:	224c      	moveq	r2, #76	; 0x4c
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	bf14      	ite	ne
 8004afc:	227c      	movne	r2, #124	; 0x7c
 8004afe:	226c      	moveq	r2, #108	; 0x6c
 8004b00:	9202      	str	r2, [sp, #8]
 8004b02:	bf14      	ite	ne
 8004b04:	223c      	movne	r2, #60	; 0x3c
 8004b06:	222c      	moveq	r2, #44	; 0x2c
 8004b08:	9206      	str	r2, [sp, #24]
 8004b0a:	bf14      	ite	ne
 8004b0c:	221c      	movne	r2, #28
 8004b0e:	220c      	moveq	r2, #12
 8004b10:	9204      	str	r2, [sp, #16]
 8004b12:	bf14      	ite	ne
 8004b14:	2214      	movne	r2, #20
 8004b16:	2204      	moveq	r2, #4
 8004b18:	9205      	str	r2, [sp, #20]
 8004b1a:	bf15      	itete	ne
 8004b1c:	2150      	movne	r1, #80	; 0x50
 8004b1e:	2140      	moveq	r1, #64	; 0x40
 8004b20:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8004b24:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8004b28:	bf15      	itete	ne
 8004b2a:	2030      	movne	r0, #48	; 0x30
 8004b2c:	2020      	moveq	r0, #32
 8004b2e:	f04f 0b58 	movne.w	fp, #88	; 0x58
 8004b32:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 8004b36:	bf15      	itete	ne
 8004b38:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8004b3c:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8004b40:	f04f 0938 	movne.w	r9, #56	; 0x38
 8004b44:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8004b48:	bf15      	itete	ne
 8004b4a:	f04f 0e18 	movne.w	lr, #24
 8004b4e:	f04f 0e08 	moveq.w	lr, #8
 8004b52:	2210      	movne	r2, #16
 8004b54:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 8004b56:	f013 0f01 	tst.w	r3, #1
 8004b5a:	d009      	beq.n	8004b70 <VectorD4+0xc8>
 8004b5c:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8004b60:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 8004b64:	9900      	ldr	r1, [sp, #0]
 8004b66:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004b6a:	9803      	ldr	r0, [sp, #12]
 8004b6c:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8004b70:	f013 0f02 	tst.w	r3, #2
 8004b74:	d003      	beq.n	8004b7e <VectorD4+0xd6>
 8004b76:	4659      	mov	r1, fp
 8004b78:	46d4      	mov	ip, sl
 8004b7a:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8004b7c:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8004b7e:	f003 0e04 	and.w	lr, r3, #4
 8004b82:	f1be 0f00 	cmp.w	lr, #0
 8004b86:	bf1c      	itt	ne
 8004b88:	4602      	movne	r2, r0
 8004b8a:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8004b8c:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004b90:	bf08      	it	eq
 8004b92:	4611      	moveq	r1, r2
 8004b94:	4818      	ldr	r0, [pc, #96]	; (8004bf8 <VectorD4+0x150>)
 8004b96:	47c0      	blx	r8
 8004b98:	2320      	movs	r3, #32
 8004b9a:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8004b9e:	f06f 0101 	mvn.w	r1, #1
 8004ba2:	4816      	ldr	r0, [pc, #88]	; (8004bfc <VectorD4+0x154>)
 8004ba4:	f000 fdf4 	bl	8005790 <chThdResumeI>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004bae:	066a      	lsls	r2, r5, #25
 8004bb0:	d50e      	bpl.n	8004bd0 <VectorD4+0x128>
 8004bb2:	067b      	lsls	r3, r7, #25
 8004bb4:	d50c      	bpl.n	8004bd0 <VectorD4+0x128>
    _uart_tx2_isr_code(uartp);
 8004bb6:	6873      	ldr	r3, [r6, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004bba:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8004bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc2:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004bc4:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004bc6:	b10b      	cbz	r3, 8004bcc <VectorD4+0x124>
 8004bc8:	480b      	ldr	r0, [pc, #44]	; (8004bf8 <VectorD4+0x150>)
 8004bca:	4798      	blx	r3
 8004bcc:	7a34      	ldrb	r4, [r6, #8]
 8004bce:	b124      	cbz	r4, 8004bda <VectorD4+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
}
 8004bd0:	b009      	add	sp, #36	; 0x24
 8004bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004bd6:	f001 b83b 	b.w	8005c50 <_port_irq_epilogue>
 8004bda:	2320      	movs	r3, #32
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	4807      	ldr	r0, [pc, #28]	; (8004c00 <VectorD4+0x158>)
 8004be2:	4621      	mov	r1, r4
 8004be4:	f000 fdd4 	bl	8005790 <chThdResumeI>
 8004be8:	f384 8811 	msr	BASEPRI, r4
}
 8004bec:	b009      	add	sp, #36	; 0x24
 8004bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004bf2:	f001 b82d 	b.w	8005c50 <_port_irq_epilogue>
 8004bf6:	bf00      	nop
 8004bf8:	20000b78 	.word	0x20000b78
 8004bfc:	20000b84 	.word	0x20000b84
 8004c00:	20000b88 	.word	0x20000b88

08004c04 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004c08:	4e52      	ldr	r6, [pc, #328]	; (8004d54 <Vector15C+0x150>)
 8004c0a:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8004c0c:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8004c0e:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004c10:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004c12:	f240 131f 	movw	r3, #287	; 0x11f
 8004c16:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8004c18:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004c1a:	d076      	beq.n	8004d0a <Vector15C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004c1c:	6873      	ldr	r3, [r6, #4]
 8004c1e:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8004c22:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004c26:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004c28:	f1b8 0f00 	cmp.w	r8, #0
 8004c2c:	d062      	beq.n	8004cf4 <Vector15C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 8004c2e:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8004c30:	f003 0208 	and.w	r2, r3, #8
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2254      	movne	r2, #84	; 0x54
 8004c3a:	2244      	moveq	r2, #68	; 0x44
 8004c3c:	9200      	str	r2, [sp, #0]
 8004c3e:	bf14      	ite	ne
 8004c40:	2274      	movne	r2, #116	; 0x74
 8004c42:	2264      	moveq	r2, #100	; 0x64
 8004c44:	9207      	str	r2, [sp, #28]
 8004c46:	bf14      	ite	ne
 8004c48:	2234      	movne	r2, #52	; 0x34
 8004c4a:	2224      	moveq	r2, #36	; 0x24
 8004c4c:	9203      	str	r2, [sp, #12]
 8004c4e:	bf14      	ite	ne
 8004c50:	225c      	movne	r2, #92	; 0x5c
 8004c52:	224c      	moveq	r2, #76	; 0x4c
 8004c54:	9201      	str	r2, [sp, #4]
 8004c56:	bf14      	ite	ne
 8004c58:	227c      	movne	r2, #124	; 0x7c
 8004c5a:	226c      	moveq	r2, #108	; 0x6c
 8004c5c:	9202      	str	r2, [sp, #8]
 8004c5e:	bf14      	ite	ne
 8004c60:	223c      	movne	r2, #60	; 0x3c
 8004c62:	222c      	moveq	r2, #44	; 0x2c
 8004c64:	9206      	str	r2, [sp, #24]
 8004c66:	bf14      	ite	ne
 8004c68:	221c      	movne	r2, #28
 8004c6a:	220c      	moveq	r2, #12
 8004c6c:	9204      	str	r2, [sp, #16]
 8004c6e:	bf14      	ite	ne
 8004c70:	2214      	movne	r2, #20
 8004c72:	2204      	moveq	r2, #4
 8004c74:	9205      	str	r2, [sp, #20]
 8004c76:	bf15      	itete	ne
 8004c78:	2150      	movne	r1, #80	; 0x50
 8004c7a:	2140      	moveq	r1, #64	; 0x40
 8004c7c:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8004c80:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8004c84:	bf15      	itete	ne
 8004c86:	2030      	movne	r0, #48	; 0x30
 8004c88:	2020      	moveq	r0, #32
 8004c8a:	f04f 0b58 	movne.w	fp, #88	; 0x58
 8004c8e:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 8004c92:	bf15      	itete	ne
 8004c94:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8004c98:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8004c9c:	f04f 0938 	movne.w	r9, #56	; 0x38
 8004ca0:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8004ca4:	bf15      	itete	ne
 8004ca6:	f04f 0e18 	movne.w	lr, #24
 8004caa:	f04f 0e08 	moveq.w	lr, #8
 8004cae:	2210      	movne	r2, #16
 8004cb0:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 8004cb2:	f013 0f01 	tst.w	r3, #1
 8004cb6:	d009      	beq.n	8004ccc <Vector15C+0xc8>
 8004cb8:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8004cbc:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 8004cc0:	9900      	ldr	r1, [sp, #0]
 8004cc2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004cc6:	9803      	ldr	r0, [sp, #12]
 8004cc8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8004ccc:	f013 0f02 	tst.w	r3, #2
 8004cd0:	d003      	beq.n	8004cda <Vector15C+0xd6>
 8004cd2:	4659      	mov	r1, fp
 8004cd4:	46d4      	mov	ip, sl
 8004cd6:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8004cd8:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8004cda:	f003 0e04 	and.w	lr, r3, #4
 8004cde:	f1be 0f00 	cmp.w	lr, #0
 8004ce2:	bf1c      	itt	ne
 8004ce4:	4602      	movne	r2, r0
 8004ce6:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8004ce8:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004cec:	bf08      	it	eq
 8004cee:	4611      	moveq	r1, r2
 8004cf0:	4818      	ldr	r0, [pc, #96]	; (8004d54 <Vector15C+0x150>)
 8004cf2:	47c0      	blx	r8
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f06f 0101 	mvn.w	r1, #1
 8004cfe:	4816      	ldr	r0, [pc, #88]	; (8004d58 <Vector15C+0x154>)
 8004d00:	f000 fd46 	bl	8005790 <chThdResumeI>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004d0a:	066a      	lsls	r2, r5, #25
 8004d0c:	d50e      	bpl.n	8004d2c <Vector15C+0x128>
 8004d0e:	067b      	lsls	r3, r7, #25
 8004d10:	d50c      	bpl.n	8004d2c <Vector15C+0x128>
    _uart_tx2_isr_code(uartp);
 8004d12:	6873      	ldr	r3, [r6, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004d16:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8004d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d1e:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004d20:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004d22:	b10b      	cbz	r3, 8004d28 <Vector15C+0x124>
 8004d24:	480b      	ldr	r0, [pc, #44]	; (8004d54 <Vector15C+0x150>)
 8004d26:	4798      	blx	r3
 8004d28:	7a34      	ldrb	r4, [r6, #8]
 8004d2a:	b124      	cbz	r4, 8004d36 <Vector15C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
}
 8004d2c:	b009      	add	sp, #36	; 0x24
 8004d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004d32:	f000 bf8d 	b.w	8005c50 <_port_irq_epilogue>
 8004d36:	2320      	movs	r3, #32
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	4807      	ldr	r0, [pc, #28]	; (8004d5c <Vector15C+0x158>)
 8004d3e:	4621      	mov	r1, r4
 8004d40:	f000 fd26 	bl	8005790 <chThdResumeI>
 8004d44:	f384 8811 	msr	BASEPRI, r4
}
 8004d48:	b009      	add	sp, #36	; 0x24
 8004d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004d4e:	f000 bf7f 	b.w	8005c50 <_port_irq_epilogue>
 8004d52:	bf00      	nop
 8004d54:	20000ba0 	.word	0x20000ba0
 8004d58:	20000bac 	.word	0x20000bac
 8004d5c:	20000bb0 	.word	0x20000bb0

08004d60 <Vector18C>:
/**
 * @brief   UART8 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = uartp->usart;
 8004d64:	4e52      	ldr	r6, [pc, #328]	; (8004eb0 <Vector18C+0x150>)
 8004d66:	6974      	ldr	r4, [r6, #20]
  uint32_t cr1 = u->CR1;
 8004d68:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8004d6a:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004d6c:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004d6e:	f240 131f 	movw	r3, #287	; 0x11f
 8004d72:	421d      	tst	r5, r3
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
 8004d74:	b089      	sub	sp, #36	; 0x24
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004d76:	d076      	beq.n	8004e66 <Vector18C+0x106>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004d78:	6873      	ldr	r3, [r6, #4]
 8004d7a:	f8d3 8010 	ldr.w	r8, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8004d7e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004d82:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004d84:	f1b8 0f00 	cmp.w	r8, #0
 8004d88:	d062      	beq.n	8004e50 <Vector18C+0xf0>
  sr = u->SR;   /* SR reset step 1.*/
 8004d8a:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_ORE)
 8004d8c:	f003 0208 	and.w	r2, r3, #8
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2254      	movne	r2, #84	; 0x54
 8004d96:	2244      	moveq	r2, #68	; 0x44
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	bf14      	ite	ne
 8004d9c:	2274      	movne	r2, #116	; 0x74
 8004d9e:	2264      	moveq	r2, #100	; 0x64
 8004da0:	9207      	str	r2, [sp, #28]
 8004da2:	bf14      	ite	ne
 8004da4:	2234      	movne	r2, #52	; 0x34
 8004da6:	2224      	moveq	r2, #36	; 0x24
 8004da8:	9203      	str	r2, [sp, #12]
 8004daa:	bf14      	ite	ne
 8004dac:	225c      	movne	r2, #92	; 0x5c
 8004dae:	224c      	moveq	r2, #76	; 0x4c
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	bf14      	ite	ne
 8004db4:	227c      	movne	r2, #124	; 0x7c
 8004db6:	226c      	moveq	r2, #108	; 0x6c
 8004db8:	9202      	str	r2, [sp, #8]
 8004dba:	bf14      	ite	ne
 8004dbc:	223c      	movne	r2, #60	; 0x3c
 8004dbe:	222c      	moveq	r2, #44	; 0x2c
 8004dc0:	9206      	str	r2, [sp, #24]
 8004dc2:	bf14      	ite	ne
 8004dc4:	221c      	movne	r2, #28
 8004dc6:	220c      	moveq	r2, #12
 8004dc8:	9204      	str	r2, [sp, #16]
 8004dca:	bf14      	ite	ne
 8004dcc:	2214      	movne	r2, #20
 8004dce:	2204      	moveq	r2, #4
 8004dd0:	9205      	str	r2, [sp, #20]
 8004dd2:	bf15      	itete	ne
 8004dd4:	2150      	movne	r1, #80	; 0x50
 8004dd6:	2140      	moveq	r1, #64	; 0x40
 8004dd8:	f04f 0c70 	movne.w	ip, #112	; 0x70
 8004ddc:	f04f 0c60 	moveq.w	ip, #96	; 0x60
 8004de0:	bf15      	itete	ne
 8004de2:	2030      	movne	r0, #48	; 0x30
 8004de4:	2020      	moveq	r0, #32
 8004de6:	f04f 0b58 	movne.w	fp, #88	; 0x58
 8004dea:	f04f 0b48 	moveq.w	fp, #72	; 0x48
 8004dee:	bf15      	itete	ne
 8004df0:	f04f 0a78 	movne.w	sl, #120	; 0x78
 8004df4:	f04f 0a68 	moveq.w	sl, #104	; 0x68
 8004df8:	f04f 0938 	movne.w	r9, #56	; 0x38
 8004dfc:	f04f 0928 	moveq.w	r9, #40	; 0x28
 8004e00:	bf15      	itete	ne
 8004e02:	f04f 0e18 	movne.w	lr, #24
 8004e06:	f04f 0e08 	moveq.w	lr, #8
 8004e0a:	2210      	movne	r2, #16
 8004e0c:	2200      	moveq	r2, #0
  if (sr & USART_SR_PE)
 8004e0e:	f013 0f01 	tst.w	r3, #1
 8004e12:	d009      	beq.n	8004e28 <Vector18C+0xc8>
 8004e14:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
    sts |= UART_PARITY_ERROR;
 8004e18:	e9dd e204 	ldrd	lr, r2, [sp, #16]
  if (sr & USART_SR_PE)
 8004e1c:	9900      	ldr	r1, [sp, #0]
 8004e1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004e22:	9803      	ldr	r0, [sp, #12]
 8004e24:	f8dd 9018 	ldr.w	r9, [sp, #24]
  if (sr & USART_SR_FE)
 8004e28:	f013 0f02 	tst.w	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <Vector18C+0xd6>
 8004e2e:	4659      	mov	r1, fp
 8004e30:	46d4      	mov	ip, sl
 8004e32:	4648      	mov	r0, r9
    sts |= UART_FRAMING_ERROR;
 8004e34:	4672      	mov	r2, lr
  if (sr & USART_SR_NE)
 8004e36:	f003 0e04 	and.w	lr, r3, #4
 8004e3a:	f1be 0f00 	cmp.w	lr, #0
 8004e3e:	bf1c      	itt	ne
 8004e40:	4602      	movne	r2, r0
 8004e42:	4661      	movne	r1, ip
  if (sr & USART_SR_LBD)
 8004e44:	f413 7f80 	tst.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004e48:	bf08      	it	eq
 8004e4a:	4611      	moveq	r1, r2
 8004e4c:	4818      	ldr	r0, [pc, #96]	; (8004eb0 <Vector18C+0x150>)
 8004e4e:	47c0      	blx	r8
 8004e50:	2320      	movs	r3, #32
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f06f 0101 	mvn.w	r1, #1
 8004e5a:	4816      	ldr	r0, [pc, #88]	; (8004eb4 <Vector18C+0x154>)
 8004e5c:	f000 fc98 	bl	8005790 <chThdResumeI>
 8004e60:	2300      	movs	r3, #0
 8004e62:	f383 8811 	msr	BASEPRI, r3
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004e66:	066a      	lsls	r2, r5, #25
 8004e68:	d50e      	bpl.n	8004e88 <Vector18C+0x128>
 8004e6a:	067b      	lsls	r3, r7, #25
 8004e6c:	d50c      	bpl.n	8004e88 <Vector18C+0x128>
    _uart_tx2_isr_code(uartp);
 8004e6e:	6873      	ldr	r3, [r6, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004e72:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8004e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7a:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004e7c:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004e7e:	b10b      	cbz	r3, 8004e84 <Vector18C+0x124>
 8004e80:	480b      	ldr	r0, [pc, #44]	; (8004eb0 <Vector18C+0x150>)
 8004e82:	4798      	blx	r3
 8004e84:	7a34      	ldrb	r4, [r6, #8]
 8004e86:	b124      	cbz	r4, 8004e92 <Vector18C+0x132>
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD8);

  OSAL_IRQ_EPILOGUE();
}
 8004e88:	b009      	add	sp, #36	; 0x24
 8004e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004e8e:	f000 bedf 	b.w	8005c50 <_port_irq_epilogue>
 8004e92:	2320      	movs	r3, #32
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <Vector18C+0x158>)
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	f000 fc78 	bl	8005790 <chThdResumeI>
 8004ea0:	f384 8811 	msr	BASEPRI, r4
}
 8004ea4:	b009      	add	sp, #36	; 0x24
 8004ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004eaa:	f000 bed1 	b.w	8005c50 <_port_irq_epilogue>
 8004eae:	bf00      	nop
 8004eb0:	20000bc8 	.word	0x20000bc8
 8004eb4:	20000bd4 	.word	0x20000bd4
 8004eb8:	20000bd8 	.word	0x20000bd8

08004ebc <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8004ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 8004ec0:	4e0f      	ldr	r6, [pc, #60]	; (8004f00 <uart_lld_init+0x44>)
  UARTD5.dmarx   = NULL;
  UARTD5.dmatx   = NULL;
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8004ec2:	4f10      	ldr	r7, [pc, #64]	; (8004f04 <uart_lld_init+0x48>)
  UARTD7.dmarx   = NULL;
  UARTD7.dmatx   = NULL;
#endif

#if STM32_UART_USE_UART8
  uartObjectInit(&UARTD8);
 8004ec4:	4d10      	ldr	r5, [pc, #64]	; (8004f08 <uart_lld_init+0x4c>)
  uartObjectInit(&UARTD1);
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7fc fa02 	bl	80012d0 <uartObjectInit>
  UARTD1.dmarx   = NULL;
 8004ecc:	2400      	movs	r4, #0
  UARTD1.usart   = USART1;
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <uart_lld_init+0x50>)
 8004ed0:	6173      	str	r3, [r6, #20]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8004ed2:	f04f 0806 	mov.w	r8, #6
  uartObjectInit(&UARTD6);
 8004ed6:	4638      	mov	r0, r7
  UARTD1.dmarx   = NULL;
 8004ed8:	e9c6 8406 	strd	r8, r4, [r6, #24]
  UARTD1.dmatx   = NULL;
 8004edc:	6234      	str	r4, [r6, #32]
  uartObjectInit(&UARTD6);
 8004ede:	f7fc f9f7 	bl	80012d0 <uartObjectInit>
  UARTD6.usart   = USART6;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <uart_lld_init+0x54>)
 8004ee4:	617b      	str	r3, [r7, #20]
  uartObjectInit(&UARTD8);
 8004ee6:	4628      	mov	r0, r5
  UARTD6.dmarx   = NULL;
 8004ee8:	61fc      	str	r4, [r7, #28]
  UARTD6.dmatx   = NULL;
 8004eea:	623c      	str	r4, [r7, #32]
  uartObjectInit(&UARTD8);
 8004eec:	f7fc f9f0 	bl	80012d0 <uartObjectInit>
  UARTD8.usart   = UART8;
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <uart_lld_init+0x58>)
  UARTD8.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD8.dmarx   = NULL;
  UARTD8.dmatx   = NULL;
 8004ef2:	622c      	str	r4, [r5, #32]
  UARTD8.dmarx   = NULL;
 8004ef4:	e9c5 8406 	strd	r8, r4, [r5, #24]
  UARTD8.usart   = UART8;
 8004ef8:	616b      	str	r3, [r5, #20]
#endif
}
 8004efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efe:	bf00      	nop
 8004f00:	20000b78 	.word	0x20000b78
 8004f04:	20000ba0 	.word	0x20000ba0
 8004f08:	20000bc8 	.word	0x20000bc8
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	40011400 	.word	0x40011400
 8004f14:	40007c00 	.word	0x40007c00

08004f18 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8004f1a:	7803      	ldrb	r3, [r0, #0]
 8004f1c:	2b01      	cmp	r3, #1
void uart_lld_start(UARTDriver *uartp) {
 8004f1e:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8004f20:	d071      	beq.n	8005006 <uart_lld_start+0xee>
 8004f22:	e9d0 c707 	ldrd	ip, r7, [r0, #28]
 8004f26:	6846      	ldr	r6, [r0, #4]
 8004f28:	f8dc 2000 	ldr.w	r2, [ip]
 8004f2c:	8b35      	ldrh	r5, [r6, #24]
 8004f2e:	6838      	ldr	r0, [r7, #0]
 8004f30:	6961      	ldr	r1, [r4, #20]
  dmaStreamDisable(uartp->dmarx);
 8004f32:	6813      	ldr	r3, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 8004f34:	f04f 0e00 	mov.w	lr, #0
  dmaStreamDisable(uartp->dmarx);
 8004f38:	f023 031f 	bic.w	r3, r3, #31
  uartp->rxstate = UART_RX_IDLE;
 8004f3c:	f884 e002 	strb.w	lr, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8004f40:	f884 e001 	strb.w	lr, [r4, #1]
  dmaStreamDisable(uartp->dmarx);
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	07db      	lsls	r3, r3, #31
 8004f4a:	d4fc      	bmi.n	8004f46 <uart_lld_start+0x2e>
 8004f4c:	f89c e009 	ldrb.w	lr, [ip, #9]
 8004f50:	f8dc c004 	ldr.w	ip, [ip, #4]
 8004f54:	233d      	movs	r3, #61	; 0x3d
 8004f56:	fa03 f30e 	lsl.w	r3, r3, lr
 8004f5a:	f8cc 3000 	str.w	r3, [ip]
  dmaStreamDisable(uartp->dmatx);
 8004f5e:	6803      	ldr	r3, [r0, #0]
 8004f60:	f023 031f 	bic.w	r3, r3, #31
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	6803      	ldr	r3, [r0, #0]
 8004f68:	f013 0301 	ands.w	r3, r3, #1
 8004f6c:	d1fb      	bne.n	8004f66 <uart_lld_start+0x4e>
 8004f6e:	f897 e009 	ldrb.w	lr, [r7, #9]
 8004f72:	f8d7 c004 	ldr.w	ip, [r7, #4]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004f76:	4f66      	ldr	r7, [pc, #408]	; (8005110 <uart_lld_start+0x1f8>)
  dmaStreamDisable(uartp->dmatx);
 8004f78:	203d      	movs	r0, #61	; 0x3d
 8004f7a:	fa00 f00e 	lsl.w	r0, r0, lr
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004f7e:	42b9      	cmp	r1, r7
  dmaStreamDisable(uartp->dmatx);
 8004f80:	f8cc 0000 	str.w	r0, [ip]
  uartp->usart->CR1 = 0;
 8004f84:	60cb      	str	r3, [r1, #12]
  uartp->usart->CR2 = 0;
 8004f86:	610b      	str	r3, [r1, #16]
  uartp->usart->CR3 = 0;
 8004f88:	614b      	str	r3, [r1, #20]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8004f8a:	d02f      	beq.n	8004fec <uart_lld_start+0xd4>
 8004f8c:	4861      	ldr	r0, [pc, #388]	; (8005114 <uart_lld_start+0x1fc>)
 8004f8e:	6973      	ldr	r3, [r6, #20]
 8004f90:	4281      	cmp	r1, r0
 8004f92:	d02c      	beq.n	8004fee <uart_lld_start+0xd6>
    fck = STM32_PCLK1 / uartp->config->speed;
 8004f94:	4860      	ldr	r0, [pc, #384]	; (8005118 <uart_lld_start+0x200>)
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8004f9a:	0428      	lsls	r0, r5, #16
 8004f9c:	d42c      	bmi.n	8004ff8 <uart_lld_start+0xe0>
  if (uartp->config->rxchar_cb == NULL)
 8004f9e:	68f0      	ldr	r0, [r6, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004fa0:	8b77      	ldrh	r7, [r6, #26]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004fa2:	f8d4 c018 	ldr.w	ip, [r4, #24]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004fa6:	8bb6      	ldrh	r6, [r6, #28]
  u->BRR = fck;
 8004fa8:	608b      	str	r3, [r1, #8]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8004faa:	2800      	cmp	r0, #0
  u->SR = 0;
 8004fac:	f04f 0000 	mov.w	r0, #0
  (void)u->SR;  /* SR reset step 1.*/
 8004fb0:	680b      	ldr	r3, [r1, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004fb2:	684b      	ldr	r3, [r1, #4]
  u->SR = 0;
 8004fb4:	6008      	str	r0, [r1, #0]
  u->CR1 = uartp->config->cr1 | cr1;
 8004fb6:	f445 5304 	orr.w	r3, r5, #8448	; 0x2100
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8004fba:	bf14      	ite	ne
 8004fbc:	f44f 7088 	movne.w	r0, #272	; 0x110
 8004fc0:	f44f 7080 	moveq.w	r0, #256	; 0x100
  u->CR1 = uartp->config->cr1 | cr1;
 8004fc4:	f043 030c 	orr.w	r3, r3, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004fc8:	f046 05c1 	orr.w	r5, r6, #193	; 0xc1
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004fcc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004fd0:	2601      	movs	r6, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004fd2:	3424      	adds	r4, #36	; 0x24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004fd4:	ea40 000c 	orr.w	r0, r0, ip
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004fd8:	610f      	str	r7, [r1, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004fda:	614d      	str	r5, [r1, #20]
  u->CR1 = uartp->config->cr1 | cr1;
 8004fdc:	60cb      	str	r3, [r1, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004fde:	60d4      	str	r4, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004fe0:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004fe2:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8004fe4:	6813      	ldr	r3, [r2, #0]
 8004fe6:	4333      	orrs	r3, r6
 8004fe8:	6013      	str	r3, [r2, #0]
  usart_start(uartp);
}
 8004fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fec:	6973      	ldr	r3, [r6, #20]
    fck = STM32_PCLK2 / uartp->config->speed;
 8004fee:	484b      	ldr	r0, [pc, #300]	; (800511c <uart_lld_start+0x204>)
 8004ff0:	fbb0 f3f3 	udiv	r3, r0, r3
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8004ff4:	0428      	lsls	r0, r5, #16
 8004ff6:	d5d2      	bpl.n	8004f9e <uart_lld_start+0x86>
    fck = ((fck & ~7) * 2) | (fck & 7);
 8004ff8:	f023 0007 	bic.w	r0, r3, #7
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8005004:	e7cb      	b.n	8004f9e <uart_lld_start+0x86>
    if (&UARTD1 == uartp) {
 8005006:	4b46      	ldr	r3, [pc, #280]	; (8005120 <uart_lld_start+0x208>)
 8005008:	4298      	cmp	r0, r3
 800500a:	d060      	beq.n	80050ce <uart_lld_start+0x1b6>
    if (&UARTD6 == uartp) {
 800500c:	4b45      	ldr	r3, [pc, #276]	; (8005124 <uart_lld_start+0x20c>)
 800500e:	4298      	cmp	r0, r3
 8005010:	d03c      	beq.n	800508c <uart_lld_start+0x174>
    if (&UARTD8 == uartp) {
 8005012:	4b45      	ldr	r3, [pc, #276]	; (8005128 <uart_lld_start+0x210>)
 8005014:	4298      	cmp	r0, r3
 8005016:	d018      	beq.n	800504a <uart_lld_start+0x132>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8005018:	6866      	ldr	r6, [r4, #4]
 800501a:	8b35      	ldrh	r5, [r6, #24]
 800501c:	f405 53a0 	and.w	r3, r5, #5120	; 0x1400
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005024:	d103      	bne.n	800502e <uart_lld_start+0x116>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8005026:	69a3      	ldr	r3, [r4, #24]
 8005028:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800502c:	61a3      	str	r3, [r4, #24]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 800502e:	e9d4 c707 	ldrd	ip, r7, [r4, #28]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8005032:	6961      	ldr	r1, [r4, #20]
 8005034:	f8dc 2000 	ldr.w	r2, [ip]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8005038:	6838      	ldr	r0, [r7, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 800503a:	1d0b      	adds	r3, r1, #4
    uartp->rxbuf = 0;
 800503c:	f04f 0e00 	mov.w	lr, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8005040:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8005042:	6083      	str	r3, [r0, #8]
    uartp->rxbuf = 0;
 8005044:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8005048:	e773      	b.n	8004f32 <uart_lld_start+0x1a>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 800504a:	4603      	mov	r3, r0
 800504c:	4a37      	ldr	r2, [pc, #220]	; (800512c <uart_lld_start+0x214>)
 800504e:	210c      	movs	r1, #12
 8005050:	2006      	movs	r0, #6
 8005052:	f7fd fb47 	bl	80026e4 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 8005056:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_UART8_RX_DMA_STREAM,
 8005058:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <uart_lld_start+0x218>)
 800505c:	210c      	movs	r1, #12
 800505e:	2000      	movs	r0, #0
 8005060:	f7fd fb40 	bl	80026e4 <dmaStreamAllocI>
      rccEnableUART8(true);
 8005064:	4b33      	ldr	r3, [pc, #204]	; (8005134 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_UART8_TX_DMA_STREAM,
 8005066:	6220      	str	r0, [r4, #32]
      rccEnableUART8(true);
 8005068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
 8005070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005072:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005076:	661a      	str	r2, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 8005078:	210c      	movs	r1, #12
 800507a:	2053      	movs	r0, #83	; 0x53
      rccEnableUART8(true);
 800507c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_UART8_NUMBER, STM32_UART_UART8_IRQ_PRIORITY);
 800507e:	f7fc fc3f 	bl	8001900 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(UART8_RX_DMA_CHANNEL) |
 8005082:	69a3      	ldr	r3, [r4, #24]
 8005084:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8005088:	61a3      	str	r3, [r4, #24]
 800508a:	e7c5      	b.n	8005018 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 800508c:	4603      	mov	r3, r0
 800508e:	4a27      	ldr	r2, [pc, #156]	; (800512c <uart_lld_start+0x214>)
 8005090:	210c      	movs	r1, #12
 8005092:	2009      	movs	r0, #9
 8005094:	f7fd fb26 	bl	80026e4 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 8005098:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART6_RX_DMA_STREAM,
 800509a:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <uart_lld_start+0x218>)
 800509e:	210c      	movs	r1, #12
 80050a0:	200f      	movs	r0, #15
 80050a2:	f7fd fb1f 	bl	80026e4 <dmaStreamAllocI>
      rccEnableUSART6(true);
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART6_TX_DMA_STREAM,
 80050a8:	6220      	str	r0, [r4, #32]
      rccEnableUSART6(true);
 80050aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ac:	f042 0220 	orr.w	r2, r2, #32
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
 80050b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050b4:	f042 0220 	orr.w	r2, r2, #32
 80050b8:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 80050ba:	210c      	movs	r1, #12
 80050bc:	2047      	movs	r0, #71	; 0x47
      rccEnableUSART6(true);
 80050be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 80050c0:	f7fc fc1e 	bl	8001900 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 80050ca:	61a3      	str	r3, [r4, #24]
 80050cc:	e7a4      	b.n	8005018 <uart_lld_start+0x100>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 80050ce:	4603      	mov	r3, r0
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <uart_lld_start+0x214>)
 80050d2:	210c      	movs	r1, #12
 80050d4:	200a      	movs	r0, #10
 80050d6:	f7fd fb05 	bl	80026e4 <dmaStreamAllocI>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 80050da:	4623      	mov	r3, r4
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 80050dc:	61e0      	str	r0, [r4, #28]
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <uart_lld_start+0x218>)
 80050e0:	210c      	movs	r1, #12
 80050e2:	200f      	movs	r0, #15
 80050e4:	f7fd fafe 	bl	80026e4 <dmaStreamAllocI>
      rccEnableUSART1(true);
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <uart_lld_start+0x21c>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 80050ea:	6220      	str	r0, [r4, #32]
      rccEnableUSART1(true);
 80050ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ee:	f042 0210 	orr.w	r2, r2, #16
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
 80050f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050f6:	f042 0210 	orr.w	r2, r2, #16
 80050fa:	665a      	str	r2, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 80050fc:	210c      	movs	r1, #12
 80050fe:	2025      	movs	r0, #37	; 0x25
      rccEnableUSART1(true);
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8005102:	f7fc fbfd 	bl	8001900 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 8005106:	69a3      	ldr	r3, [r4, #24]
 8005108:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800510c:	61a3      	str	r3, [r4, #24]
 800510e:	e783      	b.n	8005018 <uart_lld_start+0x100>
 8005110:	40011000 	.word	0x40011000
 8005114:	40011400 	.word	0x40011400
 8005118:	0280de80 	.word	0x0280de80
 800511c:	0501bd00 	.word	0x0501bd00
 8005120:	20000b78 	.word	0x20000b78
 8005124:	20000ba0 	.word	0x20000ba0
 8005128:	20000bc8 	.word	0x20000bc8
 800512c:	08004a05 	.word	0x08004a05
 8005130:	08004999 	.word	0x08004999
 8005134:	40023800 	.word	0x40023800

08005138 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8005138:	e7fe      	b.n	8005138 <_idle_thread>
 800513a:	bf00      	nop

0800513c <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  static volatile bool started = false;
  if(started)
 800513e:	4c20      	ldr	r4, [pc, #128]	; (80051c0 <chSysInit+0x84>)
 8005140:	7823      	ldrb	r3, [r4, #0]
 8005142:	b103      	cbz	r3, 8005146 <chSysInit+0xa>
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
  }
#endif
  started = true;
}
 8005144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005146:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  _scheduler_init();
 800514a:	f000 f95b 	bl	8005404 <_scheduler_init>
  _vt_init();
 800514e:	f000 f897 	bl	8005280 <_vt_init>
  _tm_init();
 8005152:	f000 fb85 	bl	8005860 <_tm_init>
  _core_init();
 8005156:	f000 fc9d 	bl	8005a94 <_core_init>
  _heap_init();
 800515a:	f000 fce3 	bl	8005b24 <_heap_init>
  _factory_init();
 800515e:	f000 fd3b 	bl	8005bd8 <_factory_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <chSysInit+0x88>)
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <chSysInit+0x8c>)
 8005168:	f000 fa36 	bl	80055d8 <_thread_init>
  currp->state = CH_STATE_CURRENT;
 800516c:	2601      	movs	r6, #1
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <chSysInit+0x90>)
 8005170:	f880 6020 	strb.w	r6, [r0, #32]
 8005174:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <chSysInit+0x94>)
  currp->wabase = NULL;
 8005178:	61c5      	str	r5, [r0, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800517a:	f64f 07ff 	movw	r7, #63743	; 0xf8ff
 800517e:	4039      	ands	r1, r7

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005180:	f107 4760 	add.w	r7, r7, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8005184:	430a      	orrs	r2, r1
 8005186:	f6a7 370f 	subw	r7, r7, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	68fa      	ldr	r2, [r7, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800518e:	4911      	ldr	r1, [pc, #68]	; (80051d4 <chSysInit+0x98>)
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005190:	f8df c048 	ldr.w	ip, [pc, #72]	; 80051dc <chSysInit+0xa0>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005194:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005198:	60fa      	str	r2, [r7, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800519a:	680a      	ldr	r2, [r1, #0]
 800519c:	f8cc 0018 	str.w	r0, [ip, #24]
 80051a0:	4332      	orrs	r2, r6
 80051a2:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a4:	2010      	movs	r0, #16
 80051a6:	2220      	movs	r2, #32
 80051a8:	77d8      	strb	r0, [r3, #31]
 80051aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80051ae:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80051b2:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 80051b4:	4808      	ldr	r0, [pc, #32]	; (80051d8 <chSysInit+0x9c>)
 80051b6:	f000 fa2d 	bl	8005614 <chThdCreate>
  started = true;
 80051ba:	7026      	strb	r6, [r4, #0]
}
 80051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000d50 	.word	0x20000d50
 80051c4:	080064e8 	.word	0x080064e8
 80051c8:	20000d84 	.word	0x20000d84
 80051cc:	e000ed00 	.word	0xe000ed00
 80051d0:	05fa0300 	.word	0x05fa0300
 80051d4:	e0001000 	.word	0xe0001000
 80051d8:	080064c0 	.word	0x080064c0
 80051dc:	20000d54 	.word	0x20000d54

080051e0 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 80051e0:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80051e2:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <chSysHalt+0x8>)
 80051e4:	62d8      	str	r0, [r3, #44]	; 0x2c
 80051e6:	e7fe      	b.n	80051e6 <chSysHalt+0x6>
 80051e8:	20000d54 	.word	0x20000d54

080051ec <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80051ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80051f0:	4d1d      	ldr	r5, [pc, #116]	; (8005268 <chSysTimerHandlerI+0x7c>)
 80051f2:	46aa      	mov	sl, r5
 80051f4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80051f8:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 80051fc:	68a3      	ldr	r3, [r4, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80051fe:	2720      	movs	r7, #32
 8005200:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005204:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8005206:	eba0 0902 	sub.w	r9, r0, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800520a:	4599      	cmp	r9, r3
 800520c:	d31c      	bcc.n	8005248 <chSysTimerHandlerI+0x5c>
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800520e:	2600      	movs	r6, #0
 8005210:	e00a      	b.n	8005228 <chSysTimerHandlerI+0x3c>
 8005212:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8005216:	6920      	ldr	r0, [r4, #16]
 8005218:	47d8      	blx	fp
 800521a:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800521e:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8005220:	68a3      	ldr	r3, [r4, #8]
 8005222:	4599      	cmp	r9, r3
 8005224:	d3ec      	bcc.n	8005200 <chSysTimerHandlerI+0x14>
 8005226:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005228:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 800522a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 800522e:	441a      	add	r2, r3
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005230:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8005232:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8005234:	eba9 0903 	sub.w	r9, r9, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005238:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 800523c:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 800523e:	60e6      	str	r6, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005240:	d1e7      	bne.n	8005212 <chSysTimerHandlerI+0x26>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8005242:	f7fb f9e7 	bl	8000614 <stStopAlarm>
 8005246:	e7e4      	b.n	8005212 <chSysTimerHandlerI+0x26>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005248:	4554      	cmp	r4, sl
 800524a:	d00b      	beq.n	8005264 <chSysTimerHandlerI+0x78>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800524c:	eba3 0309 	sub.w	r3, r3, r9
  ch.vtlist.lasttime += nowdelta;
 8005250:	62a8      	str	r0, [r5, #40]	; 0x28
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8005252:	2b02      	cmp	r3, #2
 8005254:	bf2c      	ite	cs
 8005256:	18c0      	addcs	r0, r0, r3
 8005258:	3002      	addcc	r0, #2
  ch.vtlist.next->delta -= nowdelta;
 800525a:	60a3      	str	r3, [r4, #8]
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 800525c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	f7fb b9de 	b.w	8000620 <stSetAlarm>
 8005264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005268:	20000d54 	.word	0x20000d54

0800526c <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800526c:	4a03      	ldr	r2, [pc, #12]	; (800527c <chSysPolledDelayX+0x10>)
 800526e:	6851      	ldr	r1, [r2, #4]
 8005270:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 8005272:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8005274:	4298      	cmp	r0, r3
 8005276:	d8fb      	bhi.n	8005270 <chSysPolledDelayX+0x4>
  }
}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	e0001000 	.word	0xe0001000

08005280 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <_vt_init+0x18>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 8005282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8005286:	2100      	movs	r1, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005288:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.lasttime = (systime_t)0;
 800528c:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8005290:	e9c3 2207 	strd	r2, r2, [r3, #28]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000d54 	.word	0x20000d54

0800529c <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800529e:	4f1f      	ldr	r7, [pc, #124]	; (800531c <chVTDoSetI+0x80>)
 80052a0:	46bc      	mov	ip, r7
 80052a2:	2902      	cmp	r1, #2
 80052a4:	f85c 5f1c 	ldr.w	r5, [ip, #28]!
  vtp->par = par;
 80052a8:	6103      	str	r3, [r0, #16]
 80052aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052ae:	bf38      	it	cc
 80052b0:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80052b2:	4565      	cmp	r5, ip
                vtfunc_t vtfunc, void *par) {
 80052b4:	4606      	mov	r6, r0
  vtp->func = vtfunc;
 80052b6:	60c2      	str	r2, [r0, #12]
 80052b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80052ba:	d01e      	beq.n	80052fa <chVTDoSetI+0x5e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	68ab      	ldr	r3, [r5, #8]
 80052c0:	1a24      	subs	r4, r4, r0
 80052c2:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80052c4:	d215      	bcs.n	80052f2 <chVTDoSetI+0x56>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d322      	bcc.n	8005310 <chVTDoSetI+0x74>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	d204      	bcs.n	80052d8 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80052ce:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 80052d0:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 80052d2:	68ab      	ldr	r3, [r5, #8]
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d3fa      	bcc.n	80052ce <chVTDoSetI+0x32>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80052d8:	686b      	ldr	r3, [r5, #4]
 80052da:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 80052de:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 80052e0:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 80052e2:	60b4      	str	r4, [r6, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80052e4:	68ab      	ldr	r3, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 80052ea:	1b1c      	subs	r4, r3, r4
 80052ec:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80052ee:	627a      	str	r2, [r7, #36]	; 0x24
}
 80052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 80052f2:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 80052f4:	1ae4      	subs	r4, r4, r3
 80052f6:	68ab      	ldr	r3, [r5, #8]
 80052f8:	e7e7      	b.n	80052ca <chVTDoSetI+0x2e>
      ch.vtlist.prev = vtp;
 80052fa:	e9c7 0007 	strd	r0, r0, [r7, #28]
      ch.vtlist.lasttime = now;
 80052fe:	62bc      	str	r4, [r7, #40]	; 0x28
  stStartAlarm(time);
 8005300:	1860      	adds	r0, r4, r1
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8005302:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 8005306:	60b1      	str	r1, [r6, #8]
}
 8005308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800530c:	f7fb b97a 	b.w	8000604 <stStartAlarm>
  stSetAlarm(time);
 8005310:	4420      	add	r0, r4
 8005312:	f7fb f985 	bl	8000620 <stSetAlarm>
 8005316:	68ab      	ldr	r3, [r5, #8]
 8005318:	e7d7      	b.n	80052ca <chVTDoSetI+0x2e>
 800531a:	bf00      	nop
 800531c:	20000d54 	.word	0x20000d54

08005320 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <chVTDoResetI+0x70>)
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8005326:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8005328:	d010      	beq.n	800534c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800532a:	e9d0 2100 	ldrd	r2, r1, [r0]
 800532e:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8005330:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8005332:	331c      	adds	r3, #28
    vtp->func = NULL;
 8005334:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8005336:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8005338:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 800533a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800533c:	d003      	beq.n	8005346 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 800533e:	6881      	ldr	r1, [r0, #8]
 8005340:	6893      	ldr	r3, [r2, #8]
 8005342:	440b      	add	r3, r1
 8005344:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534a:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 800534c:	4618      	mov	r0, r3
 800534e:	6811      	ldr	r1, [r2, #0]
 8005350:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8005354:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8005356:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8005358:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 800535a:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800535c:	d013      	beq.n	8005386 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 800535e:	6894      	ldr	r4, [r2, #8]
 8005360:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8005362:	6a98      	ldr	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8005364:	4414      	add	r4, r2
 8005366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800536a:	608c      	str	r4, [r1, #8]
 800536c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800536e:	1a12      	subs	r2, r2, r0
  if (nowdelta >= ch.vtlist.next->delta) {
 8005370:	4294      	cmp	r4, r2
 8005372:	d9e8      	bls.n	8005346 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8005374:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8005376:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8005378:	bf98      	it	ls
 800537a:	1c94      	addls	r4, r2, #2
 800537c:	4420      	add	r0, r4
}
 800537e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005382:	f7fb b94d 	b.w	8000620 <stSetAlarm>
 8005386:	f85d 4b04 	ldr.w	r4, [sp], #4
  stStopAlarm();
 800538a:	f7fb b943 	b.w	8000614 <stStopAlarm>
 800538e:	bf00      	nop
 8005390:	20000d54 	.word	0x20000d54

08005394 <wakeup>:
 8005394:	2320      	movs	r3, #32
 8005396:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 800539a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800539e:	2b07      	cmp	r3, #7
 80053a0:	d80e      	bhi.n	80053c0 <wakeup+0x2c>
 80053a2:	e8df f003 	tbb	[pc, r3]
 80053a6:	0d29      	.short	0x0d29
 80053a8:	0408250d 	.word	0x0408250d
 80053ac:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80053ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80053b0:	6893      	ldr	r3, [r2, #8]
 80053b2:	3301      	adds	r3, #1
 80053b4:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80053b6:	e9d0 2300 	ldrd	r2, r3, [r0]
 80053ba:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80053bc:	6802      	ldr	r2, [r0, #0]
 80053be:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80053c0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80053c2:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80053c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 80053c8:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80053ca:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80053cc:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80053ce:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80053d2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	428a      	cmp	r2, r1
 80053d8:	d2fb      	bcs.n	80053d2 <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	2100      	movs	r1, #0
 80053de:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80053e2:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80053e4:	6058      	str	r0, [r3, #4]
 80053e6:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80053ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ee:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80053f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
    break;
 80053f6:	e7e3      	b.n	80053c0 <wakeup+0x2c>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	4770      	bx	lr
 8005400:	20000d54 	.word	0x20000d54

08005404 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <_scheduler_init+0x10>)
  ch.rlist.prio = NOPRIO;
 8005406:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8005408:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800540c:	e9c3 3304 	strd	r3, r3, [r3, #16]
  ch.rlist.prio = NOPRIO;
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	4770      	bx	lr
 8005414:	20000d54 	.word	0x20000d54

08005418 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8005418:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 800541a:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 800541e:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8005420:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8005424:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4282      	cmp	r2, r0
 800542a:	d2fb      	bcs.n	8005424 <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 800542c:	685a      	ldr	r2, [r3, #4]
}
 800542e:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8005430:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8005434:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8005436:	6059      	str	r1, [r3, #4]
}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000d54 	.word	0x20000d54

08005440 <chSchGoSleepS>:
  thread_t *otp = currp;
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <chSchGoSleepS+0x24>)
 8005442:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8005444:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8005446:	b410      	push	{r4}
  otp->state = newstate;
 8005448:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800544c:	6810      	ldr	r0, [r2, #0]
 800544e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8005450:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005452:	6043      	str	r3, [r0, #4]
 8005454:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8005458:	4610      	mov	r0, r2
}
 800545a:	f85d 4b04 	ldr.w	r4, [sp], #4
  currp = queue_fifo_remove(&ch.rlist.queue);
 800545e:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8005460:	f7fa bf56 	b.w	8000310 <_port_switch>
 8005464:	20000d54 	.word	0x20000d54

08005468 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8005468:	b530      	push	{r4, r5, lr}
 800546a:	4c19      	ldr	r4, [pc, #100]	; (80054d0 <chSchGoSleepTimeoutS+0x68>)

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 800546c:	1c4a      	adds	r2, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 800546e:	b087      	sub	sp, #28
 8005470:	4605      	mov	r5, r0
 8005472:	69a3      	ldr	r3, [r4, #24]
  if (TIME_INFINITE != timeout) {
 8005474:	d01a      	beq.n	80054ac <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8005476:	a801      	add	r0, sp, #4
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <chSchGoSleepTimeoutS+0x6c>)
 800547a:	f7ff ff0f 	bl	800529c <chVTDoSetI>
  thread_t *otp = currp;
 800547e:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8005480:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 8005482:	f881 5020 	strb.w	r5, [r1, #32]
  tqp->next             = tp->queue.next;
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 800548a:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800548c:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 800548e:	4618      	mov	r0, r3
  currp->state = CH_STATE_CURRENT;
 8005490:	f883 5020 	strb.w	r5, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005494:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 8005496:	f7fa ff3b 	bl	8000310 <_port_switch>
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt)) {
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	b113      	cbz	r3, 80054a4 <chSchGoSleepTimeoutS+0x3c>
      chVTDoResetI(&vt);
 800549e:	a801      	add	r0, sp, #4
 80054a0:	f7ff ff3e 	bl	8005320 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 80054a4:	69a3      	ldr	r3, [r4, #24]
}
 80054a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054a8:	b007      	add	sp, #28
 80054aa:	bd30      	pop	{r4, r5, pc}
  thread_t *tp = tqp->next;
 80054ac:	6822      	ldr	r2, [r4, #0]
  otp->state = newstate;
 80054ae:	f883 0020 	strb.w	r0, [r3, #32]
  tqp->next             = tp->queue.next;
 80054b2:	6810      	ldr	r0, [r2, #0]
 80054b4:	6020      	str	r0, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80054b6:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80054b8:	6044      	str	r4, [r0, #4]
  chSysSwitch(currp, otp);
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
  currp->state = CH_STATE_CURRENT;
 80054be:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80054c2:	61a2      	str	r2, [r4, #24]
  chSysSwitch(currp, otp);
 80054c4:	f7fa ff24 	bl	8000310 <_port_switch>
  return currp->u.rdymsg;
 80054c8:	69a3      	ldr	r3, [r4, #24]
}
 80054ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054cc:	b007      	add	sp, #28
 80054ce:	bd30      	pop	{r4, r5, pc}
 80054d0:	20000d54 	.word	0x20000d54
 80054d4:	08005395 	.word	0x08005395

080054d8 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80054da:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 80054dc:	699e      	ldr	r6, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80054de:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80054e0:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 80054e2:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 80054e4:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80054e6:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 80054e8:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 80054ec:	d80c      	bhi.n	8005508 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 80054ee:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80054f2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4295      	cmp	r5, r2
 80054f8:	d9fb      	bls.n	80054f2 <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005500:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005502:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8005504:	bc70      	pop	{r4, r5, r6}
 8005506:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8005508:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800550c:	461a      	mov	r2, r3
    cp = cp->queue.next;
 800550e:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8005510:	6891      	ldr	r1, [r2, #8]
 8005512:	4288      	cmp	r0, r1
 8005514:	d9fb      	bls.n	800550e <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8005516:	6851      	ldr	r1, [r2, #4]
 8005518:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 800551a:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 800551c:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 800551e:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8005520:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8005522:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8005526:	4631      	mov	r1, r6
 8005528:	4620      	mov	r0, r4
    currp = ntp;
 800552a:	619c      	str	r4, [r3, #24]
}
 800552c:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800552e:	f7fa beef 	b.w	8000310 <_port_switch>
 8005532:	bf00      	nop
 8005534:	20000d54 	.word	0x20000d54

08005538 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <chSchRescheduleS+0x44>)
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 800553a:	b430      	push	{r4, r5}
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005540:	6882      	ldr	r2, [r0, #8]
 8005542:	68a1      	ldr	r1, [r4, #8]
 8005544:	428a      	cmp	r2, r1
 8005546:	d801      	bhi.n	800554c <chSchRescheduleS+0x14>
    chSchDoRescheduleAhead();
  }
}
 8005548:	bc30      	pop	{r4, r5}
 800554a:	4770      	bx	lr
  tqp->next             = tp->queue.next;
 800554c:	6802      	ldr	r2, [r0, #0]
 800554e:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005550:	6053      	str	r3, [r2, #4]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8005552:	2501      	movs	r5, #1
  tp->state = CH_STATE_READY;
 8005554:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 8005556:	f880 5020 	strb.w	r5, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800555a:	6198      	str	r0, [r3, #24]
  tp->state = CH_STATE_READY;
 800555c:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8005560:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4291      	cmp	r1, r2
 8005566:	d3fb      	bcc.n	8005560 <chSchRescheduleS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8005568:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800556a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800556c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005570:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005572:	605c      	str	r4, [r3, #4]
}
 8005574:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8005576:	f7fa becb 	b.w	8000310 <_port_switch>
 800557a:	bf00      	nop
 800557c:	20000d54 	.word	0x20000d54

08005580 <chSchIsPreemptionRequired>:
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <chSchIsPreemptionRequired+0x14>)
 8005582:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->prio;
 8005584:	699b      	ldr	r3, [r3, #24]
  return p1 > p2;
 8005586:	6890      	ldr	r0, [r2, #8]
 8005588:	689b      	ldr	r3, [r3, #8]
}
 800558a:	4298      	cmp	r0, r3
 800558c:	bf94      	ite	ls
 800558e:	2000      	movls	r0, #0
 8005590:	2001      	movhi	r0, #1
 8005592:	4770      	bx	lr
 8005594:	20000d54 	.word	0x20000d54

08005598 <chSchDoReschedule>:
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <chSchDoReschedule+0x3c>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	6802      	ldr	r2, [r0, #0]
 800559e:	b410      	push	{r4}
 80055a0:	2101      	movs	r1, #1
 80055a2:	699c      	ldr	r4, [r3, #24]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	6053      	str	r3, [r2, #4]
 80055a8:	f880 1020 	strb.w	r1, [r0, #32]
 80055ac:	2200      	movs	r2, #0
 80055ae:	68a1      	ldr	r1, [r4, #8]
 80055b0:	f884 2020 	strb.w	r2, [r4, #32]
 80055b4:	6198      	str	r0, [r3, #24]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d3fb      	bcc.n	80055b6 <chSchDoReschedule+0x1e>
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4621      	mov	r1, r4
 80055c2:	e9c4 3200 	strd	r3, r2, [r4]
 80055c6:	6014      	str	r4, [r2, #0]
 80055c8:	605c      	str	r4, [r3, #4]
 80055ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ce:	f7fa be9f 	b.w	8000310 <_port_switch>
 80055d2:	bf00      	nop
 80055d4:	20000d54 	.word	0x20000d54

080055d8 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 80055d8:	b470      	push	{r4, r5, r6}
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80055da:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <_thread_init+0x38>)
  tp->realprio  = prio;
 80055dc:	63c2      	str	r2, [r0, #60]	; 0x3c
  REG_INSERT(tp);
 80055de:	6965      	ldr	r5, [r4, #20]
  tp->prio      = prio;
 80055e0:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 80055e2:	2602      	movs	r6, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80055e4:	2201      	movs	r2, #1
  tp->name      = name;
 80055e6:	6181      	str	r1, [r0, #24]
  tp->state     = CH_STATE_WTSTART;
 80055e8:	8406      	strh	r6, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80055ea:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80055ee:	f100 0628 	add.w	r6, r0, #40	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80055f2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  tp->mtxlist   = NULL;
 80055f6:	2100      	movs	r1, #0
  REG_INSERT(tp);
 80055f8:	6145      	str	r5, [r0, #20]
 80055fa:	6104      	str	r4, [r0, #16]
  tp->epending  = (eventmask_t)0;
 80055fc:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
  REG_INSERT(tp);
 8005600:	6128      	str	r0, [r5, #16]
 8005602:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8005604:	e9c0 620a 	strd	r6, r2, [r0, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8005608:	6302      	str	r2, [r0, #48]	; 0x30
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 800560a:	bc70      	pop	{r4, r5, r6}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000d54 	.word	0x20000d54

08005614 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	2320      	movs	r3, #32
 8005618:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800561c:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 800561e:	6844      	ldr	r4, [r0, #4]
  return _thread_init(tp, tdp->name, tdp->prio);
 8005620:	6806      	ldr	r6, [r0, #0]
  REG_INSERT(tp);
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <chThdCreate+0x7c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005624:	e9d0 5104 	ldrd	r5, r1, [r0, #16]
  return _thread_init(tp, tdp->name, tdp->prio);
 8005628:	68c0      	ldr	r0, [r0, #12]
  tp->wabase = tdp->wbase;
 800562a:	f843 4c2c 	str.w	r4, [r3, #-44]
  tp->state     = CH_STATE_WTSTART;
 800562e:	2402      	movs	r4, #2
 8005630:	f803 4c28 	strb.w	r4, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8005634:	2401      	movs	r4, #1
 8005636:	f803 4c26 	strb.w	r4, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800563a:	2400      	movs	r4, #0
 800563c:	f803 4c27 	strb.w	r4, [r3, #-39]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005640:	e943 511b 	strd	r5, r1, [r3, #-108]	; 0x6c
  REG_INSERT(tp);
 8005644:	6951      	ldr	r1, [r2, #20]
  tp->prio      = prio;
 8005646:	f843 0c40 	str.w	r0, [r3, #-64]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800564a:	f1a3 05ac 	sub.w	r5, r3, #172	; 0xac
  tp->realprio  = prio;
 800564e:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005652:	f843 5c3c 	str.w	r5, [r3, #-60]
 8005656:	480f      	ldr	r0, [pc, #60]	; (8005694 <chThdCreate+0x80>)
 8005658:	f843 0c4c 	str.w	r0, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800565c:	f1a3 0548 	sub.w	r5, r3, #72	; 0x48
  REG_INSERT(tp);
 8005660:	e943 210e 	strd	r2, r1, [r3, #-56]	; 0x38
  tp->name      = name;
 8005664:	f843 6c30 	str.w	r6, [r3, #-48]
  list_init(&tp->waiting);
 8005668:	f1a3 0020 	sub.w	r0, r3, #32
  tp->epending  = (eventmask_t)0;
 800566c:	e943 4405 	strd	r4, r4, [r3, #-20]
  REG_INSERT(tp);
 8005670:	610d      	str	r5, [r1, #16]
  queue_init(&tp->msgqueue);
 8005672:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 8005676:	6155      	str	r5, [r2, #20]
  tlp->next = (thread_t *)tlp;
 8005678:	f843 0c20 	str.w	r0, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 800567c:	e943 1107 	strd	r1, r1, [r3, #-28]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8005680:	4628      	mov	r0, r5
 8005682:	4621      	mov	r1, r4
 8005684:	f7ff ff28 	bl	80054d8 <chSchWakeupS>
 8005688:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
 800568c:	4628      	mov	r0, r5
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	20000d54 	.word	0x20000d54
 8005694:	08000329 	.word	0x08000329

08005698 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	9d06      	ldr	r5, [sp, #24]
 800569c:	2420      	movs	r4, #32
 800569e:	f384 8811 	msr	BASEPRI, r4
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80056a2:	3948      	subs	r1, #72	; 0x48
 80056a4:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 80056a6:	4e16      	ldr	r6, [pc, #88]	; (8005700 <chThdCreateStatic+0x68>)
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80056a8:	61e0      	str	r0, [r4, #28]
  REG_INSERT(tp);
 80056aa:	6971      	ldr	r1, [r6, #20]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80056ac:	f844 3c24 	str.w	r3, [r4, #-36]
 80056b0:	f844 5c20 	str.w	r5, [r4, #-32]
 80056b4:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
  tp->state     = CH_STATE_WTSTART;
 80056b8:	2502      	movs	r5, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80056ba:	2301      	movs	r3, #1
  tp->prio      = prio;
 80056bc:	60a2      	str	r2, [r4, #8]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80056be:	60e0      	str	r0, [r4, #12]
  tp->realprio  = prio;
 80056c0:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->state     = CH_STATE_WTSTART;
 80056c2:	8425      	strh	r5, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80056c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  list_init(&tp->waiting);
 80056c8:	f104 0228 	add.w	r2, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 80056cc:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->mtxlist   = NULL;
 80056d0:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80056d2:	4f0c      	ldr	r7, [pc, #48]	; (8005704 <chThdCreateStatic+0x6c>)
  tp->name      = name;
 80056d4:	480c      	ldr	r0, [pc, #48]	; (8005708 <chThdCreateStatic+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80056d6:	f844 7c04 	str.w	r7, [r4, #-4]
  REG_INSERT(tp);
 80056da:	e9c4 6104 	strd	r6, r1, [r4, #16]
  tp->name      = name;
 80056de:	61a0      	str	r0, [r4, #24]
  tp->epending  = (eventmask_t)0;
 80056e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80056e4:	4620      	mov	r0, r4
  REG_INSERT(tp);
 80056e6:	610c      	str	r4, [r1, #16]
  tqp->next = (thread_t *)tqp;
 80056e8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80056ec:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 80056ee:	4629      	mov	r1, r5
  REG_INSERT(tp);
 80056f0:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 80056f2:	f7ff fef1 	bl	80054d8 <chSchWakeupS>
 80056f6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80056fa:	4620      	mov	r0, r4
 80056fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000d54 	.word	0x20000d54
 8005704:	08000329 	.word	0x08000329
 8005708:	080064e0 	.word	0x080064e0

0800570c <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	2220      	movs	r2, #32
 8005710:	4603      	mov	r3, r0
 8005712:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <chThdExit+0x4c>)
 8005718:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800571a:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 800571c:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800571e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005722:	42a8      	cmp	r0, r5
 8005724:	d006      	beq.n	8005734 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8005726:	6803      	ldr	r3, [r0, #0]
 8005728:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800572a:	f7ff fe75 	bl	8005418 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800572e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8005730:	42a8      	cmp	r0, r5
 8005732:	d1f8      	bne.n	8005726 <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8005734:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005738:	b943      	cbnz	r3, 800574c <chThdExit+0x40>
 800573a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800573e:	079b      	lsls	r3, r3, #30
 8005740:	d104      	bne.n	800574c <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8005742:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005746:	611a      	str	r2, [r3, #16]
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800574c:	200f      	movs	r0, #15
}
 800574e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8005752:	f7ff be75 	b.w	8005440 <chSchGoSleepS>
 8005756:	bf00      	nop
 8005758:	20000d54 	.word	0x20000d54

0800575c <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 800575c:	b508      	push	{r3, lr}
 800575e:	4601      	mov	r1, r0
 8005760:	2320      	movs	r3, #32
 8005762:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005766:	2008      	movs	r0, #8
 8005768:	f7ff fe7e 	bl	8005468 <chSchGoSleepTimeoutS>
 800576c:	2300      	movs	r3, #0
 800576e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8005772:	bd08      	pop	{r3, pc}

08005774 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8005776:	4602      	mov	r2, r0
 8005778:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 800577a:	b121      	cbz	r1, 8005786 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 800577c:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800577e:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 8005780:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005782:	f7ff be71 	b.w	8005468 <chSchGoSleepTimeoutS>
}
 8005786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800578a:	4770      	bx	lr
 800578c:	20000d54 	.word	0x20000d54

08005790 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8005790:	6803      	ldr	r3, [r0, #0]
 8005792:	b12b      	cbz	r3, 80057a0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8005794:	2200      	movs	r2, #0
 8005796:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8005798:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800579a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800579c:	f7ff be3c 	b.w	8005418 <chSchReadyI>
  }
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80057a4:	b169      	cbz	r1, 80057c2 <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80057a8:	b410      	push	{r4}
 80057aa:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 80057ac:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 80057ae:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80057b0:	2004      	movs	r0, #4
 80057b2:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 80057b6:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80057b8:	6053      	str	r3, [r2, #4]
}
 80057ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80057be:	f7ff be53 	b.w	8005468 <chSchGoSleepTimeoutS>
}
 80057c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c6:	4770      	bx	lr
 80057c8:	20000d54 	.word	0x20000d54

080057cc <chThdDequeueNextI>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 80057cc:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80057ce:	4290      	cmp	r0, r2
 80057d0:	d00a      	beq.n	80057e8 <chThdDequeueNextI+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80057d2:	b410      	push	{r4}
  tqp->next             = tp->queue.next;
 80057d4:	6814      	ldr	r4, [r2, #0]
 80057d6:	6004      	str	r4, [r0, #0]
 80057d8:	4603      	mov	r3, r0
  tqp->next->queue.prev = (thread_t *)tqp;
 80057da:	6063      	str	r3, [r4, #4]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
 80057dc:	4610      	mov	r0, r2
  tp->u.rdymsg = msg;
 80057de:	6251      	str	r1, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80057e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  (void) chSchReadyI(tp);
 80057e4:	f7ff be18 	b.w	8005418 <chSchReadyI>
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80057ec:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 80057ee:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 80057f0:	4298      	cmp	r0, r3
 80057f2:	d00b      	beq.n	800580c <chThdDequeueAllI+0x20>
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	6022      	str	r2, [r4, #0]
 80057fc:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80057fe:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8005800:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8005802:	f7ff fe09 	bl	8005418 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	429c      	cmp	r4, r3
 800580a:	d1f5      	bne.n	80057f8 <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop

08005810 <chTMStartMeasurementX>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <chTMStartMeasurementX+0x8>)
 8005812:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005814:	6083      	str	r3, [r0, #8]
}
 8005816:	4770      	bx	lr
 8005818:	e0001000 	.word	0xe0001000

0800581c <chTMStopMeasurementX>:
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800581e:	4a0f      	ldr	r2, [pc, #60]	; (800585c <chTMStopMeasurementX+0x40>)
 8005820:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8005822:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005824:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8005826:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005828:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800582a:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 800582c:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 800582e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8005832:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8005834:	18e6      	adds	r6, r4, r3
 8005836:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 800583a:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800583c:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800583e:	bf88      	it	hi
 8005840:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8005842:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8005844:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8005846:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800584a:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 800584e:	bf38      	it	cc
 8005850:	6003      	strcc	r3, [r0, #0]
}
 8005852:	bcf0      	pop	{r4, r5, r6, r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	e0001000 	.word	0xe0001000
 800585c:	20000d54 	.word	0x20000d54

08005860 <_tm_init>:
void _tm_init(void) {
 8005860:	b510      	push	{r4, lr}
  ch.tm.offset = (rtcnt_t)0;
 8005862:	4c0c      	ldr	r4, [pc, #48]	; (8005894 <_tm_init+0x34>)
void _tm_init(void) {
 8005864:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 8005866:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 8005868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
 800586c:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 800586e:	4668      	mov	r0, sp
  ch.tm.offset = (rtcnt_t)0;
 8005870:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->last       = (rtcnt_t)0;
 8005872:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8005876:	9303      	str	r3, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 8005878:	2300      	movs	r3, #0
 800587a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 800587e:	9100      	str	r1, [sp, #0]
  chTMStartMeasurementX(&tm);
 8005880:	f7ff ffc6 	bl	8005810 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8005884:	4668      	mov	r0, sp
 8005886:	f7ff ffc9 	bl	800581c <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800588e:	b006      	add	sp, #24
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	20000d54 	.word	0x20000d54

08005898 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8005898:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 800589a:	e9c0 0000 	strd	r0, r0, [r0]
 800589e:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	2320      	movs	r3, #32
 80058a8:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80058ac:	4a39      	ldr	r2, [pc, #228]	; (8005994 <chMtxLock+0xf0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80058ae:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 80058b0:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d042      	beq.n	800593c <chMtxLock+0x98>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80058b6:	68a9      	ldr	r1, [r5, #8]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	4291      	cmp	r1, r2
 80058bc:	4604      	mov	r4, r0
 80058be:	d907      	bls.n	80058d0 <chMtxLock+0x2c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80058c0:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 80058c4:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 80058c6:	2a06      	cmp	r2, #6
 80058c8:	d040      	beq.n	800594c <chMtxLock+0xa8>
 80058ca:	2a07      	cmp	r2, #7
 80058cc:	d017      	beq.n	80058fe <chMtxLock+0x5a>
 80058ce:	b352      	cbz	r2, 8005926 <chMtxLock+0x82>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 80058d0:	4626      	mov	r6, r4
 80058d2:	4623      	mov	r3, r4
 80058d4:	e003      	b.n	80058de <chMtxLock+0x3a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	68aa      	ldr	r2, [r5, #8]
 80058da:	4291      	cmp	r1, r2
 80058dc:	d32c      	bcc.n	8005938 <chMtxLock+0x94>
    cp = cp->queue.next;
 80058de:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d1f8      	bne.n	80058d6 <chMtxLock+0x32>
  tp->queue.prev             = cp->queue.prev;
 80058e4:	6873      	ldr	r3, [r6, #4]
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80058e6:	2006      	movs	r0, #6
 80058e8:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 80058ec:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 80058ee:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 80058f0:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80058f2:	f7ff fda5 	bl	8005440 <chSchGoSleepS>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f383 8811 	msr	BASEPRI, r3
}
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80058fe:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005902:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8005904:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	6042      	str	r2, [r0, #4]
 800590a:	4632      	mov	r2, r6
 800590c:	e002      	b.n	8005914 <chMtxLock+0x70>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800590e:	6890      	ldr	r0, [r2, #8]
 8005910:	4288      	cmp	r0, r1
 8005912:	d335      	bcc.n	8005980 <chMtxLock+0xdc>
    cp = cp->queue.next;
 8005914:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005916:	4296      	cmp	r6, r2
 8005918:	d1f9      	bne.n	800590e <chMtxLock+0x6a>
  tp->queue.prev             = cp->queue.prev;
 800591a:	6872      	ldr	r2, [r6, #4]
 800591c:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8005920:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8005922:	6073      	str	r3, [r6, #4]
 8005924:	e7d4      	b.n	80058d0 <chMtxLock+0x2c>
  tp->queue.prev->queue.next = tp->queue.next;
 8005926:	e9d3 1200 	ldrd	r1, r2, [r3]
 800592a:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800592c:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 800592e:	4618      	mov	r0, r3
 8005930:	604a      	str	r2, [r1, #4]
 8005932:	f7ff fd71 	bl	8005418 <chSchReadyI>
 8005936:	e7cb      	b.n	80058d0 <chMtxLock+0x2c>
    cp = cp->queue.next;
 8005938:	461e      	mov	r6, r3
 800593a:	e7d3      	b.n	80058e4 <chMtxLock+0x40>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 800593c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800593e:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8005942:	63a8      	str	r0, [r5, #56]	; 0x38
 8005944:	2300      	movs	r3, #0
 8005946:	f383 8811 	msr	BASEPRI, r3
}
 800594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 800594c:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005950:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8005952:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	4637      	mov	r7, r6
 8005958:	6042      	str	r2, [r0, #4]
 800595a:	4632      	mov	r2, r6
 800595c:	e002      	b.n	8005964 <chMtxLock+0xc0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800595e:	6890      	ldr	r0, [r2, #8]
 8005960:	4288      	cmp	r0, r1
 8005962:	d314      	bcc.n	800598e <chMtxLock+0xea>
    cp = cp->queue.next;
 8005964:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005966:	4296      	cmp	r6, r2
 8005968:	d1f9      	bne.n	800595e <chMtxLock+0xba>
  tp->queue.prev             = cp->queue.prev;
 800596a:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 800596c:	68a9      	ldr	r1, [r5, #8]
 800596e:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8005972:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8005974:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 8005976:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	4291      	cmp	r1, r2
 800597c:	d8a0      	bhi.n	80058c0 <chMtxLock+0x1c>
 800597e:	e7a7      	b.n	80058d0 <chMtxLock+0x2c>
    cp = cp->queue.next;
 8005980:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 8005982:	6872      	ldr	r2, [r6, #4]
 8005984:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8005988:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 800598a:	6073      	str	r3, [r6, #4]
 800598c:	e7a0      	b.n	80058d0 <chMtxLock+0x2c>
    cp = cp->queue.next;
 800598e:	4617      	mov	r7, r2
 8005990:	e7eb      	b.n	800596a <chMtxLock+0xc6>
 8005992:	bf00      	nop
 8005994:	20000d54 	.word	0x20000d54

08005998 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 800599a:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800599c:	699d      	ldr	r5, [r3, #24]
 800599e:	2320      	movs	r3, #32
 80059a0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80059a4:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80059a6:	68c3      	ldr	r3, [r0, #12]
 80059a8:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80059aa:	4284      	cmp	r4, r0
 80059ac:	d01d      	beq.n	80059ea <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80059ae:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80059b0:	b14b      	cbz	r3, 80059c6 <chMtxUnlock+0x2e>
 80059b2:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <chMtxUnlock+0x28>
 80059b8:	6892      	ldr	r2, [r2, #8]
 80059ba:	4291      	cmp	r1, r2
 80059bc:	bf38      	it	cc
 80059be:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80059c0:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f5      	bne.n	80059b2 <chMtxUnlock+0x1a>
 80059c6:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 80059c8:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80059ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 80059cc:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80059ce:	4620      	mov	r0, r4
 80059d0:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80059d2:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 80059d4:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 80059d8:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 80059da:	f7ff fd1d 	bl	8005418 <chSchReadyI>
      chSchRescheduleS();
 80059de:	f7ff fdab 	bl	8005538 <chSchRescheduleS>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	2300      	movs	r3, #0
 80059f0:	f383 8811 	msr	BASEPRI, r3
}
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	bf00      	nop
 80059f8:	20000d54 	.word	0x20000d54

080059fc <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80059fe:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d021      	beq.n	8005a48 <chEvtBroadcastFlagsI+0x4c>
 8005a04:	460d      	mov	r5, r1
 8005a06:	4607      	mov	r7, r0
 8005a08:	b341      	cbz	r1, 8005a5c <chEvtBroadcastFlagsI+0x60>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	e004      	b.n	8005a18 <chEvtBroadcastFlagsI+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005a0e:	2a0b      	cmp	r2, #11
 8005a10:	d037      	beq.n	8005a82 <chEvtBroadcastFlagsI+0x86>
    elp = elp->next;
 8005a12:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005a14:	42a7      	cmp	r7, r4
 8005a16:	d017      	beq.n	8005a48 <chEvtBroadcastFlagsI+0x4c>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8005a18:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    elp->flags |= flags;
 8005a1c:	432b      	orrs	r3, r5
    if ((flags == (eventflags_t)0) ||
 8005a1e:	4215      	tst	r5, r2
    elp->flags |= flags;
 8005a20:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8005a22:	d0f6      	beq.n	8005a12 <chEvtBroadcastFlagsI+0x16>
  tp->epending |= events;
 8005a24:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8005a28:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a2a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8005a2e:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a30:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8005a32:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a34:	d1eb      	bne.n	8005a0e <chEvtBroadcastFlagsI+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005a36:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a38:	4213      	tst	r3, r2
 8005a3a:	d0ea      	beq.n	8005a12 <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 8005a3c:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005a3e:	f7ff fceb 	bl	8005418 <chSchReadyI>
    elp = elp->next;
 8005a42:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005a44:	42a7      	cmp	r7, r4
 8005a46:	d1e7      	bne.n	8005a18 <chEvtBroadcastFlagsI+0x1c>
}
 8005a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005a4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a4c:	4213      	tst	r3, r2
 8005a4e:	d002      	beq.n	8005a56 <chEvtBroadcastFlagsI+0x5a>
    tp->u.rdymsg = MSG_OK;
 8005a50:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005a52:	f7ff fce1 	bl	8005418 <chSchReadyI>
    elp = elp->next;
 8005a56:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005a58:	42a7      	cmp	r7, r4
 8005a5a:	d0f5      	beq.n	8005a48 <chEvtBroadcastFlagsI+0x4c>
  tp->epending |= events;
 8005a5c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8005a60:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a62:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8005a66:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a68:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8005a6a:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005a6c:	d0ed      	beq.n	8005a4a <chEvtBroadcastFlagsI+0x4e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005a6e:	2a0b      	cmp	r2, #11
 8005a70:	d1f1      	bne.n	8005a56 <chEvtBroadcastFlagsI+0x5a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8005a72:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8005a74:	ea32 0303 	bics.w	r3, r2, r3
 8005a78:	d0ea      	beq.n	8005a50 <chEvtBroadcastFlagsI+0x54>
    elp = elp->next;
 8005a7a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005a7c:	42a7      	cmp	r7, r4
 8005a7e:	d1ed      	bne.n	8005a5c <chEvtBroadcastFlagsI+0x60>
 8005a80:	e7e2      	b.n	8005a48 <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8005a82:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8005a84:	ea32 0303 	bics.w	r3, r2, r3
 8005a88:	d1c3      	bne.n	8005a12 <chEvtBroadcastFlagsI+0x16>
    tp->u.rdymsg = MSG_OK;
 8005a8a:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005a8c:	f7ff fcc4 	bl	8005418 <chSchReadyI>
 8005a90:	e7d7      	b.n	8005a42 <chEvtBroadcastFlagsI+0x46>
 8005a92:	bf00      	nop

08005a94 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8005a94:	4b02      	ldr	r3, [pc, #8]	; (8005aa0 <_core_init+0xc>)
 8005a96:	4903      	ldr	r1, [pc, #12]	; (8005aa4 <_core_init+0x10>)
  ch_memcore.endmem  = __heap_end__;
 8005a98:	4a03      	ldr	r2, [pc, #12]	; (8005aa8 <_core_init+0x14>)
 8005a9a:	e9c3 1200 	strd	r1, r2, [r3]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8005a9e:	4770      	bx	lr
 8005aa0:	20000dcc 	.word	0x20000dcc
 8005aa4:	20001888 	.word	0x20001888
 8005aa8:	20030000 	.word	0x20030000

08005aac <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8005aac:	b470      	push	{r4, r5, r6}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005aae:	4d0b      	ldr	r5, [pc, #44]	; (8005adc <chCoreAllocAlignedWithOffsetI+0x30>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005ab0:	e9d5 6400 	ldrd	r6, r4, [r5]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005ab4:	4432      	add	r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8005ab6:	3801      	subs	r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005ab8:	3a01      	subs	r2, #1
  size = MEM_ALIGN_NEXT(size, align);
 8005aba:	1843      	adds	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005abc:	1850      	adds	r0, r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8005abe:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005ac0:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8005ac2:	4019      	ands	r1, r3
  next = p + size;
 8005ac4:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005ac6:	428c      	cmp	r4, r1
 8005ac8:	d304      	bcc.n	8005ad4 <chCoreAllocAlignedWithOffsetI+0x28>
 8005aca:	428e      	cmp	r6, r1
 8005acc:	d802      	bhi.n	8005ad4 <chCoreAllocAlignedWithOffsetI+0x28>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8005ace:	6029      	str	r1, [r5, #0]

  return p;
}
 8005ad0:	bc70      	pop	{r4, r5, r6}
 8005ad2:	4770      	bx	lr
    return NULL;
 8005ad4:	2000      	movs	r0, #0
}
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000dcc 	.word	0x20000dcc

08005ae0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8005ae0:	b4f0      	push	{r4, r5, r6, r7}
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005ae8:	4d0d      	ldr	r5, [pc, #52]	; (8005b20 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005aea:	e9d5 7400 	ldrd	r7, r4, [r5]
 8005aee:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005af0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 8005af2:	1983      	adds	r3, r0, r6
 8005af4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005af6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 8005af8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005afa:	4008      	ands	r0, r1
  next = p + size;
 8005afc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	d807      	bhi.n	8005b12 <chCoreAllocAlignedWithOffset+0x32>
 8005b02:	429f      	cmp	r7, r3
 8005b04:	d805      	bhi.n	8005b12 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8005b06:	602b      	str	r3, [r5, #0]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8005b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8005b10:	4770      	bx	lr
    return NULL;
 8005b12:	2000      	movs	r0, #0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f383 8811 	msr	BASEPRI, r3
}
 8005b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000dcc 	.word	0x20000dcc

08005b24 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <_heap_init+0x14>)
 8005b26:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <_heap_init+0x18>)
 8005b28:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8005b2a:	f103 000c 	add.w	r0, r3, #12
  H_NEXT(&default_heap.header) = NULL;
 8005b2e:	2200      	movs	r2, #0
  H_PAGES(&default_heap.header) = 0;
 8005b30:	e9c3 2201 	strd	r2, r2, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 8005b34:	f7ff beb0 	b.w	8005898 <chMtxObjectInit>
 8005b38:	20000dd4 	.word	0x20000dd4
 8005b3c:	08005ae1 	.word	0x08005ae1

08005b40 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8005b42:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005b46:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005b48:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005b4a:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005b4e:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8005b52:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8005b54:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8005b58:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f7ff fea2 	bl	80058a4 <chMtxLock>
  qp = &heapp->header;
 8005b60:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8005b62:	42ab      	cmp	r3, r5
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	d001      	beq.n	8005b6c <chHeapFree+0x2c>
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	d902      	bls.n	8005b72 <chHeapFree+0x32>
 8005b6c:	b11a      	cbz	r2, 8005b76 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005b6e:	4294      	cmp	r4, r2
 8005b70:	d301      	bcc.n	8005b76 <chHeapFree+0x36>
void chHeapFree(void *p) {
 8005b72:	4613      	mov	r3, r2
 8005b74:	e7f5      	b.n	8005b62 <chHeapFree+0x22>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005b76:	f856 0c04 	ldr.w	r0, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8005b7a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8005b7e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005b80:	1c45      	adds	r5, r0, #1
 8005b82:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005b86:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d00d      	beq.n	8005baa <chHeapFree+0x6a>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	3201      	adds	r2, #1
 8005b92:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005b96:	42ac      	cmp	r4, r5
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005b98:	bf04      	itt	eq
 8005b9a:	1812      	addeq	r2, r2, r0
        H_NEXT(qp) = H_NEXT(hp);
 8005b9c:	e9c3 1200 	strdeq	r1, r2, [r3]
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005ba0:	4638      	mov	r0, r7

  return;
}
 8005ba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005ba6:	f7ff bef7 	b.w	8005998 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005baa:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005bae:	4428      	add	r0, r5
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005bb0:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005bb4:	f846 0c04 	str.w	r0, [r6, #-4]
 8005bb8:	e7e9      	b.n	8005b8e <chHeapFree+0x4e>
 8005bba:	bf00      	nop

08005bbc <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8005bbc:	b410      	push	{r4}
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8005bbe:	2400      	movs	r4, #0
 8005bc0:	6004      	str	r4, [r0, #0]
  mp->object_size = size;
  mp->align = align;
 8005bc2:	e9c0 1201 	strd	r1, r2, [r0, #4]
  mp->provider = provider;
 8005bc6:	60c3      	str	r3, [r0, #12]
}
 8005bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7ff bf6b 	b.w	8005aac <chCoreAllocAlignedWithOffsetI>
 8005bd6:	bf00      	nop

08005bd8 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8005bd8:	b570      	push	{r4, r5, r6, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8005bda:	4c13      	ldr	r4, [pc, #76]	; (8005c28 <_factory_init+0x50>)
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8005bdc:	4d13      	ldr	r5, [pc, #76]	; (8005c2c <_factory_init+0x54>)
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fe5a 	bl	8005898 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8005be4:	f104 0610 	add.w	r6, r4, #16
 8005be8:	462b      	mov	r3, r5
 8005bea:	f104 0014 	add.w	r0, r4, #20
 8005bee:	2204      	movs	r2, #4
 8005bf0:	2114      	movs	r1, #20
 8005bf2:	6126      	str	r6, [r4, #16]
 8005bf4:	f7ff ffe2 	bl	8005bbc <chPoolObjectInitAligned>
 8005bf8:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	2204      	movs	r2, #4
 8005c00:	211c      	movs	r1, #28
 8005c02:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005c06:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005c0a:	e9c4 6509 	strd	r6, r5, [r4, #36]	; 0x24
 8005c0e:	f7ff ffd5 	bl	8005bbc <chPoolObjectInitAligned>
 8005c12:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005c16:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8005c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c1e:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 8005c22:	6463      	str	r3, [r4, #68]	; 0x44
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	bf00      	nop
 8005c28:	20000df0 	.word	0x20000df0
 8005c2c:	08005bd1 	.word	0x08005bd1

08005c30 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <SVC_Handler+0x1c>)
 8005c32:	6853      	ldr	r3, [r2, #4]
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005c3a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8005c3e:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005c40:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005c44:	2300      	movs	r3, #0
 8005c46:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8005c4a:	4770      	bx	lr
 8005c4c:	e000ef30 	.word	0xe000ef30

08005c50 <_port_irq_epilogue>:
 8005c50:	2320      	movs	r3, #32
 8005c52:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <_port_irq_epilogue+0x50>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005c5e:	d102      	bne.n	8005c66 <_port_irq_epilogue+0x16>
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8005c66:	b510      	push	{r4, lr}
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8005c68:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005c6c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 8005c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 8005c7c:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 8005c80:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005c84:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8005c88:	f7ff fc7a 	bl	8005580 <chSchIsPreemptionRequired>
 8005c8c:	b118      	cbz	r0, 8005c96 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <_port_irq_epilogue+0x58>)
 8005c90:	f844 3c50 	str.w	r3, [r4, #-80]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8005c94:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_port_irq_epilogue+0x5c>)
 8005c98:	f844 3c50 	str.w	r3, [r4, #-80]
}
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	bf00      	nop
 8005ca0:	e000ed00 	.word	0xe000ed00
 8005ca4:	e000ef30 	.word	0xe000ef30
 8005ca8:	08000339 	.word	0x08000339
 8005cac:	0800033c 	.word	0x0800033c

08005cb0 <_fini>:
__attribute__((used))
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <DR16_initDBus>:
/**
 * @brief start the uart driver for receiving from DR16
 * @note This will configure @p DR16_UART_DRIVER appropriately
 */
void DR16_initDBus(void)
{
 8005cb4:	b510      	push	{r4, lr}
		100000,						 //baud rate 100k
		USART_CR1_M | USART_CR1_PCE, //parity control enable, 8+1 bits
		USART_CR2_LBDL,				 //10 bit break detection
		0};

	uartStart(&DR16_UART_DRIVER, &s_DR16_UART_Config);
 8005cb6:	4c05      	ldr	r4, [pc, #20]	; (8005ccc <DR16_initDBus+0x18>)
 8005cb8:	4905      	ldr	r1, [pc, #20]	; (8005cd0 <DR16_initDBus+0x1c>)
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7fb fb12 	bl	80012e4 <uartStart>
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 8005cc0:	6a20      	ldr	r0, [r4, #32]
}
 8005cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmaStreamFree(DR16_UART_DRIVER.dmatx);
 8005cc6:	f7fc bd73 	b.w	80027b0 <dmaStreamFree>
 8005cca:	bf00      	nop
 8005ccc:	20000b78 	.word	0x20000b78
 8005cd0:	08006500 	.word	0x08006500

08005cd4 <get_descriptor>:
                                           uint16_t lang)
{

    (void)usbp;
    (void)lang;
    switch (dtype)
 8005cd4:	2902      	cmp	r1, #2
 8005cd6:	d006      	beq.n	8005ce6 <get_descriptor+0x12>
 8005cd8:	2903      	cmp	r1, #3
 8005cda:	d006      	beq.n	8005cea <get_descriptor+0x16>
 8005cdc:	2901      	cmp	r1, #1
        return &vcom_configuration_descriptor;
    case USB_DESCRIPTOR_STRING:
        if (dindex < 4)
            return &vcom_strings[dindex];
    }
    return NULL;
 8005cde:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <get_descriptor+0x24>)
 8005ce0:	bf18      	it	ne
 8005ce2:	2000      	movne	r0, #0
 8005ce4:	4770      	bx	lr
        return &vcom_configuration_descriptor;
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <get_descriptor+0x28>)
 8005ce8:	4770      	bx	lr
        if (dindex < 4)
 8005cea:	2a03      	cmp	r2, #3
            return &vcom_strings[dindex];
 8005cec:	bf9a      	itte	ls
 8005cee:	4804      	ldrls	r0, [pc, #16]	; (8005d00 <get_descriptor+0x2c>)
 8005cf0:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
    return NULL;
 8005cf4:	2000      	movhi	r0, #0
}
 8005cf6:	4770      	bx	lr
 8005cf8:	080065cc 	.word	0x080065cc
 8005cfc:	08006580 	.word	0x08006580
 8005d00:	08006654 	.word	0x08006654

08005d04 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp)
{
 8005d04:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005d06:	2320      	movs	r3, #32
 8005d08:	f383 8811 	msr	BASEPRI, r3

    (void)usbp;

    osalSysLockFromISR();
    sduSOFHookI(&SDU1);
 8005d0c:	4803      	ldr	r0, [pc, #12]	; (8005d1c <sof_handler+0x18>)
 8005d0e:	f7fb fa1b 	bl	8001148 <sduSOFHookI>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
}
 8005d18:	bd08      	pop	{r3, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000e38 	.word	0x20000e38

08005d20 <usb_event>:
{
 8005d20:	b510      	push	{r4, lr}
    switch (event)
 8005d22:	2905      	cmp	r1, #5
 8005d24:	d80d      	bhi.n	8005d42 <usb_event+0x22>
 8005d26:	e8df f001 	tbb	[pc, r1]
 8005d2a:	0c21      	.short	0x0c21
 8005d2c:	0321210d 	.word	0x0321210d
 8005d30:	2320      	movs	r3, #32
 8005d32:	f383 8811 	msr	BASEPRI, r3
        sduWakeupHookI(&SDU1);
 8005d36:	4812      	ldr	r0, [pc, #72]	; (8005d80 <usb_event+0x60>)
 8005d38:	f7fb f9a6 	bl	8001088 <sduWakeupHookI>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f383 8811 	msr	BASEPRI, r3
}
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	4604      	mov	r4, r0
 8005d46:	2320      	movs	r3, #32
 8005d48:	f383 8811 	msr	BASEPRI, r3
        usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <usb_event+0x64>)
 8005d4e:	2101      	movs	r1, #1
 8005d50:	f7fb faf6 	bl	8001340 <usbInitEndpointI>
        usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8005d54:	4620      	mov	r0, r4
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <usb_event+0x68>)
 8005d58:	2102      	movs	r1, #2
 8005d5a:	f7fb faf1 	bl	8001340 <usbInitEndpointI>
        sduConfigureHookI(&SDU1);
 8005d5e:	4808      	ldr	r0, [pc, #32]	; (8005d80 <usb_event+0x60>)
 8005d60:	f7fb f99e 	bl	80010a0 <sduConfigureHookI>
 8005d64:	2300      	movs	r3, #0
 8005d66:	f383 8811 	msr	BASEPRI, r3
}
 8005d6a:	bd10      	pop	{r4, pc}
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f383 8811 	msr	BASEPRI, r3
        sduSuspendHookI(&SDU1);
 8005d72:	4803      	ldr	r0, [pc, #12]	; (8005d80 <usb_event+0x60>)
 8005d74:	f7fb f96a 	bl	800104c <sduSuspendHookI>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	20000e38 	.word	0x20000e38
 8005d84:	08006520 	.word	0x08006520
 8005d88:	08006544 	.word	0x08006544

08005d8c <setup_USB>:

/**
 * @brief Initializes USBD1 and serial-over-USB CDC driver SDU1
 */
void setup_USB(void)
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
    sduObjectInit(&SDU1);
 8005d8e:	4d0c      	ldr	r5, [pc, #48]	; (8005dc0 <setup_USB+0x34>)
    sduStart(&SDU1, &serusbcfg);
    usbDisconnectBus(serusbcfg.usbp);
 8005d90:	4c0c      	ldr	r4, [pc, #48]	; (8005dc4 <setup_USB+0x38>)
    sduObjectInit(&SDU1);
 8005d92:	4628      	mov	r0, r5
 8005d94:	f7fb f914 	bl	8000fc0 <sduObjectInit>
    sduStart(&SDU1, &serusbcfg);
 8005d98:	4628      	mov	r0, r5
 8005d9a:	490b      	ldr	r1, [pc, #44]	; (8005dc8 <setup_USB+0x3c>)
 8005d9c:	f7fb f93c 	bl	8001018 <sduStart>
    usbDisconnectBus(serusbcfg.usbp);
 8005da0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    usbStart(serusbcfg.usbp, &usbcfg);
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <setup_USB+0x40>)
    usbDisconnectBus(serusbcfg.usbp);
 8005da4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005da6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005daa:	6393      	str	r3, [r2, #56]	; 0x38
    usbStart(serusbcfg.usbp, &usbcfg);
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7fb fab5 	bl	800131c <usbStart>
    usbConnectBus(serusbcfg.usbp);
 8005db2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005db4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dba:	6393      	str	r3, [r2, #56]	; 0x38
};
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000e38 	.word	0x20000e38
 8005dc4:	200009d0 	.word	0x200009d0
 8005dc8:	08006568 	.word	0x08006568
 8005dcc:	08006570 	.word	0x08006570

08005dd0 <Flash_SectorBegin>:
 * @param sector Sector to retrieve the beginning address of.
 * @return First address (inclusive) of @p sector.
 */
uint8_t *Flash_SectorBegin(flashsector_t sector)
{
    if (sector >= 24)
 8005dd0:	2817      	cmp	r0, #23
 8005dd2:	d826      	bhi.n	8005e22 <Flash_SectorBegin+0x52>
 8005dd4:	4603      	mov	r3, r0
        return 0;
    uint8_t *address = (uint8_t *)FLASH_BASE;
    while (sector > 0)
 8005dd6:	b308      	cbz	r0, 8005e1c <Flash_SectorBegin+0x4c>
 8005dd8:	f1a0 020d 	sub.w	r2, r0, #13
{
 8005ddc:	b410      	push	{r4}
    uint8_t *address = (uint8_t *)FLASH_BASE;
 8005dde:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005de2:	e009      	b.n	8005df8 <Flash_SectorBegin+0x28>
    else if (sector == 4)
 8005de4:	2904      	cmp	r1, #4
    else if (sector >= 5 && sector <= 11)
 8005de6:	f1a1 0405 	sub.w	r4, r1, #5
    else if (sector == 4)
 8005dea:	d014      	beq.n	8005e16 <Flash_SectorBegin+0x46>
    else if (sector >= 5 && sector <= 11)
 8005dec:	2c06      	cmp	r4, #6
 8005dee:	d801      	bhi.n	8005df4 <Flash_SectorBegin+0x24>
 8005df0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8005df4:	3a01      	subs	r2, #1
    while (sector > 0)
 8005df6:	b15b      	cbz	r3, 8005e10 <Flash_SectorBegin+0x40>
    {
        --sector;
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	2a0b      	cmp	r2, #11
 8005dfc:	bf94      	ite	ls
 8005dfe:	4611      	movls	r1, r2
 8005e00:	4619      	movhi	r1, r3
    if (sector <= 3)
 8005e02:	2903      	cmp	r1, #3
 8005e04:	d8ee      	bhi.n	8005de4 <Flash_SectorBegin+0x14>
 8005e06:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8005e0a:	3a01      	subs	r2, #1
    while (sector > 0)
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f3      	bne.n	8005df8 <Flash_SectorBegin+0x28>
        address += Flash_SectorSize(sector);
    }
    return address;
}
 8005e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8005e1a:	e7eb      	b.n	8005df4 <Flash_SectorBegin+0x24>
    uint8_t *address = (uint8_t *)FLASH_BASE;
 8005e1c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
}
 8005e20:	4770      	bx	lr
        return 0;
 8005e22:	2000      	movs	r0, #0
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop

08005e28 <_ZL12PAT9125ELThdPv>:

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

static THD_WORKING_AREA(PAT9125ELThd_wa, 1024);
static THD_FUNCTION(PAT9125ELThd, p)
{
 8005e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005e2c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8005e94 <_ZL12PAT9125ELThdPv+0x6c>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8005e30:	f8d9 3018 	ldr.w	r3, [r9, #24]

  (void)p;

  while (!chThdShouldTerminateX())
 8005e34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e38:	f013 0504 	ands.w	r5, r3, #4
{
 8005e3c:	b087      	sub	sp, #28
  while (!chThdShouldTerminateX())
 8005e3e:	d126      	bne.n	8005e8e <_ZL12PAT9125ELThdPv+0x66>
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8005e40:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005e98 <_ZL12PAT9125ELThdPv+0x70>
{
 8005e44:	2406      	movs	r4, #6
  on, on >> 8, off, off >> 8};
 8005e46:	27a0      	movs	r7, #160	; 0xa0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  on, on >> 8, off, off >> 8};
 8005e4c:	f88d 4010 	strb.w	r4, [sp, #16]
 8005e50:	3404      	adds	r4, #4
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	e9cd 5500 	strd	r5, r5, [sp]
  on, on >> 8, off, off >> 8};
 8005e58:	260f      	movs	r6, #15
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8005e5a:	2305      	movs	r3, #5
 8005e5c:	aa04      	add	r2, sp, #16
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	4640      	mov	r0, r8
 8005e62:	b2e4      	uxtb	r4, r4
  on, on >> 8, off, off >> 8};
 8005e64:	f88d 5011 	strb.w	r5, [sp, #17]
 8005e68:	f88d 5012 	strb.w	r5, [sp, #18]
 8005e6c:	f88d 7013 	strb.w	r7, [sp, #19]
 8005e70:	f88d 6014 	strb.w	r6, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
 8005e74:	f7fa ff9e 	bl	8000db4 <i2cMasterTransmitTimeout>
  {

    for (uint8_t pwmnum = 0; pwmnum < 16; pwmnum++)
 8005e78:	2c46      	cmp	r4, #70	; 0x46
 8005e7a:	d1e5      	bne.n	8005e48 <_ZL12PAT9125ELThdPv+0x20>
    {
      pwm.setPWM(pwmnum, 0, 4000);
    }

    chThdSleepMilliseconds(10);
 8005e7c:	2064      	movs	r0, #100	; 0x64
 8005e7e:	f7ff fc6d 	bl	800575c <chThdSleep>
 8005e82:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX())
 8005e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e8a:	075b      	lsls	r3, r3, #29
 8005e8c:	d5da      	bpl.n	8005e44 <_ZL12PAT9125ELThdPv+0x1c>
  }
}
 8005e8e:	b007      	add	sp, #28
 8005e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e94:	20000d54 	.word	0x20000d54
 8005e98:	20000998 	.word	0x20000998

08005e9c <_ZN23Adafruit_PWMServoDriver5read8Eh>:
{
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txBuffer[txBufferIndex] = data;
 8005ea0:	486c      	ldr	r0, [pc, #432]	; (8006054 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1b8>)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, true);
 8005ea2:	4a6d      	ldr	r2, [pc, #436]	; (8006058 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1bc>)
  txBuffer[txBufferIndex] = data;
 8005ea4:	7803      	ldrb	r3, [r0, #0]
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, true);
 8005ea6:	7815      	ldrb	r5, [r2, #0]
  txBuffer[txBufferIndex] = data;
 8005ea8:	4a6c      	ldr	r2, [pc, #432]	; (800605c <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c0>)
  palClearLine(LINE_B);
 8005eaa:	4f6d      	ldr	r7, [pc, #436]	; (8006060 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
  txBuffer[txBufferIndex] = data;
 8005eac:	54d1      	strb	r1, [r2, r3]
{
 8005eae:	b089      	sub	sp, #36	; 0x24
  ++txBufferIndex;
 8005eb0:	f103 0a01 	add.w	sl, r3, #1
  txBufferLength = txBufferIndex;
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c8>)
{
 8005eb6:	9105      	str	r1, [sp, #20]
  ++txBufferIndex;
 8005eb8:	fa5f fa8a 	uxtb.w	sl, sl
  palClearLine(LINE_B);
 8005ebc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  ++txBufferIndex;
 8005ec0:	f880 a000 	strb.w	sl, [r0]
  txBufferLength = txBufferIndex;
 8005ec4:	f883 a000 	strb.w	sl, [r3]
  chThdSleepMicroseconds(50);
 8005ec8:	2001      	movs	r0, #1
  palClearLine(LINE_A);
 8005eca:	4c67      	ldr	r4, [pc, #412]	; (8006068 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  palClearLine(LINE_B);
 8005ecc:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8005ece:	f7ff fc45 	bl	800575c <chThdSleep>
  palClearLine(LINE_A);
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	8360      	strh	r0, [r4, #26]
  chThdSleepMicroseconds(50);
 8005ed6:	f7ff fc41 	bl	800575c <chThdSleep>
  swi2c_write(SWI2C_WMSK | ((address & SWI2C_DMSK) << SWI2C_ASHF));
 8005eda:	006d      	lsls	r5, r5, #1
 8005edc:	b2ed      	uxtb	r5, r5
 8005ede:	f04f 0907 	mov.w	r9, #7
    if (data & (1 << bit))
 8005ee2:	fa45 f109 	asr.w	r1, r5, r9
    palSetLine(LINE_A);
 8005ee6:	f04f 0801 	mov.w	r8, #1
    if (data & (1 << bit))
 8005eea:	07ca      	lsls	r2, r1, #31
  chThdSleepMicroseconds(50);
 8005eec:	4640      	mov	r0, r8
    if (data & (1 << bit))
 8005eee:	f140 8098 	bpl.w	8006022 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x186>
      palSetLine(LINE_B);
 8005ef2:	833e      	strh	r6, [r7, #24]
  chThdSleepMicroseconds(50);
 8005ef4:	f7ff fc32 	bl	800575c <chThdSleep>
 8005ef8:	4640      	mov	r0, r8
    palSetLine(LINE_A);
 8005efa:	f8a4 8018 	strh.w	r8, [r4, #24]
  chThdSleepMicroseconds(50);
 8005efe:	f7ff fc2d 	bl	800575c <chThdSleep>
 8005f02:	4640      	mov	r0, r8
 8005f04:	f7ff fc2a 	bl	800575c <chThdSleep>
 8005f08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8005f0c:	f8a4 801a 	strh.w	r8, [r4, #26]
  chThdSleepMicroseconds(50);
 8005f10:	4640      	mov	r0, r8
 8005f12:	f7ff fc23 	bl	800575c <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8005f16:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005f1a:	d1e2      	bne.n	8005ee2 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x46>
  palSetLine(LINE_B);
 8005f1c:	4e50      	ldr	r6, [pc, #320]	; (8006060 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
  palSetLine(LINE_A);
 8005f1e:	4d52      	ldr	r5, [pc, #328]	; (8006068 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  palSetLine(LINE_B);
 8005f20:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8005f24:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005f26:	4604      	mov	r4, r0
  palSetLine(LINE_B);
 8005f28:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8005f2a:	f7ff fc17 	bl	800575c <chThdSleep>
 8005f2e:	4620      	mov	r0, r4
  palSetLine(LINE_A);
 8005f30:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8005f32:	f7ff fc13 	bl	800575c <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005f36:	4639      	mov	r1, r7
 8005f38:	2205      	movs	r2, #5
  palClearLine(LINE_A);
 8005f3a:	836c      	strh	r4, [r5, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005f3c:	4630      	mov	r0, r6
  palSetLine(LINE_B);
 8005f3e:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005f40:	f7fc fcac 	bl	800289c <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff fc09 	bl	800575c <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f7fc fca4 	bl	800289c <_pal_lld_setgroupmode>
  for (int i = 0; i < length; ++i)
 8005f54:	f1ba 0f00 	cmp.w	sl, #0
 8005f58:	d03d      	beq.n	8005fd6 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x13a>
 8005f5a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800605c <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c0>
 8005f5e:	44ca      	add	sl, r9
    swi2c_write(data[i] & 0xff);
 8005f60:	f819 8b01 	ldrb.w	r8, [r9], #1
 8005f64:	f04f 0b07 	mov.w	fp, #7
    if (data & (1 << bit))
 8005f68:	fa48 f20b 	asr.w	r2, r8, fp
 8005f6c:	07d3      	lsls	r3, r2, #31
      palSetLine(LINE_B);
 8005f6e:	bf4c      	ite	mi
 8005f70:	8337      	strhmi	r7, [r6, #24]
      palClearLine(LINE_B);
 8005f72:	8377      	strhpl	r7, [r6, #26]
  chThdSleepMicroseconds(50);
 8005f74:	f04f 0001 	mov.w	r0, #1
 8005f78:	bf58      	it	pl
 8005f7a:	2001      	movpl	r0, #1
 8005f7c:	f7ff fbee 	bl	800575c <chThdSleep>
 8005f80:	2001      	movs	r0, #1
    palSetLine(LINE_A);
 8005f82:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8005f84:	f7ff fbea 	bl	800575c <chThdSleep>
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f7ff fbe7 	bl	800575c <chThdSleep>
 8005f8e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 8005f92:	836c      	strh	r4, [r5, #26]
  chThdSleepMicroseconds(50);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7ff fbe1 	bl	800575c <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8005f9a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005f9e:	d1e3      	bne.n	8005f68 <_ZN23Adafruit_PWMServoDriver5read8Eh+0xcc>
  chThdSleepMicroseconds(50);
 8005fa0:	2001      	movs	r0, #1
  palSetLine(LINE_B);
 8005fa2:	8337      	strh	r7, [r6, #24]
  chThdSleepMicroseconds(50);
 8005fa4:	f7ff fbda 	bl	800575c <chThdSleep>
 8005fa8:	2001      	movs	r0, #1
  palSetLine(LINE_A);
 8005faa:	832c      	strh	r4, [r5, #24]
  chThdSleepMicroseconds(50);
 8005fac:	f7ff fbd6 	bl	800575c <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palClearLine(LINE_A);
 8005fb6:	836c      	strh	r4, [r5, #26]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005fb8:	4630      	mov	r0, r6
  palSetLine(LINE_B);
 8005fba:	8337      	strh	r7, [r6, #24]
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005fbc:	f7fc fc6e 	bl	800289c <_pal_lld_setgroupmode>
  chThdSleepMicroseconds(50);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7ff fbcb 	bl	800575c <chThdSleep>
  palSetLineMode(LINE_B, PAL_MODE_OUTPUT_OPENDRAIN);
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f7fc fc65 	bl	800289c <_pal_lld_setgroupmode>
  for (int i = 0; i < length; ++i)
 8005fd2:	45ca      	cmp	sl, r9
 8005fd4:	d1c4      	bne.n	8005f60 <_ZN23Adafruit_PWMServoDriver5read8Eh+0xc4>
  palSetLine(LINE_A);
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1cc>)
  txBufferIndex = 0;
 8005fd8:	4d1e      	ldr	r5, [pc, #120]	; (8006054 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1b8>)
  palSetLine(LINE_A);
 8005fda:	2401      	movs	r4, #1
 8005fdc:	831c      	strh	r4, [r3, #24]
  chThdSleepMicroseconds(50);
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff fbbc 	bl	800575c <chThdSleep>
  palSetLine(LINE_B);
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c4>)
 8005fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  chThdSleepMicroseconds(50);
 8005fea:	4620      	mov	r0, r4
  palSetLine(LINE_B);
 8005fec:	831a      	strh	r2, [r3, #24]
  chThdSleepMicroseconds(50);
 8005fee:	f7ff fbb5 	bl	800575c <chThdSleep>
  uint8_t txbuf[1]={addr};
 8005ff2:	aa08      	add	r2, sp, #32
 8005ff4:	9b05      	ldr	r3, [sp, #20]
 8005ff6:	f802 3d08 	strb.w	r3, [r2, #-8]!
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8005ffa:	a907      	add	r1, sp, #28
 8005ffc:	9401      	str	r4, [sp, #4]
 8005ffe:	4623      	mov	r3, r4
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  txBufferIndex = 0;
 8006004:	2400      	movs	r4, #0
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8006006:	9002      	str	r0, [sp, #8]
 8006008:	9100      	str	r1, [sp, #0]
  txBufferIndex = 0;
 800600a:	702c      	strb	r4, [r5, #0]
  txBufferLength = 0;
 800600c:	4d15      	ldr	r5, [pc, #84]	; (8006064 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1c8>)
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 800600e:	4817      	ldr	r0, [pc, #92]	; (800606c <_ZN23Adafruit_PWMServoDriver5read8Eh+0x1d0>)
  txBufferLength = 0;
 8006010:	702c      	strb	r4, [r5, #0]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 1, rxbuf,1);
 8006012:	2140      	movs	r1, #64	; 0x40
 8006014:	f7fa fece 	bl	8000db4 <i2cMasterTransmitTimeout>
}
 8006018:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800601c:	b009      	add	sp, #36	; 0x24
 800601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chThdSleepMicroseconds(50);
 8006022:	2001      	movs	r0, #1
      palClearLine(LINE_B);
 8006024:	837e      	strh	r6, [r7, #26]
  chThdSleepMicroseconds(50);
 8006026:	f7ff fb99 	bl	800575c <chThdSleep>
 800602a:	4640      	mov	r0, r8
    palSetLine(LINE_A);
 800602c:	f8a4 8018 	strh.w	r8, [r4, #24]
  chThdSleepMicroseconds(50);
 8006030:	f7ff fb94 	bl	800575c <chThdSleep>
 8006034:	4640      	mov	r0, r8
 8006036:	f7ff fb91 	bl	800575c <chThdSleep>
 800603a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    palClearLine(LINE_A);
 800603e:	f8a4 801a 	strh.w	r8, [r4, #26]
  chThdSleepMicroseconds(50);
 8006042:	4640      	mov	r0, r8
 8006044:	f7ff fb8a 	bl	800575c <chThdSleep>
  for (bit = 7; bit >= 0; bit--)
 8006048:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800604c:	f47f af49 	bne.w	8005ee2 <_ZN23Adafruit_PWMServoDriver5read8Eh+0x46>
 8006050:	e764      	b.n	8005f1c <_ZN23Adafruit_PWMServoDriver5read8Eh+0x80>
 8006052:	bf00      	nop
 8006054:	2000186c 	.word	0x2000186c
 8006058:	20001849 	.word	0x20001849
 800605c:	2000184c 	.word	0x2000184c
 8006060:	40021c00 	.word	0x40021c00
 8006064:	2000186d 	.word	0x2000186d
 8006068:	40022000 	.word	0x40022000
 800606c:	20000998 	.word	0x20000998

08006070 <_Z10myi2cstartv>:

void myi2cstart()
{
 8006070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006074:	b087      	sub	sp, #28
      d};
 8006076:	ad06      	add	r5, sp, #24
 8006078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607c:	f825 3d04 	strh.w	r3, [r5, #-4]!
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006080:	4e50      	ldr	r6, [pc, #320]	; (80061c4 <_Z10myi2cstartv+0x154>)
  uint8_t oldmode = read8(PCA9685_MODE1);
 8006082:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80061d0 <_Z10myi2cstartv+0x160>
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006086:	2400      	movs	r4, #0
 8006088:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800608c:	462a      	mov	r2, r5
 800608e:	2302      	movs	r3, #2
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	4630      	mov	r0, r6
 8006094:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006098:	9400      	str	r4, [sp, #0]
 800609a:	f7fa fe8b 	bl	8000db4 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 800609e:	2001      	movs	r0, #1
 80060a0:	f7ff fb5c 	bl	800575c <chThdSleep>
  uint8_t oldmode = read8(PCA9685_MODE1);
 80060a4:	4621      	mov	r1, r4
 80060a6:	4648      	mov	r0, r9
 80060a8:	f7ff fef8 	bl	8005e9c <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 80060ac:	f000 0c6f 	and.w	ip, r0, #111	; 0x6f
  uint8_t oldmode = read8(PCA9685_MODE1);
 80060b0:	4680      	mov	r8, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 80060b2:	f04c 0c10 	orr.w	ip, ip, #16
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80060b6:	462a      	mov	r2, r5
 80060b8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80060bc:	9400      	str	r4, [sp, #0]
 80060be:	4630      	mov	r0, r6
 80060c0:	2302      	movs	r3, #2
 80060c2:	2140      	movs	r1, #64	; 0x40
      d};
 80060c4:	f88d c015 	strb.w	ip, [sp, #21]
 80060c8:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80060cc:	f7fa fe72 	bl	8000db4 <i2cMasterTransmitTimeout>
      d};
 80060d0:	f240 6cfe 	movw	ip, #1790	; 0x6fe
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80060d4:	462a      	mov	r2, r5
 80060d6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80060da:	9400      	str	r4, [sp, #0]
 80060dc:	4630      	mov	r0, r6
 80060de:	2302      	movs	r3, #2
 80060e0:	2140      	movs	r1, #64	; 0x40
      d};
 80060e2:	f8ad c014 	strh.w	ip, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80060e6:	f7fa fe65 	bl	8000db4 <i2cMasterTransmitTimeout>
 80060ea:	462a      	mov	r2, r5
 80060ec:	2302      	movs	r3, #2
 80060ee:	2140      	movs	r1, #64	; 0x40
 80060f0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80060f4:	9400      	str	r4, [sp, #0]
 80060f6:	4630      	mov	r0, r6
      d};
 80060f8:	f88d 8015 	strb.w	r8, [sp, #21]
 80060fc:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006100:	f7fa fe58 	bl	8000db4 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 8006104:	2001      	movs	r0, #1
 8006106:	f7ff fb29 	bl	800575c <chThdSleep>
  write8(PCA9685_MODE1,
 800610a:	f068 085f 	orn	r8, r8, #95	; 0x5f
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800610e:	462a      	mov	r2, r5
 8006110:	2302      	movs	r3, #2
 8006112:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006116:	9400      	str	r4, [sp, #0]
 8006118:	4630      	mov	r0, r6
 800611a:	2140      	movs	r1, #64	; 0x40
      d};
 800611c:	f88d 8015 	strb.w	r8, [sp, #21]
 8006120:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006124:	f7fa fe46 	bl	8000db4 <i2cMasterTransmitTimeout>
  uint8_t oldmode = read8(PCA9685_MODE1);
 8006128:	4621      	mov	r1, r4
 800612a:	4648      	mov	r0, r9
 800612c:	f7ff feb6 	bl	8005e9c <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 8006130:	f000 0c6f 	and.w	ip, r0, #111	; 0x6f
  uint8_t oldmode = read8(PCA9685_MODE1);
 8006134:	4680      	mov	r8, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
 8006136:	f04c 0c10 	orr.w	ip, ip, #16
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800613a:	462a      	mov	r2, r5
 800613c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006140:	9400      	str	r4, [sp, #0]
 8006142:	4630      	mov	r0, r6
 8006144:	2302      	movs	r3, #2
 8006146:	2140      	movs	r1, #64	; 0x40
      d};
 8006148:	f88d c015 	strb.w	ip, [sp, #21]
 800614c:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006150:	f7fa fe30 	bl	8000db4 <i2cMasterTransmitTimeout>
      d};
 8006154:	f240 3cfe 	movw	ip, #1022	; 0x3fe
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006158:	462a      	mov	r2, r5
 800615a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800615e:	9400      	str	r4, [sp, #0]
 8006160:	4630      	mov	r0, r6
 8006162:	2302      	movs	r3, #2
 8006164:	2140      	movs	r1, #64	; 0x40
      d};
 8006166:	f8ad c014 	strh.w	ip, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 800616a:	f7fa fe23 	bl	8000db4 <i2cMasterTransmitTimeout>
 800616e:	462a      	mov	r2, r5
 8006170:	2302      	movs	r3, #2
 8006172:	2140      	movs	r1, #64	; 0x40
 8006174:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006178:	9400      	str	r4, [sp, #0]
 800617a:	4630      	mov	r0, r6
      d};
 800617c:	f88d 8015 	strb.w	r8, [sp, #21]
 8006180:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006184:	f7fa fe16 	bl	8000db4 <i2cMasterTransmitTimeout>
  chThdSleepMicroseconds(second);
 8006188:	2001      	movs	r0, #1
 800618a:	f7ff fae7 	bl	800575c <chThdSleep>
  write8(PCA9685_MODE1,
 800618e:	f068 085f 	orn	r8, r8, #95	; 0x5f
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 8006192:	462a      	mov	r2, r5
 8006194:	9702      	str	r7, [sp, #8]
 8006196:	e9cd 4400 	strd	r4, r4, [sp]
 800619a:	4630      	mov	r0, r6
 800619c:	2302      	movs	r3, #2
 800619e:	2140      	movs	r1, #64	; 0x40
      d};
 80061a0:	f88d 8015 	strb.w	r8, [sp, #21]
 80061a4:	f88d 4014 	strb.w	r4, [sp, #20]
  i2cMasterTransmit(&I2CD2, 0x40, txbuf, 2, 0, 0);
 80061a8:	f7fa fe04 	bl	8000db4 <i2cMasterTransmitTimeout>
  // Adafruit_PWMServoDriver(0x40);
  pwm.begin();
  pwm.setPWMFreq(1600); // This is the maximum PWM frequency

  // PAT9125init();
  chThdCreateStatic(PAT9125ELThd_wa, sizeof(PAT9125ELThd_wa),
 80061ac:	9400      	str	r4, [sp, #0]
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <_Z10myi2cstartv+0x158>)
 80061b0:	4806      	ldr	r0, [pc, #24]	; (80061cc <_Z10myi2cstartv+0x15c>)
 80061b2:	2289      	movs	r2, #137	; 0x89
 80061b4:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 80061b8:	f7ff fa6e 	bl	8005698 <chThdCreateStatic>
                    NORMALPRIO + 9, PAT9125ELThd, NULL);
}
 80061bc:	b007      	add	sp, #28
 80061be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c2:	bf00      	nop
 80061c4:	20000998 	.word	0x20000998
 80061c8:	08005e29 	.word	0x08005e29
 80061cc:	200012f8 	.word	0x200012f8
 80061d0:	20001848 	.word	0x20001848

080061d4 <_GLOBAL__sub_I_mydata>:
  _i2caddr = addr;
 80061d4:	4b01      	ldr	r3, [pc, #4]	; (80061dc <_GLOBAL__sub_I_mydata+0x8>)
 80061d6:	2270      	movs	r2, #112	; 0x70
 80061d8:	701a      	strb	r2, [r3, #0]

uint8_t pat9125_wr_reg_verify(uint8_t addr, uint8_t data)
{
  pat9125_wr_reg(addr, data);
  return pat9125_rd_reg(addr) == data;
}
 80061da:	4770      	bx	lr
 80061dc:	20001848 	.word	0x20001848

080061e0 <main>:
        on, on >> 8 & 0x0f, off, off >> 8 & 0x0f};
    i2cMasterTransmit(&I2CD2, 0x40, txbuf, 5, 0, 0);
}

int main(void)
{
 80061e0:	b510      	push	{r4, lr}
    palSetLineMode(LINE_VL53L0X_I2C_SDA, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
    palSetLineMode(LINE_VL53L0X_I2C_SCL, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
    
    while (true)
    {
        palToggleLine(LINE_LED_GREEN);
 80061e2:	4c11      	ldr	r4, [pc, #68]	; (8006228 <main+0x48>)
    halInit();
 80061e4:	f7fa f9ee 	bl	80005c4 <halInit>
    chSysInit();
 80061e8:	f7fe ffa8 	bl	800513c <chSysInit>
    board_setup_all();
 80061ec:	f7fa f8a8 	bl	8000340 <board_setup_all>
    i2cStart(&I2CD2, &i2cfg1);
 80061f0:	490e      	ldr	r1, [pc, #56]	; (800622c <main+0x4c>)
 80061f2:	480f      	ldr	r0, [pc, #60]	; (8006230 <main+0x50>)
 80061f4:	f7fa fdd0 	bl	8000d98 <i2cStart>
    myi2cstart();
 80061f8:	f7ff ff3a 	bl	8006070 <_Z10myi2cstartv>
    palSetLineMode(LINE_VL53L0X_I2C_SDA, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 80061fc:	f240 2206 	movw	r2, #518	; 0x206
 8006200:	2101      	movs	r1, #1
 8006202:	4620      	mov	r0, r4
 8006204:	f7fc fb4a 	bl	800289c <_pal_lld_setgroupmode>
    palSetLineMode(LINE_VL53L0X_I2C_SCL, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8006208:	f240 2206 	movw	r2, #518	; 0x206
 800620c:	2102      	movs	r1, #2
 800620e:	4620      	mov	r0, r4
 8006210:	f7fc fb44 	bl	800289c <_pal_lld_setgroupmode>
        palToggleLine(LINE_LED_GREEN);
 8006214:	6963      	ldr	r3, [r4, #20]
 8006216:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800621a:	6163      	str	r3, [r4, #20]
        //     {setPWM(i, 10, 4000);
        //     chThdSleepMilliseconds(10);}
        uint8_t addr = LED0_ON_L + 4;
        uint8_t rxbuf[20];
        // i2cMasterTransmit(&I2CD2, 0x40, &addr, 1, rxbuf, 20);
        chThdSleepMilliseconds(500);
 800621c:	f241 3088 	movw	r0, #5000	; 0x1388
 8006220:	f7ff fa9c 	bl	800575c <chThdSleep>
 8006224:	e7f6      	b.n	8006214 <main+0x34>
 8006226:	bf00      	nop
 8006228:	40021400 	.word	0x40021400
 800622c:	08006674 	.word	0x08006674
 8006230:	20000998 	.word	0x20000998

08006234 <_ZdlPv>:
  return chHeapAlloc(NULL, size);
}

void operator delete(void *ptr)
{
  chHeapFree(ptr);
 8006234:	f7ff bc84 	b.w	8005b40 <chHeapFree>

08006238 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4605      	mov	r5, r0
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800623c:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 800623e:	42a8      	cmp	r0, r5
 8006240:	d005      	beq.n	800624e <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0x16>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8006242:	6804      	ldr	r4, [r0, #0]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8006244:	f7ff fff6 	bl	8006234 <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 8006248:	42ac      	cmp	r4, r5
 800624a:	4620      	mov	r0, r4
 800624c:	d1f9      	bne.n	8006242 <_ZNSt7__cxx114listIPK16Param_DefinitionSaIS3_EED1Ev+0xa>
 800624e:	4628      	mov	r0, r5
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	bf00      	nop

08006254 <_GLOBAL__sub_I__Z16Param_getDefByIDj>:
}

/**
 * @brief ShellCommand definition for interfacing with this module
 */
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 8006254:	b510      	push	{r4, lr}
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 8006256:	2017      	movs	r0, #23
 8006258:	f7ff fdba 	bl	8005dd0 <Flash_SectorBegin>
	: _Node_alloc_type(), _M_node()
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x24>)
 800625e:	4a07      	ldr	r2, [pc, #28]	; (800627c <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x28>)
static std::list<const Param_Definition_t *> params;
 8006260:	4907      	ldr	r1, [pc, #28]	; (8006280 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x2c>)
static uint8_t *p_PARAM_FLASH_START = Flash_SectorBegin(PARAM_STORAGE_SECTOR);
 8006262:	6010      	str	r0, [r2, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8006264:	e9c3 3300 	strd	r3, r3, [r3]
	: _Node_alloc_type(), _M_node()
 8006268:	2400      	movs	r4, #0
 800626a:	609c      	str	r4, [r3, #8]
static std::list<const Param_Definition_t *> params;
 800626c:	4618      	mov	r0, r3
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <_GLOBAL__sub_I__Z16Param_getDefByIDj+0x30>)
const ShellCommand g_Persistence_ShellCommand = {PARAM_SHELL_CMD_STR, Param_ShellCmd};
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::list<const Param_Definition_t *> params;
 8006274:	f000 b808 	b.w	8006288 <__aeabi_atexit>
 8006278:	20001878 	.word	0x20001878
 800627c:	20001874 	.word	0x20001874
 8006280:	08006239 	.word	0x08006239
 8006284:	20001870 	.word	0x20001870

08006288 <__aeabi_atexit>:
 8006288:	460b      	mov	r3, r1
 800628a:	4601      	mov	r1, r0
 800628c:	4618      	mov	r0, r3
 800628e:	f000 b801 	b.w	8006294 <__cxa_atexit>
	...

08006294 <__cxa_atexit>:
 8006294:	b510      	push	{r4, lr}
 8006296:	4c05      	ldr	r4, [pc, #20]	; (80062ac <__cxa_atexit+0x18>)
 8006298:	4613      	mov	r3, r2
 800629a:	b12c      	cbz	r4, 80062a8 <__cxa_atexit+0x14>
 800629c:	460a      	mov	r2, r1
 800629e:	4601      	mov	r1, r0
 80062a0:	2002      	movs	r0, #2
 80062a2:	f3af 8000 	nop.w
 80062a6:	bd10      	pop	{r4, pc}
 80062a8:	4620      	mov	r0, r4
 80062aa:	e7fc      	b.n	80062a6 <__cxa_atexit+0x12>
 80062ac:	00000000 	.word	0x00000000

080062b0 <memcpy>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	1e43      	subs	r3, r0, #1
 80062b4:	440a      	add	r2, r1
 80062b6:	4291      	cmp	r1, r2
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	bd10      	pop	{r4, pc}
 80062bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c4:	e7f7      	b.n	80062b6 <memcpy+0x6>

080062c6 <memset>:
 80062c6:	4402      	add	r2, r0
 80062c8:	4603      	mov	r3, r0
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d100      	bne.n	80062d0 <memset+0xa>
 80062ce:	4770      	bx	lr
 80062d0:	f803 1b01 	strb.w	r1, [r3], #1
 80062d4:	e7f9      	b.n	80062ca <memset+0x4>
